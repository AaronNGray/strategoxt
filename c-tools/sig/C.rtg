
regular tree grammar
  start Stm AssignExp TranslationUnit
  productions
    a_0                          -> <some>(ConstantExp)
    a_0                          -> <none>()
    c_0                          -> <some>(ArrayAbstractDeclarator)
    c_0                          -> <none>()
    f_0                          -> d_0
    f_0                          -> <nil>()
    f_0                          -> <conc>(f_0,f_0)
    d_0                          -> <conc>(f_0,d_0)
    d_0                          -> <conc>(d_0,f_0)
    d_0                          -> <conc>(d_0,d_0)
    d_0                          -> <cons>(ParamDeclaration,f_0)
    g_0                          -> PostfixingAbstractDeclarator
    g_0                          -> PostfixAbstractDeclarator
    h_0                          -> <some>(g_0)
    h_0                          -> <none>()
    i_0                          -> <some>(AbstractDeclarator)
    i_0                          -> <none>()
    j_0                          -> TypeSpecifier
    j_0                          -> DeclarationSpecifier
    k_0                          -> IdDeclarator
    k_0                          -> AbstractDeclarator
    l_0                          -> <some>(k_0)
    l_0                          -> <none>()
    m_0                          -> <some>(EnumeratorValue)
    m_0                          -> <none>()
    o_0                          -> n_0
    o_0                          -> <nil>()
    o_0                          -> <conc>(o_0,o_0)
    n_0                          -> <conc>(o_0,n_0)
    n_0                          -> <conc>(n_0,o_0)
    n_0                          -> <conc>(n_0,n_0)
    n_0                          -> <cons>(Enumerator,o_0)
    p_0                          -> <some>(IdOrTypedefName)
    p_0                          -> <none>()
    q_0                          -> <some>(Declarator)
    q_0                          -> <none>()
    s_0                          -> r_0
    s_0                          -> <nil>()
    s_0                          -> <conc>(s_0,s_0)
    r_0                          -> <conc>(s_0,r_0)
    r_0                          -> <conc>(r_0,s_0)
    r_0                          -> <conc>(r_0,r_0)
    r_0                          -> <cons>(MemberIdDeclarator,s_0)
    u_0                          -> t_0
    u_0                          -> <nil>()
    u_0                          -> <conc>(u_0,u_0)
    t_0                          -> <conc>(u_0,t_0)
    t_0                          -> <conc>(t_0,u_0)
    t_0                          -> <conc>(t_0,t_0)
    t_0                          -> <cons>(MemberDeclarator,u_0)
    w_0                          -> v_0
    w_0                          -> <nil>()
    w_0                          -> <conc>(w_0,w_0)
    v_0                          -> <conc>(w_0,v_0)
    v_0                          -> <conc>(v_0,w_0)
    v_0                          -> <conc>(v_0,v_0)
    v_0                          -> <cons>(MemberDeclaration,w_0)
    x_0                          -> TypedefName
    x_0                          -> ElaboratedTypeName
    x_0                          -> BasicTypeName
    y_0                          -> BasicTypeName
    y_0                          -> DeclarationQualifier
    a_1                          -> z_0
    a_1                          -> <nil>()
    a_1                          -> <conc>(a_1,a_1)
    z_0                          -> <conc>(a_1,z_0)
    z_0                          -> <conc>(z_0,a_1)
    z_0                          -> <conc>(z_0,z_0)
    z_0                          -> <cons>(y_0,a_1)
    c_1                          -> b_1
    c_1                          -> <nil>()
    c_1                          -> <conc>(c_1,c_1)
    b_1                          -> <conc>(c_1,b_1)
    b_1                          -> <conc>(b_1,c_1)
    b_1                          -> <conc>(b_1,b_1)
    b_1                          -> <cons>(DeclarationQualifier,c_1)
    d_1                          -> BasicTypeName
    d_1                          -> TypeQualifier
    f_1                          -> e_1
    f_1                          -> <nil>()
    f_1                          -> <conc>(f_1,f_1)
    e_1                          -> <conc>(f_1,e_1)
    e_1                          -> <conc>(e_1,f_1)
    e_1                          -> <conc>(e_1,e_1)
    e_1                          -> <cons>(d_1,f_1)
    h_1                          -> g_1
    h_1                          -> <nil>()
    h_1                          -> <conc>(h_1,h_1)
    g_1                          -> <conc>(h_1,g_1)
    g_1                          -> <conc>(g_1,h_1)
    g_1                          -> <conc>(g_1,g_1)
    g_1                          -> <cons>(Initializer,h_1)
    j_1                          -> i_1
    j_1                          -> <nil>()
    j_1                          -> <conc>(j_1,j_1)
    i_1                          -> <conc>(j_1,i_1)
    i_1                          -> <conc>(i_1,j_1)
    i_1                          -> <conc>(i_1,i_1)
    i_1                          -> <cons>(VarDecl,j_1)
    l_1                          -> k_1
    l_1                          -> <nil>()
    l_1                          -> <conc>(l_1,l_1)
    k_1                          -> <conc>(l_1,k_1)
    k_1                          -> <conc>(k_1,l_1)
    k_1                          -> <conc>(k_1,k_1)
    k_1                          -> <cons>(IdDecl,l_1)
    n_1                          -> m_1
    n_1                          -> <nil>()
    n_1                          -> <conc>(n_1,n_1)
    m_1                          -> <conc>(n_1,m_1)
    m_1                          -> <conc>(m_1,n_1)
    m_1                          -> <conc>(m_1,m_1)
    m_1                          -> <cons>(TypeQualifier,n_1)
    o_1                          -> m_1
    o_1                          -> DeclarationQualifierList
    q_1                          -> p_1
    q_1                          -> <nil>()
    q_1                          -> <conc>(q_1,q_1)
    p_1                          -> <conc>(q_1,p_1)
    p_1                          -> <conc>(p_1,q_1)
    p_1                          -> <conc>(p_1,p_1)
    p_1                          -> <cons>(Stm,q_1)
    s_1                          -> r_1
    s_1                          -> <nil>()
    s_1                          -> <conc>(s_1,s_1)
    r_1                          -> <conc>(s_1,r_1)
    r_1                          -> <conc>(r_1,s_1)
    r_1                          -> <conc>(r_1,r_1)
    r_1                          -> <cons>(Declaration,s_1)
    u_1                          -> t_1
    u_1                          -> <nil>()
    u_1                          -> <conc>(u_1,u_1)
    t_1                          -> <conc>(u_1,t_1)
    t_1                          -> <conc>(t_1,u_1)
    t_1                          -> <conc>(t_1,t_1)
    t_1                          -> <cons>(AssignExp,u_1)
    v_1                          -> <some>(PostfixingAbstractDeclarator)
    v_1                          -> <none>()
    x_1                          -> w_1
    x_1                          -> <nil>()
    x_1                          -> <conc>(x_1,x_1)
    w_1                          -> <conc>(x_1,w_1)
    w_1                          -> <conc>(w_1,x_1)
    w_1                          -> <conc>(w_1,w_1)
    w_1                          -> <cons>(Pointer,x_1)
    z_1                          -> y_1
    z_1                          -> <nil>()
    z_1                          -> <conc>(z_1,z_1)
    y_1                          -> <conc>(z_1,y_1)
    y_1                          -> <conc>(y_1,z_1)
    y_1                          -> <conc>(y_1,y_1)
    y_1                          -> <cons>(IDENTIFIER,z_1)
    a_2                          -> <(2)>(ElseLine,b_2)
    c_2                          -> <some>(a_2)
    c_2                          -> <none>()
    d_2                          -> <(2)>(ElifLine,b_2)
    f_2                          -> e_2
    f_2                          -> <nil>()
    f_2                          -> <conc>(f_2,f_2)
    e_2                          -> <conc>(f_2,e_2)
    e_2                          -> <conc>(e_2,f_2)
    e_2                          -> <conc>(e_2,e_2)
    e_2                          -> <cons>(d_2,f_2)
    b_2                          -> g_2
    b_2                          -> <nil>()
    b_2                          -> <conc>(b_2,b_2)
    g_2                          -> <conc>(b_2,g_2)
    g_2                          -> <conc>(g_2,b_2)
    g_2                          -> <conc>(g_2,g_2)
    g_2                          -> <cons>(ExternalDef,b_2)
    h_2                          -> <string>
    i_2                          -> <(1)>(<string>)
    j_2                          -> <string>
    k_2                          -> <(1)>(<string>)
    l_2                          -> <(1)>(<string>)
    m_2                          -> <string>
    n_2                          -> <string>
    o_2                          -> <(1)>(<string>)
    p_2                          -> <string>
    q_2                          -> <string>
    r_2                          -> <string>
    s_2                          -> <string>
    t_2                          -> <string>
    u_2                          -> <string>
    v_2                          -> <string>
    w_2                          -> <string>
    x_2                          -> <string>
    y_2                          -> <string>
    a_3                          -> z_2
    a_3                          -> <nil>()
    a_3                          -> <conc>(a_3,a_3)
    z_2                          -> <conc>(a_3,z_2)
    z_2                          -> <conc>(z_2,a_3)
    z_2                          -> <conc>(z_2,z_2)
    z_2                          -> <cons>(StringLiteral,a_3)
    PostfixAbstractDeclarator    -> FunType(UnaryAbstractDeclarator,PostfixingAbstractDeclarator)
    PostfixAbstractDeclarator    -> DeclBracket(PostfixingAbstractDeclarator)
    PostfixAbstractDeclarator    -> DeclBracket(PostfixAbstractDeclarator)
    PostfixAbstractDeclarator    -> DeclBracket(UnaryAbstractDeclarator)
    ArrayAbstractDeclarator      -> ArrayDecl(c_0,a_0)
    PostfixingAbstractDeclarator -> ParamList(f_0)
    PostfixingAbstractDeclarator -> ParamListVarArgs(d_0)
    PostfixingAbstractDeclarator -> ArrayAbstractDeclarator
    UnaryAbstractDeclarator      -> Pointer(w_1,h_0)
    AbstractDeclarator           -> PostfixingAbstractDeclarator
    AbstractDeclarator           -> PostfixAbstractDeclarator
    AbstractDeclarator           -> UnaryAbstractDeclarator
    Pointer                      -> PointerOf(n_1)
    TypeName                     -> TypeName(m_1,i_0)
    TypeName                     -> TypeName(TypeSpecifier,i_0)
    ParamDeclTypeSpec            -> m_1
    ParamDeclTypeSpec            -> DeclarationQualifierList
    ParamDeclTypeSpec            -> DeclarationSpecifier
    ParamDeclTypeSpec            -> TypeSpecifier
    ParamDeclaration             -> ParamDecl2(j_0,TypedefDeclarator)
    ParamDeclaration             -> ParamDecl(ParamDeclTypeSpec,l_0)
    EnumeratorValue              -> EnumVal(ConstantExp)
    Enumerator                   -> Enumerator(IdOrTypedefName,m_0)
    EnumSpecifier                -> EnumId(IdOrTypedefName)
    EnumSpecifier                -> Enum(p_0,n_0)
    MemberDeclarator             -> BitFieldSize(q_0,ConstantExp)
    MemberDeclarator             -> Declarator
    MemberDeclaration            -> MemDecl(m_1,r_0)
    MemberDeclaration            -> MemDecl(TypeSpecifier,t_0)
    UnionSpecifier               -> UnionId(IdOrTypedefName)
    UnionSpecifier               -> Union(p_0,v_0)
    StructSpecifier              -> StructId(IdOrTypedefName)
    StructSpecifier              -> Struct(p_0,v_0)
    ElaboratedTypeName           -> EnumSpecifier
    ElaboratedTypeName           -> UnionSpecifier
    ElaboratedTypeName           -> StructSpecifier
    TypeOrDefName                -> x_0
    DeclarationSpecifier         -> DeclSpec(n_1,StorageClass,c_1,TypeOrDefName,a_1)
    DeclarationQualifierList     -> DQualifiers(n_1,StorageClass,c_1)
    DeclarationQualifier         -> TypeQualifier
    DeclarationQualifier         -> StorageClass
    TypeSpecifier                -> TypeSpec(n_1,TypeOrDefName,f_1)
    Initializer                  -> AssignInit(AssignExp)
    Initializer                  -> ArrayInitIncomplete(g_1)
    Initializer                  -> ArrayInit(g_1)
    VarDecl                      -> DeclInit(Declarator,Initializer)
    VarDecl                      -> Declarator
    IdDecl                       -> IdDeclInit(IdDeclarator,Initializer)
    IdDecl                       -> IdDeclarator
    Declaration                  -> Declaration2(j_0,j_1)
    Declaration                  -> Declaration(o_1,l_1)
    TypeQualifier                -> Volatile()
    TypeQualifier                -> Const()
    BasicTypeName                -> Void()
    BasicTypeName                -> Unsigned()
    BasicTypeName                -> Signed()
    BasicTypeName                -> Double()
    BasicTypeName                -> Float()
    BasicTypeName                -> Long()
    BasicTypeName                -> Short()
    BasicTypeName                -> Char()
    BasicTypeName                -> Int()
    StorageClass                 -> Register()
    StorageClass                 -> Auto()
    StorageClass                 -> Static()
    StorageClass                 -> Extern()
    StorageClass                 -> Typedef()
    JumpStm                      -> Exit(CommaExpOpt)
    JumpStm                      -> Return(CommaExpOpt)
    JumpStm                      -> Break()
    JumpStm                      -> Continue()
    JumpStm                      -> Goto(IdOrTypedefName)
    IterationStm                 -> For(CommaExpOpt,CommaExpOpt,CommaExpOpt,Stm)
    IterationStm                 -> DoWhile(Stm,CommaExp)
    IterationStm                 -> While(CommaExp,Stm)
    SelectionStm                 -> Switch(CommaExp,Stm)
    SelectionStm                 -> IfElse(CommaExp,Stm,Stm)
    SelectionStm                 -> If(CommaExp,Stm)
    ExpStm                       -> Stat(CommaExpOpt)
    CompoundStm                  -> Compound(s_1,q_1)
    LabeledStm                   -> Default(Stm)
    LabeledStm                   -> Case(ConstantExp,Stm)
    LabeledStm                   -> Label(IdOrTypedefName,Stm)
    Stm                          -> JumpStm
    Stm                          -> IterationStm
    Stm                          -> SelectionStm
    Stm                          -> ExpStm
    Stm                          -> CompoundStm
    Stm                          -> LabeledStm
    ConstantExp                  -> CondExp
    CommaExpOpt                  -> CommaExp
    CommaExpOpt                  -> EmptyExp()
    CommaExp                     -> Comma(AssignExp,CommaExp)
    CommaExp                     -> AssignExp
    AssignOp                     -> AssignOr()
    AssignOp                     -> AssignExp()
    AssignOp                     -> AssignAnd()
    AssignOp                     -> AssignSR()
    AssignOp                     -> AssignSL()
    AssignOp                     -> AssignMin()
    AssignOp                     -> AssignPlus()
    AssignOp                     -> AssignMod()
    AssignOp                     -> AssignDiv()
    AssignOp                     -> AssignMul()
    AssignOp                     -> AssignEq()
    AssignExp                    -> Assign(UnaryExp,AssignOp,AssignExp)
    AssignExp                    -> CondExp
    CondExp                      -> IfExp(LogicalORExp,CommaExp,CondExp)
    CondExp                      -> LogicalORExp
    LogicalORExp                 -> LOr(LogicalORExp,LogicalANDExp)
    LogicalORExp                 -> LogicalANDExp
    LogicalANDExp                -> LAnd(LogicalANDExp,InclORExp)
    LogicalANDExp                -> InclORExp
    InclORExp                    -> IncOr(ExclORExp,InclORExp)
    InclORExp                    -> ExclORExp
    ExclORExp                    -> ExOr(ANDExp,ExclORExp)
    ExclORExp                    -> ANDExp
    ANDExp                       -> And(EqualityExp,ANDExp)
    ANDExp                       -> EqualityExp
    EqualityExp                  -> NotEqual(EqualityExp,RelExp)
    EqualityExp                  -> Equal(EqualityExp,RelExp)
    EqualityExp                  -> RelExp
    RelExp                       -> Ge(RelExp,ShiftExp)
    RelExp                       -> Le(RelExp,ShiftExp)
    RelExp                       -> Gt(RelExp,ShiftExp)
    RelExp                       -> Lt(RelExp,ShiftExp)
    RelExp                       -> ShiftExp
    ShiftExp                     -> ShiftRight(ShiftExp,AddExp)
    ShiftExp                     -> ShiftLeft(ShiftExp,AddExp)
    ShiftExp                     -> AddExp
    AddExp                       -> Subt(AddExp,MulExp)
    AddExp                       -> Add(AddExp,MulExp)
    AddExp                       -> MulExp
    MulExp                       -> Mod(MulExp,CastExp)
    MulExp                       -> Div(MulExp,CastExp)
    MulExp                       -> Mul(MulExp,CastExp)
    MulExp                       -> CastExp
    CastExp                      -> TypeCast(TypeName,CastExp)
    CastExp                      -> UnaryExp
    UnaryExp                     -> SizeofType(TypeName)
    UnaryExp                     -> SizeofExp(UnaryExp)
    UnaryExp                     -> Negation(CastExp)
    UnaryExp                     -> Tilde(CastExp)
    UnaryExp                     -> Negative(CastExp)
    UnaryExp                     -> Positive(CastExp)
    UnaryExp                     -> Deref(CastExp)
    UnaryExp                     -> Address(CastExp)
    UnaryExp                     -> PreDecr(UnaryExp)
    UnaryExp                     -> PreIncr(UnaryExp)
    UnaryExp                     -> PostfixExp
    MemberName                   -> TypedefName
    MemberName                   -> IDENTIFIER
    PostfixExp                   -> PostDecr(PostfixExp)
    PostfixExp                   -> PostIncr(PostfixExp)
    PostfixExp                   -> DerefMember(PostfixExp,MemberName)
    PostfixExp                   -> Field(PostfixExp,MemberName)
    PostfixExp                   -> FunCall(PostfixExp,u_1)
    PostfixExp                   -> ArrayIndex(PostfixExp,CommaExp)
    PostfixExp                   -> PrimaryExp
    PrimaryExp                   -> CommaExp
    PrimaryExp                   -> StringLiteralList
    PrimaryExp                   -> Constant
    PrimaryExp                   -> IDENTIFIER
    FunDefDecl                   -> IdDeclarator
    NoTypeSpecifier              -> NoTypeSpecifier()
    FunDefTypeSpec               -> m_1
    FunDefTypeSpec               -> DeclarationQualifierList
    FunDefTypeSpec               -> DeclarationSpecifier
    FunDefTypeSpec               -> TypeSpecifier
    FunDefTypeSpec               -> NoTypeSpecifier
    FunDef                       -> FunDef(FunDefTypeSpec,FunDefDecl,CompoundStm)
    ExternalDef                  -> Declaration
    ExternalDef                  -> FunDef
    TranslationUnit              -> TranslationUnit(g_2)
    ParenIdDeclarator            -> IDENTIFIER
    OldFunDeclarator             -> OldFunction2(x_1,OldFunDeclarator,v_1)
    OldFunDeclarator             -> OldFunction1(x_1,ParenIdDeclarator,y_1)
    TypedefDeclarator            -> TypedefDeclarator2(x_1,TypedefDeclarator,v_1)
    TypedefDeclarator            -> TypedefDeclarator1(x_1,TypedefName,v_1)
    IdDeclarator                 -> FunDecl(x_1,IdDeclarator,v_1)
    IdDeclarator                 -> IdDecl(x_1,IDENTIFIER,v_1)
    Declarator                   -> TypedefDeclarator
    Declarator                   -> IdDeclarator
    IdOrTypedefName              -> TypedefName
    IdOrTypedefName              -> IDENTIFIER
    TypedefName                  -> TypeId(ID)
    IDENTIFIER                   -> Id(ID)
    ID                           -> <string>
    ExternalDef                  -> PpIf(IfLine,b_2,f_2,c_2)
    MemberDeclaration            -> ControlLine
    ExternalDef                  -> ControlLine
    LineFlag                     -> <string>
    ElseLine                     -> <string>
    ElifLine                     -> <string>
    IfLine                       -> <string>
    ControlLineNot               -> <string>
    ControlLine                  -> <string>
    FileName                     -> <string>
    TokenSeq                     -> <string>
    WS                           -> <string>
    TokWS                        -> <string>
    Token                        -> <string>
    Slash                        -> <string>
    TokenChar                    -> <string>
    Asterisk                     -> <string>
    Comment                      -> <string>
    FloatFlags                   -> <string>
    IntFlags                     -> <string>
    OctalEsc                     -> <string>
    StringChar                   -> <string>
    Char                         -> <string>
    FloatLiteral                 -> <string>
    OctLiteral                   -> <string>
    HexLiteral                   -> <string>
    IntLiteral                   -> <string>
    CharLiteral                  -> <string>
    StringLiteral                -> <string>
    StringLiteralList            -> StringLit(z_2)
    Constant                     -> CharConst(CharLiteral)
    Constant                     -> FloatConst(FloatLiteral)
    Constant                     -> OctConst(OctLiteral)
    Constant                     -> HexConst(HexLiteral)
    Constant                     -> IntConst(IntLiteral)
    Keyword                      -> <string>
