Specification([Signature([Constructors([OpDecl("ArrayIndex",FunType([ConstType(Var("PostfixExp")),ConstType(Var("CommaExp"))],ConstType(Var("PostfixExp")))),OpDecl("FunCall",FunType([ConstType(Var("PostfixExp")),ConstType(Op("List",[Var("AssignExp")]))],ConstType(Var("PostfixExp")))),OpDecl("Field",FunType([ConstType(Var("PostfixExp")),ConstType(Var("MemberName"))],ConstType(Var("PostfixExp")))),OpDecl("DerefMember",FunType([ConstType(Var("PostfixExp")),ConstType(Var("MemberName"))],ConstType(Var("PostfixExp")))),OpDecl("PostIncr",FunType([ConstType(Var("PostfixExp"))],ConstType(Var("PostfixExp")))),OpDecl("PostDecr",FunType([ConstType(Var("PostfixExp"))],ConstType(Var("PostfixExp"))))])]),Signature([Constructors([OpDecl("PreIncr",FunType([ConstType(Var("UnaryExp"))],ConstType(Var("UnaryExp")))),OpDecl("PreDecr",FunType([ConstType(Var("UnaryExp"))],ConstType(Var("UnaryExp")))),OpDecl("Address",FunType([ConstType(Var("CastExp"))],ConstType(Var("UnaryExp")))),OpDecl("Deref",FunType([ConstType(Var("CastExp"))],ConstType(Var("UnaryExp")))),OpDecl("Positive",FunType([ConstType(Var("CastExp"))],ConstType(Var("UnaryExp")))),OpDecl("Negative",FunType([ConstType(Var("CastExp"))],ConstType(Var("UnaryExp")))),OpDecl("Tilde",FunType([ConstType(Var("CastExp"))],ConstType(Var("UnaryExp")))),OpDecl("Negation",FunType([ConstType(Var("CastExp"))],ConstType(Var("UnaryExp")))),OpDecl("SizeofExp",FunType([ConstType(Var("UnaryExp"))],ConstType(Var("UnaryExp")))),OpDecl("SizeofType",FunType([ConstType(Var("TypeName"))],ConstType(Var("UnaryExp"))))])]),Signature([Constructors([OpDecl("TypeCast",FunType([ConstType(Var("TypeName")),ConstType(Var("CastExp"))],ConstType(Var("CastExp"))))])]),Signature([Constructors([OpDecl("Mul",FunType([ConstType(Var("MulExp")),ConstType(Var("CastExp"))],ConstType(Var("MulExp")))),OpDecl("Div",FunType([ConstType(Var("MulExp")),ConstType(Var("CastExp"))],ConstType(Var("MulExp")))),OpDecl("Mod",FunType([ConstType(Var("MulExp")),ConstType(Var("CastExp"))],ConstType(Var("MulExp"))))])]),Signature([Constructors([OpDecl("Add",FunType([ConstType(Var("AddExp")),ConstType(Var("MulExp"))],ConstType(Var("AddExp")))),OpDecl("Subt",FunType([ConstType(Var("AddExp")),ConstType(Var("MulExp"))],ConstType(Var("AddExp"))))])]),Signature([Constructors([OpDecl("ShiftLeft",FunType([ConstType(Var("ShiftExp")),ConstType(Var("AddExp"))],ConstType(Var("ShiftExp")))),OpDecl("ShiftRight",FunType([ConstType(Var("ShiftExp")),ConstType(Var("AddExp"))],ConstType(Var("ShiftExp"))))])]),Signature([Constructors([OpDecl("Lt",FunType([ConstType(Var("RelExp")),ConstType(Var("ShiftExp"))],ConstType(Var("RelExp")))),OpDecl("Gt",FunType([ConstType(Var("RelExp")),ConstType(Var("ShiftExp"))],ConstType(Var("RelExp")))),OpDecl("Le",FunType([ConstType(Var("RelExp")),ConstType(Var("ShiftExp"))],ConstType(Var("RelExp")))),OpDecl("Ge",FunType([ConstType(Var("RelExp")),ConstType(Var("ShiftExp"))],ConstType(Var("RelExp"))))])]),Signature([Constructors([OpDecl("Equal",FunType([ConstType(Var("EqualityExp")),ConstType(Var("RelExp"))],ConstType(Var("EqualityExp")))),OpDecl("NotEqual",FunType([ConstType(Var("EqualityExp")),ConstType(Var("RelExp"))],ConstType(Var("EqualityExp"))))])]),Signature([Constructors([OpDecl("And",FunType([ConstType(Var("EqualityExp")),ConstType(Var("ANDExpn"))],ConstType(Var("ANDExp"))))])]),Signature([Constructors([OpDecl("ExOr",FunType([ConstType(Var("ANDExp")),ConstType(Var("ExclORExp"))],ConstType(Var("ExclORExp"))))])]),Signature([Constructors([OpDecl("IncOr",FunType([ConstType(Var("ExclORExp")),ConstType(Var("InclORExp"))],ConstType(Var("InclORExp"))))])]),Signature([Constructors([OpDecl("LAnd",FunType([ConstType(Var("LogicalANDExp")),ConstType(Var("InclORExp"))],ConstType(Var("LogicalANDExp"))))])]),Signature([Constructors([OpDecl("LOr",FunType([ConstType(Var("LogicalORExp")),ConstType(Var("LogicalANDExp"))],ConstType(Var("LogicalORExp"))))])]),Signature([Constructors([OpDecl("IfExp",FunType([ConstType(Var("LogicalORExp")),ConstType(Var("CommaExp")),ConstType(Var("CondExp"))],ConstType(Var("CondExp"))))])]),Signature([Constructors([OpDecl("Assign",FunType([ConstType(Var("UnaryExp")),ConstType(Var("AssignOp")),ConstType(Var("AssignExp"))],ConstType(Var("AssignExp"))))])]),Signature([Constructors([OpDecl("AssignEq",ConstType(Var("AssignOp"))),OpDecl("AssignMul",ConstType(Var("AssignOp"))),OpDecl("AssignDiv",ConstType(Var("AssignOp"))),OpDecl("AssignMod",ConstType(Var("AssignOp"))),OpDecl("AssignPlus",ConstType(Var("AssignOp"))),OpDecl("AssignMin",ConstType(Var("AssignOp"))),OpDecl("AssignSL",ConstType(Var("AssignOp"))),OpDecl("AssignSR",ConstType(Var("AssignOp"))),OpDecl("AssignAnd",ConstType(Var("AssignOp"))),OpDecl("AssignExp",ConstType(Var("AssignOp"))),OpDecl("AssignOr",ConstType(Var("AssignOp")))])]),Signature([Constructors([OpDecl("Comma",FunType([ConstType(Var("AssignExp")),ConstType(Var("CommaExp"))],ConstType(Var("CommaExp")))),OpDecl("EmptyExp",ConstType(Var("CommaExpOpt")))])]),Signature([])])
