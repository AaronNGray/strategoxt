//
// generated from <aster 0.2>/test/test-attributes.astr
//
module test_attributes

imports
  libstratego-lib


signature
  constructors
    Fork : Term * Term -> Term
    Leaf : Term -> Term


strategies
  main-test_attributes =
    option-wrap(
      verbose-option
    , test-suite(
        !"aster attribute tests"
      , test-default-attributes
        ; test-standard-library
        ; test-attribute-behavior
        ; test-set-operations
        ; test-reflective-attributes
      )
      <+ <exit> 1
    )


strategies
  test-default-attributes =
    apply-and-check(
      !"id.parent (1)"
    , collect-one(
        1
        ; !<id>
        ; get-parent(|<all-parents>)
        ; not(NoParent)
      )
    , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
      ; !Leaf(1)
      ; aster-init-node-ensure(
          id
        | <!all-parents0 <+ all-parents => all-parents0>
        , <!global-cache0 <+ global-cache => global-cache0>
        )
      ; eval-init(
        | UnknownParent()
        , all-parents0
        , global-cache0
        , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
        )
      ; not(EVAL_FAILED)
    , ?Leaf(1)
    )
    ; apply-and-check(
        !"id.parent (2)"
      , collect-one(
          1
          ; !<id>
          ; get-parent(|<all-parents>)
          ; not(NoParent)
        )
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; ![1]
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , ?[1]
      )
    ; apply-and-check(
        !"id.ancestor (1)"
      , collect-one(
          ?1
          ; (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
          ; !<id>
          ; aster-init-node-ensure(
              aster-initialize-node-warning(|all-parents0, "ancestor_1_0")
            | <!all-parents0 <+ all-parents => all-parents0>
            , <!global-cache0 <+ global-cache => global-cache0>
            )
          ; eval-ancestor(
              ?Leaf(_)
            | UnknownParent()
            , all-parents0
            , global-cache0
            , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
            )
          ; not(EVAL_FAILED)
        )
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !Fork(Leaf(1), 2)
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , ?Leaf(1)
      )
    ; apply-and-check(
        !"id.ancestor (2)"
      , collect-one(
          1
          ; (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
          ; !<id>
          ; aster-init-node-ensure(
              aster-initialize-node-warning(|all-parents0, "ancestor_1_0")
            | <!all-parents0 <+ all-parents => all-parents0>
            , <!global-cache0 <+ global-cache => global-cache0>
            )
          ; eval-ancestor(
              ?Fork(_, _)
            | UnknownParent()
            , all-parents0
            , global-cache0
            , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
            )
          ; not(EVAL_FAILED)
        )
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !Fork(Leaf(1), 2)
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , ?Fork(_, _)
      )
    ; apply-and-check(
        !"id.ancestor is not proper"
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !<id>
        ; aster-init-node-ensure(
            aster-initialize-node-warning(|all-parents0, "ancestor_1_0")
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-ancestor(
            1
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !1
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , ?1
      )
    ; apply-and-check(
        !"id.prev-sibling"
      , collect-one(
          2
          ; (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
          ; !<id>
          ; aster-init-node-ensure(
              aster-initialize-node-warning(|all-parents0, "prev-sibling_1_0")
            | <!all-parents0 <+ all-parents => all-parents0>
            , <!global-cache0 <+ global-cache => global-cache0>
            )
          ; eval-prev-sibling(
              id
            | UnknownParent()
            , all-parents0
            , global-cache0
            , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
            )
          ; not(EVAL_FAILED)
        )
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !Fork(Leaf(1), 2)
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , ?Leaf(_)
      )


strategies
  test-set-operations =
    apply-and-check(
      !"non-reference attribute"
    , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
      ; !<id>
      ; aster-init-node-ensure(
          id
        | <!all-parents0 <+ all-parents => all-parents0>
        , <!global-cache0 <+ global-cache => global-cache0>
        )
      ; eval-union(
        | UnknownParent()
        , all-parents0
        , global-cache0
        , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
        )
      ; not(EVAL_FAILED)
    , {a, b:
        a := <(id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
              ; ![1, 2, 3]
              ; aster-init-node-ensure(
                  id
                | <!all-parents0 <+ all-parents => all-parents0>
                , <!global-cache0 <+ global-cache => global-cache0>
                )
              ; eval-init(
                | UnknownParent()
                , all-parents0
                , global-cache0
                , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
                )
              ; not(EVAL_FAILED)>
        ; b := <(id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
                ; ![1, 2, 3]
                ; aster-init-node-ensure(
                    id
                  | <!all-parents0 <+ all-parents => all-parents0>
                  , <!global-cache0 <+ global-cache => global-cache0>
                  )
                ; eval-init(
                  | UnknownParent()
                  , all-parents0
                  , global-cache0
                  , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
                  )
                ; not(EVAL_FAILED)>
        ; !(a, b)
      }
    , eq-ignore-annos(
      | [1, 2, 3]
      )
    )


rules

  eval-child-def-Fork-30(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; (?a
       ; (!parent0 ; not(UnknownParent + NoParent)
          <+ (?node0 ; !parent0 ; not(UnknownParent)
              <+ get-parent(|all-parents0))
             ; not(NoParent))
       ; id => Fork(a@1, 2))
    ; (id <+ !EVAL_FAILED())

  eval-first-kid-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; (one(?kid) ; !kid <+ !EVAL_FAILED())

  eval-all-kids-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; (?_#(<id>) <+ !EVAL_FAILED())

  eval-all-kids-tuple-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; (?_#(<id>) ; ListToTuple
       <+ !EVAL_FAILED())

  eval-new-fork-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; (\ _#(kids) -> "Fork2"#(kids) \
       <+ !EVAL_FAILED())

  eval-is-100000(|parent0, all-parents0, global-cache0, rewrite-mode0, arg0) =
    ?node0
    ; where(?x)
    ; ((id < id + ?arg0) ; (id < id + ?x))
    ; if !arg0
         ; (?x <+ eq-ignore-annos(|x)) then
        id <+ !EVAL_FAILED()
      else
        !arg0 ; !x < !EVAL_FAILED() + fail
      end

  eval-tuple-first-100000(|parent0, all-parents0, global-cache0, rewrite-mode0, arg1) =
    ?node0
    ; where(?x)
    ; ((id < id + ?arg1)
       ; (id < id + ?x)
       ; (id < id + ?y)
       ; id)
    ; if !arg1
         ; ( ?x <+ eq-ignore-annos(|x)
           , ?y <+ eq-ignore-annos(|y)
           ) then
        id <+ !EVAL_FAILED()
      else
        !arg1 ; !x ; !y ; id
        < !EVAL_FAILED()
        + fail
      end

  eval-parent-first-kid-Fork-10(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; (?b
       ; (!parent0 ; not(UnknownParent + NoParent)
          <+ (?node0 ; !parent0 ; not(UnknownParent)
              <+ get-parent(|all-parents0))
             ; not(NoParent))
       ; id => Fork(a, b))
    ; (eval-first-kid(
       | <?node0 < !parent0 + !UnknownParent()>
       , all-parents0
       , global-cache0
       , rewrite-mode0
       )
       ; not(EVAL_FAILED)
       <+ !EVAL_FAILED())

  eval-silly-00(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; (?silly
       ; (!parent0 ; not(UnknownParent + NoParent) <+ id)
       ; !silly => silly)
    ; (id <+ !EVAL_FAILED())

  eval-build2-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; where(id)
    ; (!2 <+ !EVAL_FAILED())

  eval-init-100000(|parent0, all-parents0, global-cache0, rewrite-mode0, arg2) =
    ?node0
    ; where(?_)
    ; ((id < id + ?arg2) ; (id < id + ?t))
    ; if !arg2
         ; (?t <+ eq-ignore-annos(|t)) then
        where(id) ; (!t <+ !EVAL_FAILED())
      else
        !arg2 ; !t < !EVAL_FAILED() + fail
      end

  eval-fails-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; (fail <+ !EVAL_FAILED())


strategies
  test-attribute-behavior =
    apply-and-check(
      !"attribute to get a child node"
    , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
      ; !<id>
      ; aster-init-node-ensure(
          aster-initialize-node-warning(|all-parents0, "first-kid")
        | <!all-parents0 <+ all-parents => all-parents0>
        , <!global-cache0 <+ global-cache => global-cache0>
        )
      ; eval-first-kid(
        | UnknownParent()
        , all-parents0
        , global-cache0
        , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
        )
      ; not(EVAL_FAILED)
    , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
      ; !Fork(1, 3)
      ; aster-init-node-ensure(
          id
        | <!all-parents0 <+ all-parents => all-parents0>
        , <!global-cache0 <+ global-cache => global-cache0>
        )
      ; eval-init(
        | UnknownParent()
        , all-parents0
        , global-cache0
        , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
        )
      ; not(EVAL_FAILED)
    , ?1
    )
    ; apply-and-check(
        !"reference attribute"
      , !<id>
        ; get-parent(|<all-parents>)
        ; not(NoParent)
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !<(id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
            ; !Fork(1, 3)
            ; aster-init-node-ensure(
                id
              | <!all-parents0 <+ all-parents => all-parents0>
              , <!global-cache0 <+ global-cache => global-cache0>
              )
            ; eval-init(
              | UnknownParent()
              , all-parents0
              , global-cache0
              , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
              )
            ; not(EVAL_FAILED)>
        ; aster-init-node-ensure(
            aster-initialize-node-warning(|all-parents0, "first-kid")
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-first-kid(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , ?Fork(1, 3)
      )
    ; apply-and-check(
        !"reference list attribute"
      , Hd
        ; !<id>
        ; get-parent(|<all-parents>)
        ; not(NoParent)
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !<(id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
            ; !Fork(1, 3)
            ; aster-init-node-ensure(
                id
              | <!all-parents0 <+ all-parents => all-parents0>
              , <!global-cache0 <+ global-cache => global-cache0>
              )
            ; eval-init(
              | UnknownParent()
              , all-parents0
              , global-cache0
              , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
              )
            ; not(EVAL_FAILED)>
        ; aster-init-node-ensure(
            aster-initialize-node-warning(|all-parents0, "all-kids")
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-all-kids(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , ?Fork(1, 3)
      )
    ; apply-and-check(
        !"reference tuple attribute"
      , Thd
        ; !<id>
        ; get-parent(|<all-parents>)
        ; not(NoParent)
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !<(id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
            ; !Fork(1, 3)
            ; aster-init-node-ensure(
                id
              | <!all-parents0 <+ all-parents => all-parents0>
              , <!global-cache0 <+ global-cache => global-cache0>
              )
            ; eval-init(
              | UnknownParent()
              , all-parents0
              , global-cache0
              , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
              )
            ; not(EVAL_FAILED)>
        ; aster-init-node-ensure(
            aster-initialize-node-warning(|all-parents0, "all-kids-tuple")
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-all-kids-tuple(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , ?Fork(1, 3)
      )
    ; apply-and-check(
        !"non-reference attribute"
      , !<(id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
          ; !<(id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
              ; !<id>
              ; aster-init-node-ensure(
                  aster-initialize-node-warning(|all-parents0, "new-fork")
                | <!all-parents0 <+ all-parents => all-parents0>
                , <!global-cache0 <+ global-cache => global-cache0>
                )
              ; eval-new-fork(
                | UnknownParent()
                , all-parents0
                , global-cache0
                , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
                )
              ; not(EVAL_FAILED)>
          ; aster-init-node-ensure(
              aster-initialize-node-warning(|all-parents0, "first-child")
            | <!all-parents0 <+ all-parents => all-parents0>
            , <!global-cache0 <+ global-cache => global-cache0>
            )
          ; eval-first-child(
            | UnknownParent()
            , all-parents0
            , global-cache0
            , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
            )
          ; not(EVAL_FAILED)>
        ; get-parent(|<all-parents>)
        ; not(NoParent)
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !Fork(1, 3)
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , not(?Fork(1, 3))
      )
    ; apply-and-check(
        !"id refers to the whole pattern, not the pattern child"
      , collect-one(
          1
          ; (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
          ; !<id>
          ; aster-init-node-ensure(
              aster-initialize-node-warning(|all-parents0, "child-def")
            | <!all-parents0 <+ all-parents => all-parents0>
            , <!global-cache0 <+ global-cache => global-cache0>
            )
          ; eval-child-def(
            | UnknownParent()
            , all-parents0
            , global-cache0
            , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
            )
          ; not(EVAL_FAILED)
        )
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !Fork(1, 2)
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , ?Fork(1, 2)
      )
    ; apply-and-check(
        !"attribute parameter used in pattern (1)"
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !<id>
        ; aster-init-node-ensure(
            aster-initialize-node-warning(|all-parents0, "is_0_1")
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-is(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          , 1
          )
        ; not(EVAL_FAILED)
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !1
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , ?1
      )
    ; apply-and-check(
        !"attribute parameter used in pattern (2)"
      , not((id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
            ; !<id>
            ; aster-init-node-ensure(
                aster-initialize-node-warning(|all-parents0, "is_0_1")
              | <!all-parents0 <+ all-parents => all-parents0>
              , <!global-cache0 <+ global-cache => global-cache0>
              )
            ; eval-is(
              | UnknownParent()
              , all-parents0
              , global-cache0
              , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
              , 2
              )
            ; not(EVAL_FAILED))
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !1
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , ?1
      )
    ; apply-and-check(
        !"attribute parameter used in pattern is ignored for id.defined"
      , {:
          let cached0 =
                (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
                ; !<id>
                ; aster-init-node-ensure(
                    aster-initialize-node-warning(|all-parents0, "defined-decorator0_2_1")
                  | <!all-parents0 <+ all-parents => all-parents0>
                  , <!global-cache0 <+ global-cache => global-cache0>
                  )
                ; eval-defined-decorator0(
                    cached0
                  , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
                    ; !<id>
                    ; aster-init-node-ensure(
                        aster-initialize-node-warning(|all-parents0, "is_0_1")
                      | <!all-parents0 <+ all-parents => all-parents0>
                      , <!global-cache0 <+ global-cache => global-cache0>
                      )
                    ; eval-is(
                      | UnknownParent()
                      , all-parents0
                      , global-cache0
                      , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
                      , 2
                      )
                  | UnknownParent()
                  , all-parents0
                  , global-cache0
                  , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
                  , Anonymous()
                  )
                ; not(EVAL_FAILED)
          in
            !<id> ; cached0
          end
        }
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !1
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , ?1
      )
    ; apply-and-check(
        !"patterns in attribute arguments"
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !<id>
        ; aster-init-node-ensure(
            aster-initialize-node-warning(|all-parents0, "tuple-first_0_1")
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-tuple-first(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          , (1, 2)
          )
        ; not(EVAL_FAILED)
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !1
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , ?1
      )
    ; apply-and-check(
        !"id.attribute does not refer to specified child"
      , collect-one(
          2
          ; (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
          ; !<id>
          ; aster-init-node-ensure(
              aster-initialize-node-warning(|all-parents0, "parent-first-kid")
            | <!all-parents0 <+ all-parents => all-parents0>
            , <!global-cache0 <+ global-cache => global-cache0>
            )
          ; eval-parent-first-kid(
            | UnknownParent()
            , all-parents0
            , global-cache0
            , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
            )
          ; not(EVAL_FAILED)
        )
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !Fork(1, 2)
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , 1
      )
    ; apply-and-check(
        !"attribute on id child"
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !<id>
        ; aster-init-node-ensure(
            aster-initialize-node-warning(|all-parents0, "silly")
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-silly(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !1
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , 1
      )
    ; apply-and-check(
        !"attribute result is an initialized term (1)"
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !<id>
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , !2
      , ?2{_}
      )
    ; apply-and-check(
        !"attribute result is an initialized term (2)"
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !<id>
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-ensure-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , !2
      , ?2{_}
      )
    ; apply-and-check(
        !"attribute result is an initialized term (3)"
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !<id>
        ; aster-init-node-ensure(
            aster-initialize-node-warning(|all-parents0, "build2")
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-build2(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !1
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , ?2{_}
      )
    ; apply-and-check(
        !"attribute result is an initialized term (4)"
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !<id>
        ; aster-init-node-ensure(
            aster-initialize-node-warning(|all-parents0, "test-silly-circular")
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-test-silly-circular(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !1
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , ?2{_}
      )
    ; apply-and-check(
        !"attribute result is an initialized term (5)"
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !<id>
        ; aster-init-node-ensure(
            aster-initialize-node-warning(|all-parents0, "init_0_1")
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          , 2
          )
        ; not(EVAL_FAILED)
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !1
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , ?2{_}
      )
    ; apply-and-check(
        !"attribute result is an initialized term (6)"
      , not((id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
            ; !<id>
            ; aster-init-node-ensure(
                aster-initialize-node-warning(|all-parents0, "fails")
              | <!all-parents0 <+ all-parents => all-parents0>
              , <!global-cache0 <+ global-cache => global-cache0>
              )
            ; eval-fails(
              | UnknownParent()
              , all-parents0
              , global-cache0
              , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
              )
            ; not(EVAL_FAILED))
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !1
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , ?1
      )


rules

  eval-test-root-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; ((<eval-test-root(
         | <?node0 < !parent0 + !UnknownParent()>
         , all-parents0
         , global-cache0
         , rewrite-mode0
         )> <!<id>
             ; get-parent(|<all-parents>)
             ; not(NoParent)>
        ; not(EVAL_FAILED)
        <+ id)
       <+ !EVAL_FAILED())

  eval-test-copy-root-root0(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?root
            ; if UnknownParent() := parent0 then
                (?node0 ; !parent0 ; not(UnknownParent)
                 <+ get-parent(|all-parents0))
                ; NoParent
              else
                <NoParent> parent0
              end)
    ; (id <+ !EVAL_FAILED())

  eval-is-one-100010(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?1)
    ; (id <+ !EVAL_FAILED())

  eval-test-silly-circular-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; where(id)
    ; (!2 <+ !EVAL_FAILED())

  eval-replace-nodes-Leaf-100010(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?Leaf(x))
    ; where(id)
    ; (!Leaf(6) <+ !EVAL_FAILED())


strategies
  test-standard-library =
    apply-and-check(
      !"down copy rule"
    , collect-one(
        1
        ; (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !<id>
        ; aster-init-node-ensure(
            aster-initialize-node-warning(|all-parents0, "test-root")
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-test-root(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      )
    , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
      ; !Fork(Leaf(1), 2)
      ; aster-init-node-ensure(
          id
        | <!all-parents0 <+ all-parents => all-parents0>
        , <!global-cache0 <+ global-cache => global-cache0>
        )
      ; eval-init(
        | UnknownParent()
        , all-parents0
        , global-cache0
        , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
        )
      ; not(EVAL_FAILED)
    , ?Fork(_, _)
    )
    ; apply-and-check(
        !"circular attribute initial value"
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !<id>
        ; aster-init-node-ensure(
            aster-initialize-node-warning(|all-parents0, "test-silly-circular")
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-test-silly-circular(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !1
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , ?2
      )
    ; apply-and-check(
        !"down copy rule"
      , collect-one(
          3
          ; (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
          ; !<id>
          ; aster-init-node-ensure(
              aster-initialize-node-warning(|all-parents0, "test-copy-root")
            | <!all-parents0 <+ all-parents => all-parents0>
            , <!global-cache0 <+ global-cache => global-cache0>
            )
          ; eval-test-copy-root(
            | UnknownParent()
            , all-parents0
            , global-cache0
            , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
            )
          ; not(EVAL_FAILED)
        )
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !Fork(1, 3)
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , ?Fork(1, 3)
      )
    ; apply-and-check(
        !"up copy rule (1)"
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !<id>
        ; aster-init-node-ensure(
            aster-initialize-node-warning(|all-parents0, "is-one")
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-is-one(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !Fork(1, 3)
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , ?1
      )
    ; apply-and-check(
        !"up copy rule (2)"
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !<id>
        ; aster-init-node-ensure(
            aster-initialize-node-warning(|all-parents0, "is-one")
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-is-one(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !Fork(3, 1)
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , ?1
      )
    ; apply-and-check(
        !"up copy rule (3)"
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !<id>
        ; aster-init-node-ensure(
            aster-initialize-node-warning(|all-parents0, "is-one")
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-is-one(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !Some(Some(Some(1)))
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , ?1
      )
    ; apply-and-check(
        !"basic rewriting"
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !<id>
        ; aster-init-node-ensure(
            aster-initialize-node-warning(|all-parents0, "replace-nodes")
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-replace-nodes(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !Fork(
             Fork(
               Fork(
                 Leaf(1)
               , Leaf(2)
               )
             , Leaf(3)
             )
           , Fork(
               Leaf(4)
             , Leaf(5)
             )
           )
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , ?Fork(
           Fork(
             Fork(
               Leaf(6)
             , Leaf(6)
             )
           , Leaf(6)
           )
         , Fork(
             Leaf(6)
           , Leaf(6)
           )
         )
      )


rules

  eval-my-signature-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; (!<id>
       ; !Attribute("my-signature", [], []) => Attribute(_, [], _)
       <+ !EVAL_FAILED())

  eval-my-attribute-name-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; (!<id>
       ; !Attribute("my-attribute-name", [], []) => Attribute(<id>, _, _)
       <+ !EVAL_FAILED())

  eval-my-signature-100001(s|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; (!<id>
       ; !Attribute("my-signature", ["s"], []) => Attribute(_, [], _)
       <+ !EVAL_FAILED())


strategies
  test-reflective-attributes =
    apply-and-check(
      !"id.signature"
    , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
      ; !<id>
      ; aster-init-node-ensure(
          aster-initialize-node-warning(|all-parents0, "my-signature")
        | <!all-parents0 <+ all-parents => all-parents0>
        , <!global-cache0 <+ global-cache => global-cache0>
        )
      ; eval-my-signature(
        | UnknownParent()
        , all-parents0
        , global-cache0
        , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
        )
      ; not(EVAL_FAILED)
    , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
      ; !1
      ; aster-init-node-ensure(
          id
        | <!all-parents0 <+ all-parents => all-parents0>
        , <!global-cache0 <+ global-cache => global-cache0>
        )
      ; eval-init(
        | UnknownParent()
        , all-parents0
        , global-cache0
        , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
        )
      ; not(EVAL_FAILED)
    , Attribute("my-signature", [], [])
    )
    ; apply-and-check(
        !"id.attribute-name"
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !<id>
        ; aster-init-node-ensure(
            aster-initialize-node-warning(|all-parents0, "my-attribute-name")
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-my-attribute-name(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !1
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , "my-attribute-name"
      )
    ; apply-and-check(
        !"signature of remote attribute"
      , {:
          let cached0 =
                (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
                ; !<id>
                ; aster-init-node-ensure(
                    aster-initialize-node-warning(|all-parents0, "signature-decorator0_2_1")
                  | <!all-parents0 <+ all-parents => all-parents0>
                  , <!global-cache0 <+ global-cache => global-cache0>
                  )
                ; eval-signature-decorator0(
                    cached0
                  , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
                    ; !<id>
                    ; aster-init-node-ensure(
                        aster-initialize-node-warning(|all-parents0, "silly")
                      | <!all-parents0 <+ all-parents => all-parents0>
                      , <!global-cache0 <+ global-cache => global-cache0>
                      )
                    ; eval-silly(
                      | UnknownParent()
                      , all-parents0
                      , global-cache0
                      , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
                      )
                  | UnknownParent()
                  , all-parents0
                  , global-cache0
                  , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
                  , Attribute("silly", [], [])
                  )
                ; not(EVAL_FAILED)
          in
            !<id> ; cached0
          end
        }
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !1
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , Attribute("silly", [], [])
      )
    ; apply-and-check(
        !"id.signature simply fails if there are strategy arguments (1)"
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !<id>
        ; aster-init-node-ensure(
            aster-initialize-node-warning(|all-parents0, "my-signature_1_0")
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-my-signature(
            id
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
        <+ !"failed"
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !1
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , "failed"
      )
    ; apply-and-check(
        !"id.signature simply fails if there are strategy arguments (2)"
      , {:
          let cached0 =
                (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
                ; !<id>
                ; aster-init-node-ensure(
                    aster-initialize-node-warning(|all-parents0, "signature-decorator0_2_1")
                  | <!all-parents0 <+ all-parents => all-parents0>
                  , <!global-cache0 <+ global-cache => global-cache0>
                  )
                ; eval-signature-decorator0(
                    cached0
                  , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
                    ; !<id>
                    ; aster-init-node-ensure(
                        aster-initialize-node-warning(|all-parents0, "my-signature_1_0")
                      | <!all-parents0 <+ all-parents => all-parents0>
                      , <!global-cache0 <+ global-cache => global-cache0>
                      )
                    ; eval-my-signature(
                        id
                      | UnknownParent()
                      , all-parents0
                      , global-cache0
                      , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
                      )
                  | UnknownParent()
                  , all-parents0
                  , global-cache0
                  , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
                  , Attribute(
                      "my-signature"
                    , [Anonymous()]
                    , []
                    )
                  )
                ; not(EVAL_FAILED)
          in
            !<id> ; cached0
          end
        }
        <+ !"failed"
      , (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
        ; !1
        ; aster-init-node-ensure(
            id
          | <!all-parents0 <+ all-parents => all-parents0>
          , <!global-cache0 <+ global-cache => global-cache0>
          )
        ; eval-init(
          | UnknownParent()
          , all-parents0
          , global-cache0
          , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
          )
        ; not(EVAL_FAILED)
      , "failed"
      )


rules

  eval-union-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?set)
    ; ((union(
          <eval-eq(
           | <?node0 < !parent0 + !UnknownParent()>
           , all-parents0
           , global-cache0
           , rewrite-mode0
           )> <id>
          ; not(EVAL_FAILED)
        )
        <+ foldr(
             ![]
           , union(
               <eval-eq(
                | <?node0 < !parent0 + !UnknownParent()>
                , all-parents0
                , global-cache0
                , rewrite-mode0
                )> <id>
               ; not(EVAL_FAILED)
             )
           ))
       <+ !EVAL_FAILED())

  eval-diff-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?set)
    ; ((diff(
          <eval-eq(
           | <?node0 < !parent0 + !UnknownParent()>
           , all-parents0
           , global-cache0
           , rewrite-mode0
           )> <id>
          ; not(EVAL_FAILED)
        )
        <+ foldr(
             ![]
           , diff(
               <eval-eq(
                | <?node0 < !parent0 + !UnknownParent()>
                , all-parents0
                , global-cache0
                , rewrite-mode0
                )> <id>
               ; not(EVAL_FAILED)
             )
           ))
       <+ !EVAL_FAILED())

  eval-isect-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?set)
    ; ((isect(
          <eval-eq(
           | <?node0 < !parent0 + !UnknownParent()>
           , all-parents0
           , global-cache0
           , rewrite-mode0
           )> <id>
          ; not(EVAL_FAILED)
        )
        <+ foldr(
             <Hd> set
           , isect(
               eval-eq(
               | <?node0 < !parent0 + !UnknownParent()>
               , all-parents0
               , global-cache0
               , rewrite-mode0
               )
               ; not(EVAL_FAILED)
             )
           )
        <+ ![])
       <+ !EVAL_FAILED())

  eval-make-set-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?set)
    ; (foldr(
         ![]
       , eval-union(
         | <?node0 < !parent0 + !UnknownParent()>
         , all-parents0
         , global-cache0
         , rewrite-mode0
         )
         ; not(EVAL_FAILED)
       , ![<id>]
       )
       <+ !EVAL_FAILED())

  eval-lookup-100010(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?(key, list))
    ; where(id)
    ; (!<lookup(
           <eval-eq(
            | <?node0 < !parent0 + !UnknownParent()>
            , all-parents0
            , global-cache0
            , rewrite-mode0
            )> <id>
           ; not(EVAL_FAILED)
         )>
       <+ !EVAL_FAILED())

  eval-lookup-100000(|parent0, all-parents0, global-cache0, rewrite-mode0, arg3) =
    ?node0
    ; where(?list)
    ; ((id < id + ?arg3) ; (id < id + ?key))
    ; if !arg3
         ; (?key <+ eq-ignore-annos(|key)) then
        where(id)
        ; (<lookup(
              eval-eq(
              | <?node0 < !parent0 + !UnknownParent()>
              , all-parents0
              , global-cache0
              , rewrite-mode0
              )
              ; not(EVAL_FAILED)
            )> (key, list)
           <+ !EVAL_FAILED())
      else
        !arg3 ; !key < !EVAL_FAILED() + fail
      end


rules

  eval-eq-100000(|parent0, all-parents0, global-cache0, rewrite-mode0, arg4) =
    ?node0
    ; where(?_)
    ; ((id < id + ?arg4) ; (id < id + ?t))
    ; if !arg4
         ; (?t <+ eq-ignore-annos(|t)) then
        eq-ignore-annos(|t) <+ !EVAL_FAILED()
      else
        !arg4 ; !t < !EVAL_FAILED() + fail
      end

  eval-eq-100010(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?(t1, t2))
    ; where(where(<eq-ignore-annos(|t2)> t1))
    ; (!<id> <+ !EVAL_FAILED())


rules

  eval-all-100000(a|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; (?before
       ; all(a)
       ; (?before
          <+ <eval-reinit(
              | <?node0 < !parent0 + !UnknownParent()>
              , all-parents0
              , global-cache0
              , rewrite-mode0
              )> <id>
             ; not(EVAL_FAILED))
       <+ !EVAL_FAILED())

  eval-some-100000(a|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; (?before
       ; some(a)
       ; (?before
          <+ <eval-reinit(
              | <?node0 < !parent0 + !UnknownParent()>
              , all-parents0
              , global-cache0
              , rewrite-mode0
              )> <id>
             ; not(EVAL_FAILED))
       <+ !EVAL_FAILED())

  eval-one-100000(a|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; (?before
       ; one(a)
       ; (?before
          <+ <eval-reinit(
              | <?node0 < !parent0 + !UnknownParent()>
              , all-parents0
              , global-cache0
              , rewrite-mode0
              )> <id>
             ; not(EVAL_FAILED))
       <+ !EVAL_FAILED())


rules

  eval-all-inline-100000(a|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; (?before
       ; all(a)
       ; if not(?before) then
           ?after
           ; all(aster-is-initialized(|<all-parents>)
                 < set-parent(|<all-parents>, after)
                 + aster-initialize-node(|<all-parents>, <global-cache>, after))
           ; set-parent(|<all-parents>, NoParent())
         end
       <+ !EVAL_FAILED())


rules

  eval-signature-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; !signature0 => Attribute(_, [], _)
       <+ !EVAL_FAILED())

  eval-attribute-name-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; !signature0 => Attribute(<id>, _, _)
       <+ !EVAL_FAILED())

  eval-defined-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; where(?node0
               < !decorated-value-cache0 <+ a => decorated-value-cache0
               + a)
       <+ !EVAL_FAILED())


rules

  eval-prev-sibling-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?tree-access)
    ; (get-prev-sibling(
       | <!<id>
          ; get-parent(|<!all-parents0>)
          ; not(NoParent)>
       )
       <+ !EVAL_FAILED())

  eval-next-sibling-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?tree-access)
    ; (get-next-sibling(
       | <!<id>
          ; get-parent(|<!all-parents0>)
          ; not(NoParent)>
       )
       <+ !EVAL_FAILED())

  eval-first-sibling-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?tree-access)
    ; (get-first-child(
       | <!<id>
          ; get-parent(|<!all-parents0>)
          ; not(NoParent)>
       )
       <+ !EVAL_FAILED())

  eval-last-sibling-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?tree-access)
    ; (get-last-child(
       | <!<id>
          ; get-parent(|<!all-parents0>)
          ; not(NoParent)>
       )
       <+ !EVAL_FAILED())

  eval-first-child-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?tree-access)
    ; (get-first-child(|<id>) <+ !EVAL_FAILED())

  eval-last-child-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?tree-access)
    ; (get-last-child(|<id>) <+ !EVAL_FAILED())

  eval-prev-sibling-100001(a|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?tree-access)
    ; (get-prev-sibling(
         a
       | <!<id>
          ; get-parent(|<!all-parents0>)
          ; not(NoParent)>
       )
       <+ !EVAL_FAILED())

  eval-next-sibling-100001(a|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?tree-access)
    ; (get-next-sibling(
         a
       | <!<id>
          ; get-parent(|<!all-parents0>)
          ; not(NoParent)>
       )
       <+ !EVAL_FAILED())

  eval-child-100000(a|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?tree-access)
    ; (one(a ; ?it) ; !it
       <+ !EVAL_FAILED())

  eval-children-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?tree-access)
    ; ((?[x|y]
        < ![x, y]
        + get-arguments)
       <+ !EVAL_FAILED())

  eval-is-root-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?<id>)
    ; where(where(get-parent(|<all-parents>) => NoParent()))
    ; (!<id> <+ !EVAL_FAILED())

  eval-root-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; where(where(eval-is-root(
                  | <?node0 < !parent0 + !UnknownParent()>
                  , all-parents0
                  , global-cache0
                  , rewrite-mode0
                  )
                  ; not(EVAL_FAILED)))
    ; (!<id> <+ !EVAL_FAILED())

  eval-ancestor-100000(p|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; ((p
        <+ <eval-ancestor(
              p
            | <?node0 < !parent0 + !UnknownParent()>
            , all-parents0
            , global-cache0
            , rewrite-mode0
            )> <!<id>
                ; get-parent(|<all-parents>)
                ; not(NoParent)>
           ; not(EVAL_FAILED))
       <+ !EVAL_FAILED())


rules

  eval-init-100001(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; (aster-initialize-node(|<!all-parents0>, <!global-cache0>)
       <+ !EVAL_FAILED())

  eval-reinit-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; (eval-init(
       | <?node0 < !parent0 + !UnknownParent()>
       , all-parents0
       , global-cache0
       , rewrite-mode0
       )
       ; not(EVAL_FAILED)
       <+ !EVAL_FAILED())

  eval-ensure-init-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; (aster-init-node-ensure(|<!all-parents0>, <!global-cache0>)
       <+ !EVAL_FAILED())

  eval-uninit-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; (aster-remove-annos <+ !EVAL_FAILED())

  eval-uninit-lazy-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; (aster-remove-annos-from-leaves(|<!all-parents0>) <+ !EVAL_FAILED())

  eval-is-inited-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; (aster-is-initialized(|<!all-parents0>) <+ !EVAL_FAILED())


rules

  eval-all-parents-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; (all-parents <+ !EVAL_FAILED())

  eval-global-cache-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; (global-cache <+ !EVAL_FAILED())


rules

  eval-get-cached-100000(|parent0, all-parents0, global-cache0, rewrite-mode0, arg5) =
    ?node0
    ; where(?_)
    ; ((id < id + ?arg5) ; (id < id + ?sig))
    ; if !arg5
         ; (?sig <+ eq-ignore-annos(|sig)) then
        get-cached-attribute(|<!global-cache0>, <id>, sig)
        <+ !EVAL_FAILED()
      else
        !arg5 ; !sig < !EVAL_FAILED() + fail
      end

  eval-set-cached-100000(|parent0, all-parents0, global-cache0, rewrite-mode0, arg6, arg7) =
    ?node0
    ; where(?_)
    ; ((id < id + ?arg6) ; (id < id + ?sig))
    ; if !arg6
         ; (?sig <+ eq-ignore-annos(|sig)) then
        ((id < id + ?arg7) ; (id < id + ?value))
        ; if !arg7
             ; (?value <+ eq-ignore-annos(|value)) then
            set-cached-attribute(|<!global-cache0>, <id>, sig, value)
            <+ !EVAL_FAILED()
          else
            !arg7 ; !value < !EVAL_FAILED() + fail
          end
      else
        !arg6 ; !sig < !EVAL_FAILED() + fail
      end

  eval-is-cached-100000(|parent0, all-parents0, global-cache0, rewrite-mode0, arg8) =
    ?node0
    ; where(?_)
    ; ((id < id + ?arg8) ; (id < id + ?sig))
    ; if !arg8
         ; (?sig <+ eq-ignore-annos(|sig)) then
        where(get-cached-attribute(|<global-cache>, <id>, sig))
        <+ !EVAL_FAILED()
      else
        !arg8 ; !sig < !EVAL_FAILED() + fail
      end

  eval-set-cached-for-100000(|parent0, all-parents0, global-cache0, rewrite-mode0, arg9, arg10) =
    ?node0
    ; where(?_)
    ; ((id < id + ?arg9) ; (id < id + ?sig))
    ; if !arg9
         ; (?sig <+ eq-ignore-annos(|sig)) then
        ((id < id + ?arg10) ; (id < id + ?node))
        ; if !arg10
             ; (?node <+ eq-ignore-annos(|node)) then
            set-cached-attribute(|<!global-cache0>, node, sig, <id>)
            <+ !EVAL_FAILED()
          else
            !arg10 ; !node < !EVAL_FAILED() + fail
          end
      else
        !arg9 ; !sig < !EVAL_FAILED() + fail
      end

  eval-get-cached-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; get-cached-attribute(
         | <global-cache>
         , <id>
         , <!signature0 => Attribute(_, [], _)>
         )
       <+ !EVAL_FAILED())

  eval-is-cached-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; where(get-cached-attribute(
               | <!global-cache0>
               , <id>
               , <!signature0 => Attribute(_, [], _)>
               ))
       <+ !EVAL_FAILED())

  eval-set-cached-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0, arg11) =
    ?node0
    ; where(?_)
    ; ((id < id + ?arg11) ; (id < id + ?value))
    ; if !arg11
         ; (?value <+ eq-ignore-annos(|value)) then
        (id < id + ?decorated-value-cache0)
        ; set-cached-attribute(
          | <global-cache>
          , <id>
          , <!signature0 => Attribute(_, [], _)>
          , value
          )
        <+ !EVAL_FAILED()
      else
        !arg11 ; !value < !EVAL_FAILED() + fail
      end

  eval-set-cached-for-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0, arg12) =
    ?node0
    ; where(?_)
    ; ((id < id + ?arg12) ; (id < id + ?node))
    ; if !arg12
         ; (?node <+ eq-ignore-annos(|node)) then
        (id < id + ?decorated-value-cache0)
        ; set-cached-attribute(
          | <global-cache>
          , node
          , <!signature0 => Attribute(_, [], _)>
          , <id>
          )
        <+ !EVAL_FAILED()
      else
        !arg12 ; !node < !EVAL_FAILED() + fail
      end


rules

  eval-enable-warnings-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; (rules ( AsterWarningsDisabled :-
                 _ ) <+ !EVAL_FAILED())

  eval-disable-warnings-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; (rules ( AsterWarningsDisabled :
                 _ ) <+ !EVAL_FAILED())


rules

  eval-debug-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; (where(aster-remove-annos ; debug) <+ !EVAL_FAILED())

  eval-debug-100001(m|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; (where(aster-remove-annos ; debug(m))
       <+ !EVAL_FAILED())

  eval-path-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; ((<eval-path-list(
         | <?node0 < !parent0 + !UnknownParent()>
         , all-parents0
         , global-cache0
         , rewrite-mode0
         )> <id>
        ; not(EVAL_FAILED))
       ; reverse
       ; map(get-constructor ; as-string)
       ; separate-by(|".")
       ; concat-strings
       <+ !EVAL_FAILED())

  eval-path-and-node-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; (where(node := <to-tiny-string>)
       ; (eval-path(
          | <?node0 < !parent0 + !UnknownParent()>
          , all-parents0
          , global-cache0
          , rewrite-mode0
          )
          ; not(EVAL_FAILED))
       ; (?""
          < !node
          + <conc-strings> (<id>, ".", node))
       ; string-as-chars(
           truncate-path-lists
           ; if <gt> (<string-length>, 60) then
               reverse
               ; take(|60)
               ; reverse
               ; !['.', '.', '.'|<id>]
             end
         )
       <+ !EVAL_FAILED())

  eval-path-list-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; (((!<id>
         ; get-parent(|<!all-parents0>)
         ; not(NoParent))
        ; ![<id>|<<eval-path-list(
                   | <?node0 < !parent0 + !UnknownParent()>
                   , all-parents0
                   , global-cache0
                   , rewrite-mode0
                   )> <id>
                  ; not(EVAL_FAILED)>]
        <+ ![])
       <+ !EVAL_FAILED())


rules


rules

  eval-uncached-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; (if ?node0 then
            !decorated-value-cache0 <+ a => decorated-value-cache0
          else
            a
          end
          ; not(EVAL_FAILED))
       ; eval-ensure-init(
         | <?node0 < !parent0 + !UnknownParent()>
         , all-parents0
         , global-cache0
         , rewrite-mode0
         )
       ; not(EVAL_FAILED)
       <+ !EVAL_FAILED())

  eval-uninit-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; t := <id>
       ; if {:
              let cached0 =
                    eval-get-cached-decorator0(
                      cached0
                    , if ?node0 then
                        !decorated-value-cache0 <+ a => decorated-value-cache0
                      else
                        a
                      end
                    | <?node0 < !parent0 + !UnknownParent()>
                    , all-parents0
                    , global-cache0
                    , rewrite-mode0
                    , signature0
                    )
                    ; not(EVAL_FAILED)
              in
                !<id> ; cached0
              end
            } => cached then
           !cached
         else
           (if ?node0 then
              !decorated-value-cache0 <+ a => decorated-value-cache0
            else
              a
            end
            ; not(EVAL_FAILED)
            <+ !EVAL_FAILED())
           ; (<eval-uninit-lazy(
               | <?node0 < !parent0 + !UnknownParent()>
               , all-parents0
               , global-cache0
               , rewrite-mode0
               )> <id>
              ; not(EVAL_FAILED))
           ; {:
               let cached0 =
                     <eval-set-cached-for-decorator0(
                        cached0
                      , if ?node0 then
                          !decorated-value-cache0 <+ a => decorated-value-cache0
                        else
                          a
                        end
                      | <?node0 < !parent0 + !UnknownParent()>
                      , all-parents0
                      , global-cache0
                      , rewrite-mode0
                      , signature0
                      , t
                      )> <id>
                     ; not(EVAL_FAILED)
               in
                 !t ; cached0
               end
             }
         end
       <+ !EVAL_FAILED())

  eval-cached-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0, arg13) =
    ?node0
    ; where(?_)
    ; ((id < id + ?arg13) ; (id < id + ?sig))
    ; if !arg13
         ; (?sig <+ eq-ignore-annos(|sig)) then
        (id < id + ?decorated-value-cache0)
        ; t := <id>
        ; if (eval-get-cached(
              | <?node0 < !parent0 + !UnknownParent()>
              , all-parents0
              , global-cache0
              , rewrite-mode0
              , sig
              )
              ; not(EVAL_FAILED)) => cached then
            !cached
          else
            (if ?node0 then
               !decorated-value-cache0 <+ a => decorated-value-cache0
             else
               a
             end
             ; not(EVAL_FAILED)
             <+ !EVAL_FAILED())
            ; (<eval-ensure-init(
                | <?node0 < !parent0 + !UnknownParent()>
                , all-parents0
                , global-cache0
                , rewrite-mode0
                )> <id>
               ; not(EVAL_FAILED))
            ; <eval-set-cached-for(
               | <?node0 < !parent0 + !UnknownParent()>
               , all-parents0
               , global-cache0
               , rewrite-mode0
               , sig
               , t
               )> <id>
            ; not(EVAL_FAILED)
          end
        <+ !EVAL_FAILED()
      else
        !arg13 ; !sig < !EVAL_FAILED() + fail
      end

  eval-cached-decorator0-100001(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; {:
           let cached0 =
                 <eval-cached-decorator0(
                    cached0
                  , if ?node0 then
                      !decorated-value-cache0 <+ a => decorated-value-cache0
                    else
                      a
                    end
                  | <?node0 < !parent0 + !UnknownParent()>
                  , all-parents0
                  , global-cache0
                  , rewrite-mode0
                  , Anonymous()
                  , <!signature0 => Attribute(_, [], _)>
                  )> <id>
                 ; not(EVAL_FAILED)
           in
             !<id> ; cached0
           end
         }
       <+ !EVAL_FAILED())

  eval-strip-arg-values-Attribute-100010(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?Attribute(name, sargs, targs))
    ; where(id)
    ; (!Attribute(
          name
        , <length> sargs
        , <length> targs
        )
       <+ !EVAL_FAILED())


rules

  eval-context-free-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; (eval-uninit-lazy(
          | <?node0 < !parent0 + !UnknownParent()>
          , all-parents0
          , global-cache0
          , rewrite-mode0
          )
          ; not(EVAL_FAILED))
       ; if ?node0 then
           !decorated-value-cache0 <+ a => decorated-value-cache0
         else
           a
         end
       ; not(EVAL_FAILED)
       <+ !EVAL_FAILED())

  eval-context-free-args-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; if ?node0 then
           !decorated-value-cache0 <+ a => decorated-value-cache0
         else
           a
         end
       ; not(EVAL_FAILED)
       <+ !EVAL_FAILED())


signature
  constructors
    EVAL_CIRCULAR : Term


rules

  eval-if-circular-decorator0-100000(cached0, a, default|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?t)
    ; ((id < id + ?decorated-value-cache0)
       ; set-cached-attribute(
         | <eval-global-cache(
            | <?node0 < !parent0 + !UnknownParent()>
            , all-parents0
            , global-cache0
            , rewrite-mode0
            )
            ; not(EVAL_FAILED)>
         , <id>
         , <!signature0 => Attribute(_, [], _)>
         , EVAL_CIRCULAR()
         )
       ; (if ?node0 then
            !decorated-value-cache0 <+ a => decorated-value-cache0
          else
            a
          end
          ; not(EVAL_FAILED))
       ; if EVAL_CIRCULAR then
           <default> t <+ !EVAL_FAILED()
         end
       <+ !EVAL_FAILED())


rules

  eval-collect-bagof-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; collect-all-lists(
           if ?node0 then
             !decorated-value-cache0 <+ a => decorated-value-cache0
           else
             a
           end
           ; not(EVAL_FAILED)
         , conc
         )
       <+ !EVAL_FAILED())

  eval-collect-bagof-decorator0-100001(cached0, a, un|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; collect-all-lists(
           if ?node0 then
             !decorated-value-cache0 <+ a => decorated-value-cache0
           else
             a
           end
           ; not(EVAL_FAILED)
         , un
         )
       <+ !EVAL_FAILED())

  eval-collect-all-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; collect-all(
           if ?node0 then
             !decorated-value-cache0 <+ a => decorated-value-cache0
           else
             a
           end
           ; not(EVAL_FAILED)
         , conc
         )
       <+ !EVAL_FAILED())

  eval-make-set-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; (if ?node0 then
            !decorated-value-cache0 <+ a => decorated-value-cache0
          else
            a
          end
          ; not(EVAL_FAILED))
       ; make-set
       <+ !EVAL_FAILED())

  eval-map-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; map(
           if ?node0 then
             !decorated-value-cache0 <+ a => decorated-value-cache0
           else
             a
           end
           ; not(EVAL_FAILED)
         )
       <+ !EVAL_FAILED())

  eval-contributes-to-decorator0-100000(cached0, a, targets|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; {:
           let cached0 =
                 <eval-contributes-to-decorator0(
                    cached0
                  , if ?node0 then
                      !decorated-value-cache0 <+ a => decorated-value-cache0
                    else
                      a
                    end
                  , targets
                  , id
                  | <?node0 < !parent0 + !UnknownParent()>
                  , all-parents0
                  , global-cache0
                  , rewrite-mode0
                  , signature0
                  )> <id>
                 ; not(EVAL_FAILED)
           in
             !<id> ; cached0
           end
         }
       <+ !EVAL_FAILED())

  eval-contributes-to-decorator0-100001(cached0, a, targets, target-to-key|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; node := <id>
       ; if not(<CompletedSurvey> <!signature0 => Attribute(_, [], _)>) then
           <contributes-to-survey(
              targets
            , target-to-key
            | <!signature0 => Attribute(_, [], _)>
            )> <<eval-root(
                 | <?node0 < !parent0 + !UnknownParent()>
                 , all-parents0
                 , global-cache0
                 , rewrite-mode0
                 )> <id>
                ; not(EVAL_FAILED)>
         end
       ; <bagof-Contributions> ( <!signature0 => Attribute(_, [], _)>
                               , <target-to-key> node
                               )
       ; filter(
           if ?node0 then
             !decorated-value-cache0 <+ a => decorated-value-cache0
           else
             a
           end
           ; not(EVAL_FAILED)
         )
       <+ !EVAL_FAILED())


strategies
  contributes-to-survey(targets, target-to-key|sig) =
    rules ( CompletedSurvey :
              sig )
    ; topdown-consnil(
        where(try(
                {contribution:
                  ?contribution
                  ; targets
                  ; (is-list <+ ![<id>])
                  ; map(
                      {target:
                        target-to-key => target
                        ; rules (
                            Contributions :+
                              (sig, target) -> contribution
                          )
                      }
                    )
                }
              ))
      )

  collect-all-lists(s, un) =
    rec x (
      <un> ( <s>
           , <crush(![], un, x)>
           )
      <+ crush(![], un, x)
    )


rules

  eval-lookup-ordered-decorator0-100000(cached0, fetch-decl, is-scope|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; (if ?node0 then
            !decorated-value-cache0 <+ fetch-decl => decorated-value-cache0
          else
            fetch-decl
          end
          ; not(EVAL_FAILED)
          <+ eval-prev-sibling(
               lookup-outside-scopes(
                 is-scope
               , if ?node0 then
                   !decorated-value-cache0 <+ fetch-decl => decorated-value-cache0
                 else
                   fetch-decl
                 end
                 ; not(EVAL_FAILED)
               )
             | <?node0 < !parent0 + !UnknownParent()>
             , all-parents0
             , global-cache0
             , rewrite-mode0
             )
             ; not(EVAL_FAILED))
       <+ !EVAL_FAILED())

  eval-lookup-unordered-decorator0-100000(cached0, fetch-decl, is-scope|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; (eval-all-decls(
            where(?node0
                  < !decorated-value-cache0 <+ fetch-decl => decorated-value-cache0
                  + fetch-decl)
          , is-scope
            + eval-is-root(
              | <?node0 < !parent0 + !UnknownParent()>
              , all-parents0
              , global-cache0
              , rewrite-mode0
              )
              ; not(EVAL_FAILED)
          | <?node0 < !parent0 + !UnknownParent()>
          , all-parents0
          , global-cache0
          , rewrite-mode0
          , <!signature0 => Attribute(_, [], _)>
          )
          ; not(EVAL_FAILED))
       ; getfirst(
           if ?node0 then
             !decorated-value-cache0 <+ fetch-decl => decorated-value-cache0
           else
             fetch-decl
           end
           ; not(EVAL_FAILED)
         )
       <+ !EVAL_FAILED())

  eval-lookup-global-decorator0-100000(cached0, fetch-decl|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; {:
           let cached0 =
                 <eval-lookup-unordered-decorator0(
                    cached0
                  , if ?node0 then
                      !decorated-value-cache0 <+ fetch-decl => decorated-value-cache0
                    else
                      fetch-decl
                    end
                  , fail
                  | <?node0 < !parent0 + !UnknownParent()>
                  , all-parents0
                  , global-cache0
                  , rewrite-mode0
                  , signature0
                  )> <id>
                 ; not(EVAL_FAILED)
           in
             !<id> ; cached0
           end
         }
       <+ !EVAL_FAILED())


rules

  eval-lookup-multiple-ordered-decorator0-100000(cached0, fetch-decl, is-scope|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; (where(results := <<eval-prev-sibling(
                               lookup-outside-scopes(
                                 is-scope
                               , if ?node0 then
                                   !decorated-value-cache0 <+ fetch-decl => decorated-value-cache0
                                 else
                                   fetch-decl
                                 end
                                 ; not(EVAL_FAILED)
                               )
                             | <?node0 < !parent0 + !UnknownParent()>
                             , all-parents0
                             , global-cache0
                             , rewrite-mode0
                             )> <id>
                            ; not(EVAL_FAILED)>)
          ; try(
              ![<if ?node0 then
                   !decorated-value-cache0 <+ fetch-decl => decorated-value-cache0
                 else
                   fetch-decl
                 end
                 ; not(EVAL_FAILED)>|results]
            )
          <+ ![ <if ?node0 then
                   !decorated-value-cache0 <+ fetch-decl => decorated-value-cache0
                 else
                   fetch-decl
                 end
                 ; not(EVAL_FAILED)>
              ])
       <+ !EVAL_FAILED())

  eval-lookup-multiple-unordered-decorator0-100000(cached0, fetch-decl, is-scope|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; (eval-all-decls(
            where(?node0
                  < !decorated-value-cache0 <+ fetch-decl => decorated-value-cache0
                  + fetch-decl)
          , is-scope
            + eval-is-root(
              | <?node0 < !parent0 + !UnknownParent()>
              , all-parents0
              , global-cache0
              , rewrite-mode0
              )
              ; not(EVAL_FAILED)
          | <?node0 < !parent0 + !UnknownParent()>
          , all-parents0
          , global-cache0
          , rewrite-mode0
          , <!signature0 => Attribute(_, [], _)>
          )
          ; not(EVAL_FAILED))
       ; filter(
           if ?node0 then
             !decorated-value-cache0 <+ fetch-decl => decorated-value-cache0
           else
             fetch-decl
           end
           ; not(EVAL_FAILED)
         )
       <+ !EVAL_FAILED())

  eval-lookup-multiple-global-decorator0-100000(cached0, fetch-decl|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; {:
           let cached0 =
                 <eval-lookup-multiple-unordered-decorator0(
                    cached0
                  , if ?node0 then
                      !decorated-value-cache0 <+ fetch-decl => decorated-value-cache0
                    else
                      fetch-decl
                    end
                  , fail
                  | <?node0 < !parent0 + !UnknownParent()>
                  , all-parents0
                  , global-cache0
                  , rewrite-mode0
                  , signature0
                  )> <id>
                 ; not(EVAL_FAILED)
           in
             !<id> ; cached0
           end
         }
       <+ !EVAL_FAILED())


rules

  eval-all-decls-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; where(try(
                 if ?node0 then
                   !decorated-value-cache0 <+ a => decorated-value-cache0
                 else
                   a
                 end
                 ; not(EVAL_FAILED)
               ))
       ; eval-all-decls(
           fatal-err(
           | [ "Internal error in attribute '"
             , <!signature0 => Attribute(<id>, _, _)>
             , "': "
             , "'all-decls' only works for attributes decorated with lookup-unordered or derived decorators"
             ]
           )
         , get-cached-attribute(
           | <<eval-global-cache(
               | <?node0 < !parent0 + !UnknownParent()>
               , all-parents0
               , global-cache0
               , rewrite-mode0
               )> <id>
              ; not(EVAL_FAILED)>
           , <id>
           , <<eval-strip-arg-values(
               | <?node0 < !parent0 + !UnknownParent()>
               , all-parents0
               , global-cache0
               , rewrite-mode0
               )> <!signature0 => Attribute(_, [], _)>
              ; not(EVAL_FAILED)>
           )
         | <?node0 < !parent0 + !UnknownParent()>
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , <!signature0 => Attribute(_, [], _)>
         )
       ; not(EVAL_FAILED)
       <+ !EVAL_FAILED())

  eval-all-decls-100000(fetch-decl-defined, is-scope|parent0, all-parents0, global-cache0, rewrite-mode0, arg14) =
    ?node0
    ; where(?_)
    ; ((id < id + ?arg14) ; (id < id + ?lookup-signature))
    ; if !arg14
         ; (?lookup-signature <+ eq-ignore-annos(|lookup-signature)) then
        collect-all-outside-scopes(fetch-decl-defined, is-scope)
        <+ !EVAL_FAILED()
      else
        !arg14 ; !lookup-signature < !EVAL_FAILED() + fail
      end


strategies
  lookup-outside-scopes(fetch-decl, is-scope) =
    fetch-decl
    <+ not(is-scope)
       ; (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
       ; !<id>
       ; aster-init-node-ensure(
           aster-initialize-node-warning(|all-parents0, "child_1_0")
         | <!all-parents0 <+ all-parents => all-parents0>
         , <!global-cache0 <+ global-cache => global-cache0>
         )
       ; eval-child(
           lookup-outside-scopes(fetch-decl, is-scope)
         | UnknownParent()
         , all-parents0
         , global-cache0
         , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
         )
       ; not(EVAL_FAILED)

  collect-all-outside-scopes(fetch-decl-defined, is-scope) =
    ?t
    ; ((id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
       ; !<id>
       ; aster-init-node-ensure(
           aster-initialize-node-warning(|all-parents0, "children")
         | <!all-parents0 <+ all-parents => all-parents0>
         , <!global-cache0 <+ global-cache => global-cache0>
         )
       ; eval-children(
         | UnknownParent()
         , all-parents0
         , global-cache0
         , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
         )
       ; not(EVAL_FAILED))
    ; filter(
        if is-scope then
          fetch-decl-defined ; ![<id>]
        else
          collect-all-outside-scopes(fetch-decl-defined, is-scope)
        end
      )
    ; concat
    ; try(
        ![<fetch-decl-defined> t|<id>]
      )


rules

  eval-before-decorator0-100000(cached0, a, s|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; s
       ; if ?node0 then
           !decorated-value-cache0 <+ a => decorated-value-cache0
         else
           a
         end
       ; not(EVAL_FAILED)
       <+ !EVAL_FAILED())

  eval-after-decorator0-100000(cached0, a, s|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; (if ?node0 then
            !decorated-value-cache0 <+ a => decorated-value-cache0
          else
            a
          end
          ; not(EVAL_FAILED))
       ; s
       <+ !EVAL_FAILED())

  eval-in-decorator0-100000(cached0, a, s : t * s -> s|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; s(
           if ?node0 then
             !decorated-value-cache0 <+ a => decorated-value-cache0
           else
             a
           end
           ; not(EVAL_FAILED)
         )
       <+ !EVAL_FAILED())

  eval-test-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; where(if ?node0 then
                 !decorated-value-cache0 <+ a => decorated-value-cache0
               else
                 a
               end
               ; not(EVAL_FAILED))
       <+ !EVAL_FAILED())


rules

  eval-up-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; if where(?node0
                  < !decorated-value-cache0 <+ a => decorated-value-cache0
                  + a) then
           if ?node0 then
             !decorated-value-cache0 <+ a => decorated-value-cache0
           else
             a
           end
           ; not(EVAL_FAILED)
         else
           eval-child(
             cached0
           | <?node0 < !parent0 + !UnknownParent()>
           , all-parents0
           , global-cache0
           , rewrite-mode0
           )
           ; not(EVAL_FAILED)
         end
       <+ !EVAL_FAILED())

  eval-down-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; if where(?node0
                  < !decorated-value-cache0 <+ a => decorated-value-cache0
                  + a) then
           if ?node0 then
             !decorated-value-cache0 <+ a => decorated-value-cache0
           else
             a
           end
           ; not(EVAL_FAILED)
         else
           (!<id>
            ; get-parent(|<all-parents>)
            ; not(NoParent))
           ; cached0
         end
       <+ !EVAL_FAILED())

  eval-at-root-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; if eval-is-root(
            | <?node0 < !parent0 + !UnknownParent()>
            , all-parents0
            , global-cache0
            , rewrite-mode0
            )
            ; not(EVAL_FAILED) then
           if ?node0 then
             !decorated-value-cache0 <+ a => decorated-value-cache0
           else
             a
           end
           ; not(EVAL_FAILED)
         else
           <cached0> <!<id>
                      ; get-parent(|<all-parents>)
                      ; not(NoParent)>
         end
       <+ !EVAL_FAILED())

  eval-default-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0, arg15) =
    ?node0
    ; where(?_)
    ; ((id < id + ?arg15) ; (id < id + ?value))
    ; if !arg15
         ; (?value <+ eq-ignore-annos(|value)) then
        (id < id + ?decorated-value-cache0)
        ; (if ?node0 then
             !decorated-value-cache0 <+ a => decorated-value-cache0
           else
             a
           end
           ; not(EVAL_FAILED)
           <+ !value)
        <+ !EVAL_FAILED()
      else
        !arg15 ; !value < !EVAL_FAILED() + fail
      end

  eval-default-decorator0-100001(cached0, a, value|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; (if ?node0 then
            !decorated-value-cache0 <+ a => decorated-value-cache0
          else
            a
          end
          ; not(EVAL_FAILED)
          <+ value)
       <+ !EVAL_FAILED())


rules

  eval-rewrite-td-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; if where(?node0
                  < !decorated-value-cache0 <+ a => decorated-value-cache0
                  + a) then
           ?before
           ; (if ?node0 then
                !decorated-value-cache0 <+ a => decorated-value-cache0
              else
                a
              end
              ; not(EVAL_FAILED))
           ; (?before
              <+ eval-ensure-init(
                 | <?node0 < !parent0 + !UnknownParent()>
                 , all-parents0
                 , global-cache0
                 , rewrite-mode0
                 )
                 ; not(EVAL_FAILED))
         end
       ; eval-all(
           cached0
         | <?node0 < !parent0 + !UnknownParent()>
         , all-parents0
         , global-cache0
         , rewrite-mode0
         )
       ; not(EVAL_FAILED)
       <+ !EVAL_FAILED())

  eval-rewrite-bu-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; (eval-all-inline(
            cached0
          | <?node0 < !parent0 + !UnknownParent()>
          , all-parents0
          , global-cache0
          , rewrite-mode0
          )
          ; not(EVAL_FAILED))
       ; if where(?node0
                  < !decorated-value-cache0 <+ a => decorated-value-cache0
                  + a) then
           if ?node0 then
             !decorated-value-cache0 <+ a => decorated-value-cache0
           else
             a
           end
           ; not(EVAL_FAILED)
         end
       <+ !EVAL_FAILED())


rules

  eval-assert-input-decorator0-100000(cached0, a, condition|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; {:
           let cached0 =
                 <eval-assert-input-decorator0(
                    cached0
                  , if ?node0 then
                      !decorated-value-cache0 <+ a => decorated-value-cache0
                    else
                      a
                    end
                  , condition
                  | <?node0 < !parent0 + !UnknownParent()>
                  , all-parents0
                  , global-cache0
                  , rewrite-mode0
                  , signature0
                  , "Assertion failed"
                  )> <id>
                 ; not(EVAL_FAILED)
           in
             !<id> ; cached0
           end
         }
       <+ !EVAL_FAILED())

  eval-assert-input-decorator0-100001(cached0, a, condition|parent0, all-parents0, global-cache0, rewrite-mode0, signature0, arg16) =
    ?node0
    ; where(?_)
    ; ((id < id + ?arg16) ; (id < id + ?message))
    ; if !arg16
         ; (?message <+ eq-ignore-annos(|message)) then
        (id < id + ?decorated-value-cache0)
        ; if not(condition) then
            log(
            | Critical()
            , [ message
              , " at attribute '"
              , <!signature0 => Attribute(<id>, _, _)>
              , "' for: "
              ]
            , <eval-path(
               | <?node0 < !parent0 + !UnknownParent()>
               , all-parents0
               , global-cache0
               , rewrite-mode0
               )
               ; not(EVAL_FAILED)>
            )
            ; print-stacktrace
            ; <exit> 1
          end
        ; if ?node0 then
            !decorated-value-cache0 <+ a => decorated-value-cache0
          else
            a
          end
        ; not(EVAL_FAILED)
        <+ !EVAL_FAILED()
      else
        !arg16 ; !message < !EVAL_FAILED() + fail
      end

  eval-assert-output-decorator0-100000(cached0, a, condition|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; {:
           let cached0 =
                 <eval-assert-output-decorator0(
                    cached0
                  , if ?node0 then
                      !decorated-value-cache0 <+ a => decorated-value-cache0
                    else
                      a
                    end
                  , condition
                  | <?node0 < !parent0 + !UnknownParent()>
                  , all-parents0
                  , global-cache0
                  , rewrite-mode0
                  , signature0
                  , "Assertion failed"
                  )> <id>
                 ; not(EVAL_FAILED)
           in
             !<id> ; cached0
           end
         }
       <+ !EVAL_FAILED())

  eval-assert-output-decorator0-100001(cached0, a, condition|parent0, all-parents0, global-cache0, rewrite-mode0, signature0, arg17) =
    ?node0
    ; where(?input)
    ; ((id < id + ?arg17) ; (id < id + ?message))
    ; if !arg17
         ; (?message <+ eq-ignore-annos(|message)) then
        (id < id + ?decorated-value-cache0)
        ; (if ?node0 then
             !decorated-value-cache0 <+ a => decorated-value-cache0
           else
             a
           end
           ; not(EVAL_FAILED))
        ; if not(condition) then
            where(prim("SSL_stacktrace_get_all_frame_names") => trace)
            ; log(
              | Critical()
              , [ message
                , " at attribute '"
                , <!signature0 => Attribute(<id>, _, _)>
                , "' for "
                , <<eval-path(
                    | <?node0 < !parent0 + !UnknownParent()>
                    , all-parents0
                    , global-cache0
                    , rewrite-mode0
                    )> input
                   ; not(EVAL_FAILED)>
                , ":"
                ]
              , <<eval-uninit(
                  | <?node0 < !parent0 + !UnknownParent()>
                  , all-parents0
                  , global-cache0
                  , rewrite-mode0
                  )> <id>
                 ; not(EVAL_FAILED)>
              )
            ; <report-failure> trace
          end
        <+ !EVAL_FAILED()
      else
        !arg17 ; !message < !EVAL_FAILED() + fail
      end

  eval-fail-fatal-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; {:
           let cached0 =
                 <eval-assert-input-decorator0(
                    cached0
                  , if ?node0 then
                      !decorated-value-cache0 <+ a => decorated-value-cache0
                    else
                      a
                    end
                  , where(?node0
                          < !decorated-value-cache0 <+ a => decorated-value-cache0
                          + a)
                  | <?node0 < !parent0 + !UnknownParent()>
                  , all-parents0
                  , global-cache0
                  , rewrite-mode0
                  , signature0
                  , "No attribute equation matches for input"
                  )> <id>
                 ; not(EVAL_FAILED)
           in
             !<id> ; cached0
           end
         }
       <+ !EVAL_FAILED())


rules

  eval-plain-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; if ?node0 then
           !decorated-value-cache0 <+ a => decorated-value-cache0
         else
           a
         end
       ; not(EVAL_FAILED)
       <+ !EVAL_FAILED())

  eval-disable-warnings-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; if ?node0 then
           !decorated-value-cache0 <+ a => decorated-value-cache0
         else
           a
         end
       ; not(EVAL_FAILED)
       <+ !EVAL_FAILED())

  eval-disable-trace-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; if ?node0 then
           !decorated-value-cache0 <+ a => decorated-value-cache0
         else
           a
         end
       ; not(EVAL_FAILED)
       <+ !EVAL_FAILED())

  eval-alter-signature-decorator0-100000(cached0, a, alter|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; if ?node0 then
           !decorated-value-cache0 <+ a => decorated-value-cache0
         else
           a
         end
       ; not(EVAL_FAILED)
       <+ !EVAL_FAILED())

  eval-bagof-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; if ?node0 then
           !decorated-value-cache0 <+ a => decorated-value-cache0
         else
           a
         end
       ; not(EVAL_FAILED)
       <+ !EVAL_FAILED())


rules

  eval-trace-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?t)
    ; (id < id + ?decorated-value-cache0)
    ; where(with'(
              !signature0 => Attribute(_, [], _) => Attribute(
                                                      x
                                                    , []
                                                    , args@[_|_]
                                                    )
              ; name := <conc-strings> ( x
                                       , "_0_"
                                       , <length ; as-string> args
                                       )
              <+ name := <!signature0 => Attribute(<id>, _, _)>
            )
            ; with'(
                if <aster-is-initialized(
                    | <<eval-all-parents(
                        | <?node0 < !parent0 + !UnknownParent()>
                        , all-parents0
                        , global-cache0
                        , rewrite-mode0
                        )> <id>
                       ; not(EVAL_FAILED)>
                    )> t then
                  say(
                    <conc-strings> ( "  [trace] "
                                   , name
                                   , " @ "
                                   , <<eval-path-and-node(
                                       | <?node0 < !parent0 + !UnknownParent()>
                                       , all-parents0
                                       , global-cache0
                                       , rewrite-mode0
                                       )> t
                                      ; not(EVAL_FAILED)>
                                   )
                  )
                else
                  say(
                    <conc-strings> ("  [trace] ", name, " @ ?.", <to-tiny-string> t)
                  )
                end
              ))
    ; (<(if ?node0 then
           !decorated-value-cache0 <+ a => decorated-value-cache0
         else
           a
         end
         ; not(EVAL_FAILED))> t
       <+ !EVAL_FAILED())


signature
  constructors
    CIRCULAR_FINISHED : Term -> Term
    CIRCULAR_BUSY     : Term -> Term
    EVAL_CIRCULAR     : Term


rules

  eval-circular-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0, arg18) =
    ?node0
    ; where(?_)
    ; ((id < id + ?arg18) ; (id < id + ?initial-value))
    ; if !arg18
         ; (?initial-value <+ eq-ignore-annos(|initial-value)) then
        (id < id + ?decorated-value-cache0)
        ; node := <id>
        ; stored := <{:
                       let cached0 =
                             eval-get-cached-decorator0(
                               cached0
                             , if ?node0 then
                                 !decorated-value-cache0 <+ a => decorated-value-cache0
                               else
                                 a
                               end
                             | <?node0 < !parent0 + !UnknownParent()>
                             , all-parents0
                             , global-cache0
                             , rewrite-mode0
                             , signature0
                             )
                             ; not(EVAL_FAILED)
                       in
                         !<id> ; cached0
                       end
                     }
                     <+ <eval-ensure-init(
                         | <?node0 < !parent0 + !UnknownParent()>
                         , all-parents0
                         , global-cache0
                         , rewrite-mode0
                         )> initial-value
                        ; not(EVAL_FAILED)
                     <+ !EVAL_FAILED()>
        ; if ?CIRCULAR_FINISHED(value) + ?CIRCULAR_BUSY(value) then
            !value
          else
            <circular-fixpoint(
               if ?node0 then
                 !decorated-value-cache0 <+ a => decorated-value-cache0
               else
                 a
               end
               ; not(EVAL_FAILED)
             | <!signature0 => Attribute(_, [], _)>
             , stored
             )> node
          end
        ; not(EVAL_FAILED)
        <+ !EVAL_FAILED()
      else
        !arg18 ; !initial-value < !EVAL_FAILED() + fail
      end

  eval-non-circular-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; {:
           let cached0 =
                 eval-set-cached-decorator0(
                   cached0
                 , if ?node0 then
                     !decorated-value-cache0 <+ a => decorated-value-cache0
                   else
                     a
                   end
                 | <?node0 < !parent0 + !UnknownParent()>
                 , all-parents0
                 , global-cache0
                 , rewrite-mode0
                 , signature0
                 , EVAL_FAILED()
                 )
                 ; not(EVAL_FAILED)
           in
             !<id> ; cached0
           end
         }
       ; if ?node0 then
           !decorated-value-cache0 <+ a => decorated-value-cache0
         else
           a
         end
       ; not(EVAL_FAILED)
       <+ !EVAL_FAILED())

  eval-if-circular-decorator0-100001(cached0, a, default|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; t := <id>
       ; set-cached-attribute(
         | <<eval-global-cache(
             | <?node0 < !parent0 + !UnknownParent()>
             , all-parents0
             , global-cache0
             , rewrite-mode0
             )> <id>
            ; not(EVAL_FAILED)>
         , <id>
         , <!signature0 => Attribute(_, [], _)>
         , EVAL_CIRCULAR()
         )
       ; (if ?node0 then
            !decorated-value-cache0 <+ a => decorated-value-cache0
          else
            a
          end
          ; not(EVAL_FAILED))
       ; if EVAL_CIRCULAR then
           <default> t <+ !EVAL_FAILED()
         end
       <+ !EVAL_FAILED())

  eval-non-circular-decorator0-100001(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0, arg19) =
    ?node0
    ; where(?_)
    ; ((id < id + ?arg19) ; (id < id + ?t))
    ; if !arg19
         ; (?t <+ eq-ignore-annos(|t)) then
        (id < id + ?decorated-value-cache0)
        ; {:
            let cached0 =
                  eval-set-cached-decorator0(
                    cached0
                  , if ?node0 then
                      !decorated-value-cache0 <+ a => decorated-value-cache0
                    else
                      a
                    end
                  | <?node0 < !parent0 + !UnknownParent()>
                  , all-parents0
                  , global-cache0
                  , rewrite-mode0
                  , signature0
                  , t
                  )
                  ; not(EVAL_FAILED)
            in
              !<id> ; cached0
            end
          }
        ; if ?node0 then
            !decorated-value-cache0 <+ a => decorated-value-cache0
          else
            a
          end
        ; not(EVAL_FAILED)
        <+ !EVAL_FAILED()
      else
        !arg19 ; !t < !EVAL_FAILED() + fail
      end


strategies
  recompute-circular-def(s|sig, old-value) =
    with(?node
         ; global-cache := <global-cache>
         ; (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
         ; !node
         ; aster-init-node-ensure(
             aster-initialize-node-warning(|all-parents0, "set-cached_0_2")
           | <!all-parents0 <+ all-parents => all-parents0>
           , <!global-cache0 <+ global-cache => global-cache0>
           )
         ; eval-set-cached(
           | UnknownParent()
           , all-parents0
           , global-cache0
           , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
           , sig
           , CIRCULAR_BUSY(old-value)
           )
         ; not(EVAL_FAILED))
    ; (s
       ; (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
       ; !<id>
       ; aster-init-node-ensure(
           id
         | <!all-parents0 <+ all-parents => all-parents0>
         , <!global-cache0 <+ global-cache => global-cache0>
         )
       ; eval-ensure-init(
         | UnknownParent()
         , all-parents0
         , global-cache0
         , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
         )
       ; not(EVAL_FAILED)
       <+ !EVAL_FAILED())
    ; if eq-ignore-annos(|old-value) then
        circular-add-participant(|global-cache, node, sig, old-value)
        ; with((id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
               ; !node
               ; aster-init-node-ensure(
                   aster-initialize-node-warning(|all-parents0, "set-cached_0_2")
                 | <!all-parents0 <+ all-parents => all-parents0>
                 , <!global-cache0 <+ global-cache => global-cache0>
                 )
               ; eval-set-cached(
                 | UnknownParent()
                 , all-parents0
                 , global-cache0
                 , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
                 , sig
                 , old-value
                 )
               ; not(EVAL_FAILED))
      else
        circular-set-has-changed(|global-cache)
        ; with(?result
               ; (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
               ; !node
               ; aster-init-node-ensure(
                   aster-initialize-node-warning(|all-parents0, "set-cached_0_2")
                 | <!all-parents0 <+ all-parents => all-parents0>
                 , <!global-cache0 <+ global-cache => global-cache0>
                 )
               ; eval-set-cached(
                 | UnknownParent()
                 , all-parents0
                 , global-cache0
                 , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
                 , sig
                 , result
                 )
               ; not(EVAL_FAILED))
      end

  circular-fixpoint(s|sig, old-value) =
    with(?node ; global-cache := <global-cache>)
    ; if is-fixpoint-running(|global-cache) then
        recompute-circular-def(s|sig, old-value)
      else
        set-fixpoint-running(|global-cache)
        ; recompute-circular-def(s|sig, old-value)
        ; while(
            circular-get-remove-has-changed(|global-cache)
          , {old-value:
              ?old-value
              ; circular-reset-participants(|global-cache)
              ; <recompute-circular-def(s|sig, old-value)> node
            }
          )
        ; circular-mark-participants-finished(|global-cache)
        ; unset-fixpoint-running(|global-cache)
      end


strategies
  is-fixpoint-running(|global-cache) =
    hashtable-get(|global-cache, "$circular-lock")

  set-fixpoint-running(|global-cache) =
    hashtable-put(|global-cache, "$circular-lock", ())

  unset-fixpoint-running(|global-cache) =
    hashtable-remove(|global-cache, "$circular-lock")


strategies
  circular-add-participant(|global-cache, node, sig, value) =
    with((hashtable-get(|global-cache, "$circular-unchanged")
          <+ new-iset
             ; hashtable-put(|global-cache, "$circular-unchanged", <new-iset>))
         ; iset-add(|(node, sig, value)))

  circular-mark-participants-finished(|global-cache) =
    with(hashtable-get(|global-cache, "$circular-unchanged") => set
         ; iset-elements
         ; list-loop(
             {node, sig, value:
               ?(node, sig, value)
               ; (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
               ; !node
               ; aster-init-node-ensure(
                   aster-initialize-node-warning(|all-parents0, "set-cached_0_2")
                 | <!all-parents0 <+ all-parents => all-parents0>
                 , <!global-cache0 <+ global-cache => global-cache0>
                 )
               ; eval-set-cached(
                 | UnknownParent()
                 , all-parents0
                 , global-cache0
                 , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
                 , sig
                 , CIRCULAR_FINISHED(value)
                 )
               ; not(EVAL_FAILED)
             }
           )
         ; <iset-clear> set)

  circular-reset-participants(|global-cache) =
    with(try(
           hashtable-get(|global-cache, "$circular-unchanged") ; iset-clear
         ))


strategies
  circular-set-has-changed(|global-cache) =
    hashtable-put(|global-cache, "$circular-changed", ())

  circular-get-remove-has-changed(|global-cache) =
    where(hashtable-get(|global-cache, "$circular-changed"))
    ; hashtable-remove(|global-cache, "$circular-changed")


signature
  constructors
    List : Term -> List


strategies
  String =
    is-string

  Int =
    is-int

  Real =
    is-real

  List =
    is-list

  Set =
    (id < id + ?all-parents0 ; ?global-cache0 ; ?rewrite-mode0)
    ; !<id>
    ; aster-init-node-ensure(
        id
      | <!all-parents0 <+ all-parents => all-parents0>
      , <!global-cache0 <+ global-cache => global-cache0>
      )
    ; eval-make-set(
      | UnknownParent()
      , all-parents0
      , global-cache0
      , <!rewrite-mode0 <+ get-rewrite-mode(|global-cache0) => rewrite-mode0>
      )
    ; not(EVAL_FAILED)


rules

  eval-Type-decorator0-100000(cached0, a, tout|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; {:
           let cached0 =
                 <eval-assert-output-decorator0(
                    cached0
                  , if ?node0 then
                      !decorated-value-cache0 <+ a => decorated-value-cache0
                    else
                      a
                    end
                  , <eval-has-Type(
                       tout
                     | <?node0 < !parent0 + !UnknownParent()>
                     , all-parents0
                     , global-cache0
                     , rewrite-mode0
                     )> <id>
                    ; not(EVAL_FAILED)
                  | <?node0 < !parent0 + !UnknownParent()>
                  , all-parents0
                  , global-cache0
                  , rewrite-mode0
                  , signature0
                  , "Attribute result is not of the indicated type"
                  )> <id>
                 ; not(EVAL_FAILED)
           in
             !<id> ; cached0
           end
         }
       <+ !EVAL_FAILED())

  eval-Type-decorator0-100001(cached0, a, tin, tout|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; {arg20:
           let cached0 =
                 <eval-assert-input-decorator0(
                    cached0
                  , {:
                      let cached0 =
                            <eval-assert-output-decorator0(
                               cached0
                             , if ?node0 then
                                 !decorated-value-cache0 <+ a => decorated-value-cache0
                               else
                                 a
                               end
                             , <eval-has-Type(
                                  tout
                                | <?node0 < !parent0 + !UnknownParent()>
                                , all-parents0
                                , global-cache0
                                , rewrite-mode0
                                )> <id>
                               ; not(EVAL_FAILED)
                             | <?node0 < !parent0 + !UnknownParent()>
                             , all-parents0
                             , global-cache0
                             , rewrite-mode0
                             , signature0
                             , arg20
                             )> <id>
                            ; not(EVAL_FAILED)
                      in
                        !<id> ; cached0
                      end
                    }
                  , <eval-has-Type(
                       tin
                     | <?node0 < !parent0 + !UnknownParent()>
                     , all-parents0
                     , global-cache0
                     , rewrite-mode0
                     )> <id>
                    ; not(EVAL_FAILED)
                  | <?node0 < !parent0 + !UnknownParent()>
                  , all-parents0
                  , global-cache0
                  , rewrite-mode0
                  , Attribute(
                      "assert-output"
                    , [Anonymous(), Anonymous()]
                    , [<arg20 := "Attribute result is not of the indicated type">]
                    )
                  , "Attribute input is not of the indicated type"
                  )> <id>
                 ; not(EVAL_FAILED)
           in
             !<id> ; cached0
           end
         }
       <+ !EVAL_FAILED())

  eval-String-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; {:
           let cached0 =
                 <eval-assert-output-decorator0(
                    cached0
                  , if ?node0 then
                      !decorated-value-cache0 <+ a => decorated-value-cache0
                    else
                      a
                    end
                  , String
                  | <?node0 < !parent0 + !UnknownParent()>
                  , all-parents0
                  , global-cache0
                  , rewrite-mode0
                  , signature0
                  , "Result must be a string"
                  )> <id>
                 ; not(EVAL_FAILED)
           in
             !<id> ; cached0
           end
         }
       <+ !EVAL_FAILED())

  eval-List-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; {:
           let cached0 =
                 <eval-assert-output-decorator0(
                    cached0
                  , if ?node0 then
                      !decorated-value-cache0 <+ a => decorated-value-cache0
                    else
                      a
                    end
                  , List
                  | <?node0 < !parent0 + !UnknownParent()>
                  , all-parents0
                  , global-cache0
                  , rewrite-mode0
                  , signature0
                  , "Result must be a list"
                  )> <id>
                 ; not(EVAL_FAILED)
           in
             !<id> ; cached0
           end
         }
       <+ !EVAL_FAILED())

  eval-List-decorator0-100001(cached0, a, t|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; {:
           let cached0 =
                 <eval-assert-output-decorator0(
                    cached0
                  , if ?node0 then
                      !decorated-value-cache0 <+ a => decorated-value-cache0
                    else
                      a
                    end
                  , list-loop(
                      <eval-has-Type(
                         t
                       | <?node0 < !parent0 + !UnknownParent()>
                       , all-parents0
                       , global-cache0
                       , rewrite-mode0
                       )> <id>
                      ; not(EVAL_FAILED)
                    )
                  | <?node0 < !parent0 + !UnknownParent()>
                  , all-parents0
                  , global-cache0
                  , rewrite-mode0
                  , signature0
                  , "Result must be a list of the indicated type"
                  )> <id>
                 ; not(EVAL_FAILED)
           in
             !<id> ; cached0
           end
         }
       <+ !EVAL_FAILED())

  eval-Set-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; {:
           let cached0 =
                 <eval-assert-output-decorator0(
                    cached0
                  , if ?node0 then
                      !decorated-value-cache0 <+ a => decorated-value-cache0
                    else
                      a
                    end
                  , <eval-make-set(
                     | <?node0 < !parent0 + !UnknownParent()>
                     , all-parents0
                     , global-cache0
                     , rewrite-mode0
                     )> <id>
                    ; not(EVAL_FAILED)
                  | <?node0 < !parent0 + !UnknownParent()>
                  , all-parents0
                  , global-cache0
                  , rewrite-mode0
                  , signature0
                  , "Result must be a list or set"
                  )> <id>
                 ; not(EVAL_FAILED)
           in
             !<id> ; cached0
           end
         }
       <+ !EVAL_FAILED())

  eval-Set-decorator0-100001(cached0, a, t|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; {:
           let cached0 =
                 <eval-assert-output-decorator0(
                    cached0
                  , if ?node0 then
                      !decorated-value-cache0 <+ a => decorated-value-cache0
                    else
                      a
                    end
                  , (eval-make-set(
                     | <?node0 < !parent0 + !UnknownParent()>
                     , all-parents0
                     , global-cache0
                     , rewrite-mode0
                     )
                     ; not(EVAL_FAILED))
                    ; list-loop(
                        eval-has-Type(
                          t
                        | <?node0 < !parent0 + !UnknownParent()>
                        , all-parents0
                        , global-cache0
                        , rewrite-mode0
                        )
                        ; not(EVAL_FAILED)
                      )
                  | <?node0 < !parent0 + !UnknownParent()>
                  , all-parents0
                  , global-cache0
                  , rewrite-mode0
                  , signature0
                  , "Result must be a list or set of the indicated type"
                  )> <id>
                 ; not(EVAL_FAILED)
           in
             !<id> ; cached0
           end
         }
       <+ !EVAL_FAILED())

  eval-Int-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; {:
           let cached0 =
                 <eval-assert-output-decorator0(
                    cached0
                  , if ?node0 then
                      !decorated-value-cache0 <+ a => decorated-value-cache0
                    else
                      a
                    end
                  , is-int
                  | <?node0 < !parent0 + !UnknownParent()>
                  , all-parents0
                  , global-cache0
                  , rewrite-mode0
                  , signature0
                  , "Result must be an int"
                  )> <id>
                 ; not(EVAL_FAILED)
           in
             !<id> ; cached0
           end
         }
       <+ !EVAL_FAILED())

  eval-Test-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; where(if ?node0 then
                 !decorated-value-cache0 <+ a => decorated-value-cache0
               else
                 a
               end
               ; not(EVAL_FAILED))
       <+ !EVAL_FAILED())

  eval-fail-fatal-decorator0-100001(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; {:
           let cached0 =
                 <eval-assert-input-decorator0(
                    cached0
                  , if ?node0 then
                      !decorated-value-cache0 <+ a => decorated-value-cache0
                    else
                      a
                    end
                  , where(?node0
                          < !decorated-value-cache0 <+ a => decorated-value-cache0
                          + a)
                  | <?node0 < !parent0 + !UnknownParent()>
                  , all-parents0
                  , global-cache0
                  , rewrite-mode0
                  , signature0
                  , "No attribute equation matches for input"
                  )> <id>
                 ; not(EVAL_FAILED)
           in
             !<id> ; cached0
           end
         }
       <+ !EVAL_FAILED())


rules

  eval-Obsolete-decorator0-100000(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    ?node0
    ; where(?_)
    ; ((id < id + ?decorated-value-cache0)
       ; {:
           let cached0 =
                 <eval-Obsolete-decorator0(
                    cached0
                  , if ?node0 then
                      !decorated-value-cache0 <+ a => decorated-value-cache0
                    else
                      a
                    end
                  | <?node0 < !parent0 + !UnknownParent()>
                  , all-parents0
                  , global-cache0
                  , rewrite-mode0
                  , signature0
                  , [ "Uses obsolete attribute or decorator in definition of '"
                    , <!signature0 => Attribute(<id>, _, _)>
                    , "'"
                    ]
                  )> <id>
                 ; not(EVAL_FAILED)
           in
             !<id> ; cached0
           end
         }
       <+ !EVAL_FAILED())

  eval-Obsolete-decorator0-100001(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0, arg21) =
    ?node0
    ; where(?_)
    ; ((id < id + ?arg21) ; (id < id + ?message))
    ; if !arg21
         ; (?message <+ eq-ignore-annos(|message)) then
        (id < id + ?decorated-value-cache0)
        ; if not(<ObsoleteWarned> <!signature0 => Attribute(_, [], _)>) then
            with(warn-msg(|message)
                 ; sig := <!signature0 => Attribute(_, [], _)>
                 ; rules ( ObsoleteWarned :
                             sig ))
          end
        ; if ?node0 then
            !decorated-value-cache0 <+ a => decorated-value-cache0
          else
            a
          end
        ; not(EVAL_FAILED)
        <+ !EVAL_FAILED()
      else
        !arg21 ; !message < !EVAL_FAILED() + fail
      end


rules

  eval-has-Type-100000(t|parent0, all-parents0, global-cache0, rewrite-mode0) =
    ?node0
    ; where(?_)
    ; ((where(t)
        <+ list-loop(<t> List(<id>)))
       <+ !EVAL_FAILED())


signature
  constructors
    Id            : String -> TermId
    NoParent      : Parent
    UnknownParent : Parent


strategies
  get-parent(|all-parents) =
    hashtable-get(|all-parents, <id>)

  set-parent(|all-parents, value) =
    hashtable-put(|all-parents, <id>, value)

  all-parents =
    lookup-table(|"all-parents")


strategies
  get-prev-sibling(|parent) =
    ?child
    ; !parent
    ; if is-list then
        ?[<id>|child]
      else
        get-arguments
        ; rec rec (
            ?[<id>, child|_]
            <+ ?[_|<rec>]
          )
      end

  get-next-sibling(|parent) =
    ?child
    ; !parent
    ; if is-list then
        ?[child|<id>]
      else
        (id < id + ?found-previous)
        ; all(?child ; ?found-previous
              <+ where(!found-previous) ; ?next
              <+ id)
        ; !next
      end

  get-prev-sibling(pattern|parent) =
    ?child
    ; !parent
    ; if is-list then
        ?[<pattern>|child]
      else
        get-arguments
        ; split-at(?child) => (<id>, _)
        ; getlast(pattern)
      end

  getlast(s) =
    ?[_|<getlast(s)>]
    <+ ?[<s>|_]

  get-next-sibling(pattern|parent) =
    ?child
    ; !parent
    ; if is-list then
        ?[child|<pattern>]
      else
        (id < id + ?found-self ; ?next)
        ; all(?child ; ?found-self
              <+ where(!found-self)
                 ; not(!next)
                 ; pattern => next
              <+ id)
        ; !next
      end

  get-first-child(|parent) =
    !parent ; one(?first) ; !first

  get-last-child(|parent) =
    !parent
    ; if is-list then
        ?[_|<id>]
      else
        <get-arguments> parent ; last
      end


strategies
  aster-add-parent-references(|all-parents, parent) =
    ?node
    ; set-parent(|all-parents, parent)
    ; all-consnil(aster-add-parent-references(|all-parents, node))

  truncate-path-lists =
    ?['[', ']', '.'|<id>]
    ; repeat1(
        ?['[', ']', '.'|<id>]
      )
    ; !['[', ']', '.', '.'|<truncate-path-lists>]
    <+ [id|truncate-path-lists]
    <+ []


signature
  constructors
    EVAL_FAILED : Term
    Attribute   : String * List(String) * List(Term) -> Term
    Anonymous   : Term


strategies
  get-cached-attribute(|global-cache, node, sig) =
    hashtable-get(|global-cache, (node, sig))

  set-cached-attribute(|global-cache, node, sig, value) =
    hashtable-put(
    | global-cache
    , (node, sig)
    , value
    )

  global-cache =
    lookup-table(|"global-cache")


strategies
  get-rewrite-mode(|global-cache) =
    hashtable-get(|global-cache, "$rewrite-mode") <+ !0

  set-rewrite-mode(|global-cache, value) =
    hashtable-put(|global-cache, "$rewrite-mode", value)

  get-rewrite-cached(|global-cache, node) =
    hashtable-get(|global-cache, node)

  set-rewrite-cached(|global-cache, node, value) =
    hashtable-put(|global-cache, node, value)


strategies
  eval-anonymous-rewrite =
    fail

  aster-rewrites-enabled =
    fail

  eval-anonymous-rewrites-cached(|all-parents, global-cache) =
    get-rewrite-cached(|global-cache, <id>)
    <+ set-rewrite-cached(|global-cache, <id>, <id>)
       ; eval-anonymous-rewrites-set-cached(|all-parents, global-cache)

  eval-anonymous-rewrites-set-cached(|all-parents, global-cache) =
    repeat(
      {before:
        ?before
        ; eval-anonymous-rewrite
        ; persist-anonymous-rewrite(|all-parents, global-cache, before, <id>)
      }
    )


strategies
  aster-initialize-node(|all-parents, global-cache) =
    aster-initialize-node(|all-parents, global-cache, NoParent())

  aster-initialize-node(|all-parents, global-cache, parent) =
    if aster-rewrites-enabled then
      set-rewrite-mode(|global-cache, 1)
      ; do-while(
          aster-initialize-node-no-rewrite(|all-parents)
        , {before:
            ?before
            ; bottomup-consnil(
                (get-rewrite-cached(|global-cache, <id>)
                 <+ set-rewrite-cached(|global-cache, <id>, <id>))
                ; eval-anonymous-rewrites-set-cached(|all-parents, global-cache)
              )
            ; not(?before)
          }
        )
      ; set-rewrite-mode(|global-cache, 0)
    else
      aster-initialize-node-no-rewrite(|all-parents, parent)
    end

  persist-anonymous-rewrite(|all-parents, global-cache, from, to) =
    with(to' := <aster-initialize-node-no-rewrite(|all-parents, global-cache)> to
         ; from-parent := <get-parent(|all-parents)> from
         ; to-parent := <persist-anonymous-rewrite-upwards(|all-parents, global-cache, from, to')>
         ; <set-parent(|all-parents, to-parent)> to'
         ; set-rewrite-cached(|global-cache, from, to'))
    ; !to'

  persist-anonymous-rewrite-upwards(|all-parents, global-cache, from-child, to-child):
    node -> node'
    where if NoParent then
            node' := node
          else
            node' := <one-consnil(( from-child -> to-child ))> node
            ; from-parent := <get-parent(|all-parents)> node
            ; to-parent := <persist-anonymous-rewrite-upwards(|all-parents, global-cache, node, node')>
            ; set-rewrite-cached(|global-cache, from-parent, to-parent)
            ; <all-consnil(set-parent(|all-parents, to-parent))> to-parent
            ; <set-parent(|all-parents, to-parent)> node'
          end


strategies
  debug'(s) =
    where(strip-annos ; debug(s))

  debug' =
    where(strip-annos ; debug)

  with'(s) =
    s
    <+ aster-remove-annos
       ; log(|Critical(), "Internal error: with clause failed unexpectedly", <id>)
       ; prim("SSL_stacktrace_get_all_frame_names")
       ; report-failure

  eq-ignore-annos(|term) =
    if-java-platform(SRTS-EXT-eq-ignore-annos(|term))
    ; if-c-platform(
        ?term
        <+ where(is-string
                 < <is-string> term
                 + input-ctor := <get-constructor>{}
                   ; term-ctor := <get-constructor> term{}
                   ; ?input-ctor)
           ; where(term' := <aster-remove-annos> term)
           ; where(?term' <+ aster-remove-annos => term')
      )

  external SRTS-EXT-eq-ignore-annos(|term)

  aster-is-initialized(|all-parents) =
    where(get-parent(|all-parents))

  aster-node-path(|parent, all-parents, global-cache) =
    if aster-is-initialized(|all-parents) then
      eval-path-and-node(|parent, all-parents, global-cache, 0)
    else
      <conc-strings> ("?", ".", <to-tiny-string>)
    end

  eval-path-and-node(|parent, all-parents, global-cache, rewrite-mode) =
    fail


strategies
  aster-init-node-ensure(|all-parents, global-cache) =
    if not(aster-is-initialized(|all-parents)) then
      map(aster-init-single-node-ensure(|all-parents, global-cache))
      <+ where(get-constructor => "")
         ; all(aster-init-single-node-ensure(|all-parents, global-cache))
      <+ aster-initialize-node(|all-parents, global-cache)
    end

  aster-init-node-ensure(warning|all-parents, global-cache) =
    if not(aster-is-initialized(|all-parents)) then
      map(
        aster-init-single-node-ensure(warning|all-parents, global-cache)
      )
      <+ where(get-constructor => "")
         ; all(aster-init-single-node-ensure(warning|all-parents, global-cache))
      <+ where(warning) ; aster-initialize-node(|all-parents, global-cache)
    end

  aster-init-single-node-ensure(|all-parents, global-cache) =
    if not(aster-is-initialized(|all-parents)) then
      aster-initialize-node(|all-parents, global-cache)
    end

  aster-init-single-node-ensure(warning|all-parents, global-cache) =
    if not(aster-is-initialized(|all-parents)) then
      where(warning) ; aster-initialize-node(|all-parents, global-cache)
    end

  aster-initialize-node-warning(|all-parents, attribute) =
    if not(AsterWarningsDisabled <+ aster-is-reference-collection(|all-parents)) then
      warn(
      | ["Evaluating attribute '", attribute, "' on an uninitialized term"]
      )
      ; prim("SSL_stacktrace_get_all_frame_names")
      ; try(
          \ ["aster_initialize_node_warning_0_0"|tail] -> tail \
        )
      ; try(
          \ ["aster_initialize_node_ensure_1_1"|tail] -> tail \
        )
      ; reverse
      ; map(
          <fprintnl> (stderr(), ["\t", <id>])
        )
    end

  internal-enable-warnings =
    rules ( AsterWarningsDisabled :-
              _ )

  aster-is-reference-collection(|all-parents) =
    list-loop(aster-is-initialized(|all-parents))
    <+ where(get-constructor => "")
       ; all(aster-is-initialized(|all-parents))

  aster-initialize-node-no-rewrite(|all-parents) =
    aster-initialize-node-no-rewrite(|all-parents, NoParent())

  aster-initialize-node-no-rewrite(|all-parents, parent) =
    ?node
    ; aster-add-annos
    ; where(aster-add-parent-references(|all-parents, parent))


strategies
  aster-add-annos =
    leaves-consnil(aster-add-anno)

  aster-add-anno :
    t{a*} -> t{b*}
    where x := <if-c-platform(<newname> "@")
                ; if-java-platform(SRTS-EXT-newint)>
          ; if [] := a* then
              b* := [x]
            else
              b* := [x|<filter(not(aster-is-anno))> a*]
            end

  external SRTS-EXT-newint(|)

  aster-remove-annos =
    topdown-consnil(aster-remove-anno)

  aster-remove-annos-from-leaves(|all-parents) =
    if aster-is-initialized(|all-parents) then leaves-consnil(aster-remove-anno) end

  aster-remove-anno =
    try(
      ?_{}
      <+ \ t{<aster-is-anno>} -> t{} \
      <+ \ t{a*} -> t{b*}
           where b* := <filter(not(aster-is-anno))> a* \
    )

  aster-is-anno =
    if-java-platform(is-int) ; if-c-platform(is-string)


signature
  constructors
    Signal        : String() * Int() * String() -> Signal()
    UnknownSignal : Int() -> Signal()
    WaitStatus    : Int() * Int() * Int() -> WaitStatus()
    F_OK          : AccessPermission()
    R_OK          : AccessPermission()
    W_OK          : AccessPermission()
    X_OK          : AccessPermission()
    Pipe          : Int() * Int() -> Pipe()
    EpochTime     : Int() -> EpochTime()
    ComponentTime : Date() * DayTime() * ComponentTimeDupl() -> ComponentTime()
    DayTime       : Int() * Int() * Int() -> DayTime()
    Date          : Int() * Month() * Int() -> Date()
    Dupl          : Int() * Int() -> ComponentTimeDupl()
    January       : Month()
    February      : Month()
    March         : Month()
    April         : Month()
    May           : Month()
    June          : Month()
    July          : Month()
    August        : Month()
    September     : Month()
    October       : Month()
    November      : Month()
    December      : Month()
    Sunday        : DayOfWeek()
    Monday        : DayOfWeek()
    Tuesday       : DayOfWeek()
    Wednesday     : DayOfWeek()
    Thursday      : DayOfWeek()
    Friday        : DayOfWeek()
    Saturday      : DayOfWeek()
    Emergency     : Severity()
    Alert         : Severity()
    Critical      : Severity()
    Error         : Severity()
    Warning       : Severity()
    Notice        : Severity()
    Info          : Severity()
    Debug         : Severity()
    Vomit         : Severity()
    Program       : String() -> Option()
    Undefined     : String() -> Option()
    GraphLet      : List(Product(Cons(Int(), Cons(Term(), Nil())))) * Term() -> Term()
    Infinite      : IntI()
    Anno          : a * b -> a
    Stream        : ImplDep() -> Stream()
    Path          : String() -> FileLoc()
    stdin         : FileLoc()
    stdout        : FileLoc()
    stderr        : FileLoc()
    ErrorNumber   : Int() -> Error()
    None          : Option(a)
    Some          : a -> Option(a)
    RuleScope     : IndexedSet() * Hashtable() -> RuleScope()
    ChangeSet     : IndexedSet() * IndexedSet() * Hashtable() -> RuleScope()
    Label         : String() -> Label()
    SplitPos      : String() * String() -> SplitPos()
    BreakCS       : String() * String() -> BreakCS()
    ContinueCS    : String() * String() -> ContinueCS()
    IgnoreB       : String() -> IgnoreB()
    IgnoreC       : String() -> IgnoreC()
    Catch         : String() * String() -> Catch()
    Finally       : String() -> Finally()
    TryBlock      : Int() * String() * Cons(Catch(), Nil()) * Finally() -> TryBlock()
    Structure     : String() -> Structure()
    IgnoreT       : String() -> IgnoreT()
    ThrowCS       : String() * String() -> ThrowCS()
    ExceptionCS   : String() * String() -> ExceptionCS()
    IndexedSet    : ImplDep() -> IndexedSet()
    Nil           : List(a)
    Cons          : a * List(a) -> List(a)
    Conc          : List(a) * List(a) -> List(a)
    Scopes        : Key()
    NestedTable   : Hashtable() -> TableValue()
    Tables        : TableKey()
    NewTable      : TableKey()
    Hashtable     : ImplDep() -> Hashtable()
    DR_UNDEFINE   : ATerm() -> ATerm()
    DR_DUMMY      : ATerm()
                  : a -> Tuple(Cons(a, Nil()))
                  : Tuple(Nil())
                  : a * b -> Tuple(Cons(a, Cons(b, Nil())))
                  : a * b * c -> Tuple(Cons(a, Cons(b, Cons(c, Nil()))))
                  : a * b * c * d -> Tuple(Cons(a, Cons(b, Cons(c, Cons(d, Nil())))))
                  : a * b * c * d * e -> Tuple(Cons(a, Cons(b, Cons(c, Cons(d, Cons(e, Nil()))))))
                  : a * b * c * d * e * f -> Tuple(Cons(a, Cons(b, Cons(c, Cons(d, Cons(e, Cons(f, Nil())))))))
                  : a * b * c * d * e * f * g -> Tuple(Cons(a, Cons(b, Cons(c, Cons(d, Cons(e, Cons(f, Cons(g, Nil()))))))))
                  : a * b * c * d * e * f * g * h -> Tuple(Cons(a, Cons(b, Cons(c, Cons(d, Cons(e, Cons(f, Cons(g, Cons(h, Nil())))))))))
                  : a * b * c * d * e * f * g * h * i -> Tuple(Cons(a, Cons(b, Cons(c, Cons(d, Cons(e, Cons(f, Cons(g, Cons(h, Cons(i, Nil()))))))))))
                  : a * b * c * d * e * f * g * h * i * j -> Tuple(Cons(a, Cons(b, Cons(c, Cons(d, Cons(e, Cons(f, Cons(g, Cons(h, Cons(i, Cons(j, Nil())))))))))))
                  : a * b * c * d * e * f * g * h * i * j * k -> Tuple(Cons(a, Cons(b, Cons(c, Cons(d, Cons(e, Cons(f, Cons(g, Cons(h, Cons(i, Cons(j, Cons(k, Nil()))))))))))))
                  : a * b * c * d * e * f * g * h * i * j * k * l -> Tuple(Cons(a, Cons(b, Cons(c, Cons(d, Cons(e, Cons(f, Cons(g, Cons(h, Cons(i, Cons(j, Cons(k, Cons(l, Nil())))))))))))))
                  : a * b * c * d * e * f * g * h * i * j * k * l * m -> Tuple(Cons(a, Cons(b, Cons(c, Cons(d, Cons(e, Cons(f, Cons(g, Cons(h, Cons(i, Cons(j, Cons(k, Cons(l, Cons(m, Nil()))))))))))))))
                  : a * b * c * d * e * f * g * h * i * j * k * l * m * n -> Tuple(Cons(a, Cons(b, Cons(c, Cons(d, Cons(e, Cons(f, Cons(g, Cons(h, Cons(i, Cons(j, Cons(k, Cons(l, Cons(m, Cons(n, Nil())))))))))))))))
                  : a * b * c * d * e * f * g * h * i * j * k * l * m * n * o -> Tuple(Cons(a, Cons(b, Cons(c, Cons(d, Cons(e, Cons(f, Cons(g, Cons(h, Cons(i, Cons(j, Cons(k, Cons(l, Cons(m, Cons(n, Cons(o, Nil()))))))))))))))))
                  : a * b * c * d * e * f * g * h * i * j * k * l * m * n * o * p -> Tuple(Cons(a, Cons(b, Cons(c, Cons(d, Cons(e, Cons(f, Cons(g, Cons(h, Cons(i, Cons(j, Cons(k, Cons(l, Cons(m, Cons(n, Cons(o, Cons(p, Nil())))))))))))))))))
                  : a * b * c * d * e * f * g * h * i * j * k * l * m * n * o * p * q -> Tuple(Cons(a, Cons(b, Cons(c, Cons(d, Cons(e, Cons(f, Cons(g, Cons(h, Cons(i, Cons(j, Cons(k, Cons(l, Cons(m, Cons(n, Cons(o, Cons(p, Cons(q, Nil()))))))))))))))))))
                  : a * b * c * d * e * f * g * h * i * j * k * l * m * n * o * p * q * r -> Tuple(Cons(a, Cons(b, Cons(c, Cons(d, Cons(e, Cons(f, Cons(g, Cons(h, Cons(i, Cons(j, Cons(k, Cons(l, Cons(m, Cons(n, Cons(o, Cons(p, Cons(q, Cons(r, Nil())))))))))))))))))))


strategies


overlays
  MAX_TINY_LIST_PARTS = 3

  MAX_TINY_LIST_PARTS_1 = 4

  MAX_TINY_LIST_PARTS_COMMAS = 6


strategies
  verbose-msg(a) =
    where(if-verbose2(
            <debug> <as-string(a)>
          ))

  verbose-msg(a, b) =
    where(if-verbose2(
            <verbose-msg> [ <as-string(a)>
                          , <as-string(b)>
                          ]
          ))

  verbose-msg(a, b, c) =
    where(if-verbose2(
            <verbose-msg> [ <as-string(a)>
                          , <as-string(b)>
                          , <as-string(c)>
                          ]
          ))

  verbose-msg(a, b, c, d) =
    where(if-verbose2(
            <verbose-msg> [ <as-string(a)>
                          , <as-string(b)>
                          , <as-string(c)>
                          , <as-string(d)>
                          ]
          ))

  verbose-msg(a, b, c, d, e) =
    where(if-verbose2(
            <verbose-msg> [ <as-string(a)>
                          , <as-string(b)>
                          , <as-string(c)>
                          , <as-string(d)>
                          , <as-string(e)>
                          ]
          ))

  verbose-msg(a, b, c, d, e, f) =
    where(if-verbose2(
            <verbose-msg> [ <as-string(a)>
                          , <as-string(b)>
                          , <as-string(c)>
                          , <as-string(d)>
                          , <as-string(e)>
                          , <as-string(f)>
                          ]
          ))

  verbose-msg(a, b, c, d, e, f, g) =
    where(if-verbose2(
            <verbose-msg> [ <as-string(a)>
                          , <as-string(b)>
                          , <as-string(c)>
                          , <as-string(d)>
                          , <as-string(e)>
                          , <as-string(f)>
                          , <as-string(g)>
                          ]
          ))

  verbose-msg(a, b, c, d, e, f, g, h) =
    where(if-verbose2(
            <verbose-msg> [ <as-string(a)>
                          , <as-string(b)>
                          , <as-string(c)>
                          , <as-string(d)>
                          , <as-string(e)>
                          , <as-string(f)>
                          , <as-string(g)>
                          , <as-string(h)>
                          ]
          ))

  as-string(s) =
    s ; as-string <+ !"<?>"

  as-string =
    is-string <+ write-to-string

  verbose-msg =
    if-verbose2(
      map(is-string <+ write-to-string)
      ; separate-by(|" ")
      ; concat-strings
      ; debug
    )

  verify(s) =
    ?input ; verify(s, !"Internal error: failure unexpected")

  verify(s, message) =
    s
    <+ log(
       | Critical()
       , <as-string(message)>
       , <id>
       )
       ; prim("SSL_stacktrace_get_all_frame_names")
       ; report-failure

  verify(s, m1, m2) =
    verify(
      s
    , <conc-strings> ( <as-string(m1)>
                     , " "
                     , <as-string(m2)>
                     )
    )

  verify(s, m1, m2, m3) =
    verify(
      s
    , <conc-strings> ( <as-string(m1)>
                     , " "
                     , <as-string(m2)>
                     , " "
                     , <as-string(m3)>
                     )
    )

  tiny-debug =
    where(to-tiny-string ; debug)

  tiny-debug(prefix) =
    where(<(conc-strings ; debug)> (<as-string(prefix)>, <to-tiny-string>))

  to-tiny-string =
    to-tiny-list
    ; <conc-strings> ("[", <concat-strings>, "]")
    <+ ?name#(<id>)
       ; if [] + () then
           <(strip-annos ; as-string)> name
         else
           to-tiny-list
           ; <conc-strings> (name, "(", <concat-strings>, ")")
         end

  to-tiny-list =
    where(try(
            surplus-single := <length => MAX_TINY_LIST_PARTS_1()>
            <+ surplus := <gt> (<length>, MAX_TINY_LIST_PARTS())
          ))
    ; try(take(|MAX_TINY_LIST_PARTS()))
    ; map(to-tiny-substring)
    ; separate-by(|",")
    ; if !surplus-single then
        <conc> (<id>, [",_"])
      else
        if !surplus then
          <conc> (<id>, [",.."])
        end
      end

  to-tiny-substring =
    [id] ; !"[_]"
    <+ Hd ; !"[..]"
    <+ Fst ; !"(..)"
    <+ () ; !"()"
    <+ [] ; !"[]"
    <+ strip-annos ; ?<as-string>#(_)


strategies
  hashtable-get(|table, key) =
    !table ; hashtable-get(|key)

  hashtable-put(|table, key, value) =
    where(!table ; hashtable-put(|key, value))

  hashtable-remove(|table, key) =
    where(!table ; hashtable-remove(|key))


strategies
  all-consnil(s) =
    if ?[x|y] then
      ![<s> x|<s> y]
    else
      all(s)
    end

  one-consnil(s) =
    if ?[x|y] then
      ![<s> x|y]
      <+ ![x|<s> y]
    else
      one(s)
    end

  topdown-consnil(s) =
    rec rec ( s ; all-consnil(rec) )

  bottomup-consnil(s) =
    rec rec ( all-consnil(rec) ; s )

  innermost-consnil(s) =
    rec rec ( bottomup-consnil(s ; rec <+ id) )

  leaves-consnil(s) =
    all-consnil(
      (?has-children <+ id) ; leaves-consnil(s)
    )
    ; if not(!has-children) then s end


rules

  eval-child-def(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    get-cached-attribute(
    | global-cache0
    , <id>
    , Attribute("child-def", [], [])
    )
    < not(EVAL_FAILED)
    + id => node0
      ; (id
         ; ((eval-child-def-Fork-30(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
            <+ <id> node0 ; fail)
         <+ !EVAL_FAILED())
      ; if not(EVAL_FAILED) then aster-init-node-ensure(|all-parents0, global-cache0) end
      ; set-cached-attribute(
        | global-cache0
        , node0
        , Attribute("child-def", [], [])
        , <id>
        )

  eval-first-kid(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    get-cached-attribute(
    | global-cache0
    , <id>
    , Attribute("first-kid", [], [])
    )
    < not(EVAL_FAILED)
    + id => node0
      ; (id
         ; ((eval-first-kid-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
            <+ <id> node0 ; fail)
         <+ !EVAL_FAILED())
      ; if not(EVAL_FAILED) then aster-init-node-ensure(|all-parents0, global-cache0) end
      ; set-cached-attribute(
        | global-cache0
        , node0
        , Attribute("first-kid", [], [])
        , <id>
        )

  eval-all-kids(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    (id => node0
     ; id
     ; ((eval-all-kids-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ id)

  eval-all-kids-tuple(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    get-cached-attribute(
    | global-cache0
    , <id>
    , Attribute("all-kids-tuple", [], [])
    )
    < not(EVAL_FAILED)
    + id => node0
      ; (id
         ; ((eval-all-kids-tuple-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
            <+ <id> node0 ; fail)
         <+ !EVAL_FAILED())
      ; if not(EVAL_FAILED) then aster-init-node-ensure(|all-parents0, global-cache0) end
      ; set-cached-attribute(
        | global-cache0
        , node0
        , Attribute("all-kids-tuple", [], [])
        , <id>
        )

  eval-new-fork(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    get-cached-attribute(
    | global-cache0
    , <id>
    , Attribute("new-fork", [], [])
    )
    < not(EVAL_FAILED)
    + id => node0
      ; (id
         ; ((eval-new-fork-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
            <+ <id> node0 ; fail)
         <+ !EVAL_FAILED())
      ; if not(EVAL_FAILED) then aster-init-node-ensure(|all-parents0, global-cache0) end
      ; set-cached-attribute(
        | global-cache0
        , node0
        , Attribute("new-fork", [], [])
        , <id>
        )

  eval-is(|parent0, all-parents0, global-cache0, rewrite-mode0, arg0) =
    (id => node0
     ; id
     ; ((eval-is-100000(|parent0, all-parents0, global-cache0, rewrite-mode0, arg0)
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ id)

  eval-tuple-first(|parent0, all-parents0, global-cache0, rewrite-mode0, arg1) =
    (id => node0
     ; id
     ; ((eval-tuple-first-100000(|parent0, all-parents0, global-cache0, rewrite-mode0, arg1)
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ id)

  eval-parent-first-kid(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    get-cached-attribute(
    | global-cache0
    , <id>
    , Attribute("parent-first-kid", [], [])
    )
    < not(EVAL_FAILED)
    + id => node0
      ; (id
         ; ((eval-parent-first-kid-Fork-10(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
            <+ <id> node0 ; fail)
         <+ !EVAL_FAILED())
      ; if not(EVAL_FAILED) then aster-init-node-ensure(|all-parents0, global-cache0) end
      ; set-cached-attribute(
        | global-cache0
        , node0
        , Attribute("parent-first-kid", [], [])
        , <id>
        )

  eval-silly(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    get-cached-attribute(
    | global-cache0
    , <id>
    , Attribute("silly", [], [])
    )
    < not(EVAL_FAILED)
    + id => node0
      ; (id
         ; ((eval-silly-00(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
            <+ <id> node0 ; fail)
         <+ !EVAL_FAILED())
      ; if not(EVAL_FAILED) then aster-init-node-ensure(|all-parents0, global-cache0) end
      ; set-cached-attribute(
        | global-cache0
        , node0
        , Attribute("silly", [], [])
        , <id>
        )

  eval-build2(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    get-cached-attribute(
    | global-cache0
    , <id>
    , Attribute("build2", [], [])
    )
    < not(EVAL_FAILED)
    + id => node0
      ; (id
         ; ((eval-build2-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
            <+ <id> node0 ; fail)
         <+ !EVAL_FAILED())
      ; if not(EVAL_FAILED) then aster-init-node-ensure(|all-parents0, global-cache0) end
      ; set-cached-attribute(
        | global-cache0
        , node0
        , Attribute("build2", [], [])
        , <id>
        )

  eval-init(|parent0, all-parents0, global-cache0, rewrite-mode0, arg2) =
    get-cached-attribute(
    | global-cache0
    , <id>
    , Attribute("init", [], [arg2])
    )
    < not(EVAL_FAILED)
    + id => node0
      ; (id
         ; ((eval-init-100000(|parent0, all-parents0, global-cache0, rewrite-mode0, arg2)
             <+ fail)
            <+ <id> node0 ; fail)
         <+ !EVAL_FAILED())
      ; if not(EVAL_FAILED) then aster-init-node-ensure(|all-parents0, global-cache0) end
      ; set-cached-attribute(
        | global-cache0
        , node0
        , Attribute("init", [], [arg2])
        , <id>
        )

  eval-fails(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    (id => node0
     ; id
     ; ((eval-fails-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ id)

  eval-test-root(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; let cached00 =
            get-cached-attribute(
            | global-cache0
            , <id>
            , Attribute("test-root", [], [])
            )
            < not(EVAL_FAILED)
            + {cached-node0:
                ?cached-node0
                ; <eval-down-decorator0(
                     cached00
                   , id
                     ; ((eval-test-root-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
                        <+ <id> node0 ; fail)
                   | <?node0 < !parent0 + !UnknownParent()>
                   , all-parents0
                   , global-cache0
                   , rewrite-mode0
                   , Anonymous()
                   )> <id>
                ; set-cached-attribute(
                  | global-cache0
                  , cached-node0
                  , Attribute("test-root", [], [])
                  , <id>
                  )
                ; not(EVAL_FAILED)
              }
      in
        cached00
      end

  eval-test-copy-root(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; let cached01 =
            get-cached-attribute(
            | global-cache0
            , <id>
            , Attribute("test-copy-root", [], [])
            )
            < not(EVAL_FAILED)
            + {cached-node1:
                ?cached-node1
                ; <eval-down-decorator0(
                     cached01
                   , id
                     ; ((eval-test-copy-root-root0(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
                        <+ <id> node0 ; fail)
                   | <?node0 < !parent0 + !UnknownParent()>
                   , all-parents0
                   , global-cache0
                   , rewrite-mode0
                   , Anonymous()
                   )> <id>
                ; set-cached-attribute(
                  | global-cache0
                  , cached-node1
                  , Attribute("test-copy-root", [], [])
                  , <id>
                  )
                ; not(EVAL_FAILED)
              }
      in
        cached01
      end

  eval-is-one(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; let cached02 =
            get-cached-attribute(
            | global-cache0
            , <id>
            , Attribute("is-one", [], [])
            )
            < not(EVAL_FAILED)
            + {cached-node2:
                ?cached-node2
                ; <eval-up-decorator0(
                     cached02
                   , id
                     ; ((eval-is-one-100010(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
                        <+ <id> node0 ; fail)
                   | <?node0 < !parent0 + !UnknownParent()>
                   , all-parents0
                   , global-cache0
                   , rewrite-mode0
                   , Anonymous()
                   )> <id>
                ; set-cached-attribute(
                  | global-cache0
                  , cached-node2
                  , Attribute("is-one", [], [])
                  , <id>
                  )
                ; not(EVAL_FAILED)
              }
      in
        cached02
      end

  eval-test-silly-circular(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; let cached03 =
            fail
            < not(EVAL_FAILED)
            + {cached-node3:
                ?cached-node3
                ; <eval-circular-decorator0(
                     cached03
                   , id
                     ; ((eval-test-silly-circular-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
                        <+ <id> node0 ; fail)
                   | <?node0 < !parent0 + !UnknownParent()>
                   , all-parents0
                   , global-cache0
                   , rewrite-mode0
                   , Attribute("test-silly-circular", [], [])
                   , 0
                   )> <id>
                ; id
                ; not(EVAL_FAILED)
              }
      in
        cached03
      end

  eval-replace-nodes(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; let cached04 =
            get-cached-attribute(
            | global-cache0
            , <id>
            , Attribute("replace-nodes", [], [])
            )
            < not(EVAL_FAILED)
            + {cached-node4:
                ?cached-node4
                ; <eval-rewrite-bu-decorator0(
                     cached04
                   , id
                     ; ((eval-replace-nodes-Leaf-100010(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
                        <+ <id> node0 ; fail)
                   | <?node0 < !parent0 + !UnknownParent()>
                   , all-parents0
                   , global-cache0
                   , rewrite-mode0
                   , Anonymous()
                   )> <id>
                ; set-cached-attribute(
                  | global-cache0
                  , cached-node4
                  , Attribute("replace-nodes", [], [])
                  , <id>
                  )
                ; not(EVAL_FAILED)
              }
      in
        cached04
      end

  eval-my-signature(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    (id => node0
     ; id
     ; ((eval-my-signature-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ id)

  eval-my-attribute-name(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    (id => node0
     ; id
     ; ((eval-my-attribute-name-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ id)

  eval-my-signature(s|parent0, all-parents0, global-cache0, rewrite-mode0) =
    (id => node0
     ; id
     ; ((eval-my-signature-100001(
           s
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ id)

  eval-union(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-union-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-diff(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-diff-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-isect(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-isect-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-make-set(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-make-set-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-lookup(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-lookup-100010(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-lookup(|parent0, all-parents0, global-cache0, rewrite-mode0, arg3) =
    id => node0
    ; where(key := arg3 ; id)
    ; id
    ; ((eval-lookup-100000(|parent0, all-parents0, global-cache0, rewrite-mode0, arg3)
        <+ fail)
       <+ <id> node0 ; fail)

  eval-eq(|parent0, all-parents0, global-cache0, rewrite-mode0, arg4) =
    id => node0
    ; where(t := arg4 ; id)
    ; id
    ; ((eval-eq-100000(|parent0, all-parents0, global-cache0, rewrite-mode0, arg4)
        <+ fail)
       <+ <id> node0 ; fail)

  eval-eq(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-eq-100010(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-all(a|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-all-100000(
          a
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-some(a|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-some-100000(
          a
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-one(a|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-one-100000(
          a
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-all-inline(a|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-all-inline-100000(
          a
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-signature-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-signature-decorator0-100000(
          cached0
        , a
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        , signature0
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-attribute-name-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-attribute-name-decorator0-100000(
          cached0
        , a
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        , signature0
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-defined-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-defined-decorator0-100000(
          cached0
        , a
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        , signature0
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-prev-sibling(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-prev-sibling-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-next-sibling(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-next-sibling-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-first-sibling(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-first-sibling-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-last-sibling(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-last-sibling-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-first-child(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-first-child-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-last-child(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-last-child-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-prev-sibling(a|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-prev-sibling-100001(
          a
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-next-sibling(a|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-next-sibling-100001(
          a
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-child(a|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-child-100000(
          a
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-children(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-children-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-is-root(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-is-root-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-root(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; let cached05 =
            get-cached-attribute(
            | global-cache0
            , <id>
            , Attribute("root", [], [])
            )
            < not(EVAL_FAILED)
            + {cached-node5:
                ?cached-node5
                ; <eval-down-decorator0(
                     cached05
                   , id
                     ; ((eval-root-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
                        <+ <id> node0 ; fail)
                   | <?node0 < !parent0 + !UnknownParent()>
                   , all-parents0
                   , global-cache0
                   , rewrite-mode0
                   , Anonymous()
                   )> <id>
                ; set-cached-attribute(
                  | global-cache0
                  , cached-node5
                  , Attribute("root", [], [])
                  , <id>
                  )
                ; not(EVAL_FAILED)
              }
      in
        cached05
      end

  eval-ancestor(p|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; let cached06 =
            fail
            < not(EVAL_FAILED)
            + {cached-node6:
                ?cached-node6
                ; <eval-down-decorator0(
                     cached06
                   , id
                     ; ((eval-ancestor-100000(
                           p
                         | parent0
                         , all-parents0
                         , global-cache0
                         , rewrite-mode0
                         )
                         <+ fail)
                        <+ <id> node0 ; fail)
                   | <?node0 < !parent0 + !UnknownParent()>
                   , all-parents0
                   , global-cache0
                   , rewrite-mode0
                   , Anonymous()
                   )> <id>
                ; id
                ; not(EVAL_FAILED)
              }
      in
        cached06
      end

  eval-init(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-init-100001(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-reinit(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-reinit-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-ensure-init(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-ensure-init-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-uninit(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-uninit-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-uninit-lazy(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-uninit-lazy-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-is-inited(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-is-inited-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-all-parents(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-all-parents-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-global-cache(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-global-cache-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-get-cached(|parent0, all-parents0, global-cache0, rewrite-mode0, arg5) =
    id => node0
    ; where(sig := arg5 ; id)
    ; id
    ; ((eval-get-cached-100000(|parent0, all-parents0, global-cache0, rewrite-mode0, arg5)
        <+ fail)
       <+ <id> node0 ; fail)

  eval-set-cached(|parent0, all-parents0, global-cache0, rewrite-mode0, arg6, arg7) =
    id => node0
    ; where(sig := arg6 ; value := arg7 ; id)
    ; id
    ; ((eval-set-cached-100000(
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        , arg6
        , arg7
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-is-cached(|parent0, all-parents0, global-cache0, rewrite-mode0, arg8) =
    id => node0
    ; where(sig := arg8 ; id)
    ; id
    ; ((eval-is-cached-100000(|parent0, all-parents0, global-cache0, rewrite-mode0, arg8)
        <+ fail)
       <+ <id> node0 ; fail)

  eval-set-cached-for(|parent0, all-parents0, global-cache0, rewrite-mode0, arg9, arg10) =
    id => node0
    ; where(sig := arg9 ; node := arg10 ; id)
    ; id
    ; ((eval-set-cached-for-100000(
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        , arg9
        , arg10
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-get-cached-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-get-cached-decorator0-100000(
          cached0
        , a
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        , signature0
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-is-cached-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-is-cached-decorator0-100000(
          cached0
        , a
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        , signature0
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-set-cached-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0, arg11) =
    id => node0
    ; where(value := arg11 ; id)
    ; id
    ; ((eval-set-cached-decorator0-100000(
          cached0
        , a
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        , signature0
        , arg11
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-set-cached-for-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0, arg12) =
    id => node0
    ; where(node := arg12 ; id)
    ; id
    ; ((eval-set-cached-for-decorator0-100000(
          cached0
        , a
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        , signature0
        , arg12
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-enable-warnings(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-enable-warnings-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-disable-warnings(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-disable-warnings-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-debug(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-debug-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-debug(m|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-debug-100001(
          m
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-path(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-path-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-path-and-node(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-path-and-node-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-path-list(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-path-list-100000(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-uncached-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-uncached-decorator0-100000(
          cached0
        , a
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        , signature0
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-uninit-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-uninit-decorator0-100000(
          cached0
        , a
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        , signature0
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-cached-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0, arg13) =
    id => node0
    ; where(sig := arg13 ; id)
    ; id
    ; ((eval-cached-decorator0-100000(
          cached0
        , a
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        , signature0
        , arg13
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-cached-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-cached-decorator0-100001(
          cached0
        , a
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        , signature0
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-strip-arg-values(|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-strip-arg-values-Attribute-100010(|parent0, all-parents0, global-cache0, rewrite-mode0) <+ fail)
       <+ <id> node0 ; fail)

  eval-context-free-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-context-free-decorator0-100000(
          cached0
        , a
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        , signature0
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-context-free-args-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-context-free-args-decorator0-100000(
          cached0
        , a
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        , signature0
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-if-circular-decorator0(cached0, a, default|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-if-circular-decorator0-100001(
           cached0
         , a
         , default
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ eval-if-circular-decorator0-100000(
              cached0
            , a
            , default
            | parent0
            , all-parents0
            , global-cache0
            , rewrite-mode0
            , signature0
            )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-collect-bagof-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    id => node0
    ; where(id)
    ; let cached08 =
            fail
            < not(EVAL_FAILED)
            + {cached-node8:
                ?cached-node8
                ; <eval-at-root-decorator0(
                     cached08
                   , let cached07 =
                           fail
                           < not(EVAL_FAILED)
                           + {cached-node7:
                               ?cached-node7
                               ; <eval-cached-decorator0(
                                    cached07
                                  , id
                                    ; ((eval-collect-bagof-decorator0-100000(
                                          cached07
                                        , a
                                        | parent0
                                        , all-parents0
                                        , global-cache0
                                        , rewrite-mode0
                                        , signature0
                                        )
                                        <+ fail)
                                       <+ <id> node0 ; fail)
                                  | <?node0 < !parent0 + !UnknownParent()>
                                  , all-parents0
                                  , global-cache0
                                  , rewrite-mode0
                                  , signature0
                                  )> <id>
                               ; id
                               ; not(EVAL_FAILED)
                             }
                     in
                       cached07
                     end
                   | <?node0 < !parent0 + !UnknownParent()>
                   , all-parents0
                   , global-cache0
                   , rewrite-mode0
                   , Anonymous()
                   )> <id>
                ; id
                ; not(EVAL_FAILED)
              }
      in
        cached08
      end

  eval-collect-bagof-decorator0(cached0, a, un|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    id => node0
    ; where(id)
    ; let cached010 =
            fail
            < not(EVAL_FAILED)
            + {cached-node10:
                ?cached-node10
                ; <eval-at-root-decorator0(
                     cached010
                   , let cached09 =
                           fail
                           < not(EVAL_FAILED)
                           + {cached-node9:
                               ?cached-node9
                               ; <eval-cached-decorator0(
                                    cached09
                                  , id
                                    ; ((eval-collect-bagof-decorator0-100001(
                                          cached09
                                        , a
                                        , un
                                        | parent0
                                        , all-parents0
                                        , global-cache0
                                        , rewrite-mode0
                                        , signature0
                                        )
                                        <+ fail)
                                       <+ <id> node0 ; fail)
                                  | <?node0 < !parent0 + !UnknownParent()>
                                  , all-parents0
                                  , global-cache0
                                  , rewrite-mode0
                                  , signature0
                                  )> <id>
                               ; id
                               ; not(EVAL_FAILED)
                             }
                     in
                       cached09
                     end
                   | <?node0 < !parent0 + !UnknownParent()>
                   , all-parents0
                   , global-cache0
                   , rewrite-mode0
                   , Anonymous()
                   )> <id>
                ; id
                ; not(EVAL_FAILED)
              }
      in
        cached010
      end

  eval-collect-all-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    id => node0
    ; where(id)
    ; let cached013 =
            fail
            < not(EVAL_FAILED)
            + {cached-node13:
                ?cached-node13
                ; <eval-Obsolete-decorator0(
                     cached013
                   , let cached012 =
                           fail
                           < not(EVAL_FAILED)
                           + {cached-node12:
                               ?cached-node12
                               ; <eval-at-root-decorator0(
                                    cached012
                                  , let cached011 =
                                          fail
                                          < not(EVAL_FAILED)
                                          + {cached-node11:
                                              ?cached-node11
                                              ; <eval-cached-decorator0(
                                                   cached011
                                                 , id
                                                   ; ((eval-collect-all-decorator0-100000(
                                                         cached011
                                                       , a
                                                       | parent0
                                                       , all-parents0
                                                       , global-cache0
                                                       , rewrite-mode0
                                                       , signature0
                                                       )
                                                       <+ fail)
                                                      <+ <id> node0 ; fail)
                                                 | <?node0 < !parent0 + !UnknownParent()>
                                                 , all-parents0
                                                 , global-cache0
                                                 , rewrite-mode0
                                                 , signature0
                                                 )> <id>
                                              ; id
                                              ; not(EVAL_FAILED)
                                            }
                                    in
                                      cached011
                                    end
                                  | <?node0 < !parent0 + !UnknownParent()>
                                  , all-parents0
                                  , global-cache0
                                  , rewrite-mode0
                                  , Anonymous()
                                  )> <id>
                               ; id
                               ; not(EVAL_FAILED)
                             }
                     in
                       cached012
                     end
                   | <?node0 < !parent0 + !UnknownParent()>
                   , all-parents0
                   , global-cache0
                   , rewrite-mode0
                   , signature0
                   )> <id>
                ; id
                ; not(EVAL_FAILED)
              }
      in
        cached013
      end

  eval-make-set-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-make-set-decorator0-100000(
           cached0
         , a
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-map-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-map-decorator0-100000(
           cached0
         , a
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-contributes-to-decorator0(cached0, a, targets|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-contributes-to-decorator0-100000(
           cached0
         , a
         , targets
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-contributes-to-decorator0(cached0, a, targets, target-to-key|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-contributes-to-decorator0-100001(
           cached0
         , a
         , targets
         , target-to-key
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-lookup-ordered-decorator0(cached0, fetch-decl, is-scope|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    id => node0
    ; where(id)
    ; let cached014 =
            fail
            < not(EVAL_FAILED)
            + {cached-node14:
                ?cached-node14
                ; <eval-down-decorator0(
                     cached014
                   , id
                     ; ((eval-lookup-ordered-decorator0-100000(
                           cached014
                         , fetch-decl
                         , is-scope
                         | parent0
                         , all-parents0
                         , global-cache0
                         , rewrite-mode0
                         , signature0
                         )
                         <+ fail)
                        <+ <id> node0 ; fail)
                   | <?node0 < !parent0 + !UnknownParent()>
                   , all-parents0
                   , global-cache0
                   , rewrite-mode0
                   , Anonymous()
                   )> <id>
                ; id
                ; not(EVAL_FAILED)
              }
      in
        cached014
      end

  eval-lookup-unordered-decorator0(cached0, fetch-decl, is-scope|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-lookup-unordered-decorator0-100000(
          cached0
        , fetch-decl
        , is-scope
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        , signature0
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-lookup-global-decorator0(cached0, fetch-decl|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    id => node0
    ; where(id)
    ; let cached016 =
            fail
            < not(EVAL_FAILED)
            + {cached-node16:
                ?cached-node16
                ; <eval-at-root-decorator0(
                     cached016
                   , let cached015 =
                           fail
                           < not(EVAL_FAILED)
                           + {cached-node15:
                               ?cached-node15
                               ; <eval-cached-decorator0(
                                    cached015
                                  , id
                                    ; ((eval-lookup-global-decorator0-100000(
                                          cached015
                                        , fetch-decl
                                        | parent0
                                        , all-parents0
                                        , global-cache0
                                        , rewrite-mode0
                                        , signature0
                                        )
                                        <+ fail)
                                       <+ <id> node0 ; fail)
                                  | <?node0 < !parent0 + !UnknownParent()>
                                  , all-parents0
                                  , global-cache0
                                  , rewrite-mode0
                                  , signature0
                                  )> <id>
                               ; id
                               ; not(EVAL_FAILED)
                             }
                     in
                       cached015
                     end
                   | <?node0 < !parent0 + !UnknownParent()>
                   , all-parents0
                   , global-cache0
                   , rewrite-mode0
                   , Anonymous()
                   )> <id>
                ; id
                ; not(EVAL_FAILED)
              }
      in
        cached016
      end

  eval-lookup-multiple-ordered-decorator0(cached0, fetch-decl, is-scope|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    id => node0
    ; where(id)
    ; let cached017 =
            fail
            < not(EVAL_FAILED)
            + {cached-node17:
                ?cached-node17
                ; <eval-down-decorator0(
                     cached017
                   , id
                     ; ((eval-lookup-multiple-ordered-decorator0-100000(
                           cached017
                         , fetch-decl
                         , is-scope
                         | parent0
                         , all-parents0
                         , global-cache0
                         , rewrite-mode0
                         , signature0
                         )
                         <+ fail)
                        <+ <id> node0 ; fail)
                   | <?node0 < !parent0 + !UnknownParent()>
                   , all-parents0
                   , global-cache0
                   , rewrite-mode0
                   , Anonymous()
                   )> <id>
                ; id
                ; not(EVAL_FAILED)
              }
      in
        cached017
      end

  eval-lookup-multiple-unordered-decorator0(cached0, fetch-decl, is-scope|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-lookup-multiple-unordered-decorator0-100000(
          cached0
        , fetch-decl
        , is-scope
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        , signature0
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-lookup-multiple-global-decorator0(cached0, fetch-decl|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    id => node0
    ; where(id)
    ; let cached019 =
            fail
            < not(EVAL_FAILED)
            + {cached-node19:
                ?cached-node19
                ; <eval-at-root-decorator0(
                     cached019
                   , let cached018 =
                           fail
                           < not(EVAL_FAILED)
                           + {cached-node18:
                               ?cached-node18
                               ; <eval-cached-decorator0(
                                    cached018
                                  , id
                                    ; ((eval-lookup-multiple-global-decorator0-100000(
                                          cached018
                                        , fetch-decl
                                        | parent0
                                        , all-parents0
                                        , global-cache0
                                        , rewrite-mode0
                                        , signature0
                                        )
                                        <+ fail)
                                       <+ <id> node0 ; fail)
                                  | <?node0 < !parent0 + !UnknownParent()>
                                  , all-parents0
                                  , global-cache0
                                  , rewrite-mode0
                                  , signature0
                                  )> <id>
                               ; id
                               ; not(EVAL_FAILED)
                             }
                     in
                       cached018
                     end
                   | <?node0 < !parent0 + !UnknownParent()>
                   , all-parents0
                   , global-cache0
                   , rewrite-mode0
                   , Anonymous()
                   )> <id>
                ; id
                ; not(EVAL_FAILED)
              }
      in
        cached019
      end

  eval-all-decls-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-all-decls-decorator0-100000(
          cached0
        , a
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        , signature0
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-all-decls(fetch-decl-defined, is-scope|parent0, all-parents0, global-cache0, rewrite-mode0, arg14) =
    id => node0
    ; where(lookup-signature := arg14 ; id)
    ; let cached022 =
            fail
            < not(EVAL_FAILED)
            + {cached-node22:
                ?cached-node22
                ; <eval-down-decorator0(
                     cached022
                   , let cached021 =
                           fail
                           < not(EVAL_FAILED)
                           + {cached-node21:
                               ?cached-node21
                               ; <eval-before-decorator0(
                                    cached021
                                  , let cached020 =
                                          fail
                                          < not(EVAL_FAILED)
                                          + {cached-node20:
                                              ?cached-node20
                                              ; <eval-cached-decorator0(
                                                   cached020
                                                 , id
                                                   ; ((eval-all-decls-100000(
                                                         fetch-decl-defined
                                                       , is-scope
                                                       | parent0
                                                       , all-parents0
                                                       , global-cache0
                                                       , rewrite-mode0
                                                       , arg14
                                                       )
                                                       <+ fail)
                                                      <+ <id> node0 ; fail)
                                                 | <?node0 < !parent0 + !UnknownParent()>
                                                 , all-parents0
                                                 , global-cache0
                                                 , rewrite-mode0
                                                 , Anonymous()
                                                 , <<eval-strip-arg-values(
                                                     | <?node0 < !parent0 + !UnknownParent()>
                                                     , all-parents0
                                                     , global-cache0
                                                     , rewrite-mode0
                                                     )> lookup-signature
                                                    ; not(EVAL_FAILED)>
                                                 )> <id>
                                              ; id
                                              ; not(EVAL_FAILED)
                                            }
                                    in
                                      cached020
                                    end
                                  , where(is-scope)
                                  | <?node0 < !parent0 + !UnknownParent()>
                                  , all-parents0
                                  , global-cache0
                                  , rewrite-mode0
                                  , Anonymous()
                                  )> <id>
                               ; id
                               ; not(EVAL_FAILED)
                             }
                     in
                       cached021
                     end
                   | <?node0 < !parent0 + !UnknownParent()>
                   , all-parents0
                   , global-cache0
                   , rewrite-mode0
                   , Anonymous()
                   )> <id>
                ; id
                ; not(EVAL_FAILED)
              }
      in
        cached022
      end

  eval-before-decorator0(cached0, a, s|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-before-decorator0-100000(
           cached0
         , a
         , s
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-after-decorator0(cached0, a, s|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-after-decorator0-100000(
           cached0
         , a
         , s
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-in-decorator0(cached0, a, s : t * s -> s|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-in-decorator0-100000(
           cached0
         , a
         , s
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-test-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-test-decorator0-100000(
           cached0
         , a
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ id)

  eval-up-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-up-decorator0-100000(
           cached0
         , a
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-down-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-down-decorator0-100000(
           cached0
         , a
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-at-root-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    id => node0
    ; where(id)
    ; let cached023 =
            fail
            < not(EVAL_FAILED)
            + {cached-node23:
                ?cached-node23
                ; <eval-down-decorator0(
                     cached023
                   , id
                     ; ((eval-at-root-decorator0-100000(
                           cached023
                         , a
                         | parent0
                         , all-parents0
                         , global-cache0
                         , rewrite-mode0
                         , signature0
                         )
                         <+ fail)
                        <+ <id> node0 ; fail)
                   | <?node0 < !parent0 + !UnknownParent()>
                   , all-parents0
                   , global-cache0
                   , rewrite-mode0
                   , Anonymous()
                   )> <id>
                ; id
                ; not(EVAL_FAILED)
              }
      in
        cached023
      end

  eval-default-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0, arg15) =
    (id => node0
     ; id
     ; ((eval-default-decorator0-100000(
           cached0
         , a
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         , arg15
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-default-decorator0(cached0, a, value|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-default-decorator0-100001(
           cached0
         , a
         , value
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-rewrite-td-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-rewrite-td-decorator0-100000(
           cached0
         , a
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-rewrite-bu-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-rewrite-bu-decorator0-100000(
           cached0
         , a
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-assert-input-decorator0(cached0, a, condition|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-assert-input-decorator0-100000(
           cached0
         , a
         , condition
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-assert-input-decorator0(cached0, a, condition|parent0, all-parents0, global-cache0, rewrite-mode0, signature0, arg16) =
    (id => node0
     ; id
     ; ((eval-assert-input-decorator0-100001(
           cached0
         , a
         , condition
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         , arg16
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-assert-output-decorator0(cached0, a, condition|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-assert-output-decorator0-100000(
           cached0
         , a
         , condition
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-assert-output-decorator0(cached0, a, condition|parent0, all-parents0, global-cache0, rewrite-mode0, signature0, arg17) =
    (id => node0
     ; id
     ; ((eval-assert-output-decorator0-100001(
           cached0
         , a
         , condition
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         , arg17
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-fail-fatal-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-fail-fatal-decorator0-100001(
           cached0
         , a
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ eval-fail-fatal-decorator0-100000(
              cached0
            , a
            | parent0
            , all-parents0
            , global-cache0
            , rewrite-mode0
            , signature0
            )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-plain-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-plain-decorator0-100000(
          cached0
        , a
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        , signature0
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-disable-warnings-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-disable-warnings-decorator0-100000(
          cached0
        , a
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        , signature0
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-disable-trace-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-disable-trace-decorator0-100000(
          cached0
        , a
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        , signature0
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-alter-signature-decorator0(cached0, a, alter|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-alter-signature-decorator0-100000(
          cached0
        , a
        , alter
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        , signature0
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-bagof-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-bagof-decorator0-100000(
          cached0
        , a
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        , signature0
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-trace-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-trace-decorator0-100000(
           cached0
         , a
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-circular-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0, arg18) =
    id => node0
    ; where(initial-value := arg18 ; id)
    ; id
    ; ((eval-circular-decorator0-100000(
          cached0
        , a
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        , signature0
        , arg18
        )
        <+ fail)
       <+ <id> node0 ; fail)

  eval-non-circular-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-non-circular-decorator0-100000(
           cached0
         , a
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-non-circular-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0, arg19) =
    (id => node0
     ; id
     ; ((eval-non-circular-decorator0-100001(
           cached0
         , a
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         , arg19
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-Type-decorator0(cached0, a, tout|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-Type-decorator0-100000(
           cached0
         , a
         , tout
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-Type-decorator0(cached0, a, tin, tout|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-Type-decorator0-100001(
           cached0
         , a
         , tin
         , tout
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-String-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-String-decorator0-100000(
           cached0
         , a
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-List-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-List-decorator0-100000(
           cached0
         , a
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-List-decorator0(cached0, a, t|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-List-decorator0-100001(
           cached0
         , a
         , t
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-Set-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-Set-decorator0-100000(
           cached0
         , a
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-Set-decorator0(cached0, a, t|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-Set-decorator0-100001(
           cached0
         , a
         , t
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-Int-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-Int-decorator0-100000(
           cached0
         , a
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-Test-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-Test-decorator0-100000(
           cached0
         , a
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ id)

  eval-Obsolete-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0) =
    (id => node0
     ; id
     ; ((eval-Obsolete-decorator0-100000(
           cached0
         , a
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-Obsolete-decorator0(cached0, a|parent0, all-parents0, global-cache0, rewrite-mode0, signature0, arg21) =
    (id => node0
     ; id
     ; ((eval-Obsolete-decorator0-100001(
           cached0
         , a
         | parent0
         , all-parents0
         , global-cache0
         , rewrite-mode0
         , signature0
         , arg21
         )
         <+ fail)
        <+ <id> node0 ; fail))
    ; (EVAL_FAILED <+ aster-init-node-ensure(|all-parents0, global-cache0))

  eval-has-Type(t|parent0, all-parents0, global-cache0, rewrite-mode0) =
    id => node0
    ; where(id)
    ; id
    ; ((eval-has-Type-100000(
          t
        | parent0
        , all-parents0
        , global-cache0
        , rewrite-mode0
        )
        <+ fail)
       <+ <id> node0 ; fail)
