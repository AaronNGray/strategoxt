/**
 * Based on: Tests for the Stratego SGLR Library.
 *
 * @author  Martin Bravenboer <martin.bravenboer@gmail.com>
 */
module asfix-anno-location-tests
imports
  libstratego-lib
  libstratego-xtc
  libstratego-sglr
  ExpInt

strategies

  main-asfix_anno_location_tests =
    test-suite(!"asfix-anno-location",
      asfix-anno-location-tests
    )

  asfix-anno-location-tests =
      where(
        <ReadFromFile> "ExpInt.tbl"; open-parse-table => tbl
      )

    ; asfix-anno-location-test(|"Location of a simple expression", tbl
      , "1 + 2"
      , Plus(
          Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
        , Int("2"{Location(1,5,1,6)}){Location(1,5,1,6)}
        ){Location(1,1,1,6)}
      )

    ; asfix-anno-location-test(|"Location with newline 1", tbl
      , "1 \n + 2"
      , Plus(
          Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
        , Int("2"{Location(2,4,2,5)}){Location(2,4,2,5)}
        ){Location(1,1,2,5)}
      )

    ; asfix-anno-location-test(|"Location with newline 2", tbl
      , "1 \n\n + 2"
      , Plus(
          Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
        , Int("2"{Location(3,4,3,5)}){Location(3,4,3,5)}
        ){Location(1,1,3,5)}
      )

    ; asfix-anno-location-test(|"Location with newline 3", tbl
      , "1 \n\n + \n\n 2"
      , Plus(
          Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
        , Int("2"{Location(5,2,5,3)}){Location(5,2,5,3)}
        ){Location(1,1,5,3)}
      )

    ; asfix-anno-location-test(|"Location with newline 4", tbl
      , "1\n+\n2"
      , Plus(
          Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
        , Int("2"{Location(3,1,3,2)}){Location(3,1,3,2)}
        ){Location(1,1,3,2)}
      )

    ; asfix-anno-location-test(|"Location with newline 5", tbl
      , "1\n\n+\n\n2"
      , Plus(
          Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
        , Int("2"{Location(5,1,5,2)}){Location(5,1,5,2)}
        ){Location(1,1,5,2)}
      )

    ; asfix-anno-location-test(|"Location with \\r newline 1", tbl
      , "1 \r\n + 2"
      , Plus(
          Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
        , Int("2"{Location(2,4,2,5)}){Location(2,4,2,5)}
        ){Location(1,1,2,5)}
      )

    ; asfix-anno-location-test(|"Location of a simple expression", tbl
      , "1 + 234"
      , Plus(
          Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
        , Int("234"{Location(1,5,1,8)}){Location(1,5,1,8)}
        ){Location(1,1,1,8)}
      )

    ; asfix-anno-location-test(|"Location of a simple expression with some whitespace", tbl
      , "   1 + 234  "
      , Plus(
          Int("1"{Location(1,4,1,5)}){Location(1,4,1,5)}
        , Int("234"{Location(1,8,1,11)}){Location(1,8,1,11)}
        ){Location(1,4,1,11)}
      )

    ; asfix-anno-location-test(|"Location of simple expression with some whitespace", tbl
      , "   1   +   234  "
      , Plus(
          Int("1"{Location(1,4,1,5)}){Location(1,4,1,5)}
        , Int("234"{Location(1,12,1,15)}){Location(1,12,1,15)}
        ){Location(1,4,1,15)}
      )

    ; where(
        <close-parse-table> tbl
      )

    ; where(
        <ReadFromFile> "ExpIntAmb.tbl"; open-parse-table => ambtbl
      )

    ; apply-and-check(!"Location for a simple ambiguous expression"
      , asfix-anno-location-test-strategy(|ambtbl)
      , !"1 + 2 + 3"
      , ?amb(<id>)
        ; fetch(
            ?Plus(
              Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
            , Plus(
                Int("2"{Location(1,5,1,6)}){Location(1,5,1,6)}
              , Int("3"{Location(1,9,1,10)}){Location(1,9,1,10)}
              ){Location(1,5,1,10)}
            ){Location(1,1,1,10)}
          )
        ; fetch(
            ?Plus(
              Plus(
                Int("1"{Location(1,1,1,2)}){Location(1,1,1,2)}
              , Int("2"{Location(1,5,1,6)}){Location(1,5,1,6)}
              ){Location(1,1,1,6)}
            , Int("3"{Location(1,9,1,10)}){Location(1,9,1,10)}
            ){Location(1,1,1,10)}
         )
      )

    ; where(
        <close-parse-table> ambtbl
      )

  asfix-anno-location-test(|msg, tbl, string, term) =
      apply-test(!msg
      , asfix-anno-location-test-strategy(|tbl)
      , !string
      , !term
      )

  asfix-anno-location-test-strategy(|tbl) =
    parse-string-pt(|tbl)
    ; asfix-anno-location
    ; implode-asfix

signature
  constructors
    WithAnno   : A * B -> C
    ToTerm     : A -> B
    ToMetaExpr :  A -> B
    FromTerm   : A -> B
    FromApp    : A -> B
    Empty      : A
    appl       : A * B -> C

    Iter : A -> B
    Iter-sep : A -> B
    Iter-star : A -> B
    Iter-star-sep : A -> B
    Nesting-iter-sep1 : A -> B
    Nesting-iter-sep2 : A -> B
    Nesting-iter-star-sep : A -> B
    Empty-iter-star-sep : A -> B
    
    IterN : A -> B
    IterSepN : A -> B

    Alt1a : A -> B
    Alt2a : A * B -> C
    Alt4a : A -> B
    Var1  : A -> B

    Call : Id * List(Exp) -> B
    Plus : A -> B    
    Minus : A -> B
    Id : A -> B
    True : A
    
    Foo : A -> A
    Foo : A * A -> A
    Foo : A * A * A -> A

    pos-info : AnnoKey
