/**
 * strj options
 *
 * @see s2j-options
 *
 * @author Lennart Kats
 */
module strj-options

imports
  s2j-options
  strj-version

strategies

  strj-preinit-options =
    <set-config> ("VERSION", <strc-version-number>)
  ; <set-config> ("--verbose", 1)
  ; <set-config> ("--statistics", 1)
  ; <set-config> ("-O", 2)
  ; <set-config> ("-I", [])
 
  strj-parse-options =
    with(
      strj-preinit-options
    )
  ; parse-options(
      strj-options
    )
  ; display-version
  ; strc-announce
  ; if <get-config> "-o"; base-filename; not(<eq> (<id>, <jify>)); not(<get-config> "-F") then
      <get-config> "-o"
    ; fatal-err(|"Output file name is not a legal Java name")
    end
  ; if <get-config> "--library"; not(<get-config> "-p" + <get-config> "-F") then
      fatal-err-msg(|"No package name specified")
    end
  
  strj-options =
    input-option
  <+
    output-option // TODO: add a -d destination dir option that uses the package name
  <+
    ArgOption(
      "--main" + "-m"
    , <set-config>("-m", <id>); !()
    , !"--main f | -m f    Main strategy to compile (default: main)"
    )
  <+
    Option(
      "--clean" + "-clean"
    , <set-config> ("--clean", <id>)
    , !"--clean            Remove all existing Java files in the output directory"
    )
  <+
    s2j-general-options
        
  <+ ArgOption(fail, fail, !"")
  <+ ArgOption(fail, fail, !"Library options:")
  <+ ArgOption(fail, fail, !"")
  <+
    s2j-library-options

  <+ ArgOption(fail, fail, !"")
  <+ ArgOption(fail, fail, !"Configuration of the Stratego compiler:")
  <+ ArgOption(fail, fail, !"")
  <+
    Option("--ast",
      where(<set-config>("--ast",())); !(),
      !"--ast              Produce abstract syntax tree of packed program"
    )
  <+
    Option("-F",           
      where(<set-config>("-F",())); !(),
      !"-F                 Produce core after front-end"
    )
  <+ 
    Option("--prefer-str",
    where(<set-config> ("--prefer-str", "")); !(),
    !"--prefer-str       Prefer .str files over .rtree files")
  <+
    Option("--fusion",     
    where(<toggle-config>("--fusion",())); !(),
    !"--fusion           Toggle specialize applications of innermost (default: on)" )
  <+
    Option("--asfix",
    where(<set-config>("--asfix",())); !(),
    !"--asfix            Concrete syntax parts are not imploded")
  <+
    Option("--Xfast-pp",
      if-java-platform(warn(|"Fast pretty printing not available on Java"));
      if-c-platform(rules(FastPrettyPrinting: _))
    , !"--Xfast-pp         Use the C-based ugly and fast pretty-printer";
      if-java-platform(fail)
    )
  <+
    Option("--Xecj33",
      rules(OldECJCompatibility: _)
    , !"--Xecj33           Generate code compatible with ECJ 3.3 and lower";
      if-java-platform(fail)
    )
  <+
    Option("-c",
      warn-msg(|"Ignored unsupported option -c")
    , fail
    )
  
  <+ ArgOption(fail, fail, !"")
  <+ ArgOption(fail, fail, !"General options:")
  <+ ArgOption(fail, fail, !"")
  <+
    general-options
  <+
    Option("-h" + "--help",         
    where(<set-config> ("--help",())); !(),         
    !"-h | --help        Show help")
  <+
    Option("-v" + "--version",     
    where(<set-config> ("-v",())); !(),         
    !"-v | --version     Display program's version")
  <+
    stratego-warnings-options
