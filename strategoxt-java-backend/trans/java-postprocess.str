/**
 * Java output postprocessing.
 *
 * @author Lennart Kats
 */
module java-postprocess

imports
  libjava-front

strategies

  java-relabel =
    java-relabel(|"NO_FAIL_LABEL", "NO_SUCCESS_LABEL", "NO_OUTER_LABEL")

  java-relabel(|failure, success, outer-fail) =
    java-relabel-outer-label(|failure, success, outer-fail)
  <+
    java-relabel-success-label(|failure, success, outer-fail)
  <+
    java-relabel-stm(|failure, success, outer-fail)
  <+
    all(java-relabel(|failure, success, outer-fail))
  
  java-relabel-stm(|failure, success, outer-fail) :
    |[ Fail: { bstm* } ]| -> |[ x_label': { bstm'* } ]|
    with
      x_label' := <newname> "Fail"
    ; bstm'*   := <java-relabel(|x_label', success, failure)> bstm*
  
  java-relabel-success-label(|failure, success, outer-fail) :
    |[ Success: { bstm* } ]| -> bstm |[ x_label': { bstm'* } ]|
    with
      x_label' := <newname> "Success"
    ; bstm'*   := <java-relabel(|failure, x_label', outer-fail)> bstm*
   
  java-relabel-outer-label(|failure, success, outer-fail) :
    |[ OuterFail: { bstm* } ]| -> bstm |[ { bstm'* } ]|
    with
      bstm'* := <java-relabel(|outer-fail, success, outer-fail)> bstm*
  
   java-relabel-stm(|failure, success, outer-fail) :
     Id("Fail") -> Id(failure)
   
   java-relabel-stm(|failure, success, outer-fail) :
     Id("Success") -> Id(success)
   
   java-relabel-stm(|failure, success, outer-fail) :
     Id("OuterFail") -> Id(outer-fail)

strategies

  java-simplify =
    topdown-consnil(
      try(Block(flatten-list))
    ; repeat(java-simplify-stm + java-simplify-expr)
    )

  topdown-consnil(s) =
    rec rec(s; all-consnil(rec))
  
  all-consnil(s) =
    ?[_ | _] < [s | s] + all(s)
  
  java-simplify-stm :
    [Empty() | s*] -> s*
  
  java-simplify-stm :
    If(e, s1, Empty()) -> If(e, s1)
  
  java-simplify-stm :
    |[ if (e1 == e2) ; else stm2 ]| -> |[ if (e1 != e2) stm2 ]|
  
  java-simplify-expr :
    |[ new IStrategy[] {} ]| -> |[ EMPTY_STRATEGY_LIST ]|
  
  java-simplify-expr :
    |[ new IStrategoTerm[] {} ]| -> |[ EMPTY_TERM_LIST ]|
    
  java-simplify-stm :
    bstm* |[ if (TRACES_ENABLED) stm bstm* ]| -> bstm* |[ stm bstm* ]|
    where
      <get-config> "--stacktrace" => 1

  java-simplify-stm :
    bstm* |[ if (TRACES_ENABLED) stm bstm* ]| -> bstm*
    where
      <get-config> "--stacktrace" => 0
  
  java-eliminate-stacktrace =
    alltd(
      \bstm |[ if (TRACES_ENABLED) stm ]| -> Empty()\
    )

strategies

  java-optimize =
    topdown-consnil(try(
      optimize-match-test
    ))
  ; topdown(try( // should be done after previous pass
      optimize-if-true-break
    ))

  optimize-match-test :
    bstm* |[
      IStrategoTerm x_cached = term;
      Success: {
        Fail: {
          ~bstm*:<match-decls-and-appl-test => (bstm_decl*, x_cons, bstm_body*)>
        }
        term = x_cached;
        bstm_othermatch*
      }
      bstm_tail*
    ]| ->
    bstm* |[
      if (term.getTermType() != IStrategoTerm.APPL)
        break Fail;
      IStrategoTerm x_cached = term;
      IStrategoConstructor x_actualcons = ((IStrategoAppl) term).getConstructor();
      Success: {
        Fail: {
          if (x_actualcons != x_cons) break Fail;
          bstm_decl*
          bstm_body*
        }
        term = x_cached;
        bstm_othermatch'*
      }
      bstm_tail*
    ]|
    with
      x_actualcons := <newname> "cons"
    where
      bstm_othermatch'* := <replace-match-test1(|x_actualcons, x_cached)> bstm_othermatch*

  replace-match-test1(|x_actualcons, x_cached) :
    bstm* |[
      IStrategoTerm x_cached' = term;
      Success: {
        Fail: {
          ~bstm*:<match-decls-and-appl-test => (bstm_decl*, x_cons, bstm_body*)>
        }
        term = x_cached';
        bstm_othermatch*
      }
      bstm_tail*
    ]| ->
    bstm* |[
      Success: {
        Fail: {
          if (x_actualcons != x_cons) break Fail;
          bstm_decl*
          bstm_body*
         }
        term = x_cached;
        bstm_othermatch'*
      }
      bstm_tail*
    ]|
    with
      bstm_othermatch'* := <try(replace-match-test1(|x_actualcons, x_cached))> bstm_othermatch*

  replace-match-test1(|x_actualcons) :
    bstm* |[
      ~*<match-decls-and-appl-test => (bstm_decl*, x_cons, bstm_body*)>
    ]| ->
    bstm* |[
      if (x_actualcons != x_cons) break Fail;
      bstm_decl*
      bstm_body*
    ]|
  
  match-decls-and-appl-test :
    bstm* |[ IStrategoTerm x = null; bstm* ]| -> ([<Hd> | bstm_decl*], x_cons, bstm_body*)
    where
      (bstm_decl*, x_cons, bstm_body*) := <match-decls-and-appl-test> bstm*
    
  match-decls-and-appl-test :
    bstm* |[
      if (~e:ExprName(Id("term")).getTermType() != IStrategoTerm.APPL || x_cons != ((IStrategoAppl) term).getConstructor())
        break Fail;
      bstm_body*
    ]| ->
    ([], x_cons, bstm_body*)
    
  optimize-if-true-break :
    |[ Fail: { bstm* } ]| -> |[ Fail: { bstm'* } ]|
    where
      !bstm*
    ; one(?|[ if (e) break Fail; ]|)
    ; at-last([remove-if-true]) => bstm'*
  
  remove-if-true :
    |[ if (TRUE) break Fail; ]| -> |[ break Fail; ]|
  
  remove-if-true :
    |[ if (TRUE) break Success; ]| -> |[ break Success; ]|
  
  remove-if-true :
    |[ if (TRUE) return e; ]| -> |[ return e; ]|
