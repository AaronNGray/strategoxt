module backend-simplify
imports
  libstratego-lib
  libstrc
  
signature
 constructors
   Meta: List(Term) -> Term
   Filename: Str -> Term
  
strategies

  main-backend-simplify = io-wrap(backend-simplify)
  
  backend-simplify = 
       lift-definitions
     ; canonicalize
     ; simplify1
     ; mark-bound-unbound-vars
     ; escaping-variables
     ; remove-closure-allocs

rules

  remove-closure-allocs =
    alltd(remove-closure-alloc-let)
  
  remove-closure-alloc-let :
    Let(def*, s) -> Let(def'*, s')
    with
      def'* := <remove-closure-allocs>
               <filter(not(remove-closure-alloc-def))> def*
    ; s' := <remove-closure-allocs>
            <alltd(remove-closure-alloc-call)> s
  
  /* UNDONE: removed more than just {ClosureAlloc} annotated defs (breaks test08.str)
  remove-closure-alloc-def(|other-defs) :
    SDefT(x, [], [], s @ CallT(_, _, _)) -> []
    where
      x' := x{}
    ; <not(oncetd({y: ?SVar(y); !y{} => x'}))> other-defs
    with
      rules(RemoveClosureAlloc: x' -> s)
  */
    
  remove-closure-alloc-def :
    SDefT(x{a*}, _, _, s) -> []
    where
      <one(ClosureAlloc)> a*
    with
      x' := x{}
    ; rules(RemoveClosureAlloc: x' -> s)
  
  remove-closure-alloc-call :
    CallT(SVar(x), [], _) -> inline
    where
      <RemoveClosureAlloc> x{} => inline

