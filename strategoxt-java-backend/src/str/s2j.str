/**
 * Java backend for the Stratego compiler
 *
 * @author Karl Trygve Kalleberg
 * @author Lennart Kats
 * @author Eelco Visser
 */
module s2j

imports
  libstrc
  libstratego-xtc
  libstratego-rtg
  libstratego-lib

  java-postprocess
  variable-lifting
  variable-access
  s2j-options
  lib/core-lift-eblocks
  
  Java-EBlock

signature
  constructors 
    Next  : Term
    Match : Term * Exp -> Exp
    Filename : Str -> Term
    Offset: Int -> Term
    Frames: List(Term) -> Term

overlays

  MAX_STATIC_TARGS = 5
  MAX_STATIC_SARGS = 5
    
strategies

  io-s2j =
    io-wrap(
      s2j-options
    ,
      with(s2j-init-options)
    ; java-backend
    )
 
rules
 
  fc =
    id
    /*
    with(
      verbosity => oldverbosity
    ; <set-verbosity> 1
    )
  ; with(
      rtg-format-check(true, true|<java-rtg>)
    ; <set-verbosity> oldverbosity
    | "Internal error: resulting term is not well-formed"
    )
    */
  
  java-rtg =
    JavaRTG
  <+
    import-term(Java-15.rtg.af)
  ; rules(JavaRTG := <id>)
    
  java-backend = 
      extract-meta
    ; java-compile-spec
    ; java-simplify
    ; core-lift-eblocks
    ; java-relabel
     
  extract-meta = 
     ?_{Meta(metas)}
    ; rules(Metas := metas)
  
  meta-filename = 
      Metas
    ; getfirst(?Filename(<id>))

  compute-classname = 
      meta-filename 
    ; base-filename
    ; jify
    ; remove-extension
  
  jify =
    escape(Jify)
  
  Jify(x) =
    \['_'  | cs] -> ['_' | <x> cs]\
  <+
    Cify(x)
    
  java-compile-spec :
    Specification([Signature([Constructors(ops)]), Strategies(defs)]) -> 
     |[ 
     ~package-dec?: pkgname
     
     ~import-dec*:imports

     import org.strategoxt.lang.*;
     import org.spoofax.interpreter.terms.*;
         
     import static org.strategoxt.lang.Term.checkListTail;
     import static org.strategoxt.lang.Term.checkListAnnos;
     import static org.strategoxt.lang.Term.EMPTY_STRATEGY_LIST;
     import static org.strategoxt.lang.Term.EMPTY_TERM_LIST;
         
     @SuppressWarnings({"unused"})
     public class x_name {

     private static boolean TRACES_ENABLED = e_traces;
     private static ITermFactory constantFactory;

     ~*cnst-decls
     ~*cnstr-decls
     
     public static void preInit(ITermFactory termFactory) {
       ~*import-inits
       ~*cnstr-inits
       ~*cnst-inits
       constantFactory = termFactory;
     }

     ~*main
     
     private static IStrategoTerm getConstant(ITermFactory factory, IStrategoTerm constant) {
         if (factory == constantFactory) {
           return constant;
         } else if (factory != null) {
           return new TermConverter(factory).convert(constant);
         } else {
           throw new IllegalStateException("Component not initialized; please call preinit() first");
         }
     }
     
     private static IStrategoTerm getConstant(ITermFactory factory, ITermReference constant) {
         if (factory == constantFactory) {
           return constant.get();
         } else if (factory != null) {
           return new TermConverter(factory).convert(constant.get());
         } else {
           throw new IllegalStateException("Component not initialized; please call preinit() first");
         }
     }

     ~*function-defs
     ~*lifted-defs

     }
     ]|
  with 
      alltd(JavaTranslate)
    ; imports       := <java-imports>
    ; import-inits  := <java-init-imports>
    ; x_name        := <compute-classname>
    ; pkgname       := <!package-dec? |[ package ~x:<get-config> "-p"; ]| <+ !None()>
    ; main          := <java-main-methods>
    ; function-defs := <map(translate-outer-definition)> defs
    ; lifted-defs   := <bagof-Fragment> "LiftedDef"
    ; cnstr-decls   := <bagof-Fragment> "ConstructorDecl"
    ; cnstr-inits   := <bagof-Fragment; concat> "ConstructorInit"
    ; cnst-decls    := <bagof-Fragment> "ConstDecl"
    ; cnst-inits    := <bagof-Fragment; concat; reverse> "ConstInit"
    ; switch <get-config> "--stacktrace"
        case 0: e_traces := |[ false ]|
        case 1: e_traces := |[ true ]|
        case 2: e_traces := |[ x_name.class.desiredAssertionStatus() ]|
      end
  
  java-imports =
    <get-config> "-la"
  ; map(java-import)
  <+
    ![]
  
  java-init-imports =
    <get-config> "-la"
  ; map(java-init-import)
  <+
    ![]
  
  java-import :
    x -> StaticImportOnDemandDec(TypeName(Id(x')))
    with
      x' := <jify> x
  
  java-init-import :
    x -> |[ x'.preInit(termFactory); ]|
    with
      x' := <jify> x


  java-main-methods :
    _ -> []
    where
      <get-config> "--library"

  java-main-methods :
    _ ->
    |[
     public static String testMain(String input) {
        Context context = new Context();
        preInit(context.getFactory());
        try {
          IStrategoTerm result = main_0_0.instance.invoke(context, context.getFactory().parseFromString(input));
          return result == null ? null : result.toString();
        } catch (StrategoExit exit) {
          return null;
        }
     }
        
     public static void main(String args[]) {
        Context context = new Context();
        preInit(context.getFactory());
        try {
          IStrategoTerm result = context.invokeStrategyCLI(main_0_0.instance, "~x_name", args);
          if (result == null) {
            System.err.println("~x_name" + (TRACES_ENABLED ? ": rewriting failed, trace:" : ": rewriting failed"));
            context.getStackTracer().printStackTrace();
            System.exit(1); 
          } else {
            System.out.println(result);
          }
        } catch (StrategoExit exit) {
          System.exit(exit.getValue());
        }
     }
    ]|
    where
      not(<get-config> "--library")
    with
      x_name := <compute-classname> ()

rules
  
  translate-outer-definition :
    SDefT(x, strats*, terms*, s) -> type-dec |[
       public static class x extends Strategy {
         public static x instance = new x();
         
         ~body
         ~invokedynamic*
       }
    ]|
    with
      body := <translate-definition-body>
    ; if is-dynamic-signature(|strats*, terms*) then
        invokedynamic* := [<make-invoke-dynamic> (strats*, terms*)]
      else
        invokedynamic* := []
      end

  translate-inner-definition :
    SDefT(x, strats*, terms*, s) -> type-dec |[
       private static final class x extends Strategy {
         ~instance-field*
         ~lifted-tfield*
         ~lifted-sfield*
         
         ~body
         ~invokedynamic*
       }
    ]|
    with
      (svars, tvars) := (<svars>, <tvars>)
    ; x'             := x{}
    ; lifted-tvar*   := <collect-lifted-tvars(|x', svars, tvars)>
    ; lifted-svar*   := <collect-lifted-svars(|x', svars)>
    ; lifted-sfield* := <map(\x -> class-body-dec |[ IStrategy x;      ]|\)> lifted-svar*
    ; lifted-tfield* := <map(\x -> class-body-dec |[ ITermReference x; ]|\)> lifted-tvar*
    ; lifted-args    := <conc> (lifted-svar*, lifted-tvar*)
    ; rules(LiftedSArgs: x' -> lifted-svar*)
    ; rules(LiftedTArgs: x' -> lifted-tvar*)
    with
      if !lifted-tvar* => lifted-svar* => [] then
        instance-field* := class-body-dec* |[ public static final x instance = new x(); ]|
      else
        instance-field* := []
      end
    with
      {| CurrentLiftedFrame :
        rules(CurrentLiftedFrame := x')
      ; body := <translate-definition-body>
      |}
    ; if is-dynamic-signature(|strats*, terms*) then
        invokedynamic* := [<make-invoke-dynamic> (strats*, terms*)]
      else
        invokedynamic* := []
      end
  
  make-invoke-dynamic :
    (s*, t*) ->
    |[ @Override
       public IStrategoTerm invokeDynamic(Context context, IStrategoTerm term,
                                          IStrategy[] sargs, IStrategoTerm[] targs) {
         if (sargs == null || targs == null || sargs.length != i_slength || targs.length != i_tlength)
           throw new IllegalArgumentException();
         
         return invoke(context, term, e_s*, e_t*);
       }
    ]|
    with
      i_slength := <write-to-string> <length> s*
    ; i_tlength := <write-to-string> <length> t*
    ; e_s*      := <number(\(_,n) -> |[ sargs[~i:<write-to-string> n] ]|\)> s*
    ; e_t*      := <number(\(_,n) -> |[ targs[~i:<write-to-string> n] ]|\)> t*
  
  translate-definition-body :
    SDefT(x, strats*, terms*, s) ->
    |[ mod_override*
       public IStrategoTerm invoke(Context context, IStrategoTerm term, param*) {
           ITermFactory termFactory = context.getFactory();
           bstm_init*
           if (TRACES_ENABLED) context.getStackTracer().push("~x");
           Fail: {
             bstm
             if (TRACES_ENABLED) context.getStackTracer().popOnSuccess();
             if (true) // (avoid unreachable stm error)
               return term;
           };
           if (TRACES_ENABLED) context.getStackTracer().popOnFailure();
           return null;
       }
    ]|
    with
      {| IsStrategyArg:
        (strats', [])         := <translate-params> strats*
      ; (terms',  bstm_init*) := <translate-params> terms*
      ; param*                := <conc> (strats', terms')   
      ; if is-dynamic-signature(|strats*, terms*) then
          mod_override* := []
        else
          mod_override* := [ anno |[ @Override ]| ]
        end
      ; bstm    := <translate-body> s   
      |}
    
  translate-outer-definition :
    ExtSDef(_, _, _) -> Semicolon()

  translate-params =
    unzip(translate-param)
  ; (id, concat)

  translate-param :
    VarDec(x{}, ConstType(_)) -> (param |[ IStrategoTerm x ]|, [])

  translate-param :
    VarDec(x{Offset(_), Escapes()}, ConstType(_)) ->
    ( param |[ IStrategoTerm x' ]|
    , bstm* |[ TermReference x = new TermReference(x'); ]|)
    with
      x' := <newname> x
  
  translate-param : 
    VarDec(x, FunType(_, _)) -> (param |[ IStrategy x ]|, [])
    with
      x' := x{}
    ; rules(IsStrategyArg: x')
  
strategies
  
  /** @type Strategy -> Stm */
  translate-body = 
    translate-strategy

  translation-failed = ?x#(_) ; log(|Error(), [ "Unknown constructor type ", x ]) ; fail
  
  translate-Scope : 
    Scope(vars, body) -> bstm* |[ bstm_decl* bstm_body ]|
    with
      bstm_decl* := <map(to-java-vardecl)> vars
    ; bstm_body  := <translate-strategy> body
    
  /** @type Id -> Stm */
  translate-Id :
    Id() -> Empty()
    
  /** @type Id -> Stm */
  translate-Fail :
    Fail() -> |[ if (true) break Fail; ]| // (avoid unreachable stm error)

  /** @type Seq -> Stm */
  translate-Seq :
    Seq(s1, s2) -> 
    bstm* |[
        ~stm:<translate-strategy> s1 
        ~stm:<translate-strategy> s2 
    ]|

  /** @type GuardedLChoice -> Block */  
  translate-GuardedLChoice-no-left-branch :
    GuardedLChoice(s1, Id(), s2) ->
    bstm* |[
      IStrategoTerm x_termcopy = term;
      Skip: {
        Fail: {
           stm_s1
           if (true) // (avoid unreachable stm error)
             break Skip;
        }
        term = x_termcopy;
        stm_s2
      }
    ]|
   with
     x_termcopy := <newname> "term"
   ; stm_s1     := <translate-strategy> s1
   ; stm_s2     := <translate-strategy> s2

  /** @type GuardedLChoice -> Block */  
  translate-GuardedLChoice :
    GuardedLChoice(s1, s2, s3) ->
    bstm* |[
      IStrategoTerm x_termcopy = term;
      Success: {
        Fail: {
           stm_s1
           OuterFail: { // (redirects failure to outer Fail block)
             stm_s2
             if (true) // (avoid unreachable stm error)
               break Success;
           }
        }
        term = x_termcopy;
        stm_s3
      }
    ]|
   with
     x_termcopy := <newname> "term"
   ; stm_s1     := <translate-strategy> s1
   ; stm_s2     := <translate-strategy> s2
   ; stm_s3     := <translate-strategy> s3

  translate-strategy = 
       ( 
       translate-CallT-dynamic ; fc
    <+ translate-CallT ; fc
    <+ translate-Build ; fc
    <+ translate-Seq ; fc
    <+ translate-PrimT ; fc
    <+ translate-Id ; fc
    <+ translate-Fail ; fc
    <+ translate-GuardedLChoice-no-left-branch ; fc
    <+ translate-GuardedLChoice ; fc
    <+ translate-Scope ; fc
    <+ translate-Match ; fc
    <+ translate-Let; fc
    <+ translate-ImportTerm; fc
    <+ fatal-err(|"translate-strategy failed ")
       )

  translate-Let : 
    Let(defs, body) -> body'
    with
      <map(fragment(translate-inner-definition | "LiftedDef"))> defs
    ; body' := <translate-strategy> body

  translate-CallT-dynamic:
    CallT(SVar(x), s*, t*) ->
    bstm* |[
      bstm_init*
      term = e_instance.invokeDynamic(context, term, new IStrategy[] { e_s* }, new IStrategoTerm[] { e_t* });
      if (term == null) 
        break Fail;
    ]|
    where
      is-dynamic-signature(|s*, t*)
    with
      lifted-decls-wrap(
        if <is-self-call> x then
          e_instance := |[ this ]|
        else
          e_instance := <lifted-call-to-instance>
        end
      ; e_s* := <map(lifted-strategy-to-instance)> s*
      ; e_t* := <map(java-construct-term)> t*
      ,
        ?bstm_init*
      )

  translate-CallT:
    CallT(SVar(x), s*, t*) ->
    bstm* |[
      bstm_init*
      term = e_instance.invoke(context, term, e_s*, e_t*);
      if (term == null) 
        break Fail;
    ]|
    with
      lifted-decls-wrap(
        if <is-self-call> x then
          e_instance := |[ this ]|
        else
          e_instance := <lifted-call-to-instance>
        end
      ; e_s* := <map(lifted-strategy-to-instance)> s*
      ; e_t* := <map(java-construct-term)> t*
      ,
        ?bstm_init*
      )

  translate-PrimT :
    CallDynamic(f, s*, t*) -> <fail>
    with
      fatal-err(|"Think again. Dynamic calls are not supported")

  translate-PrimT :
    PrimT(f, s*, t*) -> 
    <java-check-unbound-args(|t*)>  
    bstm* |[
      bstm_init*
      term = context.invokePrimitive("~f", term, new IStrategy[] { e_s* }, new IStrategoTerm[] { e_t* });
      if (term == null) break Fail;
    ]|
    with
      lifted-decls-wrap(
        e_s*  := <map(lifted-strategy-to-instance)> s*
      ; e_t*  := <map(java-construct-term)> t*
      ,
        ?bstm_init*
      )
  
  lifted-decls-wrap(s, get-init-stms) =
    dr-ignore-states( // (hide and then scope these dyn. rules)
      s
    ; with(<get-init-stms> <conc> (<bagof-CallTDecls>, <bagof-CallTAssigns; concat>))
    | ["CallTDecl", "CallTDecls", "CallTAssigns"]
    )
  
  lifted-strategy-to-instance =
    if ?CallT(_, _, _) then
      // Pass (potentially parameterizable) svar calls as-is
      lifted-call-to-instance
    else
      // Lift definition and produce call
      with(
        !SDefT(<newname => x> "jlifted", [], [], <id>)
      ; fragment(translate-inner-definition | "LiftedDef")
      )
    ; <lifted-call-to-instance> CallT(SVar(x), [], [])
    end
  
  lifted-call-to-instance =
    lifted-call-to-instance-self-call
  <+
    lifted-call-to-instance-from-frame
  <+
    lifted-call-to-instance-with-args
  <+
    lifted-call-to-instance-direct
  <+
    lifted-call-to-instance-instance
  
  lifted-call-to-instance-self-call :
    CallT(SVar(x), _, _) -> expr |[ this ]|
    where
      <is-self-call> x

  lifted-call-to-instance-from-frame :
    CallT(SVar(x{a*}), _, _) -> expr |[ x ]|
    where
      frame := <CurrentLiftedFrame>
    ; !a*
    ; one(?Offset(_))
    ; one(Frames(one(?frame)))
  
  lifted-call-to-instance-with-args :
    CallT(SVar(x), _, _) -> expr |[ x' ]|
    where
      sarg* := <LiftedSArgs> x{}
    ; targ* := <LiftedTArgs> x{}
    ; (!sarg* => [_ | _] + !targ* => [_ | _]) // needs lifting
    with
      if not(<CallTDecl> x => x') then // add declaration
        x' := <newname> x
      ; rules(
          CallTDecl: x -> x'
        )
      ; init := bstm |[ x x' = new x(); ]|
      ; rules(
          CallTDecls :+= init
        )
      ; e_sarg* := <map(\x -> <lifted-call-to-instance> CallT(SVar(x), [], [])\)> sarg*
      ; e_targ* := <map(\x -> ExprName(Id(x))\)> targ*
      ; assigns := <zip(\(x_field, e_value) -> |[ x'.x_field = e_value; ]|\)> ([sarg*, targ*], [e_sarg*, e_targ*])
      ; rules(
          CallTAssigns :+= assigns
        )
      end
  
  lifted-call-to-instance-direct :
    CallT(SVar(x), _, _) -> expr |[ x ]|
    where
      <IsStrategyArg> x{}
    <+
      <LiftedSArgs> x{} => [_ | _]
    <+
      <LiftedTArgs> x{} => [_ | _]

  lifted-call-to-instance-instance :
    CallT(SVar(x), _, _) -> expr |[ x.instance ]|
  
  is-dynamic-signature(|s*, t*) =
    where(
      <gt> (<length> s*, MAX_STATIC_SARGS())
    + <gt> (<length> t*, MAX_STATIC_TARGS())
    )
  
/* ================================ Build  */

  translate-Build:
    Build(t) -> 
    <java-check-unbound-args(|t)> 
    bstm* |[
      ~*decs
      ~*stms
      term = e;
    ]|
    where
      {| java-CheckList :
         <java-construct-term> t => e
       ; bagof-java-CheckList; unzip; (id, reverse; concat) => (decs, stms)
      |}
      
  /**
   * Translate 'import-term'
   * - uses LazyTermReference for caching
   * - inlining construction would exceed max method limit
   *    even an array may have this effect
   *  - inlining a string could be an easy solution to inline it
   *    (minding the 32767 length limit)
   */
  translate-ImportTerm :
    ImportTerm(file) -> |[ term = getConstant(termFactory, x_cached); ]|
    with
      input := <file-exists> file
    <+
      <fatal-err(|"Could not read from included file")> file
    with
      outputfile := <base-filename> file
    ; pkgname    := <get-config <+ !""> "-p"
    ; pkgpath    := <conc-strings> ("/", <string-replace(|".", "/")> pkgname, "/")
    with
      outputdir := <dirname> <get-config> "-o"
    // UNDONE: ; <copy-file> (input, outputdir)
    ; log(|Info(), ["Referenced imported term file ", file])
    <+
      <copy-file> (input, ".")
    ; log(|Info(), ["Copied imported term file to current directory ", outputfile])
    with
      x_cached := <new>
    ; x_main   := <compute-classname>
    ; fragment(
        !class-body-dec |[
          private static final ITermReference x_cached =
            new LazyTermReference() {
              @Override
              protected IStrategoTerm init() {
                java.io.InputStream stream = x_main.class.getResourceAsStream("/" + "~outputfile");
                if (stream == null)
                  stream = x_main.class.getResourceAsStream("~pkgpath" + "~outputfile");
                if (stream == null)
                  throw new StrategoException("~x_main" + ": Could not find imported term file " + "~outputfile");
                try {
                  return constantFactory.parseFromStream(stream);
                } catch (java.io.IOException exc) {
                  throw new StrategoException("~x_main" + ": Could not read imported term file " + "~outputfile", exc);
                } catch (RuntimeException exc) {
                  throw new StrategoException("~x_main" + ": Could not read imported term file " + "~outputfile", exc);
                }
              }
            };
        ]|
      | "ConstDecl"
      )
      
      // TODO: import-term

  java-check-unbound-args(|t) =
    try(java-CheckUnboundArgs(|t))

  java-CheckUnboundArgs(|t) :
    stm -> 
    bstm* |[
      if (e)
        break Fail;
      stm
    ]|
    where
      <collect({?Var(_){t*}; where(<not(["bound"])> t* )})> t
    ; not([])
    ; foldr1(!expr|[ ~expr:<Hd; java-ConstructVar> == null ]|
            ,!expr|[ ~expr:<Fst; java-ConstructVar> == null || ~expr:<Snd> ]|) => e

/**
 * Term construction with constant term caching
 */
rules 

  /** @type Term -> Exp */
  java-construct-term =
       java-Cache 
    <+ java-ConstructAnnoVar
    <+ java-ConstructVar
    <+ !(<id>, <java-ConstructTerm>)
       ; (java-CacheConstant <+ Snd)

  java-CacheConstant :
    (t, e1) -> |[ getConstant(termFactory, e2) ]|
  where
      <(Op(id, map(java-Cache)); java-proper-list 
            + Anno(java-Cache, java-Cache) 
            + Int(id) + Str(id) + Real(id) )> t
  with
        if !t => Op(op, _) then
          x := <newname> <conc-strings> ("const", <try(un-double-quote-chars); jify> op)
        else
          x := <newname> "const"
        end
      ; e2 := ExprName(Id(x))
      ; rules( java-Cache : t -> |[ getConstant(termFactory, e2) ]| )
      ; !(x, e1)
      ; fragment(java-DeclareTermId|"ConstDecl")
      ; fragment(java-InitTermId|"ConstInit")

 java-proper-list =
    Op("Nil", [])
    + Op("Cons", [id, java-proper-list + ?|[ getConstant(e1, e2) ]|])
    + Op(id, id)
      ; not(is-ListOp)

// helpers

strategies
    
  is-TupleOp = ?Op("", _)

  java-DeclareTermId :
    (x, e) ->
    class-body-dec|[ private static IStrategoTerm x; ]|

  java-InitTermId :
    (x, e) -> bstm*|[ x = e; ]|

  java-mk-int-const =
    !Lit(Deci(<try(int-to-string)>))

rules

  java-ConstructTerm :
    Int(i) -> 
    expr|[ 
      termFactory.makeInt(~expr:<java-mk-int-const> i)
    ]|

  java-ConstructTerm :
    Real(x) -> 
    expr|[ 
      termFactory.makeReal(~expr:Lit(Float(<try(real-to-string)> x)))
    ]|

  java-ConstructTerm :
    Str(x) -> 
    expr|[ 
      termFactory.makeString(~expr:Lit(String([Chars(<escape> x)])))
    ]|

  java-ConstructVar :
    x@Var(_) -> e
  with 
      e := <java-VarToReadRef> x

  java-ConstructAnnoVar :
    Anno(Var(x), pt2) -> 
    expr|[ 
      termFactory.annotateTerm(e, checkListAnnos(termFactory, ~expr:<java-construct-term> pt2))
    ]|
  where
      <java-ConstructVar> Var(x) => e

  java-ConstructTerm :
    Anno(pt1, Op("Nil", [])) -> <java-construct-term> pt1
  where 
      <not(?Var(_))> pt1

  java-ConstructTerm :
    Anno(pt1, pt2) -> 
    expr|[ 
      termFactory.annotateTerm(~expr:<java-construct-term> pt1, checkListAnnos(termFactory, ~expr:<java-construct-term> pt2))
    ]|
  where 
      <not(?Op("Nil", []))> pt2
    ; <not(?Var(_))> pt1

//  java-ConstructTerm :
//    |[ _ t ]| -> <java-construct-term> t

  java-ConstructTerm :
    Op(c, t*) -> expr|[ termFactory.makeAppl(~*[cn | args]) ]|
  where
      not(is-ListOp + is-TupleOp)
  with
      cn   := ExprName(Id(<java-ConstructorName> (c, <length> t*)))
    ; args := <map(java-construct-term)> t*
    
  java-ConstructTerm :
    Explode(t1, t2) -> 
    expr |[
      {| IStrategoTerm x = context.invokePrimitive("SSL_mkterm", term,
                           new IStrategy[] {},
                           new IStrategoTerm[] { e_t1, e_t2 });
         if (x == null)
           break Fail;
       | x
       |}
    ]|
    with
      e_t1 := <java-construct-term> t1
    ; e_t2 := <java-construct-term> t2
    ; x    := <newname> "mkterm"

  java-ConstructTerm : 
    Op("", args) -> expr|[ termFactory.makeTuple(~*args') ]|
    with
      args' := <map(java-construct-term)> args
    
  java-ConstructTerm :
    Op("Nil", []) -> expr|[ termFactory.makeList() ]|

  java-ConstructTerm :
    Op("Cons", [t1, t2]) -> 
    expr|[ 
      termFactory.makeList(~expr:<java-construct-term> t1, e)
    ]|
    with
      <java-construct-term> t2
        ; if <not(Anno(is-ListOp,id))> t2 then 
            java-check-aterm-list 
          else
              if ?|[ getConstant(e1, e2) ]| + ?expr |[ x ]| then
                !|[ (IStrategoList) ~expr:<id> ]|
              else
                try(java-UncastATerm)
              end
              ; try(java-CastATermListSetAnnotations)
            end => e

  java-check-aterm-list :
    e -> expr |[ x ]|
    with 
      x := <newname> "list"
    ; stms := 
         ( bstm |[ IStrategoList x; ]|
         , bstm*|[
             x = checkListTail(e);
             if (x == null) break Fail;
           ]|)
    ; rules( java-CheckList :+ _ -> stms )

  java-CastATerm :
    e -> expr|[ (IStrategoTerm) e ]|

  java-CastATermListSetAnnotations :
    expr|[                 termFactory.annotateTerm(e1, checkListAnnos(e2, e3)) ]| ->
    expr|[ (IStrategoList) termFactory.annotateTerm(e1, checkListAnnos(e2, e3)) ]|

  java-UncastATerm :
    expr|[ (IStrategoTerm) e ]| -> e
    
/**
 * Signatures
 */
strategies

  JavaTranslate =
      fragment(JavaDeclareConstructor|"ConstructorDecl")
    ; fragment(JavaInitConstructorQ <+ JavaInitConstructor|"ConstructorInit")

  JavaDeclareConstructor :
    OpDecl(c, t) -> class-body-dec|[ public static IStrategoConstructor ~id:Id(csym); ]|
  where
    not(OpDecl("", id) + OpDecl("Cons", [id, id]) + OpDecl("Nil", []))
  with 
      n    := <Arity> t
    ; csym := <java-ConstructorName> (c, n)

  java-ConstructorName :
    (c, n) -> <conc-strings> ("_cons", c', "_", n')
    with
      c' := <jify> c
    ; n' := <int-to-string> n

  JavaInitConstructorQ :
    OpDecl(c, t) ->
    bstm*|[
      x = termFactory.makeConstructor("\"" + "~c'" + "\"", 
                                      ~expr:<java-mk-int-const> ar);
    ]|
  where 
      <string-as-chars(unescape-chars; un-double-quote-chars)> c => c' 
    ; ar := <Arity> t
    ; x  := <java-ConstructorName> (c, ar)

  JavaInitConstructor :
    OpDecl(c, t) ->
    bstm*|[
      x = termFactory.makeConstructor(~expr:Lit(String([Chars(c)])), 
                                      ~expr:<java-mk-int-const> ar);
    ]|
  where 
      ar := <Arity> t
    ; x  := <java-ConstructorName> (c, ar)

/* ================================ Match */
strategies

  translate-Match :
    Match(t) -> result
    with
      result := <translate-Match> Match(t, ExprName(Id("term")))

  translate-Match :
    Match(Wld(), trm) -> Empty()

  translate-Match :
    Match(As(t1,t2), trm) ->
    bstm* |[ 
      stm_match1
      stm_match2
    ]|
    with stm_match1 := <translate-Match> Match(t1,trm)
       ; stm_match2 := <translate-Match> Match(t2,trm)

  translate-Match :
    Match(Var(x){"unbound"}, trm) -> stm_assign
    with
      stm_assign := <java-VarToWrite> (x, trm)

  translate-Match :
    Match(Var(x){"bound"}, trm) ->
    stm|[ 
      if(!e.equals(~expr:trm)) 
        break Fail;
     ]|
    with
      e := <java-VarToReadRef> Var(x)

  translate-Match :
    Match(Var(x){"(un)bound"}, e) ->
    stm|[ 
      if (e_x == null)
        stm_assign
      else if (!e_x.equals(e))
        break Fail;
    ]|
    with 
      e_x := <java-VarToReadRef> Var(x)
    ; stm_assign := <java-VarToWrite> (x, e)

  translate-Match :
    Match(Var(x){}, trm) -> <translate-Match> Match(Var(x){"(un)bound"}, trm)

  translate-Match :
    Match(Explode(t1, t2), e) ->
    bstm* |[ 
      IStrategoTerm x_cons = context.invokePrimitive("SSL_get_constructor", term,
                                                      new IStrategy[] {},
                                                      new IStrategoTerm[] { e });
      ~stm:(<translate-Match> Match(t1, ExprName(Id(x_cons))))
      IStrategoTerm x_args = context.invokePrimitive("SSL_get_arguments", term,
                                                     new IStrategy[] {},
                                                     new IStrategoTerm[] { e });
      ~stm:(<translate-Match> Match(t2, ExprName(Id(x_args))))
     ]|
  with
      !e => ExprName(Id(_))
    ; x_cons := <newname> "cons"
    ; x_args := <newname> "args"

  translate-Match =
       ( translate-MatchNoAnno
      <+ translate-MatchAnno )

  translate-MatchNoAnno :
    Match(Anno(pt1, Wld()), e) -> result
    with result := <translate-Match> Match(pt1, e)

  translate-MatchAnno :
    Match(Anno(pt1, pt2), e) -> 
    bstm* |[
      stm0
      IStrategoList x = e.getAnnotations();
      stm1
    ]|
  where 
      <not(Wld)> pt2
  with
      x    := <newname> "annos"
    ; stm0 := <translate-Match> Match(pt1, e)
    ; stm1 := <translate-Match> Match(pt2, ExprName(Id(x)))

  /**
   * @todo  String constants should probably be cached, just like constructor names
   */
  translate-Match :
    Match(Str(str), e) -> 
    stm|[
      if (e.getTermType() != IStrategoTerm.STRING
         || !e_str.equals(((IStrategoString) e).stringValue()))
        break Fail;
    ]|
  with
      !e => ExprName(Id(_))
    ; e_str := Lit(String([Chars(<escape> str)]))

  translate-Match :
    Match(Int(i), e) -> 
    stm|[
      if (e.getTermType() != IStrategoTerm.INT
         || e_int != ((IStrategoInt) e).intValue())
        break Fail;
    ]|
  with
      !e => ExprName(Id(_))
    ; e_int := <java-mk-int-const> i

  translate-Match :
    Match(Real(r), e) -> 
    stm|[
      if (e.getTermType() != IStrategoTerm.REAL 
          || e_real != ((IStrategoReal) e).realValue())
        break Fail;
    ]|
  with
      !e => ExprName(Id(_))
    ; e_real := Lit(Float(<try(real-to-string)> r))

  /**
   * Translate a match of an Op, but not a Cons/2 , Nil/0, or tuple.
   */
  translate-Match :
    Match(op@Op(c, ts), e) ->
    bstm* |[
      if (e.getTermType() != IStrategoTerm.APPL || !((IStrategoAppl) e).getConstructor().equals(x_cons))
        break Fail;
      ~bstm*:match-args
    ]|
  where
    <not(is-ListOp + is-TupleOp)> op
  with
    x_cons := <java-ConstructorName> (c, <length> ts)
  ; match-args := <translate-Match-args> (e, ts)

  /**
   * Translate a match of an Op, but not a Cons/2 or Nil/0.
   */
  translate-Match :
    Match(op@Op(c, ts), e) ->
    bstm* |[
      if (e.getTermType() != IStrategoTerm.TUPLE || e.getSubtermCount() != i)
        break Fail;
      ~bstm*:match-args
    ]|
  where
    <is-TupleOp> op
  with
    i:= <write-to-string> <length> ts
  ; match-args := <translate-Match-args> (e, ts)
  
  translate-Match-args :
    (e, terms) -> bstm_matcharg*
    with
      (bstm_matcharg*, _) :=
        <thread-map(\ (t,i) -> (
               <java-MatchArg1 <+ java-MatchArg2> 
                  (t, expr|[ e.getSubterm(~expr:<java-mk-int-const> i) ]|)
             , <add>(i, 1)
             )
           \ )> (terms,0)

  java-MatchArg1 : 
    (Var(x){t*}, e) -> result
  with 
      result := <translate-Match> Match(Var(x){t*}, e)

  java-MatchArg2 : 
    (t, e) -> 
    bstm* |[
      stm1
      stm2
    ]|
    with
      x    := <newname> "arg"
    ; stm2 := <translate-Match> Match(t, ExprName(Id(x)))
    ; if !stm2 => Empty() then
       stm1 := Empty()
      else 
       stm1 := |[ IStrategoTerm x = e; ]|
     end

  translate-Match :
    Match(Op("Nil", []), e) ->
    bstm* |[
      if (e.getTermType() != IStrategoTerm.LIST || !((IStrategoList) e).isEmpty())
        break Fail;
    ]|

  translate-Match :
    Match(Op("Cons", [hd, tl]), e) ->
    bstm* |[
      if (e.getTermType() != IStrategoTerm.LIST || ((IStrategoList) e).isEmpty())
          break Fail;
      ~bstm*:match-args
    ]|
  with 
    <map(java-MatchArg1 <+ java-MatchArg2)> 
       [ (hd, expr|[ ((IStrategoList) e).head() ]|)
       , (tl, expr|[ ((IStrategoList) e).tail() ]|) ] => match-args
