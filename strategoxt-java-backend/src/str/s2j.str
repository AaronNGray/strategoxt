/**
 * Java backend for the Stratego compiler
 *
 * @author Karl Trygve Kalleberg
 * @author Lennart Kats
 * @author Eelco Visser
 */
module s2j

imports
  libstrc
  libstratego-xtc
  libstratego-rtg
  libstratego-lib

  java-postprocess
  variable-lifting
  variable-access
  
  Java-EBlock

signature
  constructors 
    Next  : Term
    Match : Term * Exp -> Exp
    Filename : Str -> Term
    Offset: Int -> Term
    Frames: List(Term) -> Term

overlays

  MAX_STATIC_TARGS = 5
  MAX_STATIC_SARGS = 3
    
strategies

  io-s2j = io-wrap(java-backend)
 
rules
 
  fc =
    id
    /*
    with(
      verbosity => oldverbosity
    ; <set-verbosity> 1
    )
  ; with(
      rtg-format-check(true, true|<JavaRTG>)
    ; <set-verbosity> oldverbosity
    | "Internal error: resulting term is not well-formed"
    )
    */
      
    
  java-backend = 
      rules(JavaRTG := <import-term(Java-15.rtg.af)>)
    ; extract-meta
    ; java-compile-spec
    ; java-simplify
    ; java-relabel
     
  extract-meta = 
     ?_{Meta(metas)}
    ; rules(Metas := metas)
  
  meta-filename = 
      Metas
    ; getfirst(?Filename(<id>))

  compute-classname = 
      meta-filename 
    ; base-filename
    ; jify
    ; remove-extension
  
  jify =
    string-replace(|"-", "_")
  ; string-replace(|"'", "_q_")
    
  java-compile-spec :
    Specification([Signature([Constructors(ops)]), Strategies(defs)]) -> 
     |[ 
     package pkgname;
     
     import org.strategoxt.lang.Strategy; 
     import org.strategoxt.lang.IStrategy;
     import org.strategoxt.lang.TermReference; 
     import org.strategoxt.lang.ITermReference; 
     import org.strategoxt.lang.Context;
     import org.spoofax.interpreter.terms.*;
         
     import static org.strategoxt.lang.Term.checkTermList;
     import static org.strategoxt.lang.Term.matchAppl;
     
     // TODO: Use static imports for libraries
     //       e.g., import static org.strategoxt.strategolib.*;
         
     @SuppressWarnings({"unused", "cast"})
     public class x_name {

     ~*cnst-decls
     ~*cnstr-decls
     ~*lifted-defs
     
     public static void preInit(ITermFactory termFactory) {
       ~*cnstr-inits
       ~*cnst-inits
     }

     public static String testMain(String input) {
        Context context = new Context();
        preInit(context.getFactory());
        IStrategoTerm result = main_0_0.instance.invoke(context, context.getFactory().parseFromString(input));
        return result == null ? null : result.toString();
     }
        
     public static void main(String args[]) {
        Context context = new Context();
        preInit(context.getFactory());
        IStrategoTerm result = context.invokeStrategyCLI(main_0_0.instance, "~x_name", args);
        if (result == null) {
          System.err.println("~x_name" + ": rewriting failed, trace:");
          context.getStackTracer().printStackTrace();
          System.exit(1); 
        } else {
          System.out.println(result);
        }
     }

     ~*function-defs

     }
     ]|
  with 
      alltd(JavaTranslate)
    ; x_name        := <compute-classname> ()
    ; pkgname       := PackageName([Id("org.strategoxt.compiler.tests.cases")])
    ; function-defs := <map(translate-outer-definition)> defs
    ; lifted-defs   := <bagof-Fragment> "LiftedDef"
    ; cnstr-decls   := <bagof-Fragment> "ConstructorDecl"
    ; cnstr-inits   := <bagof-Fragment; concat> "ConstructorInit"
    ; cnst-decls    := <bagof-Fragment> "ConstDecl"
    ; cnst-inits    := <bagof-Fragment; concat; reverse> "ConstInit"

rules
  
  translate-outer-definition :
    SDefT(x, strats*, terms*, s) -> type-dec |[
       public static class x extends Strategy {
         public static x instance = new x();
         
         ~body
         
         // TODO: Implement invokeDynamic() as necessary
         //
         //  public IStrategoTerm invokeDynamic(Context context, IStrategoTerm term, IStrategy[] sargs,
         //    IStrategoTerm[] targs) {
       }
    ]|
    with
      prelude(|"translate-outer-definition")
    ; body    := <translate-definition-body>

  translate-inner-definition :
    SDefT(x, strats*, terms*, s) -> type-dec |[
       private static final class x extends Strategy {
         ~instance-field*
         ~lifted-tfield*
         ~lifted-sfield*
         
         ~constructor*
         
         ~body
       }
    ]|
    with
      prelude(|"translate-inner-definition")
    ; lifted-tvar*   := <collect-lifted-tvars>
    with
      lifted-svar*   := <collect-lifted-svars>
    ; lifted-tfield* := <map(\x -> |[ private final ITermReference x; ]|\)> lifted-tvar*
    //; debug(!"LIFTED-TFS:  ")
    ; lifted-sfield* := <map(\x -> |[ private final IStrategy x;      ]|\)> lifted-svar*
    //; debug(!"LIFTED-SFS:  ")
    ; lifted-args    := <conc> (lifted-svar*, lifted-tvar*)
    //; debug(!"LIFTED-ARGS: ")
    ; x'             := x{}
    ; rules(LiftedArgs: x' -> lifted-args)
    // ; <debug(!"SET LIFTED ARGS:")> (x, lifted-args)
    with
      if !lifted-tvar* => lifted-svar* => [] then
        instance-field* := class-body-dec* |[ public static final x instance = new x(); ]|
      ; constructor*    := []
      else
        instance-field* := []
      ; constructor*    := [<lifted-vars-to-constructor(|x)> (lifted-svar*, lifted-tvar*)]
      end
    with
      body := <translate-definition-body>
  
  translate-definition-body :
    SDefT(x, strats*, terms*, s) ->
    |[ mod_override*
       public IStrategoTerm invoke(Context context, IStrategoTerm term, param*) {
           ITermFactory termFactory = context.getFactory();
           context.getStackTracer().push("~x");
           Fail: {
             bstm
             if (true) { // (avoid unreachable stm error)
               context.getStackTracer().popOnSuccess();
               return term;
             }
           };
           context.getStackTracer().popOnFailure();
           return null;
       }
    ]|
    with
      bstm    := <translate-body> s   
    ; strats' := <map(translate-parameter)> strats*
    ; terms'  := <map(translate-parameter)> terms*
    ; param*  := <conc> (strats', terms')   
    ; if is-dynamic-signature(|strats*, terms*) then
        mod_override* := []
      else
        mod_override* := [ anno |[ @Override ]| ]
      end
   
  
  translate-outer-definition :
    ExtSDef(_, _, _) -> Semicolon()
    where prelude(|"translate-outer-definition")

  translate-parameter :
    VarDec(x, ConstType(_)) -> param |[ IStrategoTerm x ]|
    where prelude(|"translate-parameter - term")
  
  translate-parameter : 
    VarDec(x, FunType(_, _)) -> param |[ IStrategy x ]|
    where prelude(|"translate-parameter - strategy")
  
strategies
  prelude(|msg) = where(?x#(_) ; log(|Debug(), [ msg, " : ", x ]))
  
  kdebug(s) = log(|Notice(), [<s>, <id>])
  
  kdebug = log(|Notice(), [<id>])
  
  /** @type Strategy -> Stm */
  translate-body = 
    prelude(|"translate-body") 
    ; translate-strategy

  translation-failed = ?x#(_) ; log(|Error(), [ "Unknown constructor type ", x ]) ; fail
  
  translate-Scope : 
    Scope(vars, body) -> bstm |[ { bstm_decl* bstm_body } ]|
    with
      prelude(|"translate-Scope")
    ; bstm_decl* := <map(to-java-vardecl)> vars
    ; bstm_body  := <translate-strategy> body
    
  /** @type Id -> Stm */
  translate-Id :
    Id() -> Empty()
    where prelude(|"translate-Id")
    
  /** @type Id -> Stm */
  translate-Fail :
    Fail() -> |[ if (true) break Fail; ]| // (avoid unreachable stm error)
    where prelude(|"translate-Fail")

  /** @type Seq -> Stm */
  translate-Seq :
    Seq(s1, s2) -> 
    bstm |[
      { 
        ~stm:<translate-strategy> s1 
        ~stm:<translate-strategy> s2 
      } 
    ]|
    with prelude(|"translate-Seq")

  /** @type GuardedLChoice -> Block */  
  translate-UnguardedLChoice :
    GuardedLChoice(s1, Id(), s2) ->
    Block(bstm* |[
      IStrategoTerm x_termcopy = term;
      Success: {
        Fail: {
           stm_s1
        }
        term = x_termcopy;
        stm_s2
      }
    ]|)
   with prelude(|"translate-UnguardedLChoice")
     ; x_termcopy := <newname> "term"
     ; stm_s1 := <translate-strategy> s1
     ; stm_s2 := <translate-strategy> s2

  /** @type GuardedLChoice -> Block */  
  translate-GuardedLChoice :
    GuardedLChoice(s1, s2, s3) ->
    Block(bstm* |[
      IStrategoTerm x_termcopy = term;
      Success: {
        Fail: {
           stm_s1
           OuterFail: {
             stm_s2
             if (true) break Success; // (avoid unreachable stm error)
           }
        }
        term = x_termcopy;
        stm_s3
      }
    ]|)
   with prelude(|"translate-GuardedLChoice")
     ; x_termcopy := <newname> "term"
     ; stm_s1 := <translate-strategy> s1
     ; stm_s2 := <translate-strategy> s2
     ; stm_s3 := <translate-strategy> s3

  translate-strategy = 
       ( 
       translate-CallT-tail-call ; fc
    <+ translate-CallT ; fc
    <+ translate-Build ; fc
    <+ translate-Seq ; fc
    <+ translate-PrimT ; fc
    <+ translate-Id ; fc
    <+ translate-Fail ; fc
    <+ translate-UnguardedLChoice ; fc
    <+ translate-GuardedLChoice ; fc
    <+ translate-Scope ; fc
    <+ translate-Match ; fc
    <+ translate-Let; fc
    <+ kdebug(!"translate-strategy failed "); fail // ensures stack trace is cut off
       ) 
//    ; kdebug(!"translated ")

  translate-Let : 
    Let(defs, body) -> Block([body'])
    with
      prelude(|"translate-Let")
    ; kdebug
    ; <map(fragment(translate-inner-definition | "LiftedDef"))> defs
    ; body' := <translate-strategy> body

  translate-CallT:
    CallT(SVar(x), s*, t*) -> bstm |[
      { term = e_instance.invoke(context, term, e_s*, e_t*);
        if (term == null) 
          break Fail;
      }
    ]|
    with
      prelude(|"translate-CallT")
    ; e_instance := <lifted-call-to-instance>
    ; e_s*       := <map(lifted-strategy-to-instance)> s*
    ; e_t*       := <map(java-construct-term)> t*

  translate-CallT-tail-call :
    CallT(SVar(x), s*, t*) -> bstm |[
      { term = invoke(context, term, e_s*, e_t*);
        if (term == null) 
          break Fail;
      }
    ]|
    where
      <is-tail-call> x
    with
      prelude(|"translate-CallT")
    ; e_s*  := <map(lifted-strategy-to-instance)> s*
    ; e_t*  := <map(java-construct-term)> t*
  
  lifted-strategy-to-instance =
    if ?CallT(_, _, _) then
      // Pass (potentially parameterizable) svar calls as-is
      lifted-call-to-instance
    else
      // Lift definition and produce call
      with(
        !SDefT(<newname => x> "lifted", [], [], <id>)
      ; fragment(translate-inner-definition | "LiftedDef")
      //; debug(!"LIFTED: ")
      )
    ; <lifted-call-to-instance> CallT(SVar(x), [], [])
    end
  
  lifted-call-to-instance =
    lifted-call-to-instance-with-args
  <+
    lifted-call-to-instance-tail-call
  <+
    lifted-call-to-instance-direct
  
  lifted-call-to-instance-with-args :
    CallT(SVar(x), _, _) ->  |[ new x(e_arg*) ]|
    where
      lifted-arg* := <LiftedArgs> x{} // set for local defs
    ; !lifted-arg* => [_ | _]         // local def with lifting
    with
      e_arg* := <map(\x -> expr |[ x ]|\)> lifted-arg*
  
  lifted-call-to-instance-tail-call :
    CallT(SVar(x{}), _, _) -> expr |[ this ]|
    where
      fail // TODO
  
  lifted-call-to-instance-direct :
    CallT(SVar(x{}), _, _) -> expr |[ x.instance ]|
    with
      debug(!1)
  
  lifted-call-to-instance-direct :
    CallT(SVar(x{Frames([])}), _, _) ->  expr |[ x ]| // local def
    with
      debug(!2)
  
  lifted-call-to-instance-direct :
    CallT(SVar(x{Frames([_ | _])}), _, _) ->  expr |[ x.instance ]| // global def
    with
      debug(!"2.5")
  
  lifted-call-to-instance-direct :
    CallT(SVar(x{Closure(_), Frames(_)}), _, _) ->  expr |[ x.instance ]|
    with
      debug(!3)
  
  lifted-call-to-instance-direct :
    CallT(SVar(x{Offset(_), Frames(_), ApplyClosure()}), _, _) -> |[ x ]| // local def
    with
      debug(!4)
  
  is-dynamic-signature(|s*, t*) =
    where(
      <gt> (<length> s*, MAX_STATIC_SARGS());
      <gt> (<length> t*, MAX_STATIC_TARGS())
    )

  translate-PrimT :
    PrimT(f, s*, t*) -> 
    <java-check-unbound-args(|t*)>  
    Block(bstm* |[ 
      term = context.invokePrimitive("~f", term, new IStrategy[] { e_s* }, new IStrategoTerm[] { e_t* });
      if (term == null) break Fail;
    ]|)
  with
    prelude(|"translate-PrimT")
  ; e_s*  := <map(lifted-strategy-to-instance)> s*
  ; e_t*  := <map(java-construct-term)> t*
  
/* ================================ Build  */

  translate-Build:
    Build(t) -> 
    <java-check-unbound-args(|t)> 
    Block(bstm*|[
               ~*decs
               ~*stms
               term = e;
               ]|)
  where prelude(|"translate-Build")
    ; {| java-CheckList :
         <java-construct-term> t => e
       ; kdebug(!"term ")
       ; bagof-java-CheckList; unzip; (id, reverse; concat) => (decs, stms)
       ; kdebug(!"bagof-CheckList ")
      |} 

  java-check-unbound-args(|t) =
    try(java-CheckUnboundArgs(|t))

  java-CheckUnboundArgs(|t) :
    stm -> 
    stm|[ {
      if (e)
        break Fail;
      stm
    } ]|
    where prelude(|"CheckUnboundArgs") ;
      <collect({?Var(_){t*}; where(<not(["bound"])> t* )})> t
    ; kdebug(!"unbound ")
    ; not([])
    ; foldr1(!expr|[ ~expr:<Hd; java-ConstructVar> == null ]|
            ,!expr|[ ~expr:<Fst; java-ConstructVar> == null || ~expr:<Snd> ]|) => e
    ; kdebug(!"expr ")

/**
 * Term construction with constant term caching
 */
rules 

  java-init-term-caching =
    where(
         t1 := Op("Nil", [])
       ; t2 := Anno(Op("Nil", []), Op("Nil", []))
       ; e  := expr|[ atermFactory.makeList() ]|
    )
    ; rules( java-Cache : t1 -> e )
    ; rules( java-Cache : t2 -> e )

  /** @type Term -> Exp */
  java-construct-term = prelude(|"java-construct-term");
       java-Cache 
    <+ java-ConstructAnnoVar
    <+ java-ConstructVar
    <+ !(<id>, <java-ConstructTerm>)
       ; (java-CacheConstant <+ Snd)

  java-CacheConstant :
    (t, e1) -> e2
  where prelude(|"CacheConstant") ; <kdebug> (t, "->", e1) ;
      <(Op(id, map(java-Cache)); proper-list 
            + Anno(java-Cache, java-Cache) 
            + Int(id) + Str(id) + Real(id) )> t
      ; x  := <newname> "term"
      ; e2 := ExprName(Id(x))
      ; rules( java-Cache : t -> e2 )
      ; !(x, e1)
      ; fragment(java-DeclareTermId|"ConstDecl")
      ; fragment(java-InitTermId|"ConstInit")

// helpers

strategies
    
  is-TupleOp = ?Op("", _)

  java-DeclareTermId :
    (x, e) ->
    class-body-dec|[ static IStrategoTerm ~<!Id(x)>; ]|

  java-InitTermId :
    (x, e) -> bstm*|[ x = e; ]|

  java-mk-int-const = prelude(|"mk-int-const") ;
    !Lit(Deci(<try(int-to-string)>))
    

rules

  java-ConstructTerm :
    Int(i) -> 
    expr|[ 
      termFactory.makeInt(~expr:<java-mk-int-const> i)
    ]|
  where prelude(|"java-ConstructTerm - Int")

  java-ConstructTerm :
    Real(x) -> 
    expr|[ 
      termFactory.makeReal(~expr:Lit(Float(<try(real-to-string)> x)))
    ]|
  where prelude(|"java-ConstructTerm - Real")

  java-ConstructTerm :
    Str(x) -> 
    expr|[ 
      termFactory.makeString(~expr:Lit(String([Chars(<escape> x)])))
    ]|
  where 
      prelude(|"java-ConstructTerm - Str")

  java-ConstructVar :
    x@Var(_) -> e
  with 
      prelude(|"java-ConstructVar") 
    ; e := <java-VarToReadRef> x
    ; kdebug(!"var to read ref: ")

  java-ConstructAnnoVar :
    Anno(Var(x), pt2) -> 
    expr|[ 
      termFactory.annotateTerm(e, ~expr:<java-construct-term> pt2)
    ]|
  where
      prelude(|"java-ConstructAnnoVar") 
    ; <java-ConstructVar> Var(x) => e

  java-ConstructTerm :
    Anno(pt1, Op("Nil", [])) -> <java-construct-term> pt1
  where 
      prelude(|"java-ConstructTerm - pt1, Op(Nil, [])") 
    ; <not(?Var(_))> pt1

  java-ConstructTerm :
    Anno(pt1, pt2) -> 
    expr|[ 
      termFactory.annotateTerm(~expr:<java-construct-term> pt1, (IStrategoList) ~expr:<java-construct-term> pt2)
    ]|
  where 
      prelude(|"java-ConstructTerm - pt1{pt2}")
    ; <not(?Op("Nil", []))> pt2
    ; <not(?Var(_))> pt1

//  java-ConstructTerm :
//    |[ _ t ]| -> <java-construct-term> t

  java-ConstructTerm :
    Op(c, t*) -> expr|[ termFactory.makeAppl(~*[cn | args]) ]|
  where
      not(is-ListOp + is-TupleOp)
  with
      prelude(|"java-ConstructTerm - Op(c, t*)")
    ; cn   := ExprName(Id(<java-ConstructorName> (c, <length> t*)))
    ; args := <map(java-construct-term)> t*
    ; kdebug(!"not listop")
    
  java-ConstructTerm :
    Explode(t1, t2) -> 
    expr|[ // XXX: no SSL
      SSL_mkterm(~expr:<java-construct-term> t1, ~expr:<java-construct-term> t2) 
    ]|
  with 
      prelude(|"java-ConstructTerm - Explode")

  java-ConstructTerm : 
    Op("", args) -> expr|[ termFactory.makeTuple(~*args') ]|
  with
      prelude(|"java-ConstructTerm - Op(\"\", [...])") 
    ; args' := <map(java-construct-term)> args
    
  java-ConstructTerm :
    Op("Nil", []) -> expr|[ termFactory.makeList() ]|
  where prelude(|"java-ConstructTerm - Op(Nil, [])")

  java-ConstructTerm :
    Op("Cons", [t1, t2]) -> 
    expr|[ 
      termFactory.makeList(~expr:<java-construct-term> t1, (IStrategoList) e)
    ]|
  with
      prelude(|"java-ConstructTerm - Cons")
    ; <java-construct-term> t2
        ; if <not(Anno(is-ListOp,id))> t2 then 
            java-check-aterm-list 
          else
              if ?Id(_) then
                !|[ (IStrategoList) ~expr:<id> ]|
              else
                try(java-UncastATerm)
              end
              ; try(java-CastATermListSetAnnotations)
            end => e

  java-check-aterm-list :
    e -> expr|[ (IStrategoList) x ]|
  where 
      prelude(|"java-check-aterm-list") 
    ; x := <newname> "list"
    ; stms := 
         ( bstm |[ IStrategoList x; ]|
         , bstm*|[
             x = checkTermList(e);
             if (x == null) break Fail;
           ]|)
    ; rules( java-CheckList :+ _ -> stms )

  java-CastATerm :
    e -> expr|[ (IStrategoTerm) ~expr:e ]|

  java-CastATermListSetAnnotations :
    expr|[                 termFactory.annotateTerm(~expr:e1, (IStrategoList) ~expr:e2) ]| ->
    expr|[ (IStrategoList) termFactory.annotateTerm(~expr:e1, (IStrategoList) ~expr:e2) ]|

  java-UncastATerm :
    expr|[ (IStrategoTerm)~expr:e ]| -> e
    
/**
 * Signatures
 */
strategies

  JavaTranslate =
      fragment(JavaDeclareConstructor|"ConstructorDecl")
    ; fragment(JavaInitConstructorQ <+ JavaInitConstructor|"ConstructorInit")

  JavaDeclareConstructor :
    OpDecl(c, t) -> class-body-dec|[ static IStrategoConstructor ~id:Id(csym); ]|
  where
    <not("" + "Cons" + "Nil")> c
  with 
      prelude(|"DeclareConstructor") 
    ; n    := <Arity> t
    ; csym := <concat-strings> ["sym_", <cify> c, "_", <int-to-string> n]
    ; rules(java-ConstructorName : (c, n) -> csym)

  JavaInitConstructorQ :
    OpDecl(c, t) ->
    bstm*|[
      ~id:csym = ATmakeSymbol(~expr:Lit(String([Chars(<double-quote> c')])), 
                              ~expr:<java-mk-int-const> ar,
                              ATtrue);
    ]|
  where 
      <string-as-chars(unescape-chars; un-double-quote-chars)> c => c' 
    ; ar   := <Arity> t
    ; csym := <java-ConstructorName> (c, ar)

  JavaInitConstructor :
    OpDecl(c, t) ->
    bstm*|[
      ~id:csym = termFactory.makeConstructor(~expr:Lit(String([Chars(c)])), 
                                             ~expr:<java-mk-int-const> ar);
    ]|
  where 
      ar   := <Arity> t
    ; csym := Id(<java-ConstructorName> (c, ar))

/* ================================ Match */
strategies

  translate-Match :
    Match(t) -> result
  with prelude(|"translate-Match - Match/1")
     ; <kdebug(!"term ")> t
     ; result := <translate-Match> Match(t, ExprName(Id("term")))

  translate-Match :
    Match(Wld(), trm) -> Empty()
  with prelude(|"translate-Match - Match(Wld,trm)")

  translate-Match :
    Match(As(t1,t2), trm) ->
    stm|[ 
      { 
        stm_match1
        stm_match2
      }
    ]|
  with prelude(|"translate-Match - Match(As(t1,t2), trm)")
     ; stm_match1 := <translate-Match> Match(t1,trm)
     ; stm_match2 := <translate-Match> Match(t2,trm)

  translate-Match :
    Match(Var(x){"unbound"}, trm) -> stm_assign
    with
      prelude(|"translate-Match - Match(Var(x){unbound}, trm)")
    ; stm_assign := <java-VarToWrite> (x, trm)

  translate-Match :
    Match(Var(x){"bound"}, trm) ->
    stm|[ 
      if(!e.equals(~expr:trm)) 
        break Fail;
     ]|
    with
      prelude(|"translate-Match - Match(Var(x){bound}, trm)")
    ; e := <java-VarToReadRef> Var(x)

  translate-Match :
    Match(Var(x){"(un)bound"}, e) ->
    stm|[ 
      if (e_x == null)
        stm_assign
      else if (!e_x.equals(e))
        break Fail;
    ]|
    with 
      prelude(|"translate-Match - Match(Var(x){(un)bound})")
    ; <kdebug(!"XX ")> Var(x)
    ; e_x := <java-VarToReadRef> Var(x)
    ; <kdebug(!"PP")> ()
    ; stm_assign := <java-VarToWrite> (x, e)

  translate-Match :
    Match(Var(x){}, trm) -> <translate-Match> Match(Var(x){"(un)bound"}, trm)
  with prelude(|"translate-Match - Match(Var(x){}")
    ; <kdebug(!"ZZ ")> x

  translate-Match :
    Match(Explode(t1, t2), e) ->
    stm|[ 
    {
      IStrategoTerm ~id:n0, ~id:n1; // XXX: no SSL
     ~id:n0 = SSL_get_constructor(e);
     ~id:n1 = SSL_get_arguments(e);
     ~stm:(<translate-Match> Match(t1, ExprName(n0)))
     ~stm:(<translate-Match> Match(t2, ExprName(n1)))
     } ]|
  with
      !e => ExprName(Id(_))
    ; prelude(|"translate-Match - Match(Explode)") 
    ; n0 := Id(<newname> "trm")
    ; n1 := Id(<newname> "trm")

  translate-Match =
       ( translate-MatchNoAnno
      <+ translate-MatchAnno ) 
      ; where(<kdebug> "after anno matching")

  translate-MatchNoAnno :
    Match(Anno(pt1, Wld()), e) -> result
    with prelude(|"translate-MatchNoAnno - Match(pt1{^_}")
       ; result := <translate-Match> Match(pt1, e)

  translate-MatchAnno :
    Match(Anno(pt1, pt2), e) -> 
    stm|[ 
      { 
        stm0
        IStrategoList x = e.getAnnotations();
        stm1
      } 
    ]|
  where 
      <not(Wld)> pt2
  with
      prelude(|"translate-MatchAnno - Match(pt1{^pt2})")
    ; <kdebug(!"pt1 ")> pt1
    ; <kdebug(!"pt2 ")> pt2
    ; x    := <newname> "annos"
    ; stm0 := <translate-Match> Match(pt1, e)
    ; stm1 := <translate-Match> Match(pt2, ExprName(Id(x)))

  /**
   * @todo  String constants should probably be cached, just like constructor names
   */
  translate-Match :
    Match(Str(str), e) -> 
    stm|[
      if (e.getTermType() != IStrategoTerm.STRING
         || !e_str.equals(((IStrategoString) e).stringValue()))
        break Fail;
    ]|
  with
      !e => ExprName(Id(_))
    ; prelude(|"translate-Match - Match(Str)")
    ; e_str := Lit(String([Chars(<escape> str)]))

  translate-Match :
    Match(Int(i), e) -> 
    stm|[
      if (e.getTermType() != IStrategoTerm.INT
         || e_int != ((IStrategoInt) e).intValue())
        break Fail;
    ]|
  with
      !e => ExprName(Id(_))
    ; prelude(|"translate-Match - Match(Int)")
    ; <kdebug(!"zz ")> e
    ; e_int := <java-mk-int-const> i
    ; kdebug(!"xx ")

  translate-Match :
    Match(Real(r), e) -> 
    stm|[
      if (e.getTermType() != IStrategoTerm.REAL 
          || e_real != ((IStrategoReal) e).realValue())
        break Fail;
    ]|
  with
      !e => ExprName(Id(_))
    ; prelude(|"translate-Match - Match(Real)")
    ; e_real := Lit(Float(<try(real-to-string)> r))

  /**
   * Translate a match of an Op, but not a Cons/2 , Nil/0, or tuple.
   */
  translate-Match :
    Match(op@Op(c, ts), e) ->
    stm|[ {
      if (e.getTermType() != IStrategoTerm.APPL || !((IStrategoAppl) e).getConstructor().equals(x_cons))
        break Fail;
      ~bstm*:match-args
    } ]|
  where
    <not(is-ListOp + is-TupleOp)> op
  with
    prelude(|"translate-Match - Match(Op)");
    x_cons := <java-ConstructorName> (c, <length> ts)
  <+
    <fatal-err(|"Undeclared constructor")> (c, <length> ts)
  with
    match-args := <translate-Match-args> (e, ts)

  /**
   * Translate a match of an Op, but not a Cons/2 or Nil/0.
   */
  translate-Match :
    Match(op@Op(c, ts), e) ->
    stm|[ {
      if (e.getTermType() != IStrategoTerm.TUPLE || e.getSubtermCount() != i)
        break Fail;
      ~bstm*:match-args
    } ]|
  where
    <is-TupleOp> op
  with
    i:= <write-to-string> <length> ts
  ; match-args := <translate-Match-args> (e, ts)
  
  translate-Match-args :
    (e, terms) -> bstm_matcharg*
    with
      (bstm_matcharg*, _) :=
        <thread-map(\ (t,i) -> (
               <java-MatchArg1 <+ java-MatchArg2> 
                  (t, expr|[ e.getSubterm(~expr:<java-mk-int-const> i) ]|)
             , <add>(i, 1)
             )
           \ )> (terms,0)

  java-MatchArg1 : 
    (Var(x){t*}, e) -> result
  with 
      prelude(|"java-MatchArg1")
    ; result := <translate-Match> Match(Var(x){t*}, e)

  java-MatchArg2 : 
    (t, e) -> 
    stm|[ 
      { 
         IStrategoTerm x = e; 
         stm
      } 
    ]|
  with
      prelude(|"java-MatchArg2")
    ; x   := <newname> "arg"
    ; stm := <translate-Match> Match(t, ExprName(Id(x)))

  translate-Match :
    Match(Op("Nil", []), e) ->
    stm|[
      if (e.getTermType() != IStrategoTerm.LIST
          || !((IStrategoList) e).isEmpty())
        break Fail;
    ]|
  with prelude(|"translate-Match - Match(Op(Nil))")


  translate-Match :
    Match(Op("Cons", [hd, tl]), e) ->
    stm|[ {
      if (e.getTermType() != IStrategoTerm.LIST
          || ((IStrategoList) e).isEmpty())
          break Fail;
      ~bstm*:match-args
    } ]|
  with 
    <map(java-MatchArg1 <+ java-MatchArg2)> 
       [ (hd, expr|[ ((IStrategoList) e).head() ]|)
       , (tl, expr|[ ((IStrategoList) e).tail() ]|) ] => match-args
