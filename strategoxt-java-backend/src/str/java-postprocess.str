/**
 * Java output postprocessing
 */
module java-postprocess

imports
  Java-EBlock

strategies

  java-relabel =
    rec rec(
      java-relabel-stm
    <+
      all(rec)
    )
  
  java-relabel-stm :
    |[ x_label: { bstm* } ]| -> |[ x_label': { bstm'* } ]|
    with
      x_label' := <newname> x_label
    ; {| Relabel:
        rules(
          Relabel: x_label -> x_label'
        )
      ; bstm'* := <java-relabel> bstm*
      |}
   
   java-relabel-stm :
     x_label -> x_label'
     where
       x_label' := <Relabel> x_label

strategies

  java-simplify =
    bottomup-consnil(repeat(java-simplify-stm))
  
  java-simplify-stm :
    [Empty() | s*] -> s*
    
  java-simplify-stm :
    [Block([ExprStm(s)]) | s*] -> [ExprStm(s) | s*]
  
  java-simplify-stm :
    Block([s, Block(s*)]) -> Block([s | s*])
  
  java-simplify-stm :
    Block(Block(s*)) -> Block(s*)
  
  java-simplify-stm :
    If(e, s1, Empty()) -> If(e, s1)
    
  java-simplify-stm :
    Labeled(l, s*) -> Labeled(l, Block(s*)) // must contain Block
    where
      <not(?Block(_))> s*
  
  java-simplify-stm:
    [Block(s1*) | s2*] -> [s1*, s2*]
    where
      <list-loop(is-Stm)> s1*
  
  java-simplify-stm :
    |[ if (e1 == e2) ; else stm2 ]| -> |[ if (e1 != e2) stm2 ]|

strategies

  /**
   * Determines if a Java construct is a non-declaration statement.
   *
   */
  is-Stm =
    ?Try(_, _, _)
    + ?Try(_, _)
    + ?Synchronized(_, _)
    + ?Throw(_)
    + ?Return(_)
    + ?Continue(_)
    + ?Break(_)
    + ?ForEach(_, _, _)
    + ?For(_, _, _, _)
    + ?For(_, _, _, _)
    + ?DoWhile(_, _)
    + ?While(_, _)
    + ?Switch(_, _)
    + ?AssertStm(_, _)
    + ?AssertStm(_)
    + ?If(_, _, _)
    + ?If(_, _)
    + ?ExprStm(_)
    + ?Labeled(_, _)
    + ?Empty()
    + ?Block(_)
