module xtc-rep
signature
  sorts XtcKey
  constructors
    Tool       : String -> XtcKey
    Repository : XtcKey 
    Stack      : XtcKey
    Import     : XtcKey
    Imported   : String -> XtcKey
    Files      : XtcKey
    Tables     : XtcKey

    XTC	       : Table

    RepoFile   : String -> XtcKey             // present in named file
    Changed    : a -> XtcKey

strategies // stack operations

  xtc-set-stack(|stack) =
    where(<table-put>(XTC, Stack, stack))

  xtc-get-stack = 
    <table-get>(XTC, Stack)
    <+ ![RepoFile(<xtc-location>)]
       ; xtc-set-stack(|<id>)

  xtc-push-file = ?file;
    where(
      xtc-get-stack
      ; ![RepoFile(file) | <id>]
      ; xtc-set-stack(|<id>)
    )

  xtc-push-table = ?tbl;
    where(
      xtc-get-stack
      ; ![NestedTable(tbl) | <id>]
      ; xtc-set-stack(|<id>)
    )

  xtc-pop =
    xtc-get-stack
    ; Tl
    ; where(<table-put>(XTC, Stack, <id>))

  xtc-scope(s) =
    where(xtc-get-stack => stack)
    ; restore-always(s, xtc-set-stack(|stack)) 

  xtc-show-stack =
    where(
      xtc-get-stack
      ; debug(!"stack: ")
      ; reverse-map(
	  rec x(
	    xtc-file-to-table
            ; debug(!"  nested table: ")
	    ; ?NestedTable(<id>)
            ; debug(!"  table: ")
	    ; hashtable-getlist
	    ; alltd(RepoFile(id); x)
	  )
	  ; debug
	)
    )

strategies // default repository

  xtc-push-default =
    xtc-location
    ; xtc-push-file

  /**
   * Returns the location of the XTC repository.
   *
   * @type _ -> String
   */
  xtc-location =
    <get-config> "-r"
    <+ <getenv> "XTC_REPOSITORY"
    <+ GetInternalDefaultXtcRepository

  external GetInternalDefaultXtcRepository(|)

strategies // loading repositories from files

  xtc-file-to-table =
    XtcFilesAndTables <+ xtc-file-to-table-new

  xtc-file-to-table-new :
    RepoFile(file) -> NestedTable(tbl)
    where debug(!"xtc-file-to-table-new a:")
	; <can-read-file; ReadFromFile; hashtable-init; xtc-import> file => tbl
	; debug(!"xtc-file-to-table-new b:")
	; rules( 
	    XtcFilesAndTables :  RepoFile(file) -> NestedTable(tbl)
	    XtcFilesAndTables :  NestedTable(tbl) -> RepoFile(file)
	    XtcFilesAndTables :+ Files -> RepoFile(file)
	    XtcFilesAndTables :+ Tables -> NestedTable(tbl)
	  )
	; <XtcFilesAndTables> RepoFile(file)
	; debug(!"xtc-file-to-table-new c:")

  xtc-file-to-table-new :
    RepoFile(file) -> NestedTable(tbl)
    where <not(file-exists)> file
	; create-new-file(|file) => NestedTable(tbl)

  xtc-file-to-table-new :
    NewTable -> (RepoFile(file), NestedTable(tbl))
    where xtc-new-file => file
	; create-new-file(|file) => NestedTable(tbl)

  create-new-file(|file) = 
     <WriteToBinaryFile>(file, [])
     ; <xtc-file-to-table> RepoFile(file) => NestedTable(tbl)

  xtc-table-changed =
    ?NestedTable(tbl)
    ; rules(
	XtcFilesAndTables : Changed(NestedTable(tbl))
      )

  xtc-import = ?tbl;
    where(
      repeat(<hashtable-get(|Import)> tbl
	     ; debug(!"a: ")
             ; filter(xtc-read(|tbl))
	     ; debug(!"b: ")
             ; not([]))
    )

  xtc-read(|tbl) = ?rep
    				; if-verbose5(debug(!"Reading? "))
    ; where(not(<hashtable-get(|Imported(rep))> tbl))
    				; if-verbose5(debug(!"Not imported: "))
    ; where(<hashtable-put(|Repository, [rep])> tbl)
    				; if-verbose4(debug(!"Reading repository: "))
    ; read-repository-file
    				; if-verbose6(say(!"Repository read: "))
    ; map(try((?Tool(<id>), id)))
    ; \ kv* -> <hashtable-putlist(hashtable-pushunion|kv*)>tbl \
    				; if-verbose6(say(!"Repository stored in table: "))
    ; <hashtable-put(|Imported(rep), [])>tbl 
   				 ; if-verbose4(say(!"Repository read: "))

  read-repository-file = 
    can-read-file
    < ReadFromFile
    + (not(file-exists); debug(!"** WARNING: Repository doesn't exist: ")
                      <+ debug(!"** WARNING: No read permission for repository: "))
      ; ![]

  can-write-repository =
    file-exists < can-write-file + id

  xtc-store-repository =
    where(
      <bagof-XtcFilesAndTables> Tables
      ; filter(test(<XtcFilesAndTables>Changed(<id>)))
      ; debug(!"changed tables: ")
      ; map(
          <WriteToBinaryFile>
	    (<XtcFilesAndTables; debug; ?RepoFile(<id>)>, 
	     <debug; ?NestedTable(<hashtable-getlist>)>)
        )
    )

strategies // lookup in XTC repository

  xtc-find-loc = 
    is-string
    ; ![<id>]
    ; xtc-find-loc

  xtc-find-loc = 
    \ Tool(x) -> [x] \
    ; xtc-find-loc

  xtc-find-loc =
    ?names@[_ | _]
    ; xtc-get-stack
    ; fetch-elem(nestedtable-get(xtc-file-to-table | names))
    ; Hd
    ; Snd

strategies // convenience strategies

  xtc-find = 
    if-verbose5(debug(!"xtc-find? "))
    ; xtc-find-loc
    ; if-verbose5(debug(!"xtc-find: "))
   <+ <error> ["No XTC registration for ", <id>, " found"]
    ; fail

  xtc-find-warning = 
    xtc-find 

  xtc-find-silent = 
    xtc-find-loc

  xtc-find-path =
    xtc-find; get-path

strategies // Adding a binding (to the current scope)

  xtc-set(|names, value) =
    where(
      <debug(!"xtc-set: ")> (names, value)
      ; xtc-get-stack
      ; debug(!"stack: ")
      ; [nestedtable-put(xtc-file-to-table, xtc-table-changed | names, value)
        | id]
      ; xtc-show-stack
    )

  xtc-extend(|names, values) =
    where(
      <debug(!"xtc-extend: ")> (names, values)
      ; xtc-get-stack
      ; [nestedtable-put(xtc-file-to-table, xtc-table-changed | names, 
			 <union>(values, <nestedtable-get(|names) <+ ![]>))
        | id]
      ; xtc-show-stack
    )

  /**
   * @param  tools    String or List(String)
   * @param  version  String
   * @param  loc      Directory of tools
   */
  xtc-register(|tools, version, loc) = 
    where(
      !tools
      ; (is-list <+ ![<id>])
      ; map(debug; xtc-set(|[<id>], [(version, <concat-strings>[loc,"/",<id>])]))
    )
