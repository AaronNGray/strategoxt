module xtc-rep
imports exec tables config file

signature
  sorts XtcKey
  constructors
    Tool       : String -> XtcKey
    Repository : XtcKey 
    Stack      : XtcKey
    Import     : XtcKey
    Imported   : String -> XtcKey

    XTC	       : Table

    RepoFile   : String -> XtcKey             // present in named file
    RepoTable  : String * HashTable -> XtcKey // loaded in table and not changed wrt file
    RepoTable  : HashTable -> XtcKey          // loaded in table, not present in file

/*

  XTC.stack -> [tbl1, ..., tbln]

  tbli.name -> tool binding
            -> RepoFile(file)
            -> RepoFile(file, tbl)
            -> RepoFile(tbl)

  in the last two cases tbl is again an XTC repository for which 
  the same options apply. Conceptually we can then map a qualified
  name name1.name2.name3 to

  XTC.stack[name1].name2.name3

*/

strategies // stack operations

  xtc-set-stack(|stack) =
    where(<table-put>(XTC, Stack, stack))

  xtc-get-stack = 
    where(
      <table-get>(XTC, Stack)
      <+ ![]; xtc-set-stack(|<id>)
    )

  xtc-push-file = ?file;
    where(
      xtc-get-stack
      ; ![<xtc-file-to-table>file | <id>]
      ; xtc-set-stack(|<id>)
    )

  xtc-push-table = ?tbl;
    where(
      xtc-get-stack
      ; ![RepoTable(tbl) | <id>]
      ; xtc-set-stack(|<id>)
    )

  xtc-pop =
    xtc-get-stack
    ; Tl
    ; where(<table-put>(XTC, Stack, <id>))

  xtc-scope(s) =
    where(xtc-get-stack => stack)
    ; restore-always(s, xtc-set-stack(|stack))

strategies // default repository

  xtc-push-default =
    xtc-location
    ; xtc-push-file

  /**
   * Returns the location of the XTC repository.
   *
   * @type _ -> String
   */
  xtc-location =
    <get-config> "-r"
    <+ <getenv> "XTC_REPOSITORY"
    <+ GetInternalDefaultXtcRepository

  external GetInternalDefaultXtcRepository(|)

strategies // loading repositories from files

  xtc-file-to-table =
    !RepoTable(<id>, <ReadFromFile; hashtable-init; xtc-import>)

  xtc-import = ?tbl;
    where(
      repeat(<table-get>(tbl, Import)
             ; filter(xtc-read(|tbl))
             ; not([]))
    )

  xtc-read(|tbl) = ?rep
    				; if-verbose5(debug(!"Reading? "))
    ; not(<table-get>(tbl, Imported(rep)))
    ; where(<table-put>(tbl, Repository, [rep]))
    				; if-verbose4(debug(!"Reading repository: "))
    ; read-repository-file
    				; if-verbose6(say(!"Repository read: "))
    ; <table-putlist(table-append)>(tbl, <id>)
    				; if-verbose6(say(!"Repository stored in table: "))
    ; <table-put>(tbl, Imported(rep), [])
   				 ; if-verbose4(say(!"Repository read: "))

  read-repository-file = 
    can-read-file
    < ReadFromFile
    + (not(file-exists); debug(!"** WARNING: Repository doesn't exist: ")
                      <+ debug(!"** WARNING: No read permission for repository: "))
      ; ![]

/*
  xtc-load =
    if-verbose5(debug(!"xtc-load: ")); 
    where(
      <table-get>(XTC, Repository)
      <+ xtc-location
         ; xtc-read
	 ; xtc-import
    )
    ; if-verbose5(debug(!"xtc-loaded: "))
*/

  xtc-store =
    if-verbose1(say(!"  Saving repository "))
    ; <get-config> "-r"
    ; ( can-write-repository
      < <WriteToBinaryFile> (<id>, <table-getlist> XTC)
      + debug(!"** WARNING: No write permission for repository: "); fail)

  can-write-repository =
    file-exists < can-write-file + id
