module xtc-rep
imports liblib

signature
  sorts XtcKey
  constructors
    Tool       : String -> XtcKey
    Repository : XtcKey 
    Stack      : XtcKey
    Import     : XtcKey
    Imported   : String -> XtcKey
    FromFile   : XtcKey

    XTC	       : Table

    RepoFile   : String -> XtcKey             // present in named file
    RepoTable  : String * HashTable -> XtcKey // loaded in table and not changed wrt file
    RepoTable  : HashTable -> XtcKey          // loaded in table, not present in file

strategies // stack operations

  xtc-set-stack(|stack) =
    where(<table-put>(XTC, Stack, stack))

  xtc-get-stack = 
    where(
      <table-get>(XTC, Stack)
      <+ ![]; xtc-set-stack(|<id>)
    )

  xtc-push-file = ?file;
    where(
      xtc-get-stack
      ; ![RepoFile(file) | <id>]
      ; xtc-set-stack(|<id>)
    )

  xtc-push-table = ?tbl;
    where(
      xtc-get-stack
      ; ![NestedTable(tbl) | <id>]
      ; xtc-set-stack(|<id>)
    )

  xtc-pop =
    xtc-get-stack
    ; Tl
    ; where(<table-put>(XTC, Stack, <id>))

  xtc-scope(s) =
    where(xtc-get-stack => stack)
    ; restore-always(s, xtc-set-stack(|stack))

strategies // default repository

  xtc-push-default =
    xtc-location
    ; xtc-push-file

  /**
   * Returns the location of the XTC repository.
   *
   * @type _ -> String
   */
  xtc-location =
    <get-config> "-r"
    <+ <getenv> "XTC_REPOSITORY"
    <+ GetInternalDefaultXtcRepository

  external GetInternalDefaultXtcRepository(|)

strategies // loading repositories from files

  xtc-file-to-table =
    XtcFileToTable <+ xtc-file-to-table-new

  xtc-file-to-table-new :
    RepoFile(file) -> NestedTable(tbl)
    where <ReadFromFile; hashtable-init; xtc-import> file => tbl
	; rules( 
	    XtcFilesAndTables :  RepoFile(file) -> NestedTable(tbl)
	    XtcFilesAndTables :  NestedTable(tbl) -> RepoFile(file)
	    XtcFilesAndTables :+ Files -> RepoFile(file)
	    XtcFilesAndTables :+ Tables -> NestedTable(tbl)
	  )

  xtc-import = ?tbl;
    where(
      repeat(<hashtable-get>(tbl, Import)
             ; filter(xtc-read(|tbl))
             ; not([]))
    )

  xtc-read(|tbl) = ?rep
    				; if-verbose5(debug(!"Reading? "))
    ; not(<hashtable-get>(tbl, Imported(rep)))
    ; where(<hashtable-put>(tbl, Repository, [rep]))
    				; if-verbose4(debug(!"Reading repository: "))
    ; read-repository-file
    				; if-verbose6(say(!"Repository read: "))
    ; <hashtable-putlist(hashtable-pushunion)>(tbl, <id>)
    				; if-verbose6(say(!"Repository stored in table: "))
    ; <hashtable-put>(tbl, Imported(rep), [])
   				 ; if-verbose4(say(!"Repository read: "))

  read-repository-file = 
    can-read-file
    < ReadFromFile
    + (not(file-exists); debug(!"** WARNING: Repository doesn't exist: ")
                      <+ debug(!"** WARNING: No read permission for repository: "))
      ; ![]

  can-write-repository =
    file-exists < can-write-file + id

strategies // lookup in XTC repository

  xtc-find-loc = 
    is-string
    ; ![<id>]
    ; xtc-find-loc

  xtc-find-loc =
    ?names@[_ | _]
    ; xtc-get-stack
    ; fetch-elem(nestedtable-get(xtc-file-to-table | names))

strategies // convenience strategies

  xtc-find = 
    if-verbose5(debug(!"xtc-find? "))
    ; xtc-find-loc
    ; if-verbose5(debug(!"xtc-find: "))
   <+ <error> ["No XTC registration for ", <id>, " found"]
    ; fail

  xtc-find-warning = 
    xtc-find 

  xtc-find-silent = 
    xtc-find-loc

  xtc-find-path =
    xtc-find; get-path

strategies // Adding a binding (to the current scope)

  xtc-set(|names, value) =
    where(
      xtc-get-stack
      ; [nestedtable-put(|names, value) | id]
    )

  /**
   * @param  tools    String or List(String)
   * @param  version  String
   * @param  loc      Directory of tools
   */
  xtc-register(|tools, version, loc) = 
    where(
      xtc-load
    ; !tools
    ; (is-list <+ ![<id>])
    ; map(<table-union>(XTC, Tool(<id>), 
	    [(version, <concat-strings>[loc,"/",<id>])]))
    )
