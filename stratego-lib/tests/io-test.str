module io-test
imports sunit io
strategies

  main = 
    test-suite(!"io-test",
      //test1;
      //test2;
      test3
    ; aterm-io-tests
    )

  test1 =
    where(<open-file> ("io-test.r", "r"));
    apply-test(!"test1"
	, getchar 
	, !"io-test.r"
	, !92
	);
    where(<close-file> "io-test.r")

  test2 =
    where(<open-file> ("io-test.r", "r"));
    apply-test(!"test2a"
	, rec x({where(<getchar> "io-test.r" => c; not(10)); ![c | <x>()]} <+ ![]);
	  implode-string
	, !"io-test.r"
	, !"\\literate[io-test]"
	);
    apply-test(!"test2b"
	, split(readline, readline); 
	  (implode-string, implode-string)
	, !"io-test.r"
	, !("","\t\\begin{abstract}")
	);
    where(<close-file> "io-test.r")

  test3 =
    apply-test(!"test3"
	, printnl
	, !(stdout, ["\"\\\\/\""])
	, !(stdout, ["\"\\\\/\""])
	)

  aterm-io-tests =
      apply-test(!"ATerm IO -- 1"
      , test-write-read-term
      , !"Bla Bla Bla"
      , !"Bla Bla Bla"
      )
    ; apply-test(!"ATerm IO -- 2"
      , test-write-read-term
      , !()
      , !()
      )
    ; apply-test(!"ATerm IO -- 3"
      , test-write-read-term
      , !1
      , !1
      )
    ; apply-test(!"ATerm IO -- 4"
      , test-write-read-term
      , !None()
      , !None()
      )
    ; apply-test(!"ATerm from String -- 1"
      , read-from-string
      , !"[1,2,3]"
      , ![1,2,3]
      )
    ; apply-test(!"ATerm to String -- 1"
      , write-to-string
      , ![1,2,3]
      , !"[1,2,3]"
      )
   ;  apply-test(!"ATerm string IO -- 1"
      , test-write-read-term-string
      , !"Bla Bla Bla"
      , !"Bla Bla Bla"
      )
    ; apply-test(!"ATerm string IO -- 2"
      , test-write-read-term-string
      , !()
      , !()
      )
    ; apply-test(!"ATerm string IO -- 3"
      , test-write-read-term-string
      , !1
      , !1
      )
    ; apply-test(!"ATerm string IO -- 4"
      , test-write-read-term-string
      , !None()
      , !None()
      )

  test-write-read-term =
      ?t
    ; <WriteToTextFile> ("test.aterm", t)
    ; <ReadFromFile> "test.aterm" => t
    ; <remove-file> "test.aterm"
    ; !t

  test-write-read-term-string =
      ?t
    ; <WriteToTextFile> ("test.aterm", t)
    ; <ReadFromFile> "test.aterm" => t
    ; <remove-file> "test.aterm"
    ; !t

