module dr-propconst-tests
imports
  dr-test-utils

strategies

  propconst-tests =
    test-suite(!"Dynamic Rules Library -- Constant Propagation",
      where(separation-message(|"Dynamic Rules Library -- Constant Propagation -- Basic Tests"))
    ; pc-basic-tests
    ; where(separation-message(|"Dynamic Rules Library -- Constant Propagation -- Intersection Tests"))
    ; pc-intersection-tests
    ; where(separation-message(|"Dynamic Rules Library -- Constant Propagation -- Fix and Intersect Tests"))
    ; pc-fix-and-intersect-tests
    ; where(separation-message(|"Dynamic Rules Library -- Constant Propagation -- Break Tests"))
    ; pc-break-tests
    ; where(separation-message(|"Dynamic Rules Library -- Constant Propagation -- Break to Label Tests"))
    ; pc-break-to-label-tests
    ; where(separation-message(|"Dynamic Rules Library -- Constant Propagation -- Continue Tests"))
    ; pc-continue-tests
    ; where(separation-message(|"Dynamic Rules Library -- Constant Propagation -- Continue to Label Tests"))
    ; pc-continue-to-label-tests
    ; where(separation-message(|"Dynamic Rules Library -- Constant Propagation -- Exception Tests"))
    ; pc-exception-tests
    )

strategies

  pc-basic-tests = id

  ; apply-propconst-test(!"Check rule definition (top scope)" |
      "var x; x := 0; f(x);",
      "var x; x := 0; f(0);"
    )

  ; apply-propconst-test(!"Check rule redefinition with the same value (top scope)" |
      "var x; x := 0; f(x); x := 0; f(x);",
      "var x; x := 0; f(0); x := 0; f(0);"
    )

  ; apply-propconst-test(!"Check rule redefinition with a different value (top scope)" |
      "var x; x := 0; f(x); x := 1; f(x);",
      "var x; x := 0; f(0); x := 1; f(1);"
    )

  ; apply-propconst-test(!"Check rule undefinition (top scope)" |
      "var x; var y; x := 0; f(x); x := y; f(x);",
      "var x; var y; x := 0; f(0); x := y; f(x);"
    )

  ; apply-propconst-test(!"Check rule undefinition and redefinition with the same value (top scope)" |
      "var x; var y; x := 0; f(x); x := y; f(x); x := 0; f(x);",
      "var x; var y; x := 0; f(0); x := y; f(x); x := 0; f(0);"
    )

  ; apply-propconst-test(!"Check rule undefinition and redefinition with a different value (top scope)" |
      "var x; var y; x := 0; f(x); x := y; f(x); x := 1; f(x);",
      "var x; var y; x := 0; f(0); x := y; f(x); x := 1; f(1);"
    )

  ; apply-propconst-test(!"Check rule lookup after definition (top scope)" |
      "var x; var y; var z; x := 0; y := 1; z := 2; f(x, y, z);",
      "var x; var y; var z; x := 0; y := 1; z := 2; f(0, 1, 2);"
    )

  ; apply-propconst-test(!"Check rule lookup after redefinition (top scope)" |
      "var x; var y; var z; x := 0; y := 1; z := 2; x := 0; y := 2; f(x, y, z);",
      "var x; var y; var z; x := 0; y := 1; z := 2; x := 0; y := 2; f(0, 2, 2);"
    )

  ; apply-propconst-test(!"Check rule definition (nested scope)" |
      "begin var x; x := 0; f(x); end",
      "begin var x; x := 0; f(0); end"
    )

  ; apply-propconst-test(!"Check rule redefinition with the same value (nested scope)" |
      "begin var x; x := 0; f(x); x := 0; f(x); end",
      "begin var x; x := 0; f(0); x := 0; f(0); end"
    )

  ; apply-propconst-test(!"Check rule redefinition with a different value (nested scope)" |
      "begin var x; x := 0; f(x); x := 1; f(x); end",
      "begin var x; x := 0; f(0); x := 1; f(1); end"
    )

  ; apply-propconst-test(!"Check rule undefinition (nested scope)" |
      "begin var x; var y; x := 0; f(x); x := y; f(x); end",
      "begin var x; var y; x := 0; f(0); x := y; f(x); end"
    )

  ; apply-propconst-test(!"Check rule undefinition and redefinition with the same value (nested scope)" |
      "begin var x; var y; x := 0; f(x); x := y; f(x); x := 0; f(x); end",
      "begin var x; var y; x := 0; f(0); x := y; f(x); x := 0; f(0); end"
    )

  ; apply-propconst-test(!"Check rule undefinition and redefinition with a different value (nested scope)" |
      "begin var x; var y; x := 0; f(x); x := y; f(x); x := 1; f(x); end",
      "begin var x; var y; x := 0; f(0); x := y; f(x); x := 1; f(1); end"
    )

  ; apply-propconst-test(!"Check rule lookup after definition (nested scope)" |
      "begin var x; var y; var z; x := 0; y := 1; z := 2; f(x, y, z); end",
      "begin var x; var y; var z; x := 0; y := 1; z := 2; f(0, 1, 2); end"
    )

  ; apply-propconst-test(!"Check rule lookup after redefinition (nested scope)" |
      "begin var x; var y; var z; x := 0; y := 1; z := 2; x := 0; y := 2; f(x, y, z); end",
      "begin var x; var y; var z; x := 0; y := 1; z := 2; x := 0; y := 2; f(0, 2, 2); end"
    )

  ; apply-propconst-test(!"Check rule definition (across scope)" |
      "var x; begin x := 0; f(x); end f(x);",
      "var x; begin x := 0; f(0); end f(0);"
    )

  ; apply-propconst-test(!"Check rule redefinition with the same value (across scope)" |
      "var x; x := 0; begin x := 0; f(x); end f(x);",
      "var x; x := 0; begin x := 0; f(0); end f(0);"
    )

  ; apply-propconst-test(!"Check rule redefinition with a different value (across scope)" |
      "var x; x := 0; begin x := 1; f(x); end f(x);",
      "var x; x := 0; begin x := 1; f(1); end f(1);"
    )

  ; apply-propconst-test(!"Check rule undefinition (across scope)" |
      "var x; var y; x := 0; begin x := y; f(x); end f(x);",
      "var x; var y; x := 0; begin x := y; f(x); end f(x);"
    )

  ; apply-propconst-test(!"Check rule undefinition and redefinition with the same value (across scope)" |
      "var x; var y; x := 0; begin x := y; f(x); x := 0; f(x); end f(x);",
      "var x; var y; x := 0; begin x := y; f(x); x := 0; f(0); end f(0);"
    )

  ; apply-propconst-test(!"Check rule undefinition and redefinition with a different value (across scope)" |
      "var x; var y; x := 0; begin x := y; f(x); x := 1; f(x); end f(x);",
      "var x; var y; x := 0; begin x := y; f(x); x := 1; f(1); end f(1);"
    )

  ; apply-propconst-test(!"Check rule lookup after definition (across scope)" |
      "var x; var y; var z; x := 0; y := 1; z := 2; begin f(x, y, z); end",
      "var x; var y; var z; x := 0; y := 1; z := 2; begin f(0, 1, 2); end"
    )

  ; apply-propconst-test(!"Check rule lookup after redefinition (across scope)" |
      "var x; var y; var z; x := 0; y := 1; z := 2; x := 0; y := 2; begin f(x, y, z); end",
      "var x; var y; var z; x := 0; y := 1; z := 2; x := 0; y := 2; begin f(0, 2, 2); end"
    )

  ; apply-propconst-test(!"Check rule definitions with the same value (nested scopes)" |
      "var x; x := 0; f(x); begin var x; x := 0; f(x); begin var x; x := 0; f(x); end f(x); end f(x);",
      "var x; x := 0; f(0); begin var x; x := 0; f(0); begin var x; x := 0; f(0); end f(0); end f(0);"
    )

  ; apply-propconst-test(!"Check rule definitions with different values (nested scopes)" |
      "var x; x := 0; f(x); begin var x; x := 1; f(x); begin var x; x := 1; f(x); end f(x); end f(x);",
      "var x; x := 0; f(0); begin var x; x := 1; f(1); begin var x; x := 1; f(1); end f(1); end f(0);"
    )

  ; apply-propconst-test(!"Check rule definitions with different values (nested scopes)" |
      "var x; x := 0; f(x); begin var x; x := 1; f(x); begin var x; x := 2; f(x); end f(x); end f(x);",
      "var x; x := 0; f(0); begin var x; x := 1; f(1); begin var x; x := 2; f(2); end f(1); end f(0);"
    )

  ; apply-propconst-test(!"Check rule definitions/undefinitions with the same value (nested scopes)" |
      "var x; x := 0; f(x); begin var x; x := 0; f(x); x := y; f(x); end f(x);",
      "var x; x := 0; f(0); begin var x; x := 0; f(0); x := y; f(x); end f(0);"
    )
    
  ; apply-propconst-test(!"Check rule definitions/undefinitions with different values (nested scopes)" |
      "var x; x := 0; f(x); begin var x; x := 1; f(x); x := y; f(x); end f(x);",
      "var x; x := 0; f(0); begin var x; x := 1; f(1); x := y; f(x); end f(0);"
    )

  pc-intersection-tests = id

  pc-fix-and-intersect-tests = id

  ; apply-propconst-test(!"Check for (fails due to bug in library)..." |
      "
        var i; var x; var y;
        i := 0; x := 1; y := 2; z := 3;
        for i := x to x + y do
          write(i);
          write(x);
          y := 1; // assign a different value
          z := 3; // assign the same value
        end
        f(x, y, z, i);
      ",
      "
        var i; var x; var y;
        i := 0; x := 1; y := 2; z := 3;
        for i := 1 to 3 do
          write(i);
          write(1);
          y := 1; // assign a different value
          z := 3; // assign the same value
        end
        f(1, y, 3, i);
      ")

  ; apply-propconst-test(!"Check while (fails due to bug in library)..." |
      "
        var i; var x; var y;
        i := 0; x := 1; y := 2; z := 3;
        while (i < x + y) do
          write(i);
          write(x);
          y := 1; // assign a different value
          z := 3; // assign the same value
          i := i + 1;
        end
        f(x, y, z, i);
      ",
      "
        var i; var x; var y;
        i := 0; x := 1; y := 2; z := 3;
        while (i < 1 + y) do
          write(i);
          write(1);
          y := 1; // assign a different value
          z := 3; // assign the same value
          i := i + 1;
        end
        f(1, y, 3, i);
      ")

  pc-break-tests = id

  pc-break-to-label-tests = id

  pc-continue-tests = id

  pc-continue-to-label-tests = id

  pc-exception-tests = id
