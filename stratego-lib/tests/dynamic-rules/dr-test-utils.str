module dr-test-utils
imports
  libstrategolib
  libstratego-sglr
  til/opt/til-propconst

strategies

  apply-propconst-test(name | in-program, out-program) =
    apply-test(name, dr-ignore-state-cleanup(propconst|"PropConst"), <parse-til>in-program, <parse-til>out-program)

  applyf-propconst-test(name | in-program, out-program) =
    apply-test(name, dr-ignore-state-cleanup(propconst|"PropConst"), <parse-til>in-program, <parse-til>out-program)

  fail-propconst-test(name | in-program, out-program) =
    apply-test(<concat-strings>[<name>, " (THIS TEST ACTUALLY FAILS!)"], dr-ignore-state-cleanup(propconst|"PropConst"), <parse-til>in-program)
    
  show-propconst-test(name | in-program, out-program) =
    apply-and-show(name, dr-ignore-state-cleanup(propconst|"PropConst"), <parse-til>in-program)

strategies

  parse-til =
    parse-string(|<ReadFromFile; open-parse-table>"til/syn/TIL.tbl", "Program")

strategies

  dr-ignore-state-cleanup(s|name) =
    where(
      dr-new-rule-set
      ; dr-switch-rule-set(|name) => rs
    )
  ; s
  ; where(
      <dr-switch-rule-set(|name)>rs
      ; map(dr-destroy-scope <+ dr-destroy-change-set)
    )

  separation-message(|msg) =
    separation-message(|msg, "=", 80)

  description-message(|msg) =
    description-message(|msg, "=", 80)

  /**
   * Prints a separation message.
   * Assuming fill-char is "=", the separation message will be
   *   ======= msg =======
   * The length indicates the desired length of the _entire_ message,
   * including the fill characters. msg will be truncated to fit.
   * If it truncation is necessary, "..." will be added at the end of
   * the truncated msg. The length must be >= 8, to allow for at least
   * = M... = (i.e., two separator chars, two spaces, the first letter
   * of the message and three dots).
   */
  separation-message(|msg, fill-char, length) =
    custom-message(|msg, fill-char, fill-char, length)

  /**
   * Same as separation message, except that it only uses the fill-char
   * as end-char (hence, the paramter name change), i.e. once at the
   * beginning and once at the end of the line, filling the rest with
   * spaces.
   *
   * Example:
   *  separation-message(|"abc", "=", 20) =>
   *   = abc ==============
   *  description-message(|"abc", "=", 20) =>
   *   = abc              =
   */
  description-message(|msg, end-char, length) =
    custom-message(|msg, " ", end-char, length)

  /**
   * @internal
   */
  custom-message(|msg, fill-char, end-char, length) =
    (<geq>(length, 8) < !length + !8)
    ; <subt>(<id>, 7) => l
    ; <subt>(l, <string-length>msg) => diff
    ; (<lt>(diff, 0)
       < <explode-string; take(|l); implode-string>msg
         ; <concat-strings>[end-char, " ", <id>, "... ", end-char]
       + <copy; concat-strings>(diff, fill-char)
         ; <concat-strings>[end-char, " ", msg, " ", <id>, end-char]
      )
    ; say(id)
