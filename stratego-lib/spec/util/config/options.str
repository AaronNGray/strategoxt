/**
 * Handling command line options.
 */
module util/config/options
imports 

  system/io/char
  system/io/pipe
  system/io/term
  system/io/dir
  system/io/file
  system/io/process
  
  util/config/parse-options 
  util/config/common 
  util/config/verbose 
  util/config/keep 
  util/time 
  util/log

strategies

  /**
   * Wraps a strategy into a strategy handling options and io of terms.
   *
   * @param  strategy to apply on the input term
   */
  io-wrap(s) = 
    io-wrap(fail, s)

  /**
   * Wraps a strategy into a strategy handling options and io of terms.
   *
   * @param   extra options besides the default io-options
   *          use fail if you have no additional options.
   * @param   strategy to apply on the input term
   */
  io-wrap(extra-opts, s) =
    io-wrap(extra-opts, system-usage, system-about, s)

  /**
   *
   * @param   extra options besides the default io-options.
   *          use fail if you have no additional options.
   *
   * @param   strategy to apply on the input term
   */
  io-wrap(extra-opts, usage, about, s) =
    option-wrap(extra-opts <+ io-options,  usage, about, id, io(s))

  output-wrap(s) =
    output-wrap(fail, s)

  output-wrap(extra-opts, s) =
    option-wrap(extra-opts <+ output-options,  output(s))

  input-wrap(s) =
    input-wrap(fail, s)

  input-wrap(extra-opts, s) =
    option-wrap(extra-opts <+ input-options,  input(s))

strategies

  /**
   * Wraps a strategy into a strategy that handles io options.
   *
   * Reads a term from the file specified by the -i option (or stdin).
   * Writes to a file specified by the -o option (or stdout).
   *
   * @param   strategy to apply on the input term
   */
  io(s) =
    input(output(s))

 /**
  * Wraps a strategy into a strategy that handles output options.
  *
  * Writes to a file specified by the -o option (or stdout).
  */ 
  output(s) =
      s
    ; !(<<get-config> "-o" <+ !stdout()>, <id>)
    ; ( where(<get-config> "-b") < WriteToBinaryFile + WriteToTextFile )

 /**
  * Wraps a strategy into a strategy that handles input options.
  *
  * Reads a term from the file specified by the -i option (or stdin).
  */ 
  input(s) =
      ( <get-config> "-i" <+ !stdin() )
    ; ReadFromFile
    ; s

strategies

  option-wrap(opts, s) =
    option-wrap(opts, system-usage, id, s)

  option-wrap(opts, usage, announce, s) =
    option-wrap(opts, usage, system-about, announce, s)

  /**
   * Read options, display help, report success or failure, call strategy
   */
  option-wrap(opts, usage, about, announce, s) =
    parse-options(opts, usage, about)
    ; store-options
    ; announce
    ; (s; report-success <+ report-failure)

strategies

  /**
   * Handles all common options for a transformation tool.
   */
  io-options =
      input-option
    + aterm-output-option
    + general-options

  input-options =
      input-option
    + general-options

  output-options =
      aterm-output-option
    + general-options

  general-options =
      verbose-option
    + keep-option

  /**
   * Option specifcation for level of keeping intermediate results.
   */
  keep-option =
    ArgOption("-k" + "--keep"
    , where(<set-config> ("--keep", <string-to-int>))
    , !"--keep i | -k i  Keep intermediates (default 0)"
    )

  /**
   * Option specifications for reading input.
   *
   * Defines -i.
   */
  input-option =
    ArgOption("-i" + "--input"
    , where(<set-config> ("-i",<id>)); !Input(<id>)
    , !"-i f|--input f   Read input from f"
    )

  /**
   * Option specifications for writing output.
   *
   * Defines -o.
   */
  output-option =
    ArgOption("-o" + "--output"
    , where(<set-config> ("-o",<id>)); !Output(<id>)
    , !"-o f|--output f  Write output to f" 
    )

  /**
   * Option specifications for ATerm output.
   *
   * Defines -b option for binary output.
   */
  aterm-output-option =
      output-option
    + Option("-b"
      , where(<set-config> ("-b",())); !Binary()
      , !"-b               Write binary output"
      )

  /**
   * Option specifications for verbosity.
   *
   * Defines -S, --silent, --verbose and -s.
   */
  verbose-option =
      Option("-S"+"--silent"
      , where(<set-verbosity> 0); !Verbose(0)
      , !"-S|--silent      Silent execution (same as --verbose 0)"
      )
    + ArgOption("--verbose"
      , where(verbose-to-int; set-verbosity); !Verbose(<id>)
      , !"--verbose i      Verbosity level i (default 1)
                    ( i as a number or as a verbosity descriptor:
                      emergency, alert, critical, error, 
                      warning, notice, info, debug, vomit )"
      )

strategies

  verbose-to-int = 
      string-to-level
        <+
      string-to-int
  
  need-help(u) =
    (  <get-config> "--help"
      <+ option-defined(
           Help()
         + Undefined(id)
         + Version()
         )
    ); u

  if-not-silent(s) =
    test(verbosity => 0) <+ s

  report-success =
      report-run-time
    ; <exit> 0

  report-failure =
      report-run-time
    ; <printnl> (stderr, [<whoami> (), ": rewriting failed"])
    ; <exit> 1

  /**
   * Outputs the name of the program and the run time in seconds to
   * stderr.
   */
  report-run-time = 
    if-verbose5(
      <printnl> (stderr,
        [<whoami> (), " (", <run-time>, " secs)"]
      )
    )

  whoami =
    <get-config> "program"

/**
* @obsolete new option handling uses config table.
*/ 
signature

  constructors
    Silent      : Option
    Verbose     : Int -> Option
    Version     : Option
    Input       : String -> Option
    Output      : String -> Option
    Binary      : Option
    Help        : Option
    Runtime     : Real   -> Option
    DeclVersion : String -> Option

strategies

  /**
   * @obsolete use config for this purpose.
   */
  store-options =
    obsolete(!"store-options; use config table")
    ; ?options
    ; where( 
        <table-create>"option-table";
        <table-put>("option-table", "options", options)
      )

  /**
   * @obsolete use config for this purpose.
   */
  get-options =
    obsolete(!"get-options; use config table")
    ; <table-get>("option-table", "options")

  /**
   * @obsolete use config for this purpose.
   */
  has-option(s) =
    obsolete(!"has-option; use config table")
    ; test(<s; check-option>())

  /**
   * @obsolete use config for this purpose.
   */
  option-value(s,default) =
    obsolete(!"option-value; use config table")
    ; get-options; fetch-elem(s) <+ default

  /**
   * @obsolete use config for this purpose.
   */
  check-option =
    obsolete(!"check-option; use config table")
    ; ?option
    ; where(
        get-options => ops
        ; <is-subterm> (option, ops)
      )

