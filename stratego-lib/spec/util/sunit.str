/**
 * sunit: Unit Testing Framework.
 */
module util/sunit
imports 
  system/io/file 
  system/io/dir 
  system/io/pipe 
  system/io/char 
  system/io/term 


strategies

  test-suite(name, tests) =
    name
    ; debug(!"test suite: ")
    ; init-record
    ; tests
    ; report-test
    ; check-for-failures

  apply-test(name, s, in-term, out) =
    do-test(name,
            (sunit-create-input(in-term); s <+ <debug> "  strategy failed"; fail) => tmp;
  	    sunit-create-output(out) => tmp'; 
	    ((!tmp' => tmp)
               <+ (<debug(!"  result not equal : ")> tmp;
                   <debug(!"  expected         : ")> tmp'); fail))

  apply-test(name, s, in-term) =
    do-test(name,
      (sunit-create-input(in-term); s <+ <debug> "  strategy failed"; fail)
    )

  apply-and-check(name, s, in-term, check) =
    do-test(name,
      (sunit-create-input(in-term); s  <+ <debug> "  application failed"; fail)
      ; (check <+ (debug(!"  check failed: "); fail))
    )

  apply-and-fail(name, s, in-term) =
    apply-and-fail(name, s, in-term, !())

  apply-and-fail(name, s, in-term, out) =
    do-test(name,
	    ((sunit-create-input(in-term); not(s))
             <+ <debug> "  succeeded (should fail)"; fail))

  apply-and-show(name, s, in-term) =
    do-test(name
	   ,(sunit-create-input(in-term); s <+ <debug> "  strategy failed"; fail)
            ; <debug> ["  succeeded; result: ", <id>]
           )

/**
 * Term arguments variants of the old sunit strategies
 */
strategies

  apply-test(s | name, in-term, out) =
    apply-test(!name, s, !in-term, !out)

  apply-test(s | name, in-term) =
    apply-test(!name, s, !in-term)

  apply-and-check(s | name, in-term, check) =
    apply-and-check(!name, s, !in-term, !check)

  apply-and-fail(s | name, in-term) =
    apply-and-fail(!name, s, !in-term)

  apply-and-fail(s | name, in-term, out) =
    apply-and-fail(!name, s, !in-term, !out)

  apply-and-show(s | name, in-term) =
    apply-and-show(!name, s, !in-term)

/**
 * Internal helpers
 */
strategies

  sunit-create-input(s) =
    s <+ say(!"error: input strategy for this test failed"); fail

  sunit-create-output(s) =
    s <+ say(!"error: output strategy for this test failed"); fail

  do-test(nr, s) =
    where(nr; debug)
    ; (where(s); record-success 
       <+ record-failure)

  testing(nr, s) =
    do-test(nr, s; debug(!"  succeeded: ") 
	   	<+ debug(!"  failed: "); fail)

  do-test(s | nr) =
    where(< debug>nr )
  ; ( where(s) ; record-success <+ record-failure )

/**
 * Test results are stored in a tuple of two integers. This tuple is
 * passed from test to test. (success, failure)
 */
strategies
	
  init-record =
    !(0,0)

  /**
   * Internal: record a successful test
   */
  record-success =
    (inc, id)

  /**
   * Internal: record a failed test
   */
  record-failure =
    (id, inc)

  /**
   * Internal: fails if there was a failure
   */
  check-for-failures =
    (id, 0)

  /**
   * Internal: report the number of successes and failures
   */
  report-test =
    (debug(!"successes: "), debug(!"failures: "))
