module system/posix/file
imports term/string

/**
 * Stream and file representations
 */
signature
  constructors
    Stream    : ImplDep -> Stream

    Path      : String -> FileLoc

    stdin     : FileLoc
    stdout    : FileLoc
    stderr    : FileLoc

    /*
    FileDescr : Int -> FileDescr
    */

/**
 * Standard streams
 */
strategies

  /**
   * Returns the Stream for stdin, stdout and stderr
   *
   * @type _ -> Stream
   */
  stdin-stream  = prim("SSL_stdin_stream") ; !Stream(<id>)
  stdout-stream = prim("SSL_stdout_stream"); !Stream(<id>)
  stderr-stream = prim("SSL_stderr_stream"); !Stream(<id>)

/**
 * Terminal I/O
 */
strategies

  /**
   * Succeeds if file descriptor refers to a terminal device.
   */
  isatty =
    ?filedes; prim("SSL_isatty", filedes) => 1

/**
 * Stream operations
 */
strategies

  /**
   * Opens the file whose name is the string pointed to by 
   * pathname and returns a Stream associated with this file.
   * For documentation on the mode string, see the man page of
   * fopen.
   *
   * fails if the file couldn't be opened. 
   *
   * @type String * String -> Stream
   */
  fopen =
    ?(pathname, mode); prim("SSL_fopen", pathname, mode); !Stream(<id>)

  /**
   * Dissociates the named stream from its underlying file or set of functions.
   * If the stream was being used for output, any buffered data is written 
   * first, using fflush(3).
   *
   * @type Stream -> ()
   */
  fclose =
    ?Stream(stream); prim("SSL_fclose", stream)
      <+ ?stream-old; prim("SSL_fclose", stream-old) // legacy

  /**
   * Forces a write of all user-space buffered data for the given Stream
   *
   * @type Stream -> Stream
   */
  fflush =
    ?Stream(stream); prim("SSL_fflush", stream); !Stream(<id>)
      <+ ?stream-old; prim("SSL_fflush", stream-old); !Stream(<id>) // legacy

/**
 * Character output to stream
 */
strategies

  /**
   * Writes a String to a Stream
   * @type (String, Stream) -> Stream
   */
  fputs =
    ?(str, Stream(stream)); prim("SSL_fputs", str, stream); !Stream(<id>)

  /**
   * Writes a String to stdout with a trailing newline and returns stdout.
   * @type String -> Stream
   */
  puts =
    ?str; prim("SSL_puts", str); !Stream(<id>)

  /**
   * Writes a Char to a Stream
   * @type Char * Stream -> Stream
   */
  fputc =
    ?(c, Stream(stream)); prim("SSL_fputc", c, stream); !Stream(<id>)

/**
 * Character input from stream
 */
strategies

  /**
   * fgetc() reads the next character from the stream and returns the 
   * ASCII code of the character as an Int. Fails on end of file or error.
   *
   * @type Stream -> Char
   */
  fgetc = 
    ?Stream(stream); prim("SSL_fgetc", stream)
  
/**
 * Standard file descriptors
 */
strategies 

  // Standard input, equal to <fileno> stdin
  STDIN_FILENO =
    prim("SSL_STDIN_FILENO")
    
  // Standard output, equal to <fileno> stdout
  STDOUT_FILENO =
    prim("SSL_STDOUT_FILENO")
    
  // Standard error output, equal to <fileno> stderr
  STDERR_FILENO =
    prim("SSL_STDERR_FILENO")

/**
 * Special directories
 */
strategies

  temp-dir =
    <getenv> "TMPDIR"
    <+ P_tmpdir

  P_tmpdir =
    prim("SSL_P_tmpdir")

  /**
   * Returns the current working directory.
   */
  getcwd =
    prim("SSL_getcwd")

  /**
   * Change current working directory.
   *
   * @type String -> String
   */
  chdir =
    ?pathname; prim("SSL_chdir", pathname) => 0
    <+ <conc-strings; perror; fail> ("SSL/chdir: Cannot change current working directory to ", <id>)

  home-dir =
    <getenv> "HOME"

  /**
   * Create directory
   *
   * @type String -> Int
   */
  mkdir(|mode) =
    where(
      ?pathname; prim("SSL_mkdir", pathname, mode) => 0
      <+ <conc-strings; perror; fail> ("SSL/mkdir: Cannot create directory ", <id>)
    )

  mkdir =
    mkdir(|[Read, Write, Execute])

  /**
   * Remove empty directory
   *
   * @type String -> Int
   */
  rmdir =
    ?pathname; prim("SSL_rmdir", pathname) => 0
    <+ <conc-strings; perror; fail> ("SSL/rmdir: Cannot delete directory ", <id>)

/**
 * Primitive file operations
 */
strategies

  /**
   * Opening a file
   */
   
  // create a file and return a file descriptor
  creat =
    ?pathname; prim("SSL_creat", pathname)

  // open a file and return a file descriptor
  open =
    ?pathname; prim("SSL_open", pathname)

  /**
   * Creates a unique temporary file
   *
   * returns a fd if succesful, fails on error
   * @type String -> String * Int
   */
  mkstemp =
    <conc-strings> (<id>, "XXXXXX") => template
    ; prim("SSL_mkstemp", template)
    <+ <perror; fail> "SSL/mkstemp"
 
  /**
   * Creates a unique temporary directory
   *
   * returns a fd if succesful, fails on error
   * @type String -> String
   */
  mkdtemp =
    <conc-strings> (<id>, "XXXXXX") => template
    ; prim("SSL_mkdtemp", template)
    <+ <perror; fail> "SSL/mkdtemp"
       
  /**
   * Closing a file
   *
   * Deallocates a file descriptor   
   */
  close =
    ?fd; prim("SSL_close", fd)
    
  /**
   * Duplicating a file descriptor
   */
  dup =
    ?fd; prim("SSL_dup", fd)

  dup2 =
    ?(fd1, fd2); prim("SSL_dup2", fd1, fd2)

  /**
   * checks the accessibility of the specified file wrt to the
   * specified permissions. Fails if the access is not allowed,
   * returns the path otherwise.
   *
   * @type (String, List(AccessPermission)) -> String
   *
   * @inc access
   */
  access =
    ?(path, permissions); prim("SSL_access", path, permissions)

signature
  constructors
    F_OK: AccessPermission
    R_OK: AccessPermission
    W_OK: AccessPermission
    X_OK: AccessPermission

overlays
  Read      = R_OK
  Write     = W_OK
  Execute   = X_OK
  Existence = F_OK
    
/**
 * Connecting high and low level file operations
 */    
strategies 
 
  /**
   * The fdopen function associates a stream with the existing file 
   * descriptor, fd.
   * 
   * The mode of the stream ("r", "r+", "w", "w+",  "a", "a+") must be 
   * compatible with the mode of the file descriptor.  The file position 
   *
   * @type (FileDescr, String) -> Stream
   */
  fdopen = 
    ?(fd, mode); prim("SSL_fdopen", fd, mode); !Stream(<id>)

  /**
   * The function fileno examines the argument stream and returns its 
   * integer descriptor
   *
   * @type Stream -> FileDescr
   * @inc fileno
   */
  fileno = 
    ?Stream(stream); prim("SSL_fileno", stream)


  /**
   * Mode of a file
   * @type String -> FileMode
   */
  filemode =
    ?pathname; prim("SSL_filemode", pathname); ?(<id>, 0)
    <+ <conc-strings; perror; fail> ("SSL/filemode: Cannot get filemode from ", <id>)

  /**
   * @type File -> FileMode
   */
  isreg =
    ?mode; prim("SSL_S_ISREG", mode)
    
  /**
   * @type File -> FileMode
   */
  isdir =
    ?mode; prim("SSL_S_ISDIR", mode)

  /**
   * @type File -> FileMode
   */
  ischr =
    ?mode; prim("SSL_S_ISCHR", mode)

  /**
   * @type File -> FileMode
   */
  isblk =
    ?mode; prim("SSL_S_ISBLK", mode)

  /**
   * @type File -> FileMode
   */
  isfifo =
    ?mode; prim("SSL_S_ISFIFO", mode)

  /**
   * @type File -> FileMode
   */
  islnk =
    ?mode; prim("SSL_S_ISLNK", mode) 

  /**
   * @type File -> FileMode
   */
  issock =
    ?mode; prim("SSL_S_ISSOCK", mode) 

/**
 * Pipes (and FIFOs)
 */
strategies
 
  /**
   * Pipe creates a pair Pipe(fd1, fd2) of file descriptors, pointing
   * to a pipe inode, and places them in the array pointed to by filedes.
   * fd1 is for reading, fd2 is for writing.
   *
   * @type _ -> Pipe
   */
  pipe =
    prim("SSL_pipe")
    
signature
  constructors
    Pipe       : Int * Int -> Pipe
