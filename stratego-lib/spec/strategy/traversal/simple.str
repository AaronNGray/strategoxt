/**
 * The primitive term traversal operators of Stratego (all, some, one)
 * can be combined with the other control operators in a wide
 * variety of ways to define full term traversals.
 * This module defines a collection of the most common generic one-pass traversals
 * over terms.
 *
 * Term traversals can be categorized into classes according to
 * how much of the term they traverse and to which parts
 * of the term they modify.
 */
module strategy/traversal/simple
imports 
  strategy/conditional 
  term/properties

/**
 * Traverse a term everywhere.
 *
 * The most general class of traversals visits every node
 * of a term and applies a transformation to it. The following
 * operators define traversals that apply a strategy s
 * to all nodes of a term.
 */
strategies

  topdown(s) = 
    s; all(topdown(s))

  bottomup(s) = 
    all(bottomup(s)); s
 
  downup(s) = 
    s; all(downup(s)); s

  downup(s1, s2) = 
    s1; all(downup(s1, s2)); s2

  downup2(s1, s2) =  
    s1; all(downup2(s1, s2)); s2


/**
 * Traversal that can stop at certain points.
 *
 * The traversals above go through all constructors. If it
 * is not necessary to traverse the entire tree, the following
 * versions of the traversals can be used. They are parameterized
 * with a strategy operator 'stop' that 
 */
strategies

  topdownS(s, stop: (a -> a) * a -> a) = 
    s
    ; (stop(topdownS(s,stop)) <+ all(topdownS(s,stop)))

  bottomupS(s, stop: (a -> a) * a -> a) = 
    (stop(bottomupS(s, stop)) <+ all(bottomupS(s, stop)))
    ; s

  downupS(s, stop: (a -> a) * a -> a) = 
    s
    ; (stop(downupS(s, stop)) <+ all(downupS(s, stop))); s

  downupS(s1, s2, stop: (a -> a) * a -> a) = 
    s1
    ; (stop(downupS(s1, s2, stop)) <+ all(downupS(s1, s2, stop)))
    ; s2


  /**
   * The strategy 'don't-stop' is a unit for these traversals,
   * i.e., topdown(s) is equivalent
   * to topdown(s,don't-stop).
   */
  don't-stop(s) =
    fail

  /**
   * A variation on bottomup is a traversal that also provides the
   * original term as well as the term in which the direct subterms
   * have been transformed. (also known as a paramorphism?)
   */
  bottomup-para(s) = 
    !(<id>, <all(bottomup-para(s))>)
    ; s

/**
 * Traversal of a term along a spine.
 *
 * A spine of a term is a chain of nodes from the root to some
 * subterm. 'spinetd' goes down one spine and applies 's' along
 * the way to each node on the spine. The traversal stops when
 * 's' fails for all children of a node.
 */
strategies

  spinetd(s) = 
    s; try(one(spinetd(s)))

  spinebu(s) = 
    try(one(spinebu(s))); s

  spinetd'(s) = 
    s; (one(spinetd'(s)) + all(fail))

  spinebu'(s) = 
    (one(spinebu'(s)) + all(fail)); s


/**
 * Apply s everywhere along all spines where s applies.
 */
strategies

  somespinetd(s) = 
    rec x(s; try(some(x)))

  somespinebu(s) = 
    rec x(try(some(x)); s)

/**
 * Apply s at one position. One s application has to succeed.
 */
strategies

  oncetd(s) = 
    rec x(s <+ one(x))

  oncebu(s) = 
    rec x(one(x) <+ s)

  oncetd-skip(s, skip: (a -> a) * a -> a) = 
    rec x(s <+ skip(x) <+ one(x))

/**
 * Apply s at some positions, but at least one.
 *
 * As soon as one is found, searching is stopped, i.e., in the top-down case
 * searching in subtrees is stopped, in bottom-up case, searching
 * in upper spine is stopped.
 */	
strategies

  sometd(s) = 
    rec x(s <+ some(x))

  somebu(s) = 
    rec x(some(x) <+ s)

/**
 * Frontier
 *
 * Find all topmost applications of 's'
 */
strategies

  alltd(s) = 
    rec x(s <+ all(x))

  alldownup2(s1, s2) = 
    rec x((s1 <+ all(x)); s2)

  alltd-fold(s1, s2) = 
    rec x(s1 <+ all(x); s2)
	
/**
 * Leaves
 */
strategies

  leaves(s, is-leaf, skip: (a -> a) * a -> a) =
    rec x((is-leaf; s) <+ skip(x) <+ all(x))

  leaves(s, is-leaf) =
    rec x((is-leaf; s) <+ all(x))

/**
 * Find as many applications as possible, but at least one.
 */
strategies

  manybu(s) = 
    rec x(some(x); try(s) <+ s)

  manytd(s) = 
    rec x(s; all(try(x)) <+ some(x))

strategies

  somedownup(s) = 
    rec x(s; all(x); try(s) <+ some(x); try(s))

  breadthfirst(s) = 
    rec x(all(s); all(x))
