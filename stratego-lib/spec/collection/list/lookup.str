/**
 * lookup elements in a list.
 */
module collection/list/lookup
imports 
  collection/list/common

strategies

  /**
   * Lookup first value associated to a key in a list of key-value pairs.
   *
   * Example:
   *   <lookup> (2, [(1, "a"), (2, "b"), (3, "c")]) => "b"
   *
   * @type  k * [k * v] -> v
   */  
  lookup = rec x(Look1 <+ Look2 ; x)

  /**
   * Find first element of a list to which s applies.
   * The result is the application of s to this element.
   *
   * @type s    a  -> b
   * @type     [a] -> b
   */
  getfirst(s) = rec x(Hd; s <+ Tl; x)

  /**
   * lookup' is equivalent to lookup.
   * The advantage over lookup is that lookup' does not construct
   * intermediate pairs.
   *
   * @type  k * [k * v] -> v
   */
  lookup' = {x, xs: ?(x, xs) ; <getfirst({y: ?(x, y); !y})> xs}

  lookup(keyeq) = rec x((Look1'(keyeq) <+ Look2; x))

/**
 * Private helpers
 */
rules

  Look1 : (x, [(x, y)|_]) -> y
  Look2 : (x, [_|xs]) -> (x, xs)

  Look1'(keyeq) : (x, [y|_]) -> y where <keyeq> (x, y)
