module collection/list/filter
imports 
  list // XXX
strategies

 /**
  * Returns the terms that satisfy s.
  *
  * @param s  a -> b
  * @type     List(a) -> List(b)
  *
  * @inc test1
  */
  filter(s) = 
    [] + [s | filter(s)] <+ ?[_ | <filter(s)> ]

  reverse-filter(s) = 
    [] + [id | reverse-filter(s)]; ([s | id] <+ ?[_  | <id>])

  filter-gen(pred, cont : (term -> term) * term -> term) =
    rec x([] + (pred; cont(x)) <+ Tl; x)

  skip1(s) = at-tail(s)
  skip2(s) = at-tail(at-tail(s))

  filter-option-args(flag) = 
    filter-gen([flag | id]; Tl, skip1)

  filter-options(flag) = 
    filter-gen([flag | id], skip2)

  list-some-filter(s) =
    rec x([s| id]; [id| filter(s)] <+ [id| x]; Tl)

 /**
  * Partitions a list into a tuple of two lists.
  *
  * The argument s is applied to all elements of the list. The
  * results of the succesful applications are returned in the first
  * list. The terms to which s cannot be applied are returned in the
  * second list.
  *
  * @param s   a -> b
  * @type      List(a) -> (List(b), List(a)) 
  *
  * @inc test2
  */
  partition(s) = rec part(
    \ [] -> ([],[]) \
    + ({[s => x | id]; ?[_|<part>]; !([x | <Fst>], <Snd>)} <+
       {[id =>x | id]; ?[_|<part>]; !(<Fst>, [x | <Snd>])})
  )

  partition'(s) = rec part(
    \ [] -> ([],[]) \
    + \ [z | zs] -> <!([<s> z | xs], ys) <+ !(xs, [z | ys])>
        where <part> zs => (xs, ys) \
  )

