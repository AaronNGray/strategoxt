definition
module Stratego-Strategies
exports

  context-free syntax
    Id  		      "=" Strategy -> StrategyDef {cons("SDefNoArgs")}
    Id "(" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("SDef")}
    Id "(" {Typedid ","}* 
       "|" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("SDefT")}

  context-free syntax
    ID 				  	  -> Typedid {cons("DefaultVarDec")}
    ID ":" Type 			  -> Typedid {cons("VarDec")}

  context-free syntax
    "(" Strategy ")"			  -> StrategyParen {cons("ParenStrat")}

    "fail" 				  -> Strategy {cons("Fail")}
    "id" 				  -> Strategy {cons("Id")}

    %% Abstraction

    Id					  -> SVar {cons("SVar")}
    "let" Def* "in" Strategy "end"	  -> Strategy {cons("Let")}
    SVar "(" {Strategy ","}* ")" 	  -> Strategy {cons("Call")}
    SVar "(" {Strategy ","}* 
         "|" {Term ","}* ")" 	          -> Strategy {cons("CallT")}


    %% Match and build

    "?" Term 				  -> Strategy {cons("Match")}
    "!" Term 				  -> Strategy {cons("Build")}
    "{" Strategy "}" 			  -> Strategy {cons("ScopeDefault")}
    "{" {ID ","}* ":" Strategy "}" 	  -> Strategy {cons("Scope")}

     %%"<" Strategy ">" Term 		  -> Strategy {cons("BA")}
     StrategyAngle Term 		  -> Strategy {cons("BA")}
     "<" Strategy ">"			  -> StrategyAngle {bracket} %% {cons("AngleStrat")}


    %% Combinators

    Strategy ";" Strategy 		  -> Strategy {cons("Seq"),right}
    Strategy "<+" Strategy 		  -> Strategy {cons("LChoice"),right}
    Strategy "<++" Strategy 		  -> Strategy {cons("LGChoice"),right}
    Strategy "<" StrategyMid 
             "+" Strategy 		  -> Strategy {cons("GuardedLChoice"),right}
    Strategy 				  -> StrategyMid

    "rec" Id "(" Strategy ")" 		  -> Strategy {cons("Rec")}

    "not"   "(" Strategy ")" 		  -> Strategy {cons("Not")}
    "where" "(" Strategy ")" 		  -> Strategy {cons("Where")}
    "test"  "(" Strategy ")" 		  -> Strategy {cons("Test")}
    "bagof" "(" Strategy ")" 		  -> Strategy {cons("Bagof")}


    %% Primitives

    "prim" "(" String ")" 		  -> Strategy {cons("PrimNoArgs")}
    "prim" "(" String "," {Term ","}* ")" -> Strategy {cons("Prim")}
    "prim" "(" String "," {Strategy ","}* 
                      "|" {Term ","}*")"  -> Strategy {cons("PrimT")}

    %% Traversal

    Int Strategy 			  -> Strategy {cons("Path")}
    "some" "(" Strategy ")" 		  -> Strategy {cons("Some")}
    "one" "(" Strategy ")" 		  -> Strategy {cons("One")}
    "all" "(" Strategy ")" 		  -> Strategy {cons("All")}
    "thread" "(" Strategy ")" 		  -> Strategy {cons("Thread")}


    %% Congruence operators

    String 				  -> Strategy {cons("StrCong")}
    Int 				  -> Strategy {cons("IntCong")}
    Real 				  -> Strategy {cons("RealCong")}
    Char 			 	  -> Strategy {cons("CharCong")}

    String "(" {Strategy ","}* ")" 	  -> Strategy {cons("CongQ")}

    %%"(" {Strategy ","}* ")" 		  -> Strategy {cons("TupleCong"),avoid}

    Strategy StrategyCurly		  -> Strategy {cons("AnnoCong")}
    "{" Strategy "}"		  	  -> StrategyCurly {cons("StrategyCurly")}

    "("  ")" 		  		  -> Strategy {cons("EmptyTupleCong")}
    "(" Strategy  ")" 		          -> Strategy {bracket}
    "(" Strategy "," {Strategy ","}+ ")"  -> Strategy {cons("TupleCong")}

    Mod 	  			  -> Strategy {cons("ModCongNoArgs")}
    Mod "(" {Strategy ","}* ")"	  	  -> Strategy {cons("ModCong")}
    Id "^" Id				  -> Mod {cons("Mod")}
    "[" {Strategy ","}* "]" 		  -> Strategy {cons("ListCongNoTail")}
    "[" {Strategy ","}* "|" Strategy "]"  -> Strategy {cons("ListCong")}

%%    Strategy "#" "(" StrategyInj ")" 	  -> Strategy {cons("ExplodeCong")}
%%    Strategy "#" "(" Strategy ")" 	  -> Strategy {cons("ExplodeCong")}
    Strategy "#" StrategyParen	  	  -> Strategy {cons("ExplodeCong")}

  %% Syntactic sugar sugar

  context-free syntax

    %% Dynamic rules

    "rules" "(" RuleDef* ")" 		  -> Strategy {cons("DynamicRules")}
    "override" "rules" "(" RuleDef* ")"   -> Strategy {cons("OverrideDynamicRules")}
    "{|" {Id ","}* ":" Strategy "|}" 	  -> Strategy {cons("DynRuleScope")}

    %% Syntactic sugar

    SVar  		  		  -> Strategy {cons("CallNoArgs")}
    "\\" Rule "\\" 			  -> Strategy {cons("LRule")}
    "(" Rule ")" 			  -> Strategy {cons("SRule")}
    Strategy "+" Strategy 		  -> Strategy {cons("Choice"),right} 
    Strategy "+>" Strategy 		  -> Strategy {cons("RChoice"),right}
    Strategy "++" Strategy 		  -> Strategy {cons("GChoice"),right}
    Strategy "++>" Strategy 		  -> Strategy {cons("RGChoice"),right}

    Strategy "=>" Term 		  	  -> Strategy {cons("AM")}


  %% Priorities

  context-free priorities
   {Strategy StrategyCurly		  -> Strategy {cons("AnnoCong")}
    Strategy "#" StrategyParen	  	  -> Strategy {cons("ExplodeCong")}}
  >
    {"!" Term 				  -> Strategy {cons("Build")}
     "?" Term 				  -> Strategy {cons("Match")}
    }
  > StrategyAngle Term 		          -> Strategy {cons("BA")}
  > Strategy "=>" Term 		  	  -> Strategy {cons("AM")}
  > Strategy ";" Strategy 		  -> Strategy {cons("Seq"),right}
  > {right: 
     Strategy "+" Strategy 		  -> Strategy {cons("Choice"),right} 
     Strategy "<+" Strategy 		  -> Strategy {cons("LChoice"),right}
     Strategy "+>" Strategy 		  -> Strategy {cons("RChoice"),right}

     Strategy "++" Strategy 		  -> Strategy {cons("GChoice"),right}
     Strategy "<++" Strategy 		  -> Strategy {cons("LGChoice"),right}
     Strategy "++>" Strategy 		  -> Strategy {cons("RGChoice"),right}

     Strategy "<" StrategyMid 
              "+" Strategy 		  -> Strategy {cons("GuardedLChoice"),right}
    }

module Stratego-Overlays
exports

  context-free syntax
    Id 			 "=" Term 	-> Overlay {cons("OverlayNoArgs")}
    Id "(" {Id ","}* ")" "=" Term 	-> Overlay {cons("Overlay")}

module Stratego-Rules
exports

%%  context-free syntax
%%    Id 			      ":" (Rule | Stratrule) -> RuleDef {cons("RDefNoArgs")}
%%    Id "(" {Typedid ","}* ")" ":" (Rule | Stratrule) -> RuleDef {cons("RDef")}

  context-free syntax
    Id ":" Rule 				-> RuleDef {cons("RDefNoArgs")}
    Id "(" {Typedid ","}* ")" ":" Rule 		-> RuleDef {cons("RDef")}
    Id "(" {Typedid ","}* 
       "|" {Typedid ","}* ")" ":" Rule 		-> RuleDef {cons("RDefT")}

  context-free syntax
    Id "::" StratRule 				-> RuleDef {cons("SRDefNoArgs")}
    Id "(" {Typedid ","}* ")" "::" StratRule 	-> RuleDef {cons("SRDef")}
    Id "(" {Typedid ","}* 
       "|" {Typedid ","}*")" "::" StratRule 	-> RuleDef {cons("SRDefT")}

  context-free syntax
    Term "->" Term 		    		-> Rule {cons("RuleNoCond")}
    Term "->" Term "where" Strategy 		-> Rule {cons("Rule")}

  context-free syntax
    Strategy "-->" Strategy 			-> StratRule {cons("StratRuleNoCond")}
    Strategy "-->" Strategy "where" Strategy 	-> StratRule {cons("StratRule")}

module Stratego-Terms
exports
  context-free syntax
    Id 				-> Var  {cons("Var")}
    LId 			-> LID  {cons("ListVar")}
    LID				-> Var  {cons("Var")}
    Id				-> ID
    LId				-> ID

    Int 			 -> Term {cons("Int")}
    Real 			 -> Term {cons("Real")}
    String 			 -> Term {cons("Str")}
    Char 			 -> Term {cons("Char")}
    "_" 			 -> Term {cons("Wld")}
    Var 			 -> Term 
    Id "(" {Term ","}* ")" 	 -> Term {cons("Op")}
    String "(" {Term ","}* ")" 	 -> Term {cons("OpQ")}
    Term "#" "(" Term ")" 	 -> Term {cons("Explode")}
    Term "{" {Term ","}* "}"	 -> Term {cons("Anno")}

    "<" Strategy ">" Term 	 -> Term {cons("App")}
    StrategyAngle		 -> Term {cons("RootApp")}

    Var "@" Term 		 -> Term {cons("As")}
    "(" {Term ","}* ")" 	 -> Term {cons("Tuple")}
    "[" {Term ","}* "]" 	 -> Term {cons("List")}
    "[" {Term ","}* "|" Term "]" -> Term {cons("ListTail")}
    "_" Term 			 -> Term {cons("BuildDefault")}

    %% Var Context 		 -> Term {cons("Con")}
    %% Var "[" Term "]" "(" Id ")"  -> Term {cons("Con")}

    Var "[" Term "]" 				 -> Term {cons("Con1")}
    Var "[" Term "]" "(" Id ")" 		 -> Term {cons("Con")}
    Var "[" Term "where" Strategy "]"  		 -> Term {cons("Con3")}
    Var "[" Term "where" Strategy "]" "(" Id ")" -> Term {cons("Con4")}

  context-free priorities
    Term "#" "(" Term ")" 	 -> Term {cons("Explode")}
  > Term "{" {Term ","}* "}"	 -> Term {cons("Anno")}
  > Var "@" Term 		 -> Term {cons("As")}

module Stratego-Signatures
exports

  context-free syntax
    "sorts" Sort* 		-> Sdecl {cons("Sorts")}
    "constructors" Opdecl* 	-> Sdecl {cons("Constructors")}

  context-free syntax
    LCID 			 -> Sort {cons("SortVar")}
    UCID 			 -> Sort {cons("SortNoArgs")}
    Id "(" {Sort ","}* ")" 	 -> Sort {cons("Sort")}
    "[" {Sort ","}* "]"		 -> Sort {cons("SortList")}
    "[" {Sort ","}* "|" Sort "]" -> Sort {cons("SortListTl")}
    "(" {Sort ","}* ")"		 -> Sort {cons("SortTuple")}

  context-free syntax
    "*" 			-> Kind {cons("Star")}
    "**" 			-> Kind {cons("StarStar")}

  context-free syntax
    Id     ":" Type 		-> Opdecl {cons("OpDecl")}
    String ":" Type 		-> Opdecl {cons("OpDeclQ")}
           ":" Type 		-> Opdecl {cons("OpDeclInj")}

  context-free syntax
    Sort			-> Type {cons("ConstType")}
    {Type "*"}+ "->" Type 	-> Type {cons("FunType")}
    "(" Type ")" 		-> Type {bracket}

module Stratego-Script
exports

  sorts Script
  context-free syntax
    "stratego" "script" Command* -> Script {cons("Script")}
    Decl 			-> Command {cons("Command")}
    ":dump" String 		-> Command {cons("Dump")}
    ":load" String 		-> Command {cons("Load")}
    ">" Strategy 		-> Command {cons("Eval")}

module Stratego-Modules
imports Stratego-Identifiers
exports 
  sorts Module
  context-free syntax
    "module" ModName Decl* 	 -> Module {cons("Module")}
    "specification" Decl*	 -> Module {cons("Specification")}

  context-free syntax
    "imports" ModName* 		-> Decl {cons("Imports")}
    "rules" Def* 		-> Decl {cons("Rules")}
    "strategies" Def* 		-> Decl {cons("Strategies")}
    "signature" Sdecl*  	-> Decl {cons("Signature")}
    "overlays" Overlay* 	-> Decl {cons("Overlays")}

    StrategyDef 		-> Def 
    RuleDef 			-> Def 


module Stratego-Constants
exports
  lexical syntax
    [\-]? [0-9]+ 		-> Int
    [\-]? [0-9]+ [\.] [0-9]+ 	-> Real
    "\"" StrChar* "\"" 		-> String
    ~[\"\\] 			-> StrChar
    [\\] [\"tn\\] 		-> StrChar
    "\'" CharChar "\'"		-> Char
    ~[\']			-> CharChar
    [\\] [\'ntr\ ]		-> CharChar
    Char		 	-> Id {reject}

module Stratego-Identifiers
exports
  lexical syntax
    [a-zA-Z\'\.\-\_] [a-zA-Z0-9\'\.\-\_]* -> ModName
  lexical restrictions
    ModName -/- [a-zA-Z0-9\'\.\-\_]
  lexical syntax
    "imports" 		-> ModName {reject}
    "overlays" 		-> ModName {reject}
    "rules" 		-> ModName {reject}
    "signature" 	-> ModName {reject}
    "strategies" 	-> ModName {reject}
  lexical syntax
    [a-zA-Z\'\-\_] [a-zA-Z0-9\'\-\_]*     -> Id
    [a-zA-Z\'\-\_] [a-zA-Z0-9\'\-\_]* "*" -> LId

    [a-z] [a-zA-Z0-9\'\-\_]*  -> LCID
    [A-Z] [a-zA-Z0-9\'\-\_]*  -> UCID
  lexical restrictions
    Id   -/- [a-zA-Z0-9\'\.\-\_\*]
    LId  -/- [a-zA-Z0-9\'\.\-\_]
    LCID -/- [a-zA-Z0-9\'\.\-\_]
    UCID -/- [a-zA-Z0-9\'\.\-\_]
  lexical syntax
    "all" 		-> Id {reject}
    "constructors" 	-> Id {reject}
    "fail" 		-> Id {reject}
    "id" 		-> Id {reject}
    "in" 		-> Id {reject}
    "let" 		-> Id {reject}
    "module" 		-> Id {reject}
    "not" 		-> Id {reject}
    "one" 		-> Id {reject}
    "overlays" 		-> Id {reject}
    "override" 		-> Id {reject}
    "prim" 		-> Id {reject}
    "rules" 		-> Id {reject}
    "script" 		-> Id {reject}
    "signature" 	-> Id {reject}
    "some" 		-> Id {reject}
    "sorts" 		-> Id {reject}
    "strategies" 	-> Id {reject}
    "stratego" 		-> Id {reject}
    "test" 		-> Id {reject}
    "thread" 		-> Id {reject}
    "where" 		-> Id {reject}
  lexical restrictions
    "all" "constructors" "fail" "id" "in" "let" "module" "not" "one"
    "overlays" "override" "prim" "rules" "script" "signature" "some"
    "sorts" "strategies" "stratego" "test" "thread" "where" 
    -/- [a-zA-Z0-9\'\.\-\_]

module Stratego-Layout
exports

  lexical syntax
    [\t\ \n] 		-> Ws
    "//" ~[\n]* [\n] 	-> ShortCom
    "/*" CommChar* "*/" -> LongCom
    "(*" CommChar* "*)" -> LongCom
    "*" 		-> Asterisk
    ~[\*] 		-> CommChar
    Asterisk 		-> CommChar
  lexical restrictions
    Asterisk -/- [\/\)]

  lexical syntax
    "\\end{code}" VLCchar* "\\begin{code}" -> VeryLongCom
    "\\begin{code}" 			   -> VeryLongCom
    "\\end{code}" VLCchar* Eof 		   -> VeryLongCom
     					   -> Eof
    "\\literate" VLCchar* "\\begin{code}"  -> VeryLongCom
    ~[\\] 				   -> VLCchar
    Backslash 				   -> VLCchar
    [\\] 				   -> Backslash
  lexical restrictions
    Backslash -/- [b].[e].[g].[i].[n].[\{].[c].[o].[d].[e].[\}]
    Eof -/- ~[]

  lexical syntax
    ShortCom 	-> LAYOUT
    LongCom 	-> LAYOUT
    VeryLongCom -> LAYOUT
    Ws 		-> LAYOUT
  context-free restrictions
    LAYOUT? -/- [\ \t\n]

module Stratego
imports Stratego-Layout Stratego-Identifiers Stratego-Constants 
	Stratego-Modules Stratego-Script
	Stratego-Signatures Stratego-Terms Stratego-Rules
	Stratego-Overlays Stratego-Strategies



module StrategoRenamed
imports 
  Stratego [
	Id 		=> StrategoId 
	ID 		=> StrategoID
	ModName 	=> StrategoModName
	Ws 		=> StrategoWs
	ShortCom 	=> StrategoShortCom
	LongCom 	=> StrategoLongCom
	Asterisk 	=> StrategoAsterisk
	CommChar 	=> StrategoCommChar
	VeryLongCom 	=> StrategoVeryLongCom
	Eof 		=> StrategoEof
	VLCchar 	=> StrategoVLCchar 
	Backslash 	=> StrategoBackslash
	Int 		=> StrategoInt
	Real 		=> StrategoReal
	String 		=> StrategoString
	StrChar 	=> StrategoStrChar	
        Char 		=> StrategoChar
        CharChar 	=> StrategoCharChar
	Module 		=> StrategoModule
	Script 		=> StrategoScript
	Command 	=> StrategoCommand
	Decl 		=> StrategoDecl
	Def  		=> StrategoDef
	Sdecl 		=> StrategoSdecl 
	Sort 		=> StrategoSort
	Kind 		=> StrategoKind
	Opdecl 		=> StrategoOpdecl
	Type 		=> StrategoType 
	Var 		=> StrategoVar
	Term 		=> StrategoTerm 
	Context 	=> StrategoContext
	RuleDef 	=> StrategoRuleDef
	Rule 		=> StrategoRule 
	StratRule 	=> StrategoStratRule 
	Strategy 	=> StrategoStrategy 
	StrategyAngle 	=> StrategoStrategyAngle 
	StrategyParen 	=> StrategoStrategyParen 
	SVar 		=> StrategoSVar 
	StrategyMid 	=> StrategoStrategyMid
	Mod 		=> StrategoMod
	StrategyDef 	=> StrategoStrategyDef 
	Typedid 	=> StrategoTypedid  
	Overlay 	=> StrategoOverlay
  ]


module Box-Disambiguation
exports
   context-free restrictions
      LAYOUT? -/- [\ \t\n\%]

module Box-Layout

exports
   lexical syntax
    "%%" ~[\n]* "\n" -> LAYOUT

    [\ \t\n] -> LAYOUT

  context-free restrictions
    LAYOUT? -/- [\ \t\n]

module Box-Lists
   exports
      imports Box-Base

   exports
      sorts BOX-LIST

      context-free syntax
         BOX* -> BOX-LIST 


module Box-Operators

   exports
      sorts SPACE-SYMBOL S-OPTION S-OPTIONS

      context-free syntax
         SPACE-SYMBOL "=" NatCon -> S-OPTION     {cons("SOpt")}
         SPACE-SYMBOL "=" BOX    -> S-OPTION     {cons("SOptB")}
         S-OPTION*               -> S-OPTIONS

%%
%% \noindent
%% Below all supported space options are defined. The \textsf{hs} option is
%% used to define the horizontal layout between boxes. The \textsf{vs}
%% option defines the amount of vertical layout between boxes (the number of
%% newlines between boxes in a vertical context). The \textsf{is} option
%% defines indentation between boxes within a vertical context. Not every
%% combination of space option and BOX operator makes sense. E.g.\ the
%% modification of the vertical offset in combination of the \textsf{H}
%% operator does not make any sense.
%%
         "vs"                    -> SPACE-SYMBOL {cons("VS")}
         "hs"                    -> SPACE-SYMBOL {cons("HS")}
         "is"                    -> SPACE-SYMBOL {cons("IS")}

%%\subsection{Positional BOX Operators}
%% Smaller boxes can be composed to form new boxes using positional BOX
%% operators that specify the relative ordering of sub boxes.
%%
%% The \textsf{H} operator is used to format a list of boxes horizontally.
%% The operator only supports the \textsf{hs} space option to control the
%% amount of horizontal layout between its sub-boxes. The \textsf{V}
%% operator is used to format a list of boxes vertically. The operator
%% supports the \textsf{vs} and \textsf{is} space options to control the
%% amount of vertical layout and the amount of indentation between its
%% sub-boxes, respectively. The \textsf{HV} operator is used to format a
%% list of boxes horizontally \emph{or} vertically, depending on the
%% available width. The operator calculates an optimal combination of
%% \textsf{H} and \textsf{V} operators in such a way that the number of
%% lines occupied is minimized. Because the \textsf{HV} is a combination of
%% the \textsf{H} and \textsf{V} operators, it supports all space
%% options of these operators (\textsf{hs}, \textsf{vs}, and \textsf{is}).
%%
   exports
      context-free syntax
         "H" S-OPTIONS "[" BOX-LIST "]"  -> BOX {cons("H")}
         "V" S-OPTIONS "[" BOX-LIST "]"  -> BOX {cons("V")}
         "HV" S-OPTIONS "[" BOX-LIST "]" -> BOX {cons("HV")}

%%
%% \noindent
%% The \textsf{ALT} operator is used to choose between two alternative BOX
%% expressions depending on the available width. When its first argument
%% fits on the current line, that BOX expression is used. Otherwise, the
%% \textsf{ALT} operator chooses the second alternative. No space options
%% are supported by this operator.
   exports
      context-free syntax
         "ALT" "[" BOX BOX "]" -> BOX {cons("ALT")}

%%
%% \noindent
%% Alignments are implemented by means of two BOX operators: \textsf{A} and
%% \textsf{R}. The arguments of the \textsf{A} operator are \textsf{R}
%% boxes. Each \textsf{R} BOX represents a row, each element of an
%% \textsf{R} BOX represents an entry in the alignment. The number of
%% arguments of an
%% \textsf{R} BOX may not exceed the number of columns of the alignment. For
%% each column the user can specify whether the alignment should be left,
%% right, or centered. The number of alignment indications should be equal
%% to the number of columns. Each alignment indication can be extended with
%% space options, specifying the horizontal layout between columns. The
%% \textsf{A} operator supports the \textsf{vs} space option which defines
%% the vertical layout between individual rows.
%%
%% \textsf{R} boxes occurring outside an alignment are formatted as
%% \text{HV} operator. This behavior enables the use of an alternative
%% formatting (not based on the \textsf{A} operator) of alignments within an
%% \textsf{ALT} operator. The \textsf{R} operator therefore supports all
%% space options of the \textsf{HV} operator.
   exports
      sorts A-OPTION A-OPTIONS

      context-free syntax
         "A" A-OPTIONS S-OPTIONS "[" BOX-LIST "]" -> BOX       {cons("A")}
         "R" S-OPTIONS "[" BOX-LIST "]"           -> BOX       {cons("R")}
%%
%% \noindent
%% Justification of columns and horizontal layout between columns can be
%% specified using A-OPTIONS. An A-OPTION is composed of an alignment
%% indicator (\textsf{l} for left, \textsf{r} for right, and \textsf{c} for
%% centered alignment), and space options (only the \textsf{hs} option is
%% supported).
%%
         "l" S-OPTIONS                            -> A-OPTION  {cons("AL")}
         "c" S-OPTIONS                            -> A-OPTION  {cons("AC")}
         "r" S-OPTIONS                            -> A-OPTION  {cons("AR")}
         "(" {A-OPTION ","}* ")"                  -> A-OPTIONS {cons("AOPTIONS")}

%%\subsection{Non-Positional BOX Operators}
%% There are four different types of non-positional BOX operators: font
%% operators to change the textual appearance of BOX expressions, cross
%% reference operators to create links between boxes, the comment operator
%% to indicate that a BOX expression contains comments, and the line
%% operator to draw lines of characters of arbitrary length.
%%
%%
%% BOX font operators are used to change the textual appearance of the
%% argument BOX expression. Fonts can be characterized by the parameters
%% font name (\textsf{fn}), font family (\textsf{fm}), font series
%% (\textsf{se}), font shape (\textsf{sh}), font size (\textsf{sz}), and
%% font color (\textsf{cl}). The most general font operator is \textsf{F}.
%% By means of font parameters the desired font can be controlled.
   exports
      sorts FID FONT-PARAM F-OPTION F-OPTIONS FONT-OPERATOR

      lexical syntax
         [A-Za-z]+ -> FID

      context-free syntax
         FONT-PARAM "=" NatCon     -> F-OPTION      {cons("FNAT")}
         FONT-PARAM "=" FID        -> F-OPTION      {cons("FFID")}
         F-OPTION*                 -> F-OPTIONS
         "F" F-OPTIONS             -> FONT-OPERATOR {cons("F")}
         FONT-OPERATOR "[" BOX "]" -> BOX           {cons("FBOX")}
         "fn"                      -> FONT-PARAM    {cons("FN")}
         "fm"                      -> FONT-PARAM    {cons("FM")}
         "se"                      -> FONT-PARAM    {cons("SE")}
         "sh"                      -> FONT-PARAM    {cons("SH")}
         "sz"                      -> FONT-PARAM    {cons("SZ")}
         "cl"                      -> FONT-PARAM    {cons("CL")}

%%
%% \noindent
%% By using the \textsf{F} font operator, fonts are defined statically.
%% BOX also support fonts to be defined dynamically using special
%% font operators.  These operators are used to format specific language
%% constructs like keywords and variables. The mapping from these
%% operators to fonts is deferred to the back-ends.
%%
   exports
      context-free syntax
         "KW"   -> FONT-OPERATOR {cons("KW")}
         "VAR"  -> FONT-OPERATOR {cons("VAR")}
         "NUM"  -> FONT-OPERATOR {cons("NUM")}
         "MATH" -> FONT-OPERATOR {cons("MATH")}

%% \noindent
%% The \textsf{LBL} operator is used to label BOX terms. A labeled BOX term
%% can be refered to using the \textsf{REF} operator.  The first argument of
%% the \textsf{LBL} and \textsf{REF} operators denote the name of the label.
%% The second argument of the \textsf{LBL} operator denotes the BOX term to
%% label. The second argument of the \textsf{REF} operator denotes the BOX
%% containing the reference. Both operators do not support any space
%% options.
%%
   exports
      context-free syntax
         "LBL" "[" BoxLiteral BOX "]" -> BOX {cons("LBL")}
         "REF" "[" BoxLiteral BOX "]" -> BOX {cons("REF")}

%%
%% \noindent
%% Comments can be formatted using the \textsf{C} operator. The operator
%% supports the \textsf{is} space option to denote the indentation level of
%% comments.
%%
   exports
      context-free syntax
         "C" S-OPTIONS "[" BOX-LIST "]" -> BOX {cons("C")}

%%
%% \noindent
%% The \textsf{L} operator  is used to construct horizontal bars of fixed
%% \emph{or} variable width. A bar of fixed width can be constructed by
%% specifying its width as a fixed number. A bar of variable width can be
%% constructed by specifying a BOX expressions as width parameter. The
%% second argument of the \textsf{L} operator specifies the symbol of which
%% the bar should be constructed. The \textsf{L} operator does not support
%% any space options.
%%
   exports
      context-free syntax
         "L" "[" BOX BOX "]"    -> BOX {cons("L")}
         "L" "[" NatCon BOX "]" -> BOX {cons("LNAT")}

module Box-Literal

exports
  sorts BoxLiteral

  lexical syntax
    "\\" ~[] -> AlphaNumericalEscChar {avoid}
    "\\" [01] [0-9] [0-9] -> DecimalEscChar
    "\\" "2" [0-4] [0-9]  -> DecimalEscChar
    "\\" "2" "5" [0-5]    -> DecimalEscChar

    AlphaNumericalEscChar -> EscChar
    DecimalEscChar        -> EscChar

    ~[\0-\31\"\\] \/ [\t\n] -> L-Char
    EscChar                 -> L-Char

    "\"" L-Char* "\""             -> QLiteral
    [A-Za-z\-\_] [A-Za-z0-9\-\_]* -> UQLiteral

    QLiteral  -> Literal
    UQLiteral -> Literal

   aliases
      QLiteral -> BoxLiteral

exports
  sorts NatCon IntCon

  lexical syntax
    [0-9]+ -> NatCon

  context-free syntax
    NatCon -> IntCon {cons("NatCon")}
    "+" NatCon -> IntCon {cons("plus")}
    "-" NatCon -> IntCon {cons("minus")}

module Box-Base
   exports
      sorts BOX

module Box-Atoms
   exports
      imports Box-Base Box-Literal

   exports
      context-free syntax
         BoxLiteral            -> BOX {cons("S")}

module Box
   exports
      imports Box-Atoms Box-Operators Box-Lists Box-Layout Box-Disambiguation

module Stratego-Box
imports Box StrategoRenamed

exports
  context-free syntax

         "|["  BOX "]|" -> StrategoTerm  {cons("ToTerm"), prefer}
    box  "|["  BOX "]|" -> StrategoTerm  {cons("ToTerm")}

         "|["  BOX* "]|" -> StrategoTerm {cons("ToTerm")}
    box* "|["  BOX* "]|" -> StrategoTerm {cons("ToTerm")}

    "~"  StrategoTerm    -> BOX   {cons("FromTerm"), prefer}
    "~*" StrategoTerm    -> BOX*  {cons("FromTerm"), prefer}

    "~lit:" StrategoTerm -> BoxLiteral {cons("FromTerm"), prefer}