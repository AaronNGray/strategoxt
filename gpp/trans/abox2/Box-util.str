module Box-util

strategies

  // :: List(S-Option) -> Int
  hs-length = SOpt-value(?HS()) <+ !1
  vs-length = SOpt-value(?VS()) <+ !0
  is-length = SOpt-value(?IS()) <+ !0

  SOpt-value(s) = fetch(SOpt(s, ?value)); <string-to-int> value

  SOpts-of-alignment : AL(sopts) -> sopts
  SOpts-of-alignment : AR(sopts) -> sopts
  SOpts-of-alignment : AC(sopts) -> sopts

  // Make sure that every element in the list occurs within a R box
  // For instance:
  //    [R([],[1,2,3]), a,b,c, R([],[4,5,6])]
  // is tranformed to
  //    [R([],[1,2,3]), R([],[a,b,c]), R([],[4,5,6])]
  construct-rows =
    split(id, ![]);
    rec x ({a,b,xs,ys:
      ?([],xs);![R([],<reverse>xs)]
    <+
      ?([R(a,b)|xs], ys);
      ![R([],<reverse>ys), R(a,b)|<x>(xs, [] )]
    <+
     ?( [a|xs],ys);
     <x>( xs, [a|ys])
    }); 
    filter( not( R(id,[]) ) )

/*
strategies
  // Make sure that all arguments of an A box are R boxes. Put boxes
  // into new R boxes when needed
  map-to-r-box =
     ?xs;
     !( xs, [], [] );
     rec s ({ a1, a2, x, xs, ys, zs:
        ?( [], [], zs ); !zs
     <+
        ?( [], ys, zs ) ; <conc>(zs, [R([], ys)])
     <+
        ?( [R(a1, a2)| xs], [], zs ) ;
         <s>(xs, [], <conc>(zs, [R(a1,a2)]) )
     <+
        ?( [R(a1, a2)| xs], ys, zs ) ;
        <s>( xs, [], <conc>(zs, [R([], ys), R(a1, a2)]))
     <+
        ?( [x|xs], ys, zs );
        <s>( xs, <conc>(ys, [x]), zs )
     })
*/

  // Calculate relative string length. That is, by taking new lines and
  // current horizontal position into account
  //
  // <string-length'(x)>"my_string" => 9
  // <string-length'(x)>"my\nstring" => 6 - x
rel-string-length:
    (str, xpos) -> length
      where <string-tokenize> (['\n'], str)
          ; (
               ?[]; !0
            <+
               ?[<string-length>]
            <+ <subt> (<last; string-length>, xpos)
            ) => length

/*
  abox2text :
    (V(sopt, xs ), xpos) -> result
      where <vs-text> sopt => vs
          ; <Ispace> sopt => is
          ; <string-length> is => isl
          ; <concat-strings> [vs, is, <copy-char> (xpos, ' ')] => vsep
          ; < filter(not([] + id#([id,[]+[[]]])))
            ; ( !(<?[]>, xpos)
              +   [ <try-abox2text> (<id>, xpos) | map( <try-abox2text> (<id>, <add> (xpos, isl)))]
                ; at-last([?(_, xpos2)])
                ; <separate-by> (vsep, <map(Fst)>)
                ; !(<id>, xpos2)
              )
            > xs => result

  // Make sure that all arguments of an A box are R boxes. Put boxes
  // into new R boxes when needed
  map-to-r-box =
     ?xs;
     !( xs, [], [] );
     rec s ({ a1, a2, x, xs, ys, zs:
        ?( [], [], zs ); !zs
     <+ ?( [], ys, zs ); <conc>(zs, [R([], ys)])
     <+ ?( [R(a1, a2) | xs], [], zs ) ; <s> (xs, [], <conc> (zs, [R(a1, a2)] ))
     <+ ?( [R(a1, a2) | xs], ys, zs ) ; <s> (xs, [], <conc> (zs, [R([], ys), R(a1, a2)] ))
     <+ ?( [x         | xs], ys, zs ) ; <s> (xs, <conc> (ys, [x]), zs)
     })
*/
