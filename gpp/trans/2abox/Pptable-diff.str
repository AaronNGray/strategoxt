/**
 * @author Merijn de Jonge (m.de.jonge@tue.nl)
 */
module Pptable-diff
imports
  liblib
  pp-table
  pp-tables-io2
  misc

signature
   constructors
      Old-Table : String -> Option
      New-Table : String -> Option
      Verbose: 	  Option    
      Patch:      Option
      Prune:      Option

      "pp-tables-0" : Term -> PpTable

Patched : String -> String
strategies

   io-Pptable-diff = 
     option-wrap(
             Option( "-V", !Verbose(),               !"-V               verbose execution." )
        +    Option( "--patch", !Patch(),            !"--patch          Bring old table up-o-date" )
        +    Option( "--prune", !Prune(),            !"--prune          Remove obsolete pp entries" )
        + ArgOption( "--old", \x -> Old-Table(x)\ ,  !"--old <table>    Old table" )
        + ArgOption( "--new", \x -> New-Table(x)\ ,  !"--new <table>    New table" )
        + output-options,
        pptable-diff)

   pptable-diff = 
      option-value(Old-Table(?old),
                  log(|Error(),"Please specify old table with --old switch") 
		  ; <exit>1 
                  );
      ![old];read-pp-tables; !("pp-table", "old-table");table-rename;
      option-value(New-Table(?new), !stdin => new);
      ![new];read-pp-tables; !("pp-table", "new-table");table-rename;
      
      // Find keys of pp tables
      <table-keys>"old-table" => keys-old;
      <table-keys>"new-table" => keys-new;
      <isect>(keys-old, keys-new) => keys-common;
      
      // Find obsolete pp entries by calculating the set difference:
      // old-table \ new-table
      <diff>(keys-old, keys-new) => obsolete-ones;
      map(<table-get>("old-table", <id> );
          Fst; path-to-string
         );
      try(not([]);<printnl>(stderr, ["Obsolete entries: ", <id>]));

      // Find new pp entries by calculating the set difference:
      // new-table \ old-table
      <diff>(keys-new, keys-old) => new-ones;
      map(<table-get>("new-table", <id> );
          Fst; path-to-string
         );
      try(not([]);<printnl>(stderr, ["New entries: ", <id>]));

      // Find entries for changed productions, by testing the terminal and
      // non-terminal symbols (as place holders) Arg2(elem,sub-elem)
      // elements are checked as Arg(elem) (i.e., their sub-elements are
      // ignored. If a pp entry in both tables has different terminal
      // symbols or place holder symbols, the entries are considered
      // different. This way, we abstract over different BOX expressions.
      !keys-common;
      map({path,elems:\ key -> (key, path, elems)
      where
         <table-get>("old-table", <id>);
         (id, collect( S(id) + Arg(id) + \ Arg2(x,y) -> Arg(x) \  ));
         ?(path, elems)
      \ }) => old-elements;
      !keys-common;
      map({path,elems: \ key -> (key, path, elems)
      where
         <table-get>("new-table", <id>);
         (id, collect( S(id) + Arg(id) + \ Arg2(x,y) -> Arg(x) \  ));
         ?(path, elems)
      \ }) => new-elements;
      <diff>(old-elements, new-elements);
      where(map( \(key,_,_) -> key \ ) => changed-ones);
      map(\ (_,path,_) -> <path-to-string>path \);
      try(not([]);<printnl>(stderr, ["Changed productions: ", <id>]));

      
      
      // Patch and prune old pp table if required
      try(has-option(!Patch); <patch>(new-ones, changed-ones));
      try(has-option(!Prune); <prune>obsolete-ones);
    
      try((has-option(!Patch) + has-option(!Prune));
          <table-getlist>"old-table";
          map(\  (_, (path,box)) -> PP-Entry(path, box) \ );
          desugar;
          !"pp-tables-0"(PP-Table(<id>));
          output(id)
       );
       
       // If the set [changed-ones, new-ones] is not empty,
       // and if the --patch switch has not been specified,
       // we terminate with an exit code of 1 to indicate that the
       // pretty-print tables are inconsistent.
      try(not(has-option(!Patch));
          // If tables are inconsistent and not patched or pruned, 
          // exit with error code 1
          try(
             <concat>[changed-ones, new-ones];
             not([]);
             <exit>1
          )
      )

// Construct new pretty-print table from "old-table" by inserting
// new pp entries from "new-table"
patch =
   ?(new-ones, changed-ones);
   !new-ones;
   // Insert new entries in "old-table"
   map(\ x -> 
      <table-put>("old-table", x,<table-get>("new-table", x) )
       \ );

   // Update changed entries in "old-table" and save old ones
   // Entries are saved by storing (key,(path,box)) as
   // (Patched(key),(Patched(path,box))
   // This way uniq tables are created to store old entries. Later,
   // patches terms are prefixed by the string '--saved--entry'.
   !changed-ones;
   map(\ x -> <table-put>("old-table", x,<table-get>("new-table", x) )
         where
          <table-get>("old-table", x);
          (!Patched(<id>), id);
         <table-put>("old-table", Patched(x),<id>)
       \ )
   

// Construct new pretty-print table from "old-table" by removing obsolete pp
// entries  from "old-table"
prune =
   // Remove obsolete entries from "old-table"
   map( <table-remove>("old-table", <id>) )
   
desugar = 
    topdown( 
       try(
            Arg(int-to-string)
          + Arg2(int-to-string, int-to-string)
          + SOpt(id, id)
          + S(escape; double-quote)
          + selector(int-to-string, id)
          + \ Patched(Path(x,y)) -> Path(<concat-strings>["--saved-entry--", x],y) \
          + \ Patched(Path1(x)) -> Path1(<concat-strings>["--saved-entry--", x]) \
        ))
