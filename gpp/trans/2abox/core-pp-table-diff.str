/**
 * @author Merijn de Jonge (m.de.jonge@tue.nl)
 */
module core-pp-table-diff
imports
  liblib
  pp-table-diff-options
  pp-table
  pp-tables-io2
  misc

strategies

  io-core-pp-table-diff =
    option-wrap(pp-table-diff-options, pp-table-diff)

signature
  constructors
    Patched       : String -> String
    "pp-tables-0" : PpTable -> PpTable

strategies

  /**
   * @param FILE
   * @type  String -> FILE
   */
  pp-table-diff =
    <get-config> "-i" => new
    ; where(get-old-pp-table => old)
    ; <read-pp-tables> [old]
    ; <table-rename> ("pp-table", "old-table")
    ; <read-pp-tables> [new]
    ; <table-rename> ("pp-table", "new-table")
      
    // Find keys of pp tables
    ; <table-keys> "old-table" => keys-old
    ; <table-keys> "new-table" => keys-new
    ; <isect> (keys-old, keys-new) => keys-common

    /**
     * Find obsolete pp entries by calculating the set difference:
     * old-table \ new-table
     */
    ; <diff>(keys-old, keys-new) => obsolete-ones
    ; map(
         <table-get> ("old-table", <id>)
       ; Fst
       ; path-to-string
       )
     ; try(not([]);<printnl>(stderr, ["Obsolete entries: ", <id>]))

     /**
      * Find new pp entries by calculating the set difference:
      * new-table \ old-table
      */
     ; <diff> (keys-new, keys-old) => new-ones
     ; map(
         <table-get>("new-table", <id> )
       ; Fst
       ; path-to-string
       )
     ; try(not([]);<printnl>(stderr, ["New entries: ", <id>]))
     ;

     /**
      * Find entries for changed productions, by testing the terminal and
      * non-terminal symbols (as place holders) Arg2(elem,sub-elem)
      * elements are checked as Arg(elem) (i.e., their sub-elements are
      * ignored. If a pp entry in both tables has different terminal
      * symbols or place holder symbols, the entries are considered
      * different. This way, we abstract over different BOX expressions.
      */
     !keys-common;
     map({path,elems:\ key -> (key, path, elems)
     where
        <table-get>("old-table", <id>);
        (id, collect( S(id) + Arg(id) + \ Arg2(x,y) -> Arg(x) \  ));
        ?(path, elems)
     \ }) => old-elements;
     !keys-common;
     map({path,elems: \ key -> (key, path, elems)
     where
        <table-get>("new-table", <id>);
        (id, collect( S(id) + Arg(id) + \ Arg2(x,y) -> Arg(x) \  ));
        ?(path, elems)
     \ }) => new-elements;
     <diff>(old-elements, new-elements);
     where(map( \(key,_,_) -> key \ ) => changed-ones);
     map(\ (_,path,_) -> <path-to-string>path \ );
     try(not([]);<printnl>(stderr, ["Changed productions: ", <id>]))
      
     // Patch and prune old pp table if required
     ; if is-patch-enabled then
         <patch> (new-ones, changed-ones)
       end

     ; if is-prune-enabled then
         <prune> obsolete-ones
       end

     ; if is-patch-enabled + is-prune-enabled then
         <table-getlist> "old-table"
         ; map(\  (_, (path,box)) -> PP-Entry(path, box) \ )
         ; desugar
         ; !"pp-tables-0"(PP-Table(<id>))
         ; output(id)
       end
       
     // If the set [changed-ones, new-ones] is not empty,
     // and if the --patch switch has not been specified,
     // we terminate with an exit code of 1 to indicate that the
     // pretty-print tables are inconsistent.
     ; if not(is-patch-enabled) then
         // If tables are inconsistent and not patched or pruned, 
         // exit with error code 1
         try(
            <concat>[changed-ones, new-ones];
            not([]);
            <exit>1
         )
       end

  /**
   * Construct new pretty-print table from "old-table" by inserting
   * new pp entries from "new-table"
   */
  patch =
   ?(new-ones, changed-ones);
   !new-ones;
   // Insert new entries in "old-table"
   map(\ x -> 
      <table-put>("old-table", x,<table-get>("new-table", x) )
       \ );

   // Update changed entries in "old-table" and save old ones
   // Entries are saved by storing (key,(path,box)) as
   // (Patched(key),(Patched(path,box))
   // This way uniq tables are created to store old entries. Later,
   // patches terms are prefixed by the string '--saved--entry'.
   !changed-ones;
   map(\ x -> <table-put>("old-table", x,<table-get>("new-table", x) )
         where
          <table-get>("old-table", x);
          (!Patched(<id>), id);
         <table-put>("old-table", Patched(x),<id>)
       \ )
   

  /**
   * Construct new pretty-print table from "old-table" by removing obsolete pp
   * entries  from "old-table"
   */
  prune =
    map(<table-remove> ("old-table", <id>))
   
  desugar = 
    topdown( 
      try(
        Arg(int-to-string)
      + Arg2(int-to-string, int-to-string)
      + SOpt(id, id)
      + S(escape; double-quote)
      + selector(int-to-string, id)
      + \ Patched(Path(x,y)) -> Path(<concat-strings>["--saved-entry--", x],y) \
      + \ Patched(Path1(x)) -> Path1(<concat-strings>["--saved-entry--", x]) \
      )
    )
