\literate[sdf-2-pp-table]
% GT -- Grammar Tools
% Copyright (C) 2000 Merijn de Jonge <mdejonge@cwi.nl>
%                    Eelco Visser <visser@acm.org>
%                    Joost Visser <jvisser@cwi.nl>
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2, or (at your option)
% any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
% 02111-1307, USA.

% $Id: sdf-2-pp-table.str,v 1.1 2003/01/03 07:23:39 stratego Exp $

% Author: Merijn de Jonge (mdjonge@cwi.nl)

\begin{code}
module sdf-2-pp-table

imports sdf-2-pp-lib pp-tables-io asfix lib misc
imports Label-Sdf-Syntax Basic-Sdf-Syntax Bracket-Symbol
imports termid

signature
  constructors
    Verbose : Option

strategies

  io-sdf-2-pp-table =
    io-idwrap(
      InOutId("\"sdf-2.1\"", !"\"pp-tables-0\"")
    , (id, ppgenerate)
    , Option( "-v", !Verbose(), !"-v     Verbose execution")
    )

\end{code} 

   A pretty-print table is generated by collecting all context-free
   prodcutions from an sdf module or definition and generating BOX templates
   for each production and, recursively for each nested symbol of the
   production.

\begin{code}

  ppgenerate = 
      // Obtain all context-free productions
      collect'( \ context-free-syntax(productions) -> productions \ )
    ; concat

      // De-quote all strings
    ; topdown(
        try(
          cons(un-double-quote)
        + lit( un-double-quote)
        + sort(un-double-quote)
        )
      )
   
      // Create BOX templates for each production
    ; map(generate-pp-entries)
    ; filter( not(?[]) )
    ; concat => pp-entries

    // Construct a valid AST for the pretty-print table
    ; !PP-Table(pp-entries)

    ; topdown(
        try(
          Arg(int-to-string)
        + selector(int-to-string, id)
        + S(double-quote)
        )
      )

\end{code}
