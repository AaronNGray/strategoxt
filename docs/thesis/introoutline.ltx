This thesis is structured as follows.  In chapter \ref{ch:stratego} we
look at Stratego, a language that is specifically intended for program
transformation applications, and discuss its advantages and
disadvantages.  In chapter \ref{ch:haskell} we turn to the question of
whether those disadvantages can be overcome while maintaining
Stratego's advantages in the pure functional language Haskell (chapter
\ref{ch:haskell}).  Since this is not the case, we present in chapter
\ref{ch:rhostratego} a new functional language called RhoStratego, and
give its syntax and semantics.  We also compare RhoStratego's pattern
matching facilities to those found in other languages.  In chapter
\ref{ch:compilation} we discuss compilation issues for RhoStratego and
describe the RhoStratego compiler.  In chapter \ref{ch:typesystem} we
develop a type system for RhoStratego.  A somewhat larger example of a
RhoStratego program is given in chapter \ref{ch:app}.  The annotated
source code of the RhoStratego interpreter, type checker, and standard
library appears in the appendices.

