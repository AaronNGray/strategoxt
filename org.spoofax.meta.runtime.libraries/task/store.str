module task/store

imports
	
	task/core
	index/core
	index/query

signature
  
  constructors
  	
		Task           : Int * Instruction -> Entry
		TaskDependency : Int * Int         -> Entry
		TaskDependent  : Int * Int         -> Entry
		
		TaskPartition : Partition

rules // Storing
  
	store-task:
		Task(nr, d*, i, p) -> <id>
		where
			<index-add(|<task-partition> p)> Task(nr, i);
			<store-task-deps(|p, nr)> d*
			
	store-task-deps(|partition, nr) =
		where(map(create-task-dependency(|nr)); index-add-all(|<task-partition> partition));
		map(create-task-dependent(|nr)); index-add-all(|<task-partition> partition)
	
	create-task-dependency(|nr) =
		!TaskDependency(nr, <id>)
		
	create-task-dependent(|nr) =
		!TaskDependent(<id>, nr)

rules // Retrieving
	
	task-get =
		task-get-all; Hd
		
	task-get-all =
		task-template; index-get-all
		
	task-get-dependencies =
		task-dependency-template; index-get-all; map(task-dependency-nr)
		
	task-get-dependent =
		task-dependent-template; index-get-all; map(task-dependent-nr)
		
	task-get-result =
		((task-successful-result-template; index-get-all; Hd)
		<+
		(task-failed-result-template; index-get-all; Hd));
		task-result-value
		
rules // Removing
	
	task-remove-result =
		where(task-successful-result-template; index-remove-all);
		where(task-failed-result-template; index-remove-all)
		
rules // Projections
	
	task-partition:
		(partition, _) -> (partition, TaskPartition())
		
	task-partition:
		partition -> (partition, TaskPartition())
		where
			<is-string> partition

			
	task-nr:
		Task(nr, _) -> nr
	
	task-dependency-nr:
		TaskDependency(_, d) -> d
		
	task-dependent-nr:
		TaskDependent(_, d) -> d
		
	task-result-value:
		DoneTask(_, v) -> v
		
	task-result-value:
		FailTask(_) -> Fail()

		
	task-template:
		nr -> Task(nr, ())

	task-dependent-template:
		nr -> TaskDependent(nr, ())
		
	task-dependency-template:
		nr -> TaskDependency(nr, ())
		
	task-successful-result-template:
		nr -> DoneTask(nr, ())

	task-failed-result-template:
		nr -> FailTask(nr)
		