module task/core

imports 
  
  task/interface
  task/store
  index/core
  index/query
  nbl/utils // TODO: should not depend on NaBl.
  
signature

  sorts
  
    Task Result Instruction
  
  constructors
    
    Task     : Int * List(Int) * Instruction * Partition -> Task
    Result   : Int                                       -> Result
    DoneTask : Int * Term                                -> DoneTask
    FailTask : Int * Term                                -> FailTask
    
    Done       : Term               -> Result
    Done       : Term * List(Entry) -> Result
    Fail       : Term               -> Result
    Fail       : Term * List(Entry) -> Result
    Error      : Term               -> Result
    Warning    : Term               -> Result
    Note       : Term               -> Result
    Dependency : List(Int)          -> Result
		
rules // Creation
  
  new-task(|task*) = new-task(|task*, <dependent-tasks>)
  new-task(|task*, deps) = desugar-task(|task*) <+new-task(|task*, deps, <address>) 
  new-task(|task*, deps, name):
    instruction -> Result(name)
    with
    	partition := <index-get-current-partition>;      // TODO: Partition should be a term argument.
    	nr        := <address> instruction;
      task      := Task(nr, deps, instruction, partition);
      <iset-add(|task)> task*
      
  dependent-tasks = collect-all(dependent-task, union); flatten-list; make-set
  dependent-task = ?Result(<id>) 
  dependent-task =
    has-annos; get-annos; dependent-tasks
  
rules // Execution
  
  perform-tasks(|execqueue, runtimedeps):
  	_ -> <iset-elements> elem*
  	with
  		new-iset => elem*;
  		while-imperative(nabl-dequeue-task(|execqueue); measure-time(perform-one-task(|execqueue, runtimedeps, elem*), id | "perform-tasks-one"))
  
  /*perform-tasks-internal(|elem*, results):
  	task* -> result
  	with
  		//<length; vdebug(!"Length: ")> task*;
  		eval-task*   := <filter(task-satisfies-dependencies(|results))> task*;
  		other-task*  := <remove-all(task-satisfies-dependencies(|results))> task*; 
  		if [] := eval-task* then
  			result := other-task*
  		else
	  		dep-task* := <mapconcat(perform-one-task-internal(|elem*, results))> eval-task*;
	  		rec-task* := <where(length; debug(!"Recursive length: "))> [other-task*, dep-task*];
	  		result    := <perform-tasks-internal(|elem*, results)> rec-task*  			
			end*/
    
  perform-one-task(|execqueue, runtimedeps, elem*):
  	Task(n, d*, i, p) -> <id>
  	with
  		if res := <perform-instruction(|n)> i then
		    <vdebug(!"Performing task: ")> n;
		    switch !res
		      case ?Done(tr, e*):
		      	<iset-addlist(|e*)> elem*;
		        <index-add(|p)> DoneTask(n, tr);
		        <task-try-schedule-task(|runtimedeps, execqueue)> n
		      case ?Done(tr):
		        <index-add(|p)> DoneTask(n, tr);
		        <task-try-schedule-task(|runtimedeps, execqueue)> n
		      case ?Fail(fr, e*):
		      	<iset-addlist(|e*)> elem*;
		        <index-add(|p)> FailTask(n, fr);
		        <task-try-schedule-task(|runtimedeps, execqueue)> n
		      case ?Fail(fr):
		        <index-add(|p)> FailTask(n, fr);
		        <task-try-schedule-task(|runtimedeps, execqueue)> n
		      case ?Dependency(new-dep*):
		      	<vdebug(!"Found dynamic dependencies: ")> new-dep*;
		      	//new-task := Task(n, new-dep*, i, p)
		      	<task-add-runtime-dependency(|runtimedeps, n)> new-dep*
		    	otherwise:
		    		<with(fail|"Unexpected result from perform-task: ")> res
		      end
			else
        <index-add(|p)> FailTask(n, []);
        <task-try-schedule-task(|runtimedeps, execqueue)> n
			end

  perform-instruction(|n):
    i -> <perform-task(|n)> i'
    where
    	i' := <alltd(insert-result)>  i
	
  insert-result = 
		has-annos; 
		!(<id>, <get-annos; alltd(insert-result)>); 
		set-annos
			
	insert-result: Result(n) -> <task-get-result> n
		
rules // Projections
	
	task-nr:
		Task(nr, _, _, _) -> nr
		
	task-partition:
		Task(_, _, _, p) -> p
		
	task-result-nr:
		Result(nr) -> nr

rules // Utility
  
  external while-imperative(s|)
  
  external gohla-iset-get-one(|)
  
  effectively(s) = ?t; s; not(?t)  
