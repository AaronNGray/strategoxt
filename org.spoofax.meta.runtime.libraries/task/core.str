module task/core

imports 
  
  task/interface
  task/store
  index/core
  index/query
  nbl/utils // TODO: should not depend on NaBl.
  
signature

  sorts
  
    Task Result Instruction
  
  constructors
    
    Task     : Int * List(Int) * Instruction * Partition -> Task
    Result   : Int                                       -> Result
    DoneTask : Int * Term                                -> DoneTask
    FailTask : Int * Term                                -> FailTask
    
    Done       : Term               -> Result
    Done       : Term * List(Entry) -> Result
    Fail       : Term               -> Result
    Fail       : Term * List(Entry) -> Result
    Error      : Term               -> Result
    Warning    : Term               -> Result
    Note       : Term               -> Result
    Dependency : List(Int)          -> Result
		
rules // Creation
  
  new-task(|task*) = new-task(|task*, <dependent-tasks>)
  new-task(|task*, deps) = desugar-task(|task*) <+new-task(|task*, deps, <address>) 
  new-task(|task*, deps, name):
    instruction -> Result(name)
    with
    	partition := <index-get-current-partition>;      // TODO: Partition should be a term argument.
    	nr        := <address> instruction;
      task      := Task(nr, deps, instruction, partition);
      <iset-add(|task)> task*
      
  dependent-tasks = collect-all(dependent-task, union); flatten-list; make-set
  dependent-task = ?Result(<id>) 
  dependent-task =
    has-annos; get-annos; dependent-tasks
  
rules // Execution
  
  perform-tasks:
  	task* -> (<iset-elements> elem*, error*)
  	with
  		new-iset      => elem*;
  		new-hashtable => results;
  		error*        := <repeat(perform-task-internal(|elem*, results)); map(vdebug(!"ERROR: "))> task*
    
  perform-task-internal(|elem*, results) =
    split-fetch-keep(perform-single-task(|results)) => (t1*, (n, res, i, p), t2*);
    <vdebug(!"Performing task: ")> n;
    switch !res
      case ?Done(tr, e*):
      	<iset-addlist(|e*)> elem*;
        <index-add(|p)> DoneTask(n, tr);
        <completed-task(|n, tr, results)> [t1*, t2*]
      case ?Done(tr):
        <index-add(|p)> DoneTask(n, tr);
        <completed-task(|n, tr, results)> [t1*, t2*]
      case ?Fail(fr, e*):
      	<iset-addlist(|e*)> elem*;
        <index-add(|p)> FailTask(n, fr);
        <completed-task(|n, Fail(fr), results)> [t1*, t2*]
      case ?Fail(fr):
        <index-add(|p)> FailTask(n, fr);
        <completed-task(|n, Fail(fr), results)> [t1*, t2*]
      case ?Dependency(d*):
      	<vdebug(!"Found dynamic dependencies: ") /*; store-task-deps(|p, n)*/> d*;
      	![t1*, t2*, Task(n, d*, i, p)]
    	otherwise:
    		<with(fail|"Unexpected result from perform-task: ")> res
      end

  perform-single-task(|results):
    Task(n, d*@<debug(!"Checking: "); satisfies-dependencies(|results); debug(!"CHECKED: ")>, i, p) -> (n, <perform-task(|n)> i', i, p)
    where
    	i' := <task-insert-results(|results)> i
    
  completed-task(|n, res, results):
  	task* -> <id>
  	with
  		<debug(!"Putting: "); gohla-hashtable-put(|results); debug(!"PUTTED: ")> (n, res)
  		
	task-insert-results(|results):
		i -> i'
		with
			i' := <alltd(insert-result(|results))> i
			
  insert-result(|results) = 
		has-annos; 
		!(<id>, <get-annos; map(task-insert-results(|results))>); 
		set-annos
			
	insert-result(|results): Result(n) -> <debug(!"Inserting: "); gohla-hashtable-get(|results); debug(!"INSERTED ")>  n
		
	satisfies-dependencies(|results):
		dependency* -> <?[]> res*
		where
			res* := <debug(!"Dependencies: "); remove-all(debug(!"1: "); gohla-hashtable-get(|results); debug(!"2: ")); debug(!"Bla: ")> dependency*
			
	gohla-hashtable-get(|results):
		n -> <debug(!"Hashtable-get: "); hashtable-get(|n)> results

	gohla-hashtable-put(|results): 
		(t1, t2) -> <hashtable-put(|t1, t2)> results
		
rules // Projections
	
	task-nr:
		Task(nr, _, _, _) -> nr
		
	task-partition:
		Task(_, _, _, p) -> p
		
	task-result-nr:
		Result(nr) -> nr

rules // Utility
  
  effectively(s) = ?t; s; not(?t)  
