module task/core

imports 
  
  task/interface
  
signature

  sorts
  
    Result Instruction
  
  constructors
    
    Result : Int -> Result
    Fail : Result
    
    Dependency : List(Int) -> Result
		
rules // Creation
  
  tdebug(s) = id
  //tdebug(s) = debug(s)
  
  new-task(|partition) = new-task(|partition, <dependent-tasks>)
  
  new-task(|partition, dependencies) = 
    task-add-task(|partition, dependencies, <id>)
   
  //    tdebug(!"new task ")
  //  ; avoid-task(|dependencies)
  //  ; tdebug(!"avoided ")
  // <+ task-add-task(|partition, dependencies, <id>)
  //  ; tdebug(!"added ")
      
  dependent-tasks = collect-all(dependent-task, union); flatten-list; make-set
  dependent-task = ?Result(<id>) 
  dependent-task =
    has-annos; get-annos; dependent-tasks

rules // Dependencies
	
  task-create-dependencies =
  	collect-all(?Result(<id>));
  	!Dependency(<id>)

  task-create-dependency =
		!Dependency([<id>])
  	
	task-has-dependencies =
		fetch(?Dependency(_))
		
	task-collect-dependencies =
		collect-all(?Dependency(<id>));
		concat;
		where(Hd);
		!Dependency(<id>)

rules // Results
	
	insert-results-with-fail =
		switch id
			case has-annos  : !(<id>, <get-annos; insert-results-with-fail>); set-annos
			case is-list    : filter(insert-results-with-fail; not(?[]))
			case ?Result(n) : (task-api-get-result(|n) <+ (task-api-has-failed(|n); ![]) <+ with(fail|"Cannot insert result: "))
			otherwise       : all(insert-results-with-fail)
		end
	
	insert-results =
		switch id
			case has-annos  : !(<id>, <get-annos; insert-results>); set-annos
			case is-list    : map(insert-results); remove-all(?[])
			case ?Result(n) : task-api-get-result(|n) <+ (task-api-has-failed(|n); ![])
			otherwise       : all(insert-results)
		end
		
	insert-results-or-create-dependency =
		switch id
			case has-annos  : !(<id>, <get-annos; insert-results-or-create-dependency>); set-annos
			case is-list    : map(insert-results-or-create-dependency); remove-all(?[])
			case ?Result(n) : task-api-get-result(|n) <+ (task-api-has-failed(|n); ![]) <+ !Dependency([n])
			otherwise       : all(insert-results-or-create-dependency)
		end
	
rules // Projections
	
	task-result-id:
    Result(taskID) -> taskID

rules // API
	
	task-setup(|project-path)                            = task-api-setup(|project-path)
	task-start-collection(|partition)                    = task-api-start-collection(|partition)
	task-stop-collection(|partition)                     = task-api-stop-collection(|partition)
	task-add-task(|partition, dependencies, instruction) = task-api-add-task(|partition, dependencies, instruction)
	task-becomes-cyclic(|taskIDFrom, taskIDTo)           = task-api-becomes-cyclic(|taskIDFrom, taskIDTo)
	task-debug-info(|partition)                          = task-api-debug-info(|partition)
	task-add-message(|taskID, message)                   = task-api-add-message(|taskID, message)
	task-get-messages(|partition)                        = task-api-get-messages(|partition)
	task-evaluate(|changed-read*)                        = task-api-evaluate(task-perform-task, insert-results-with-fail|changed-read*)
	task-exists(|instruction)                            = task-api-exists(|instruction)
	task-reset                                           = task-api-reset
	task-persist                                         = task-api-persist
	task-unload(|project-path)                           = task-api-unload(|project-path)
	task-unload                                          = task-unload(|<id>)
	
	task-get-result =
		switch id
			case ?Result(taskID) : task-api-get-result(|taskID)
			otherwise            : task-api-get-result(|<id>)
		end
	
	task-has-failed =
		switch id
			case ?Result(taskID) : task-api-has-failed(|taskID)
			otherwise            : task-api-has-failed(|<id>)
		end
		
	task-get-solved =
		switch id
			case ?Result(taskID) : task-api-get-result(|taskID) <+ (task-api-has-failed(|taskID); ![])
			otherwise            : task-api-has-failed(|<id>) <+ (task-api-has-failed(|<id>); ![])
		end
				
	task-get-dependencies:
		taskID -> <task-api-get-dependencies(|taskID)>
				
	task-add-read(|taskID):
		read -> <task-api-add-read(|taskID, read)>
		
	task-add-dependency(|taskID):
		dependency -> <task-api-add-dependency(|taskID, dependency)>
		
	task-add-dependency-nocycle(|taskID):
		dependency -> <(not(task-becomes-cyclic(|taskID, dependency)); task-api-add-dependency(|taskID, dependency)) <+ id>
		
	task-instruction-id:
		instruction -> <task-api-task-id(|instruction)>
		
	task-perform-task(|nr) = perform-task(|nr)

rules /** @internal API externals */

	task-api-setup(|project-path) = prim("task_api_setup", project-path)
	task-api-start-collection(|partition) = prim("task_api_start_collection", partition)
	task-api-stop-collection(|partition) = prim("task_api_stop_collection", partition)
	task-api-add-task(|partition, dependencies, instruction) = prim("task_api_add_task", partition, dependencies, instruction)
	task-api-becomes-cyclic(|taskIDFrom, taskIDTo) = prim("task_api_becomes_cyclic", taskIDFrom, taskIDTo)
	task-api-get-result(|taskID) = prim("task_api_get_result", taskID)
	task-api-debug-info(|partition) = prim("task_api_debug_info", partition)
	task-api-add-message(|taskID, message) = prim("task_api_add_message", taskID, message)
	task-api-get-messages(|partition) = prim("task_api_get_messages", partition)
	task-api-has-failed(|taskID) = prim("task_api_has_failed", taskID)
	task-api-add-read(|taskID, read) = prim("task_api_add_read", taskID, read)
	task-api-add-dependency(|taskID, dependency) = prim("task_api_add_dependency", taskID, dependency)
	task-api-evaluate(perform-task, insert-result|changed-reads) = prim("task_api_evaluate", perform-task, insert-result|changed-reads)
	task-api-exists(|instruction) = prim("task_api_exists", instruction)
	task-api-get-dependencies(|taskID) = prim("task_api_get_dependencies", taskID)
	task-api-reset = prim("task_api_reset")
	task-api-persist = prim("task_api_persist")
	task-api-task-id(|instruction) = prim("task_api_task_id", instruction)
	task-api-unload(|project-path) = prim("task_api_unload", project-path)
