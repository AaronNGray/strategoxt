module task/core

imports 
  
  task/interface
  task/utils
  nabl/entries
  
signature

  sorts
  
    Result Instruction
  
  constructors
    
    Result : TaskID -> Result
    Fail   : Result
    
    Single     : List(Result) -> Result
    Dependency : List(TaskID) -> Result
		
rules // Creation
  
  tdebug(s) = id
  //tdebug(s) = debug(s)
  
  new-task(|partition) = new-task(|partition, <dependent-tasks>)
  new-task(|partition, dependencies):
  	instruction -> result
  	with
  		is-combinator := <task-is-combinator; !1 <+ !0> instruction;
  		short-circuit := <task-short-circuit; !1 <+ !0> instruction;
  		result        := <task-add-task(|partition, dependencies, instruction, is-combinator, short-circuit)> instruction
 
  //    tdebug(!"new task ")
  //  ; avoid-task(|dependencies)
  //  ; tdebug(!"avoided ")
  // <+ task-add-task(|partition, dependencies, <id>)
  //  ; tdebug(!"added ")
      
  dependent-tasks = collect-all(dependent-task, union); flatten-list; make-set
  dependent-task = ?Result(<id>) 
  dependent-task =
    has-annos; get-annos; dependent-tasks
    
	merge-dependencies(|dep*):
  	term -> <union> (<dependent-tasks> dep*, <dependent-tasks> term)
    
	task-create-execute-ctx = !""
	task-create-execute(create-task):
		term -> result
		with
		  ctx := <task-create-execute-ctx>
		; task-push
		; task-start-collection(|ctx)
		; Result(taskID) := <create-task> term
		; task-stop-collection(|ctx)
		; <task-evaluate-now> taskID
		; result := <task-get-result> taskID
		; task-pop

rules // Dependencies
		
	task-collect-dependencies =
		collect-all-annos(?Dependency(<id>), union);
		concat;
		where(Hd);
		!Dependency(<id>)

	task-get-dependencies:
		Dependency(dep*) -> dep*
		where
			<is-list> dep*
		
	task-get-dependencies:
		Dependency(dep) -> [dep]
		where
			<not(is-list)> dep

rules // Results

	replace-results(list, result) =
		switch id
			case has-annos  : ?t; !(<replace-results-noannos(list, result)> t, <get-annos; replace-results(list, result)> t); set-annos
			otherwise       : replace-results-noannos(list, result)
		end		

	replace-results-noannos(list, result) =
		switch id
			case is-list    : list
			case ?Result(n) : result
			otherwise       : all(replace-results(list, result))
		end
		
		
	insert-results-hashmap(|results-hashmap) =
		replace-results(
		  filter(insert-results-hashmap(|results-hashmap))
		, \Result(n) -> <try(<hashtable-get(|n)> results-hashmap)>\
	  )

	insert-results(no-result) =
		replace-results(
			map(insert-results(no-result)), 
			\Result(n) -> <task-api-get-results(|n) <+ (task-api-has-failed(|n); ![]) <+ no-result>\
		)

	// Inserts task results into given term. 
	// Creates a dependency term when dereferencing a task that has not been evaluated yet. 
	insert-results-or-create-dependency =
		insert-results(\Result(n) -> Dependency([n])\)
	
	// Inserts task results into given term.
	// With fails when dereferencing a task that has not been evaluated yet.
	insert-results-with-fail =
		insert-results(\Result(n) -> <with(fail|"Cannot insert result ")>\)
	
	// Inserts task results into given term.
	// Delays the current evaluating task when dereferencing a task that has not been evaluated yet.
	insert-results-or-delay:
		term -> inserted
		where
			inserted := <insert-results-or-create-dependency> term;
			if dependencies := <task-collect-dependencies> inserted then
				dep* := <task-get-dependencies> dependencies;
				<task-delay> dep*
			end
	
rules // Projections
	
	task-result-id:
    Result(taskID) -> taskID

	task-collect-result-ids =
		collect-all-annos(task-result-id, union)
	
	task-use-result-id:
    Use(Result(taskID)) -> taskID
		
	task-collect-result-ids-2 =
		collect-all-annos-2(task-result-id, task-use-result-id, union)

rules // API
	
	task-add-message(|taskID, message)                         = task-api-add-message(|taskID, message)
	task-add-task(|partition, dependencies, instruction, is-combinator, short-circuit) = task-api-add-task(|partition, dependencies, instruction, is-combinator, short-circuit)
	task-clear-partition                                       = task-api-clear-partition(|<id>)
	task-delay                                                 = task-api-delay(|<id>)
	task-debug-info(|partition)                                = task-api-debug-info(|partition)
	task-evaluate-now                                          = task-api-evaluate-now(task-collect-result-ids-2, insert-results-hashmap, task-perform-task|<id>)
	task-evaluate-scheduled                                    = task-api-evaluate-scheduled(task-collect-result-ids-2, insert-results-hashmap, task-perform-task)
	task-get-messages(|partition)                              = task-api-get-messages(|partition)
	task-get-readers                                           = task-api-get-readers(|<id>)
	task-invalidate-task-reads(|changedRead*)                  = task-api-invalidate-task-reads(|changedRead*)
	task-merge                                                 = task-api-merge
	task-partitions-of(|taskIDOrTaskID*)                       = task-api-partitions-of(|taskIDOrTaskID*)
	task-persist                                               = task-api-persist
	task-pop                                                   = task-api-pop
	task-push                                                  = task-api-push
	task-recover                                               = task-api-recover
	task-reset                                                 = task-api-reset
	task-result-combinations                                   = task-api-result-combinations(task-collect-result-ids-2, insert-results-hashmap|<id>, 0)
	task-result-combinations-single                            = task-api-result-combinations(task-collect-result-ids-2, insert-results-hashmap|<id>, 1)
	task-setup(|project-path)                                  = task-api-setup(|project-path)
	task-setup                                                 = task-api-setup(|<id>)
	task-start-collection(|partition)                          = task-api-start-collection(|partition)
	task-stop-collection(|partition)                           = task-api-stop-collection(|partition)
	task-unload                                                = task-unload(|<id>)
	task-unload(|project-path)                                 = task-api-unload(|project-path)
	
	// TODO: rename to task-get-results.
	task-get-result =
		switch id
			case ?Result(taskID) : task-api-get-results(|taskID)
			otherwise            : task-api-get-results(|<id>)
		end
	
	task-has-failed =
		switch id
			case ?Result(taskID) : task-api-has-failed(|taskID)
			otherwise            : task-api-has-failed(|<id>)
		end
		
	task-get-solved =
		switch id
			case ?Result(taskID) : task-api-get-results(|taskID) <+ (task-api-has-failed(|taskID); ![])
			otherwise            : task-api-has-failed(|<id>) <+ (task-api-has-failed(|<id>); ![])
		end
				
	task-get-dependencies:
		taskID -> <task-api-get-dependencies(|taskID)>
				
	task-add-read(|taskID):
		read -> <task-api-add-read(|taskID, read)>

	task-perform-task(|nr) = perform-task(|nr)

rules /** @internal API externals */

	task-api-add-message(|taskID, message) = prim("task_api_add_message", taskID, message)
	task-api-add-read(|taskID, read) = prim("task_api_add_read", taskID, read)
	task-api-add-task(|partition, dependencies, instruction, is-combinator, short-circuit) = prim("task_api_add_task", partition, dependencies, instruction, is-combinator, short-circuit)
	task-api-clear-partition(|partition) = prim("task_api_clear_partition", partition)
	task-api-delay(|dependencies) = prim("task_api_delay", dependencies)
	task-api-debug-info(|partition) = prim("task_api_debug_info", partition)
	task-api-evaluate-now(collect, insert, perform|taskIDs) = prim("task_api_evaluate_now", collect, insert, perform|taskIDs)
	task-api-evaluate-scheduled(collect, insert, perform|) = prim("task_api_evaluate_scheduled", collect, insert, perform|)
	task-api-get-dependencies(|taskID) = prim("task_api_get_dependencies", taskID)
	task-api-get-messages(|partition) = prim("task_api_get_messages", partition)
	task-api-get-readers(|uri) = prim("task_api_get_readers", uri)
	task-api-get-results(|taskID) = prim("task_api_get_results", taskID)
	task-api-has-failed(|taskID) = prim("task_api_has_failed", taskID)
	task-api-invalidate-task-reads(|changedReads) = prim("task_api_invalidate_task_reads", changedReads)
	task-api-merge = prim("task_api_merge")
	task-api-partitions-of(|taskIDOrTaskIDS) = prim("task_api_partitions_of", taskIDOrTaskIDS)
	task-api-persist = prim("task_api_persist")
	task-api-pop = prim("task_api_pop")
	task-api-push = prim("task_api_push")
	task-api-recover = prim("task_api_recover")
	task-api-reset = prim("task_api_reset")
	task-api-result-combinations(collect-results, insert-results|term, single-level) = prim("task_api_result_combinations", collect-results, insert-results|term, single-level)
	task-api-setup(|project-path) = prim("task_api_setup", project-path)
	task-api-start-collection(|partition) = prim("task_api_start_collection", partition)
	task-api-stop-collection(|partition) = prim("task_api_stop_collection", partition)
	task-api-unload(|project-path) = prim("task_api_unload", project-path)
	