module task/tasks

imports
	
	task/core
	task/interface
  nbl/utils
  
signature

	constructors
		
    Choice  : List(Result)                         -> Instruction
    Message : List(Result) * MessageTrigger * Term -> Instruction
    Match   : ID * List(Term) * Term               -> Instruction
    Concat  : List(Result)                         -> Instruction
    
    Success : MessageTrigger
    Failure : MessageTrigger
	
rules
	
	avoid-task(|dep*):
	  Choice([choice]) -> choice
	  where
	    <dependent-tasks> choice => dep*
	
	avoid-task(|dep*):
    Choice(choice*) -> <concat> choice*
    where
      [] := <dependent-tasks> choice*
      
	perform-task(|nr):
 		Choice(choice*) -> <Hd> choice*

	// TODO: should not store any result.
  perform-task(|n):
    Message(task, trigger, message) -> []
    where
    	switch !trigger
    		case Success() : <Hd> task; task-add-message(|n, message)
    		case Failure() : not(<Hd> task); task-add-message(|n, message)
    	end

  avoid-task(|dep*):
    Match(_, _, _) -> <perform-task(|0) <+ ![]>
    where
      [] := dep*
    	
  perform-task(|nr): 
  	Match(key, bound, term*@<with(is-list|"Expected a list of terms.")>) -> result
  	where
  		result := <filter(!(key, <id>, bound); task-match)> term*;
  		if [] := result then
  			fail
			end
  
  perform-task(|nr):
  	Concat(term*) -> <concat> term*