module task/debug

imports
	
	task/core
	
rules
	
  crush-annos(nul, sum, s) :
    _#(xs){a*} -> r2
    where
     r1 := <foldr(nul, sum, s)> xs;
     r2 := <foldr(!r1, sum, s)> a*

	collect-all-annos(s, un) =
		![<s> | <crush-annos(![], un, collect-all-annos(s, un))>]
	<+ crush-annos(![], un, collect-all-annos(s, un))

rules
	
	task-result-id:
    Result(taskID) -> taskID

	task-collect-result-ids =
		collect-all-annos(task-result-id, union)

rules
	
	task-transitive-dependencies = task-transitive-dependencies(|[])
	
	task-transitive-dependencies(|seen):
		taskID -> [dep*, trans-dep*]
		where
			not(<elem> (taskID, seen));
			dep*       := <task-get-dependencies> taskID;
			trans-dep* := <mapconcat(task-transitive-dependencies(|[taskID|seen]))> dep*
			
	task-transitive-dependencies(|seen):
		taskID -> []
		where
			<elem> (taskID, seen)
			
rules
	
	task-debug-ast:
		ast -> debug*
		with
			resultID* := <task-collect-result-ids> ast;
			dep*      := <mapconcat(task-transitive-dependencies)> resultID*;
			debug*    := <make-set; map(task-debug-info(|<id>))> [resultID*, dep*]
