module analysis/core

imports
	
	nbl/-
	task/-
	analysis/-
	index/-

signature

  constructors
  
    File : Path * AST -> File
    Result : Partition * AST * AST * List(Entry) * List(Entry) * List(Task) * List(Task) * 
             List(Term) * List(Term) * List(Term) -> Result
    // Result(partition, initial-ast, analyzed-ast, old-entry*, new-entry*, old-task*, new-task*, 
    //        error*, warning*, note*)
    
rules
	
	analyze-collect(|language):
    File(partition, ast) -> Result(partition, ast, analyzed-ast, old-entry*, new-entry*, old-task*, new-task*, [], [], [])
    with
    	<vdebug(!"Collect for: ")> partition;
    	measure-time(
	    	// Store and clean old tasks and entries. 
	      old-task*  := <task-olds> partition;
	      old-entry* := <nabl-entry-olds> partition;
	      <task-clear> partition;
	      <nabl-entry-clear> partition,
	      id | "analyze-collect-oldentries"
      );
    	// Collect tasks and entries.
    	measure-time(
      	(analyzed-ast, new-entry*, new-task*) := <nabl-collect(|partition, Language(language))> ast,
      	id | "analyze-collect-collect"
      );
      // Store tasks and entries.
      measure-time(
	      <index-add-all(|<collect-partition> partition)> new-entry*;
	      <map(store-task)> new-task*,
	      id | "analyze-collect-store"
	    )
	
	analyze-incremental(|execqueue):
		r@Result(_, _, _, old-entry*, new-entry*, old-task*, new-task*, _, _, _) -> ()
		with
    	// Added and dependencies of removed tasks that need to be re-evaluted.
    	measure-time(
  			(added-task*, removed-task*) := <task-incremental-no-confirm-added> (old-task*, new-task*),
  			id | "analyze-incremental-diff"
    	);
			// <map(vdebug(!"Added task: "))> added-task*;
			// <map(vdebug(!"Removed task: "))> removed-task*;
    	measure-time(
  			<map(task-nr; vdebug(!"Removing all results and dependencies for: "); task-remove-result; task-remove-dependencies)> removed-task*; // Cleanup removed results
  			<map(task-nr; vdebug(!"Removing all reads for: "); nabl-remove-read)> removed-task*,
  			id | "analyze-incremental-remove-olds"
  		);
    	
    	measure-time(
	    	// Tasks that need to be re-evaluated because a definition or property has changed.
	    	changedEntry*  := <nabl-entry-incremental; map(vdebug(!"Changed entry: "); nabl-uri); make-set> (old-entry*, <filter(nabl-diff-entry)> new-entry*);
	    	read-task-nr*  := <mapconcat(nabl-get-reads); map(vdebug(!"Read for changed entry: "))> changedEntry*;
	    	read-task*     := <mapconcat(task-reconstruct); map(vdebug(!"Changed task: "))> read-task-nr*,
	    	id | "analyze-incremental-add-news"
	    );

			measure-time(
	  		// All tasks that need to be re-evaluated.
	  		task* := [read-task*, added-task*];
	      <map(task-nr; task-remove-result)> added-task*;
	      <map(task-nr; task-remove-result)> read-task*;
				<map(task-nr; nabl-remove-read)> added-task*;
				<map(task-nr; nabl-remove-read)> read-task*;

	  		<map(queue-task(|execqueue))> added-task*;
	  		<map(queue-task(|execqueue))> read-task*,
	  		id | "analyze-incremental-concat-queue"
	  	)
    	
	analyze-perform-all(|execqueue):
		_ -> <id>
		with
  		task-create-runtimedep => runtimedep;
      taskEntry* := <perform-tasks(|execqueue, runtimedep)>; 
      <index-add-all(|"TaskEntries")> taskEntry*
      			