module analysis/core

imports
	
	nbl/-
	task/-
	analysis/-
	index/-

signature

  constructors
  
    File : Path * AST -> File
    Result : Partition * AST * AST * List(Entry) * List(Entry) * List(Task) * List(Task) * 
             List(Term) * List(Term) * List(Term) -> Result
    // Result(partition, initial-ast, analyzed-ast, old-entry*, new-entry*, removed-task*, added-task*, 
    //        error*, warning*, note*)
    
rules
	
	analyze-collect(|language, project-path):
    File(partition, ast) -> Result(partition, ast, analyzed-ast, old-entry*, new-entry*, removed-task*, added-task*, [], [], [])
    with
    	<vdebug(!"Collect for: ")> partition;
    	measure-time(
	    	// Store and clean old entries. 
	      old-entry* := <nabl-entry-olds> partition;
	      <nabl-entry-clear> partition,
	      id | "analyze-collect-oldentries"
      );
    	// Collect tasks and entries.
    	measure-time(
    		task-setup(|project-path);
    		task-start-collection(|partition);
      	(analyzed-ast, new-entry*)   := <nabl-collect(|partition, Language(language))> ast;
      	(removed-task*, added-task*) := <task-stop-collection(|partition)>,
      	id | "analyze-collect-collect"
      );
      // Store entries.
      measure-time(
	      <index-add-all(|partition)> new-entry*,
	      id | "analyze-collect-store"
	    )
	
	analyze-incremental:
		Result(_, _, _, old-entry*, new-entry*, _, _, _, _, _) -> changed-read*
		with
			// TODO: Don't use diff because it is O(n*n).
			changed-entry* := <nabl-entry-diff> (old-entry*, <filter(nabl-diff-entry)> new-entry*);
		  changed-read*  := <map(nabl-uri; try(nabl-replace-uri-qualifier(|())))> changed-entry*
    	
	analyze-perform-all:
		changed-read* -> error*
		with
      task-evaluate(|changed-read*) => error*
      			