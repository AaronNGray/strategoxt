module analysis/core

imports
	
	nbl/-
	task/-
	analysis/-
	index/-

signature

  constructors
  
    File : Path * AST -> File
    Result : Partition * AST * AST * List(Entry) * List(Entry) * List(Task) * List(Task) * 
             List(Term) * List(Term) * List(Term) -> Result
    // Result(partition, initial-ast, analyzed-ast, old-entry*, new-entry*, removed-task*, added-task*, 
    //        error*, warning*, note*)
    
rules
	
	analyze-collect(|language, project-path):
    File(partition, ast) -> Result(partition, ast, analyzed-ast, old-entry*, new-entry*, removed-task*, added-task*, [], [], [])
    with
    	<vdebug(!"Collect for: ")> partition;
    	measure-time(
	    	// Store and clean old entries. 
	      old-entry* := <nabl-entry-olds> partition;
	      <nabl-entry-clear> partition,
	      id | "analyze-collect-oldentries"
      );
    	// Collect tasks and entries.
    	measure-time(
    		task-setup(|project-path);
    		task-start-collection(|partition);
      	(analyzed-ast, new-entry*)   := <nabl-collect(|partition, Language(language))> ast;
      	(removed-task*, added-task*) := <task-stop-collection(|partition)>,
      	id | "analyze-collect-collect"
      );
      // Store entries.
      measure-time(
	      <index-add-all(|<collect-partition> partition)> new-entry*,
	      id | "analyze-collect-store"
	    )
	
	analyze-incremental:
		r@Result(_, _, _, old-entry*, new-entry*, removed-task*, added-task*, _, _, _) -> ()
		/* with
			TODO: reads
			// Cleanup removed results
    	measure-time(
  			<map(vdebug(!"Removing all reads for: "); nabl-remove-read)> removed-task*,
  			id | "analyze-incremental-remove-olds"
  		);
    	
    	// Tasks that need to be re-evaluated because a definition or property has changed.
    	measure-time(
	    	changedEntry*  := <nabl-entry-incremental; map(vdebug(!"Changed entry: "); nabl-uri)> (old-entry*, <filter(nabl-diff-entry)> new-entry*);
	    	read-task-nr*  := <mapconcat(nabl-get-reads); map(vdebug(!"Read for changed entry: "))> changedEntry*;
	    	read-task*     := <mapconcat(task-reconstruct); map(vdebug(!"Changed task: "))> read-task-nr*,
	    	id | "analyze-incremental-add-news"
	    )
	    */
    	
	analyze-perform-all:
		_ -> error*
		with
      task-evaluate(perform-task) => error*
      			