module analysis/defaults

imports
	
	analysis/core
	analysis/single
	analysis/multiple
	nbl/utils
	index/core
	task/core
	editor/editor
	editor/queue

rules // Analysis
	
	analysis-default-editor = analysis-single-default-interface <+ (where(not(is-tuple)); analysis-multiple-default-queue)
	analysis-default-cmd = analysis-single-default-interface <+ (where(not(is-tuple)); analysis-multiple-default-interface)

  analysis-changed-partitions:
  	taskID* -> <task-partitions-of(|taskID*)>
  	
  is-test-file = 
    string-ends-with(|".spt")

rules // Single finle analysis
	
	analysis-single-default-interface = fail
	
  analysis-single-default(desugar-before, desugar-after, pp-message|language):
    (ast, path, project-path) -> (analyzed-ast, error*, warning*, note*)
    with
      editor-init;
      <analysis-default-debug(!"Analyzing file: ")> path;
      
	    (
	    	analyzed-ast
			, (analysis-error*, analysis-warning*, analysis-note*)
			, removed-entry*
			, added-entry*
			, removed-task*
			, added-task*
			, invalidated-task*
			, evaluated-task*
			, unevaluated-task*
			) := <desugar-before; analyze-one(|language, path, project-path); desugar-after> ast;
			
      (error*, warning*, note*) := <analysis-message-collect(pp-message|analysis-error*, analysis-warning*, analysis-note*)> analyzed-ast;
      
      partition* := <analysis-changed-partitions> evaluated-task*;
      if <not(is-test-file)> path then
      	partition := <analysis-partition(|path, project-path)>;
      	<remove-all(?partition <+ ?path); analysis-message-update-partitions-queue(|language, project-path)> partition*
    	end;
    	
    	<analysis-debug-results> (removed-entry*, added-entry*, removed-task*, added-task*, invalidated-task*, evaluated-task*, unevaluated-task*)
      
rules // Multi-file analysis
      
  analysis-multiple-default-interface = fail    
      
	analysis-multiple-default-queue:
    path* -> None()
    with
      queue-strategy(|"analysis-multiple-default-interface", "Analyzing files")
      
  analysis-multiple-default(parse, desugar-before, desugar-after, pp-message|language, project-path):
    path* -> (analysis-result'*, evaluated-task*, unevaluated-task*)
    with
    	analysis-default-debug(!"Analyzing files: ");
      analysis-multiple-default-work-units; set-total-work-units;
      
      measure-time(
	      measure-time(
	      	path'* := <map(\p -> $[[project-path]/[p]]\)> path*;
	        (result*, evaluated-task*, unevaluated-task*) := <analyze-multiple(parse; desugar-before, complete-work-unit|language, project-path)> path'*;
	        (analysis-result*, debug-result*) := <unzip> result*
	      , id | "analysis-multiple-full-analysis"
	      );
	      measure-time(
	      	analysis-result'* := <filter(analysis-update-editor(desugar-after, pp-message))> analysis-result*
	      , id | "analysis-multiple-update-editors"
	      );
	    	measure-time(
		      index-persist
	      , id | "analysis-multiple-index-persist"
	      );
	    	measure-time(
		      task-persist
	      , id | "analysis-multiple-task-persist"
	      )
	    , id | "analysis-multiple-total"
      );
	      
      DebugResult(removed-entry*, added-entry*, removed-task*, added-task*, invalidated-task*) := <analysis-accumulate-debug-results> debug-result*;
      <analysis-debug-results> (removed-entry*, added-entry*, removed-task*, added-task*, invalidated-task*, evaluated-task*, unevaluated-task*)
      // TODO: Update markers for partitions that have had a task executed but were not analyzed.

	analysis-accumulate-debug-results:
		result* -> <foldl(analysis-concat-debug-result)> (result*, DebugResult([], [], [], [], []))
			
	analysis-concat-debug-result:
		(
			DebugResult(removed-entry1*, added-entry1*, removed-task1*, added-task1*, invalidated-task1*)
		, DebugResult(removed-entry2*, added-entry2*, removed-task2*, added-task2*, invalidated-task2*)
	  )
	  ->
	  DebugResult(removed-entry*, added-entry*, removed-task*, added-task*, invalidated-task*)
	  with
	  	removed-entry*    := <make-set> [removed-entry1*, removed-entry2*];
	  	added-entry*      := <make-set> [added-entry1*, added-entry2*];
	  	removed-task*     := <make-set> [removed-task1*, removed-task2*];
	  	added-task*       := <make-set> [added-task1*, added-task2*];
	  	invalidated-task* := <make-set> [invalidated-task1*, invalidated-task2*]

  analysis-update-editor(desugar-after, pp-message):
    Result(partition, initial-ast, analyzed-ast, changed-read*, error* , warning* , note*) -> 
    Result(partition, initial-ast, analyzed-desugared-ast, changed-read*, error'*, warning'*, note'*)
    where
      not(() := initial-ast)
    with
    	analyzed-desugared-ast := <desugar-after> analyzed-ast;
      (error'*, warning'*, note'*) := <analysis-message-collect(pp-message|error*, warning*, note*)> analyzed-desugared-ast;
      <set-markers(|partition)> (analyzed-ast, error'*, warning'*, note'*)

  analysis-multiple-default-work-units = 
    length; !(<id>, 3); mul	
	    
rules // Message collection and updating.
	
	constraint-error = fail
	constraint-warning = fail
	constraint-note = fail
	
  analysis-message-collect(pp-message|analysis-error*, analysis-warning*, analysis-note*):
    ast -> ([<map(pp-message)> analysis-error*, error*], [<map(pp-message)> analysis-warning*, warning*], 
    	[<map(pp-message)> analysis-note*, note*])
    with
      error*   := <collect-all(constraint-error, conc)> ast;
      warning* := <collect-all(constraint-warning, conc)> ast;
      note*    := <collect-all(constraint-note, conc)> ast
  
  analysis-message-update-partitions-queue(|language, project-path):
  	partition* -> <queue-strategy(|"analysis-message-update-partitions", "Updating messages")> (partition*, language, project-path)
  
  analysis-message-update-partitions:
  	(partition*, language, project-path) -> <filter(not(is-test-file); analysis-message-update-partition)> partition*
  	with
    	task-setup(|project-path);
      index-setup(|language, project-path)
  	
	analysis-message-update-partition:
		partition -> <analyze-get-messages; set-only-markers(|partition)> partition
      
rules // On-save handler
	
  analysis-save-default(|language):
  	(_, _, _, _, project-path) -> None()
  	with
  		index-setup(|language, project-path);
  		index-persist;
  		task-setup(|project-path);
  		task-persist

rules // Debugging
	
	analysis-default-debug(msg) = try(analysis-default-debug-interface(msg))
	analysis-default-debug = try(analysis-default-debug-interface)
	analysis-default-debug-interface(msg) = fail
	analysis-default-debug-interface = fail
	
	analysis-debug-results =
		?(
				removed-entry*
			, added-entry*
			, removed-task*
			, added-task*
			, invalidated-task*
			, evaluated-task*
			, unevaluated-task*
		);
  	<analysis-default-debug> $[Entries : [<length> removed-entry*] removed, [<length> added-entry*] added.];
    <analysis-default-debug> $[Tasks   : [<length> removed-task*] removed, [<length> added-task*] added, [<length> invalidated-task*] invalidated, [<length> evaluated-task*] evaluated, [<length> unevaluated-task*] unevaluated.];
    <map(task-debug-info(|<id>); analysis-default-debug(!"Unevaluated: "))> unevaluated-task* 
	