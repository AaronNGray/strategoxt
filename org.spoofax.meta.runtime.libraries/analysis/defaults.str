module analysis/defaults

imports
	
	analysis/core
	analysis/single
	analysis/multiple
	nbl/utils
	index/core
	task/core
	editor/editor
	editor/queue

rules // Analysis
	
	analysis-default-editor = analysis-single-default-interface <+ (where(not(is-tuple)); analysis-multiple-default-queue)
	analysis-default-cmd = analysis-single-default-interface <+ (where(not(is-tuple)); analysis-multiple-default-interface)

  analysis-changed-partitions:
  	taskID* -> <task-partitions-of(|taskID*)>
  	
  is-test-file = 
    string-ends-with(|".spt")

rules // Single finle analysis
	
	analysis-single-default-interface = fail
	
  analysis-single-default(desugar-before, desugar-after, pp-message|language):
    (ast, path, project-path) -> (ast', error*, warning*, note*)
    with
      editor-init;
      <analysis-default-debug(!"Analyzing file: ")> path;
      (ast', evaluated-task*, unevaluated-task*, (analysis-error*, analysis-warning*, analysis-note*)) := <desugar-before; analyze-one(|language, path, project-path); desugar-after> ast;
      (error*, warning*, note*) := <analysis-message-collect(pp-message|analysis-error*, analysis-warning*, analysis-note*)> ast';
      partition* := <analysis-changed-partitions> evaluated-task*;
      if <not(is-test-file)> path then
      	partition := $[[project-path]/[path]];
      	<remove-all(?partition <+ ?path); analysis-message-update-partitions-queue> partition*
    	end;
      <analysis-default-debug> $[[<length> evaluated-task*] task evaluated, [<length> unevaluated-task*] task unevaluated.];
      <map(task-debug-info(|<id>); analysis-default-debug(!"Unevaluated: "))> unevaluated-task* 
      // TODO: Update markers for partitions that have had a task executed.
      
rules // Multi-file analysis
      
  analysis-multiple-default-interface = fail    
      
	analysis-multiple-default-queue:
    path* -> None()
    with
      queue-strategy(|"analysis-multiple-default-interface", "Analyzing files")
      
  analysis-multiple-default(parse, desugar-before, desugar-after, pp-message|language, project-path):
    path* -> (result'*, evaluated-task*, unevaluated-task*)
    with
    	analysis-default-debug(!"Analyzing files: ");
      analysis-multiple-default-work-units; set-total-work-units;
      measure-time(
	      measure-time(
	      	path'* := <map(\p -> $[[project-path]/[p]]\)> path*;
	        (result*, evaluated-task*, unevaluated-task*) := <analyze-multiple(parse; desugar-before, complete-work-unit|language, project-path)> path'*;
	        result'* := <filter(analysis-update-editor(desugar-after, pp-message))> result*
	      , id | "analysis-multiple-full-analysis"
	      );
	    	measure-time(
		      index-commit
	      	, id | "analysis-multiple-index-commit"
	      );
	    	measure-time(
		      task-persist
	      	, id | "analysis-multiple-task-commit"
	      )
	    , id | "analysis-multiple-total");
      <analysis-default-debug> $[[<length> evaluated-task*] task evaluated, [<length> unevaluated-task*] task unevaluated.];
      <map(task-debug-info(|<id>); analysis-default-debug(!"Unevaluated: "))> unevaluated-task*
      // TODO: Update markers for partitions that have had a task executed but were not analyzed.

  analysis-update-editor(desugar-after, pp-message):
    Result(partition, initial-ast, analyzed-ast, changed-read*, error* , warning* , note*) -> 
    Result(partition, initial-ast, analyzed-desugared-ast, changed-read*, error'*, warning'*, note'*)
    where
      not(() := initial-ast)
    with
    	analyzed-desugared-ast := <desugar-after> analyzed-ast;
      (error'*, warning'*, note'*) := <analysis-message-collect(pp-message|error*, warning*, note*)> analyzed-desugared-ast;
      <set-markers(|partition)> (analyzed-ast, error'*, warning'*, note'*)

  analysis-multiple-default-work-units = 
    length; !(<id>, 3); mul	
	    
rules // Message collection and updating.
	
	constraint-error = fail
	constraint-warning = fail
	constraint-note = fail
	
  analysis-message-collect(pp-message|analysis-error*, analysis-warning*, analysis-note*):
    ast -> ([<map(pp-message)> analysis-error*, error*], [<map(pp-message)> analysis-warning*, warning*], 
    	[<map(pp-message)> analysis-note*, note*])
    with
      error*   := <collect-all(constraint-error, conc)> ast;
      warning* := <collect-all(constraint-warning, conc)> ast;
      note*    := <collect-all(constraint-note, conc)> ast
  
  analysis-message-update-partitions-queue =
  	queue-strategy(|"analysis-message-update-partitions", "Updating messages")
  
  analysis-message-update-partitions:
  	partition* -> <filter(not(is-test-file); analysis-message-update-partition)>
  	
	analysis-message-update-partition:
		partition -> <analyze-get-messages; set-only-markers(|partition)>
      
rules // On-save handler
	
  analysis-save-default(|language):
  	(_, _, _, path, project-path) -> None()
  	with
  		index-setup(|language, [project-path], $[[project-path]/[path]]);
  		index-commit;
  		task-setup(|project-path);
  		task-persist

rules // Debugging
	
	analysis-default-debug(msg) = try(analysis-default-debug-interface(msg))
	analysis-default-debug = try(analysis-default-debug-interface)
	analysis-default-debug-interface(msg) = fail
	analysis-default-debug-interface = fail
	