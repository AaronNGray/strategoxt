module analysis/multiple

imports
	
  task/core
  task/store
  task/incremental
  index/core
  index/query
  nbl/collect
  nbl/tasks
  nbl/incremental
  nbl/uri
  nbl/utils
  analysis/core

rules // Multi file analysis
  
  nabl-analyze-multiple(parse-file, parallel, complete-work-unit|language, project-path):
    path* -> result*
    with
      file*   := <map(nabl-analyze-parse-file(parse-file); where(complete-work-unit))> path*;
      result* := <nabl-analyze-multiple-files(parallel, complete-work-unit|language, project-path)> file*

  nabl-analyze-parse-file(parse-file):
    path -> File(path, ast)
    with
      if not(ast := <file-exists; parse-file> path) then
        ast := ()
      end

  nabl-analyze-multiple-files(parallel, complete-work-unit|language, project-path):
    file* -> (task*, result1*)
    with
    	<vdebug(!"Analyzing files: ")> file*;
    	create-execqueue => execqueue;
    	measure-time(
	      result1* := <all(
	      	measure-time(
		        nabl-analyze-multiple-setup(|language, project-path); 
		        analyze-collect(|language); 
		        where(complete-work-unit),
		        id | "nabl-analyze-multiple-files-setup"
		      ) 
	      )> file*,
	      id | "nabl-analyze-multiple-files-collect"
	    );
	    measure-time(
	      task* := <mapconcat(
	        nabl-analyze-multiple-setup(|language, project-path); 
	        analyze-incremental(|execqueue);
	        where(complete-work-unit)
	      ); make-set> result1*,
	      id | "nabl-analyze-multiple-files-gathertasks"
      );
      measure-time(
      	<analyze-perform-all(|execqueue)> task*,
      	id | "nabl-analyze-multiple-files-performtasks"
      )
      
rules // Utility

  nabl-analyze-multiple-setup(|language, project-path) =
    (?File(partition, _) <+ ?Result(partition, _, _, _, _, _, _, _, _, _));
    where(index-setup(|language, [project-path], partition))
    
  nabl-analyze-multiple-work-units = 
    length; !(<id>, 3); mul
