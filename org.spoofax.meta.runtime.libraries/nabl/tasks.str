module nabl/tasks

imports 
  
  task/core
  task/tasks
  task/utils
  nabl/lookup
  nabl/collect
  nabl/query
  nabl/incremental
  nabl/interface
  nabl/uri
  nabl/utils
  nabl/entries
  properties/entries
  properties/eq
  properties/query
  
signature
  
  constructors
    
    CollectDefs            : Term                                      -> Instruction
    ResolveDefs            : Scope * Namespace * Name * Prop           -> Instruction
    CheckDefs              : Namespace * URI                           -> Instruction
    DisambiguateDefs       : List(Def) * List(Prop) * Namespace * Name -> Instruction
    ResolveNamedImports    : Scope * Namespace * Name                  -> Instruction
    ImportCalc             : URI                                       -> Instruction
    ImportClosure          : URI                                       -> Instruction
    PropConstraint         : Kind * Expected * Result                  -> Instruction
        
    ResolveAllDefs         : Scope * Namespace                         -> Instruction
    ResolveAllDefs         : Scope * Namespace * Name * Prop           -> Instruction
        
rules // basics
  
  perform-task(|nr) = 
    ?CollectDefs(<id>)
  ; (?Def(_) <+ try(nabl-get-name); get-annos; mapconcat(?Def(_); MkSingleton + ?Use(<is-list <+ MkSingleton>)))

rules // Resolve
  
  // Looks up defintions in scopes with namespace and name.
  perform-task(|task-id):
  	ResolveDefs(scope, ns, name, prop*) -> result
  	where
  		uri    := <nabl-uri> scope;
  		name'  := <try-remove-list; strip-annos> name;
  		<nabl-add-name-read(|task-id, ns, name')> uri;
  		def*   := <nabl-lookup(|ns, name')> uri;
  		result := <filter(filter-defs-props(|task-id, prop*)); not(?[])> def*
  		
	task-short-circuit = ?ResolveDefs(_, _, _, _)
 
 
  perform-task(|nr):
    ResolveAllDefs(scope, ns, name, prop*) -> <perform-task(|nr)> ResolveDefs(scope, ns, name, prop*)
 
  		
	filter-defs-props(|task-id, prop*):
		definition -> <map(filter-defs-prop(|task-id, definition)); !definition> prop*
	 	
	filter-defs-prop(|task-id, definition):
		Prop(kind, expected, _) -> definition
		where
			uri    := <nabl-uri> definition;
      value  := <get-index-property(|kind)> uri;
      value' := <insert-results-or-delay(|task-id)> value;
      <filter-defs-prop-eq(|expected, value')> kind

	filter-defs-prop-eq(|expected, value):
		kind -> <nabl-property-eq> (kind, Eq(), (expected, value))
		
	filter-defs-prop-eq(|expected, value):
		kind -> <nabl-property-eq> (kind, Eq(), (expected, <try-remove-list> value))
		

	perform-task(|task-id):
		PropConstraint(kind, expected, definition) -> <filter-defs-prop(|task-id, definition)> Prop(kind, expected, [])
		
	perform-task(|nr):
		CheckDefs(ns, d) -> d
		where
			<nabl-uri; nabl-uri-namespace; ?ns> d
	
	// TODO: this task is not created any more
	// Calls a user-defined disambiguation filter on definitions with relevant information.
	// perform-task(|nr):
	// 	DisambiguateDefs(def*, prop*, namespace, name) -> result
	// 	where
	// 		if <Tl> def* then
	// 			<try(nabl-disambiguate(|prop*, namespace, name))> def*
	// 		else
	// 			!def*
	// 		end => result;
	// 		not(?[])
	// 
	// 	task-is-combinator = ?DisambiguateDefs(_, _, _, _)

	// TODO: this task is not created any more
	// Looks up named imports, active in scopes with namespace and name..
	// perform-task(|nr):
	// 	ResolveNamedImports(scope, ns, name) -> result
	// 	where
	// 		uri     := <nabl-uri> scope;
	// 		<nabl-add-uri-read(|nr)> uri;
	// 		name'   := <try-remove-list; strip-annos> name; // TODO: can this be a list?
	// 		import* := <nabl-lookup-named-import(|ns, name')> uri;
	//      switch id
	//      	case ?[]                            : fail
	//      	case task-collect-dependencies => d : !d
	//      	otherwise                           : id
	//      end => result

rules // Visibility
	
  // Looks up defintions in scopes with namespace and name.
  perform-task(|nr):
  	ResolveAllDefs(scope, ns) -> def*
  	where
  		uri  := <nabl-uri> scope;
  		<nabl-add-ns-read(|nr, ns)> uri;
  		def* := <nabl-lookup-all(|ns)> uri;
  		not(?[])

	nabl-resolve-all-defs-subtasks(|partition, ns, prop*, range):
		uri -> [task|subtasks]
		with
			task := <nabl-resolve-all-defs-subtasks-one(|partition, ns, prop*, range)> uri;
      switch !range
      	case One(): ![]
      	case All(): <nabl-uri-parent < nabl-resolve-all-defs-subtasks(|partition, ns, prop*, range) + ![]> uri
    	end => subtasks
		
	nabl-resolve-all-defs-subtasks-one(|partition, ns, prop*, range):
		uri -> filtered
		with
			def-task := <new-task(|partition)> ResolveAllDefs(uri, ns)
	  ; filtered  := <nabl-use-propconstraint(|partition)> (def-task, prop*)
