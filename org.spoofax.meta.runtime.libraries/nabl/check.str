module nabl/check

imports
	
	nabl/resolve
	nabl/collect
	nabl/query
	nabl/tasks
	nabl/entries
	nabl/interface
	nabl/uri
	nabl/utils
	task/core
	task/messages
	task/tasks
	
rules // Error checking tasks
	
	nabl-unresolved-task(|partition, task):
		name -> name
		where
			not(nabl-check-disable-unresolved)
		with
			<nabl-fix-name; task-create-error-on-failure(|partition, task, "Unresolved reference")> name
			
	nabl-duplicate-task(|ctx, unique):
		name -> name
		where
			uri := <nabl-uri> name;
			ns	:= <nabl-uri-namespace> uri;
			not(<nabl-check-disable-duplicate(|uri, ns)> name)
		with
			if Unique() := unique then
				uri'		:= <nabl-uri-parent> uri;
				resolve := <nabl-create-resolvedefs(|ctx, ns, name, [])> uri';
				<task-create-error-on-multiple(|ctx, resolve, "Duplicate definition")> name
			end
			
	// TODO: check needs to be converted into a task.
	nabl-hiding-task(|ctx):
		name -> name
		where
			uri := <nabl-uri> name;
			ns	:= <nabl-uri-namespace> uri;
			not(<nabl-check-disable-hiding(|uri, ns)> name)
		where
			if inverse-alias* := <nabl-get-all-inverse-aliasses> uri then
				uri* := <map(nabl-uri-parent; nabl-uri-parent)> inverse-alias*
			else
				uri* := <nabl-uri-parent; nabl-uri-parent; ![<id>]> uri
			end;
			<mapconcat(![<try(nabl-uri-strip-barriers)>|<nabl-uri-parents(|ns)>])> uri*;
			nabl-insert-import-tasks(|ctx, ns);
      nabl-resolve-task(|ctx, ns, <nabl-fix-name> name, []) => task;
      <task-create-error-on-success(|ctx, task, "Declaration hides previous definition")> name
  
	nabl-constraint(|partition) = 
		nabl-hiding-task(|partition)

rules // Legacy
 
	nabl-is-unresolved =
		?node;
		has-annos;
		get-annos;
		where(nabl-has-reference);
		not(nabl-collect-one-resolved-def)
	
	nabl-get-ambiguities =
		nabl-collect-all-resolved-defs;
		mapconcat(nabl-get-all-aliases);
		filter(nabl-uri; nabl-uri-parent);
		make-set;
		where(<gt> (<length>, 1))
	
	nabl-get-duplicate-definitions =
		has-annos;
		get-annos;
		collect-one(?Def(_));
		nabl-get-all-definitions;
		make-set;
		where(<gt> (<length>, 1))
