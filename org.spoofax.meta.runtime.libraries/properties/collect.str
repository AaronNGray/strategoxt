module properties/collect

imports 
	
	properties/entries
	properties/tasks
	properties/interface
	properties/query
  task/core
  task/tasks
  nabl/collect
  nabl/uri
  nabl/tasks
  nabl/utils
  editor/origins
  editor/annotations
  types/collect
  
signature
  
  sorts
  
    Property
    
  constructors
    
    Prop : Property * Value * List(Dependency) -> Prop

rules // generic analysis of properties
  
  // call back to generic analysis
  nabl-store-props(|partition, prop*):
  	name -> name
  	where
  	  uri := <nabl-collect-def; nabl-uri> name
	  ; <map(nabl-store-prop(|partition, uri, name))> prop*
	
	nabl-store-prop(|partition, prop):
		name -> name
		where
      uri := <nabl-collect-def; nabl-uri> name
    ; <nabl-store-prop(|partition, uri, name)> prop
      
  nabl-store-prop(|partition, uri, name):
    Prop(kind, prop, dep*) -> <new-prop(|partition, uri, kind, result)> name
    where
      result := <new-task(|partition, <dependent-tasks> dep*)> Id(prop)
      
rules
        
  // generic collection of property tasks
  nabl-annotate-properties(|lang, partition, uri*) =
    where(
      iset := <new-iset>
    ; try(nabl-custom-properties(\p* -> <iset-addlist(|p*); fail> iset\))
    ; kind* := [Type()|<iset-elements> iset]
    )
  ; !(kind*, <remove-property-annotations(|kind*)>)
  ; foldl(nabl-annotate-property(|lang, partition, uri*) <+ Snd)
  ; where(try(nabl-constraint(|lang, partition, uri*)))
  
  nabl-annotate-property(|lang, partition, uri*):
    (kind, term{a*}) -> term{(kind, prop), a*}
    where
      not(<get-property-task(|kind)> term)
    ; prop := <create-property-task(|partition, kind)> term
      
strategies
  
  nabl-prop-calc(|partition, dep*):
  	term -> <new-task(|partition, all-dep*)> Id(<id>)
  	with 
    	all-dep* := <merge-dependencies(|dep*)> term
  
  nabl-prop-list(|partition, dep*):
  	term -> <new-task(|partition, all-dep*)> Combine(<id>)
    with
    	all-dep* := <merge-dependencies(|dep*)> term
    
  nabl-prop-lookup(|kind, partition, dep*):
  	term -> result
  	with
      result := <get-annos; fetch-elem(?(kind, <id>))> term
      <+ 
      all-dep* := <merge-dependencies(|dep*)> term
		; result   := <new-task(|partition, all-dep*); prop-create-lookup(|partition, kind)> CollectDefs(<id>)
		  // TODO: factory for CollectDefs
  
  nabl-prop-match(|kind, partition, relation, expected):
  	actual -> <task-create-choice(|partition)> check*
  	with 
		  expected* := <try-make-list> expected
		; check*    := <map(prop-create-check(|partition, kind, relation, actual))> expected*

rules
  
  get-or-create-property-task(|ctx, kind) = 
     get-property-task(|kind)
  <+ map(create-property-task(|ctx, kind))
  <+ create-property-task(|ctx, kind)
  
  must-get-or-create-property-task(|ctx, kind) =
     get-or-create-property-task(|ctx, kind)
  <+ !(kind, <id>)
   ; fatal-err(|$[Missing rule to create task for ])
   ; fail
     
  create-property-task(|ctx, kind):
    r@Result(_) -> <new-task(|ctx)> PropExtract(kind, r)
    
  create-property-task(|ctx, kind) :
    term -> <nabl-prop-calc(|ctx, type*)> type*
    where 
    	type* := <map(get-or-create-property-task(|ctx, kind))> term
    
rules
  
  remove-property-annotations(|kind*) =
    !(kind*, <id>); foldl(remove-property-annotation) 
    
  remove-property-annotation:
    (kind, term) -> <remove-annotations(?(kind, _))> term
