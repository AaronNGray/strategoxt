module properties/collect

imports 
	
  task/-
  properties/-
  nabl/-
  editor/origins

strategies
  
  collect-property-tasks(|partition) =
    !([Type()|<custom-properties <+ ![]>], <id>)
  ; foldl(annotate-property-task(|partition) <+ Snd)
  ; where(nabl-constraint(|partition))
  
  annotate-property-task(|partition):
    (kind, term{a*}) -> term{(kind, prop), a*}
    where
      not(<get-property-task(|kind)> term)
    where
      prop := <new-property-task(|partition)> 
     
  get-property-task(|kind) = 
    get-annos
  ; fetch-elem(?(kind, task))
  ; !task
 
  property-of(|kind) = get-property-task(|kind); insert-results
    
strategies
  
  prop-calc(|partition, dep*) = 
    where(all-dep* := <union> (<dependent-tasks> dep*, <dependent-tasks>))
  ; <new-task(|partition, all-dep*)> PropCalc(<id>)
    
  prop-lookup(cont|kind, partition, dep*) = 
    where(all-dep* := <union> (<dependent-tasks> dep*, <dependent-tasks>))
  ; <new-task(|partition, all-dep*)> PropLookup(kind, <id>) 
  ; where(try(cont))
  
  prop-match(cont|kind, partition, dep*, relation, expected) = 
    ?actual
  ; expected* := <try-make-list> expected
  ; check*    := <map(<new-task(|partition)> PropCheck(kind, relation, actual, <id>))> expected*
  ; <new-task(|partition, <dependent-tasks> [dep*, check*])> Choice(check*)
  ; where(try(cont))
