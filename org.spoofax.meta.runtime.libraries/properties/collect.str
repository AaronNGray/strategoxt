module properties/collect

imports 
	
  task/-
  properties/-
  nabl/-
  editor/origins
  types/collect
  
signature
  
  sorts
  
    Property
    
  constructors
    
    Prop : Property * Value * List(Dependency) -> Prop

rules // generic analysis of properties
  
  // call back to generic analysis
  nabl-props(|partition, prop*) =
    where (
  	  ?name
  	; nabl-collect-def; nabl-uri => uri
	  ; <map(nabl-add-prop(|partition, uri, name))> prop*
	  )
	    
  nabl-add-prop(|partition, uri, name):
    Prop(kind, result, dep*) -> <new-prop(|partition, uri, kind, result)> name

  // generic collection of property tasks
  nabl-annotate-properties(|lang, partition, uri*) =
    where(
      iset := <new-iset>
    ; try(nabl-custom-properties(\p* -> <iset-addlist(|p*); fail> iset\))
    ; kind* := [Type()|<iset-elements> iset]
    )
  ; !(kind*, <remove-property-annotations(|kind*)>)
  ; foldl(nabl-annotate-property(|lang, partition, uri*) <+ Snd)
  ; where(try(nabl-constraint(|partition)))
     

  nabl-annotate-property(|lang, partition, uri*):
    (kind, term{a*}) -> term{(kind, prop), a*}
    where
      not(<nabl-get-property-task(|kind)> term)
    ; prop := <nabl-new-property(|lang, partition, uri*)>  
      
strategies
  
  nabl-prop-calc(|partition, dep*) = 
    where(all-dep* := <union> (<dependent-tasks> dep*, <dependent-tasks>))
  ; <new-task(|partition, all-dep*)> Id(<id>)
  
  nabl-prop-list(|partition, dep*) = 
    where(all-dep* := <union> (<dependent-tasks> dep*, <dependent-tasks>))
  ; <new-task(|partition, all-dep*)> Combine(<id>)
    
  nabl-prop-lookup(|kind, partition, dep*) = 
     get-annos
   ; fetch-elem(?(kind, <id>))
  <+ where(all-dep* := <union> (<dependent-tasks> dep*, <dependent-tasks>))
   ; <new-task(|partition, all-dep*)> CollectDefs(<id>)
   ; <new-task(|partition)> PropLookup(kind, <id>) 
  
  nabl-prop-match(|kind, partition, relation, expected) = 
    ?actual
  ; expected* := <try-make-list> expected
  ; check*    := <map(<new-task(|partition)> PropCheck(kind, relation, actual, <id>))> expected*
  ; <new-task(|partition, <dependent-tasks> check*)> Choice(check*)
  
  nabl-prop-constraints(|partition, resolve) =
    <new-task(|partition, [resolve | <map(nabl-prop-constraint)>])> Id(resolve)
      
  nabl-prop-constraint(|partition, resolve):
    Prop(kind, expected, dep*) -> constr
    where
      actual := <new-task(|partition)> PropLookup(kind, resolve) 
    ; dep'*  := <dependent-tasks> [expected, dep*]
    ; Result(constr) := <new-task(|partition, [actual, dep'*])> PropCheck(kind, Eq(), actual, expected)
    
rules
  
  remove-property-annotations(|kind*) =
    !(kind*, <id>); foldl(remove-property-annotation) 
    
  remove-property-annotation:
    (kind, term) -> <remove-annotations(?(kind, _))> term
