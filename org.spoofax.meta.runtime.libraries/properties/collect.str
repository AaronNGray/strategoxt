module properties/collect

imports 
	
  task/-
  properties/-
  nabl/-
  editor/origins
  types/collect
  
signature
  
  sorts
  
    Property
    
  constructors
    
    Prop : Property * Value * List(Dependency) -> Prop
   
rules // generic analysis of properties
  
  // call back to generic analysis
  nabl-props(|partition, prop*) =
    where (
  	  ?name
  	; nabl-collect-def; nabl-uri => uri
	  ; <map(nabl-add-prop(|partition, uri, name))> prop*
	  )
	    
  nabl-add-prop(|partition, uri, name):
    Prop(kind, result, dep*) -> <new-prop(|partition, uri, kind, result)> name

  // generic collection of property tasks
  nabl-annotate-properties(|partition) =
    !([Type()|<nabl-custom-properties <+ ![]>], <id>)
  ; foldl(nabl-annotate-property(|partition) <+ Snd)
  ; where(try(nabl-constraint(|partition)))
  
  nabl-annotate-property(|partition):
    (kind, term{a*}) -> term{(kind, prop), a*}
    where
      not(<nabl-get-property-task(|kind)> term)
    ; prop := <nabl-new-property(|partition)> 
          
strategies
  
  nabl-prop-calc(|partition, dep*) = 
    where(all-dep* := <union> (<dependent-tasks> dep*, <dependent-tasks>))
  ; <new-task(|partition, all-dep*)> Id(<id>)
  
  nabl-prop-list(|partition, dep*) = 
    where(all-dep* := <union> (<dependent-tasks> dep*, <dependent-tasks>))
  ; <new-task(|partition, all-dep*)> Concat(<id>)
    
  nabl-prop-lookup(|kind, partition, dep*) = 
     get-annos
   ; fetch-elem(?(kind, <id>))
  <+ where(all-dep* := <union> (<dependent-tasks> dep*, <dependent-tasks>))
   ; <new-task(|partition, all-dep*)> PropLookup(kind, <id>) 
  
  nabl-prop-match(|kind, partition, relation, expected) = 
    ?actual
  ; expected* := <try-make-list> expected
  ; check*    := <map(<new-task(|partition)> PropCheck(kind, relation, actual, <id>))> expected*
  ; <new-task(|partition, <dependent-tasks> check*)> Choice(check*)
  