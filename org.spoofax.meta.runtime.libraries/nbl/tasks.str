module nbl/tasks

imports 
  
  task/core
  task/tasks
  nbl/lookup
  nbl/collect
  nbl/query
  nbl/interface
  nbl/uri
  nbl/utils
  nbl/entries
  
signature
  
  constructors
    
    ResolveDefs            : Scope * Namespace * Name                  -> Instruction
    DisambiguateDefs       : List(Def) * List(Prop) * Namespace * Name -> Instruction
    ResolveNamedImports    : Scope * Namespace * Name                  -> Instruction
    ResolveWildcardImports : Scope * Namespace                         -> Instruction
    ImportCalc             : URI                                       -> Instruction
    ImportClosure          : URI                                       -> Instruction
    PropConstraint         : Kind * Expected * Result                  -> Instruction
        
    ResolveAllDefs         : Scope * Namespace                  -> Instruction
        
rules // Resolve
  
  // Looks up defintions in scopes with namespace and name.
  perform-task(|nr):
  	ResolveDefs(scope, ns, name) -> def*
  	where
  		uri   := <nabl-uri> scope;
  		name' := <try-remove-list; strip-annos> name; // TODO: can this be a list?
  		<nabl-add-read-extend(|nr, ns, name')> uri;
  		def*  := <nabl-lookup(|ns, name')> uri;
  		not(?[])

	// Calls a user-defined disambiguation filter on definitions with relevant information.
	perform-task(|nr):
		DisambiguateDefs(def*, prop*, namespace, name) -> result
		where
			if <Tl> def* then
				<try(nabl-disambiguate(|prop*, namespace, name))> def*
			else
				!def*
			end => result

	task-is-combinator = ?DisambiguateDefs(_, _, _, _)

	// Looks up named imports, active in scopes with namespace and name..
	perform-task(|nr):
		ResolveNamedImports(scope, ns, name) -> result
		where
			uri     := <nabl-uri> scope;
			<nabl-add-read(|nr)> uri;
			name'   := <try-remove-list; strip-annos> name; // TODO: can this be a list?
			import* := <nabl-lookup-named-import(|ns, name')> uri;
      switch id
      	case ?[]                            : fail
      	case task-collect-dependencies => d : !d
      	otherwise                           : id
      end => result
	
	// Looks up wildcard imports for a namespace active in scopes.
	perform-task(|nr):
		ResolveWildcardImports(scope, ns) -> result
		where
			uri         := <nabl-uri> scope;
			import-uri* := <resolve-one-wildcard-import(|nr, ns)> uri;
      switch id
      	case ?[]                            : fail
      	case task-collect-dependencies => d : !d
      	otherwise                           : id
      end => result
			
	resolve-one-wildcard-import(|nr, ns):
		uri -> result
		with
			<nabl-add-read(|nr)> uri;
			if task-exists(|ImportClosure(uri)) then
				import-closure-id := <task-instruction-id> ImportClosure(uri);
				switch id
					case task-has-failed                                  : <task-add-dependency-nocycle(|nr)> import-closure-id; ![]
					case task-get-result; Hd => h                         : <task-add-dependency-nocycle(|nr)> import-closure-id; <hashtable-get(|ns) <+ ![]> h
					case not(task-becomes-cyclic(|nr, import-closure-id)) : ![<task-create-dependency> import-closure-id]
					otherwise                                             : ![]
				end => result
			else
				result := []
			end

rules // Visibility
	
  // Looks up defintions in scopes with namespace and name.
  perform-task(|nr):
  	ResolveAllDefs(scope, ns) -> def*
  	where
  		uri  := <nabl-uri> scope;
  		def* := <nabl-lookup-all(|ns)> uri;
  		not(?[])

	nabl-resolve-all-defs-subtasks(|partition, ns, prop*, range):
		uri -> concatted
		with
			task := <nabl-resolve-all-defs-subtasks-one(|partition, ns, prop*, range)> uri;
      switch !range
      	case One(): ![]
      	case All(): <nabl-uri-parent < nabl-resolve-all-defs-subtasks(|partition, ns, prop*, range) + ![]> uri
    	end => subtask*;
    	concatted := <new-task(|partition)> Concat([task|subtask*])
		
	nabl-resolve-all-defs-subtasks-one(|partition, ns, prop*, range):
		uri -> filtered
		with
			def-task := <new-task(|partition)> ResolveAllDefs(<nabl-use-subtask-uri(|partition)> uri, ns);
			if ExternalDef(x) := <nabl-uri-path; Hd> uri then
        ext-uri      := <nabl-uri-language; nabl-base-uri; nabl-extend-uri(|Anonymous(x))> uri;
        ext-def-task := <new-task(|partition)> ResolveAllDefs(<nabl-use-subtask-uri(|partition)> ext-uri, ns);
        task*        := [ext-def-task, def-task]
      else
      	task* := [def-task]
      end;
      concatted := <new-task(|partition)> Concat(task*);
      filtered  := <nabl-use-propconstraint(|partition)> (concatted, prop*)

rules // Import calculation
	
	// Import calculation.
	perform-task(|nr):
		ImportCalc(uri) -> result
		where
			<nabl-add-read(|nr)> uri;
			import-ns-use*        := <nabl-get-all-properties(|Import())> uri;
			(imported-uri*, uri*) := <partition(resolve-transitive-import, resolve-import)> import-ns-use*;
  		switch id
        case d := <task-collect-dependencies> : !d
        otherwise                             : id
			end => result

	resolve-transitive-import: (Imported(ns), use) -> (ns, <resolve-import-use> use)
	resolve-import: (ns, use) -> (ns, <resolve-import-use> use)
	resolve-import-use = task-get-solved; filter(nabl-uri) <+ task-create-dependencies
	
	// Import transitive closure calculation.
	perform-task(|nr):
		ImportClosure(uri) -> result
		with
			<nabl-add-read(|nr)> uri;
			import-calc-id        := <task-instruction-id> ImportCalc(uri);
			(imported-uri*, uri*) := <task-get-result; Hd> import-calc-id; // Result for this task must exit, as a dependency is expressed on it during collect.
			hashtable             := <new-hashtable>;
			<map(import-to-hash-table(|hashtable))> uri*;
			d* := <collect-all(?URI(_, _)); mapconcat(import-closure-transitive(|nr, hashtable))> imported-uri*;
			switch id
				case task-collect-dependencies => d : !d
				otherwise                           : !hashtable
			end => result
			
	import-to-hash-table(|hashtable):
		(ns, import-uri*) -> <hash-multimap-putlist(|ns, import-uri*)> hashtable
		
	import-closure-transitive(|nr, hashtable):
		uri	-> result
		with
			<nabl-add-read(|nr)> uri;
			if task-exists(|ImportClosure(uri)) then
				import-closure-id := <task-instruction-id> ImportClosure(uri);
				switch id
					case task-has-failed                                  : <task-add-dependency-nocycle(|nr)> import-closure-id; ![]
					case task-get-result; Hd => h                         : <task-add-dependency-nocycle(|nr)> import-closure-id; <hash-multimap-copy(|h)> hashtable; ![]
					case not(task-becomes-cyclic(|nr, import-closure-id)) : ![<id>]
					otherwise                                             : ![]
				end => result
			else
				result := []
			end

rules // Property constraint
	
	perform-task(|nr):
		PropConstraint(kind, expected, definition) -> result
		where
    	uri    := <nabl-uri> definition;
      value  := <nabl-get-property(|kind)> uri;
      value' := <insert-results-or-create-dependency> value;
      switch id
      	case task-collect-dependencies => d : !d
      	otherwise                           : (<nabl-property-eq(|kind) <+ eq> (expected, value'); !definition) <+ 
                                              (<nabl-property-eq(|kind) <+ eq> (expected, <try-remove-list> value'); !definition)
      end => result

rules // Utility
	
	nabl-add-read(|nr) = try(nabl-replace-uri-qualifier(|())); task-add-read(|nr)
	nabl-add-read-extend(|nr, ns, name) = nabl-extend-uri(|ns, name, ()); task-add-read(|nr)
