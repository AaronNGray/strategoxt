module nbl/tasks

imports 
  
  task/core
  nbl/lookup
  nbl/collect
  nbl/resolve
  nbl/query
  nbl/incremental
  nbl/interface
  nbl/uri
  nbl/utils
  nbl/entries
  
signature
  
  constructors
    
    Resolve        : Scope * Namespace * Name    -> Instruction
    ResolveImport  : Scope * Namespace * Name    -> Instruction
    PropConstraint : List(Prop) * List(Result)   -> Instruction
    PropCalc       : Property * Term             -> Instruction
        
rules // Resolve
  
  perform-task(|nr):
  	Resolve(scope*@<with(is-list|"Expected a list of scopes.")>, ns, name) -> result
  	where
  		uri* := <filter(nabl-uri)> scope*;
  		def* := <nabl-lookup(|ns, name)> uri*;
  		<map(nabl-extend-uri(|ns, name, ()); task-add-read(|nr))> uri*;
  		switch !def*
        case ?[]:
        	fail
        otherwise: 
        	!def*
			end => result

	perform-task(|nr):
		ResolveImport(scope*@<with(is-list|"Expected a list of scopes.")>, ns, name) -> result
		where
			uri* := <filter(nabl-uri)> scope*;
			import* := <nabl-lookup-import(|ns, name)> uri*;
			<map(task-add-read(|nr))> uri*;
      if <task-has-dependencies> import* then
      	result := <task-collect-dependencies> import*
      else
	      def* := <nabl-lookup(|ns, name)> import*;
	      <map(nabl-uri; nabl-extend-uri(|ns, name, ()); task-add-read(|nr))> import*;
	      
	      /* TODO: reads
	      import-uri-read* := <nabl-new-reads(|nr)> uri;
	      imported-read*   := <mapconcat(nabl-uri; nabl-extend-uri(|ns, name, ()); nabl-new-reads(|nr))> import*; // TODO: may store too broad Reads.
	      import-read*     := <mapconcat(nabl-new-reads(|nr))> import*;
	      */
	      
	  		switch !def*
	        case ?[]:
	        	fail
	        otherwise:
	        	!def*
				end => result
      end
	  
  perform-task(|nr):
  	PropConstraint(prop*, res*) -> result
  	where
  		filtered := <concat; filter(nabl-resolve-constraint(|prop*))> res*;
      switch !filtered
      	case task-collect-dependencies => d: !d
      	otherwise: !filtered
      end => result
  		
  nabl-resolve-constraint(|prop*):
    entry -> entry'
    where
      filtered := <filter(nabl-resolve-constraint-one(|entry))> prop*;
      switch !filtered
      	case ?[]: fail
      	case task-collect-dependencies => d: !d
      	otherwise: !entry
      end => entry'
      
  nabl-resolve-constraint-one(|entry):
    Prop(type, expectedValue) -> entry'
    where
    	uri   := <nabl-uri> entry;
      value := <nabl-get-property(|type)> uri;
      if value' := <insert-results> value then
        expectedValue' := <insert-results> expectedValue;
        <eq> (expectedValue', value');
        entry' := entry
      else
        entry' := <task-create-dependencies> value
      end

  perform-task(|nr): 
  	PropCalc(prop, term) -> result'
  	where
  		result := <calc-property> (prop, term);
  		switch !result
  			case task-collect-dependencies => d : !d
      	case not(is-list)                   : ![result]
      	otherwise                           : !result
			end => result'
