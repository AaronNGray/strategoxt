module nbl/tasks

imports 
  
  task/core
  nbl/lookup
  nbl/collect
  nbl/resolve
  nbl/query
  nbl/incremental
  nbl/interface
  nbl/uri
  nbl/utils
  nbl/entries
  
signature
  
  constructors
    
    Resolve        : Scope * Namespace * Name  -> Instruction
    ResolveImport  : Scope * Namespace * Name  -> Instruction
    PropConstraint : List(Prop) * List(Result) -> Instruction
    Choice         : List(Result)              -> Instruction
    PropCalc       : Property * Term           -> Instruction
    Match          : ID * List(Term) * Term    -> Instruction
        
rules // Resolve
  
  perform-task(|nr):
  	Resolve(scope, ns, name) -> result
  	with
  		def* := <nabl-lookup(|ns, name)> scope;
  		switch !def*
        case ?[]: 
        	uri := <nabl-extend-uri(|ns, name, ())> scope; 
        	!Fail([uri], <nabl-new-reads(|nr)> uri)
        otherwise: 
        	!Done(def*, <mapconcat(nabl-uri; nabl-new-reads(|nr))> def*)
  		end => result

	perform-task(|nr):
		ResolveImport(scope, ns, name) -> result
		with
			<with(uri := <nabl-uri> scope | "Could not extract URI from: ")> scope;
			language       := <nabl-uri-language> uri;
      namedImport*   := <nabl-get-import-uris-named(|language, ns, name)> uri;
      unnamedImport* := <nabl-get-import-uris-unnamed(|language, ns)> uri;
      if <nabl-has-dependency> namedImport* <+ <nabl-has-dependency> unnamedImport* then
      	result := <nabl-collect-dependency> (namedImport*, unnamedImport*)
      else
	      namedDef*        := <mapconcat(nabl-lookup(|ns, name))> namedImport*;
	      unnamedDef*      := <mapconcat(nabl-lookup(|ns, name))> unnamedImport*;
	      def*             := [namedDef*, unnamedDef*];
	      import*          := <debug(!"Imports: ")> [namedImport*, unnamedImport*];
	      
	      import-uri-read* := <nabl-new-reads(|nr)> uri;
	      imported-read*   := <mapconcat(nabl-uri; nabl-extend-uri(|ns, name, ()); nabl-new-reads(|nr))> import*; // TODO: may store too broad Reads.
	      import-read*     := <mapconcat(nabl-new-reads(|nr))> import*;
	      result           := Done(def*, [imported-read*, import-read*])
      end
  
  perform-task(|nr):
  	PropConstraint(prop*, res*) -> result
  	with
  		filtered := <remove-fail-and-empty; concat; filter(nabl-resolve-constraint(|prop*))> res*;
      switch !filtered
      	case nabl-collect-dependency => d: !d
      	otherwise: !Done(filtered)
      end => result
  		
  nabl-resolve-constraint(|prop*):
    entry -> entry'
    where
      filtered := <filter(nabl-resolve-constraint-one(|entry))> prop*;
      switch !filtered
      	case ?[]: fail
      	case nabl-collect-dependency => d: !d
      	otherwise: !entry
      end => entry'
      
  nabl-resolve-constraint-one(|entry):
    Prop(type, expectedValue) -> entry'
    where
    	uri := <nabl-uri> entry;
      value := <nabl-get-property(|type)> uri;
      if value' := <nabl-resolve> value then
        expectedValue'  := <nabl-resolve> expectedValue;
        <eq> (expectedValue', value');
        entry' := entry
      else
        entry' := <nabl-create-dependency> value
      end
		
	perform-task(|nr):
 		Choice(choices) -> result
		with
			result := Done(<remove-fail-and-empty; ?[_|_]; concat> choices) <+
			result := Fail(<filter(?Fail(<id>)); concat> choices)
			
	remove-fail-and-empty =
		remove-all(?Fail(_) <+ ?[])

rules // Property calculation
            
  perform-task(|nr): PropCalc(prop, term) -> Done(<calc-property> (prop, term))
  
rules // Match
  
  perform-task(|nr): Match(key, bound, term) -> Done(<nabl-match> (key, term, bound))
    
rules // Utility
  
  nabl-result-number:
    Result(num) -> num

rules // Task dependency utilities
	
  nabl-create-dependency =
  	collect-all(?Result(<id>));
  	!Dependency(<id>)
  	
	nabl-has-dependency =
		fetch(?Dependency(_))
		
	nabl-collect-dependency =
		collect-all(?Dependency(<id>));
		concat;
		where(Hd);
		!Dependency(<id>)

rules // Projections
  
  /** @internal */
  nabl-uri-impl:
    Task(uri, _, _, _) -> uri
  
  /** @internal */  
  nabl-uri-impl:
    Resolve(uri, _, _) -> uri
  
  /** @internal */  
  nabl-uri-impl:
    ResolveImport(uri, _, _) -> uri
  
  /** @internal */
  nabl-uri-impl:
    DoneTask(uri, _) -> uri

  /** @internal */
  nabl-uri-impl:
    FailTask(uri, _) -> uri


  /** @internal */
  nabl-value-impl:
    DoneTask(_, value) -> value

  /** @internal */
  nabl-value-impl:
    FailTask(_, value) -> value
        