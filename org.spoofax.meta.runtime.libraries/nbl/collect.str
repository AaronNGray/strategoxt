module nbl/collect

imports
	
	task/core
	task/tasks
	nbl/tasks
	nbl/entries
	nbl/interface
	nbl/uri
	nbl/utils
	types/interface
	
signature 

	sorts
	
		State DefScope ImplicitDef Use RefScope Range

  constructors // state
  	
  	State : String * Term -> State

	constructors // def

		Current    :            	DefScope
		Subsequent :            	DefScope
		DefScope   : Term      -> DefScope
    Scope      : Namespace -> Scope
    
  constructors // use
      
		UseCandidate  : Namespace * List(Property) * RefScope        -> Use
		UseCandidate  : Namespace * Name * List(Property) * RefScope -> Use
	
		Current     :                                     							RefScope
		Surrounding :                                  	 							  RefScope
		Context     : String * Namespace * List(Property) * RefScope -> RefScope
		
    All : Range
    One : Range
	
	constructors // import
	  
	  Imported : Namespace                   -> Namespace
	  Import   : Language * Namespace        -> Property
	  Import   : Language * Namespace * Name -> Property
  	Type     : Property
  	
  constructors // property
    
    Prop : Property * Value * List(Dependency) -> Prop
    
  constructors // partition
  
  	CollectPartition : Partition
	
strategies // generic traversal
	
	/**
	 * Main strategy to collect all index elements and task* from an AST.
	 */
	nabl-collect(|partition, lang):
	  ast -> ast'''
	  where
	    new-hashtable => unique*;
	    ast'   := <nabl-collect(id|lang, partition, unique*, [])> ast ;
	    ast''  := <alltd(type-task(|partition))> ast';
	    ast''' := <alltd(message-task(|partition))> ast''
	  
	/**
	 * Performs the collection in a topdown traversal. 
	 * At each node, it tries various calls to generated strategies, which call back to generic strategies.
	 */
	nabl-collect(sibling-uris|lang, partition, unique*, uri*) =
		nabl-state-pop(?state*);
    try(nabl-scoping-site);
    (
		   nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
		<+ match(?uri'*|uri*) 
		); // scopes of external definitions, e.g. variables in let expressions
    
		(
			 nabl-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    <+ match(sibling-uris|uri*)
     ; match(?child-uri*|uri'*)
    );
    
		try(nabl-state-site);
    
		preserve-annos(force-origins(id#(nabl-siblings(|lang, partition, unique*, child-uri*)))); // visit children from left to right
    
		try(nabl-use-site(|lang, partition, uri'*, state*));
    try(nabl-import-site(|lang, partition, child-uri*, state*));
    try(nabl-prop-site(|lang, partition, state*, implicit*))
    
	nabl-siblings(|lang, partition, unique*, uri*) = 
		[] + 
		[ nabl-collect(?sibling-uri*|lang, partition, unique*, uri*)
		| nabl-siblings(|lang, partition, unique*, sibling-uri*) ]

rules // generic analysis of state
  
  nabl-state(pattern|state) =
    map(try(nabl-state-annotate(pattern|state)))
      
  nabl-state-annotate(pattern|state) =
    ?pattern; add-annotation(|state)
    
  nabl-state-pop(states'):
  	term{anno*} -> term'
  	where
  		state* := <collect-all(?State(_, _))> anno*;
  		term'  := <remove-annotations(?State(_, _))> term;
  		match(states'|state*)
  		
  nabl-get-state(|name) =
  	fetch-elem(?State(name, _))

rules // generic analysis of scopes
	
	nabl-scope-site(adapted-uris|lang, partition, unique*, uri*) =
	  remove-annotations(?Scope(ns*))
	; where (
	  	uri'* := <extend-scope-uri(nabl-extend-uri-anonymous(|unique*, partition)|lang)> (ns*, uri*)
	  ; match(
	    	adapted-uris
	    | uri'*
      )
	  )
	; add-annotation(|Scope(uri'*))
	  
	nabl-scope(|ns1*) = 
	  remove-annotations(?Scope(ns2*))
	; add-annotation(|Scope(<union> (ns1*, ns2*)))
   
rules // generic analysis of defs
    	
	// call back to generic analysis
	nabl-def(child-uris, sibling-uris|lang, partition, unique*, child-uri*, sibl-uri*, ns, unique, defscope, scoped):
		a@name{anno*} -> name{d,anno*}
		where
			// get URI for namespace of definition site
			current-uri := <lookup-uri(|lang, ns)> child-uri*
		where
			 !defscope
		 // in each case we 
		 // 1. build URI of the definition site
		 // 2. update URIs for children (vertical scope)
		 // 3. update URIs for right siblings (horizontal scope)
		 
		 ; ?Current()
		 // 1st case: definition in current scope

		 // 1. extend current URI with ID segment
		 ; def-uri := <nabl-extend-uri(|unique*, partition, ns, name, unique)> current-uri
		 // 2. extend URIs of scoped namespaces
		 ; match(child-uris|<replace-scope-uri(|def-uri)> (scoped, child-uri*))
	 	 // 3. preserve
		 ; match(sibling-uris|sibl-uri*)
     
		<+ ?[Subsequent()]
	 	 // 2nd case: definition only in subsequent scope

		 // 1. extend current URI with subsequent and ID segment
		 ; subs-uri := <nabl-extend-uri-subsequent(|unique*, partition)> current-uri
		 ; def-uri  := <nabl-extend-uri(|unique*, partition, ns, name, unique)> subs-uri
		 // 2. preserve
	   ; match(child-uris|child-uri*)
		 // 3. extend URI for namespace of definition site with Subsequent segment
		 ; match(sibling-uris|<replace-scope-uri(|subs-uri)> ([ns], sibl-uri*))

	  <+ fetch-elem(?Subsequent())
     // 3rd case: definition in subsequent and external scopes

  	 // 1a. extend base URI with anonymous and ID segment
     ; ano-uri := <nabl-base-uri; nabl-extend-uri-anonymous(|unique*, partition)> lang 
		 ; def-uri := <nabl-extend-uri(|unique*, partition, ns, name, unique)> ano-uri
     // 1b. extend current URI with subsequent and ID segment
     ; subs-uri := <nabl-extend-uri-subsequent(|unique*, partition)> current-uri
     ; alias-uri := <nabl-extend-uri(|unique*, partition, ns, name, unique)> subs-uri
     // 1c. introduce alias from 1b to 1a
     ; <new-alias(|partition, def-uri, alias-uri)> a
     // 2. preserve
     ; match(child-uris|child-uri*)
     // 3. extend URI for namespace of definition site with Subsequent segment
     ; match(sibling-uris|<replace-scope-uri(|subs-uri)> ([ns], sibl-uri*))
    
    <+ 
     // 4th case: definition only in external scopes
     
     // 1. extend base URI with anonymous and ID segment
       ano-uri := <nabl-base-uri; nabl-extend-uri-anonymous(|unique*, partition)> lang 
     ; def-uri := <nabl-extend-uri(|unique*, partition, ns, name, unique)> ano-uri
     // 2. preserve
		 ; match(child-uris|child-uri*)
     // 3. preserve
		 ; match(sibling-uris|sibl-uri*)
		where
		  id
		  // TODO add aliases here for DefScope entries
		  // for each DefScope(term)
		  // 1. get the Scope(_) annotation
		  // 2. lookup the URI for the namespace
		  // 3. extend it with an ID segment
		  // 4. create an alias from the new URI to def-uri
		  
		  // this might later be handled by import-site rules, 
		  // but for now the sketched approach keeps things working
		with
			// add Def entry to the index
			d := <new-def(|partition, def-uri)> a
	
rules // generic analysis of uses
	
	// single candidate
	nabl-use(|lang, partition, uri*, candidate) =
		where (<not(is-list)> candidate);
		nabl-use(|lang, partition, uri*, [candidate])
	
	// list of candidates
	nabl-use(|lang, partition, uri*, candidate*):
		name{anno*} -> name{u, anno*}
		where
			subtask* := <map(nabl-use-candidate(|lang, partition, uri*, <nabl-fix-name> name)); unions> candidate*;
			result   := <new-task(|partition)> Choice(subtask*);
		  u        := <new-use(|partition, result)>

	nabl-use-subtasks(|partition, ns, name, range): 
		uri  -> [subtask1, subtask2, subtask*|subtasks]
		with
			subtask1 := <new-task(|partition)> Resolve(<nabl-use-subtask-uri(|partition)> uri, ns, name);
			subtask2 := <new-task(|partition)> ResolveImport(<nabl-use-subtask-uri(|partition)> uri, ns, name);
			if ExternalDef(x) := <nabl-uri-path; Hd> uri then
        ext-uri  := <nabl-uri-language; nabl-base-uri; nabl-extend-uri(|Anonymous(x))> uri;
        subtask* := [<new-task(|partition)> Resolve(<nabl-use-subtask-uri(|partition)> ext-uri, ns, name)]
      else
      	subtask* := []
      end;
      switch !range
      	case One(): ![]
      	case All(): <nabl-uri-parent < nabl-use-subtasks(|partition, ns, name, range) + ![]> uri
    	end => subtasks
    	
	nabl-use-subtask-uri(|partition) =
		switch id
			case ?URI(_, _) => uri : ![uri]
			case is-list           : <new-task(|partition)> Choice(<id>)
			otherwise              : id
		end 
		  	
	// candidate in current scope
	nabl-use-candidate(|lang, partition, uri*, name):
		UseCandidate(ns, prop*, Current()) -> result
		where
			uri      := <lookup-uri(|lang, ns)> uri*;
			subtask* := <nabl-use-subtasks(|partition, ns, name, All())> uri;
			if not([] := prop*) then
				result := [<new-task(|partition)> PropConstraint(prop*, subtask*)]
			else
				result := subtask*
			end

	// candidate in another scope (result of resolution)	  
	nabl-use-candidate(|lang, partition, uri*, name):
		UseCandidate(ns, prop*, Context(ctx-ns, ctx-name, ctx-prop*, ctx-context)) -> result
		where
			ctx-result := <nabl-use-candidate(|lang, partition, uri*, ctx-name)> UseCandidate(ctx-ns, ctx-prop*, ctx-context);
			subtask*   := <nabl-use-subtasks(|partition, ns, <nabl-fix-name> name, One())> ctx-result;
			if not([] := prop*) then
				result := [<new-task(|partition)> PropConstraint(prop*, subtask*)]
			else
				result := subtask*
			end
    
rules // generic analysis of imports
  
  nabl-import(|lang, partition, uri*, imports):
    name -> name'
    where
    	Use(use) := <nabl-collect-use> name;
      name'    := <foldl(nabl-import-candidate(|lang, partition, uri*, use))> (imports, name)
        
  nabl-import-candidate(|lang, partition, uri*, use):
    (import, name) -> name
    where
      ns  := <nabl-import-namespace> import;
      uri := <lookup-uri(|lang, ns)> uri*;
      new-prop(|partition, uri, import, use)
      
  nabl-import-namespace =
       ?Import(_, Imported(<id>)) 
    <+ ?Import(_, <id>)
    <+ ?Import(_, Imported(<id>), _)
    <+ ?Import(_, <id>, _) 

rules // generic analysis of properties
  
  // call back to generic analysis
	nabl-props(|partition, prop*):
	  name -> name'
	  where
	    Def(uri) := <nabl-collect-def> name;
		  name'    := <foldl(extend-prop(|partition, uri))> (prop*, name)
		
	extend-prop(|partition, uri):
		(Prop(type, result, dep*), name) -> name
		where
		  prop := <new-prop(|partition, uri, type, result)> name
        
rules // name retrieval
  
  nabl-name = is-string
  
  nabl-name-apply(s) = is-string; s
    
  nabl-fix-name = try(fix-completion-name); strip-annos
  
rules // URI retrieval
  
  nabl-collect-def =
    nabl-name;
    get-annos;
    collect-one(?Def(_))
    
  nabl-collect-all-def =
    nabl-name;
    get-annos;
    collect-all(?Def(_))
    
  nabl-collect-use =
    nabl-name;
    get-annos;
    collect-one(?Use(_))
    
  nabl-collect-all-use =
    nabl-name;
    get-annos;
    collect-all(?Use(_))

rules // helpers
	
	replace-scope-uri(|path) = foldl(update-scope-uri(!path|<nabl-uri-language> path))
  extend-scope-uri(s|lang) = foldl(update-scope-uri(s|lang))
  
	update-scope-uri(update|lang):
		(key, uri*) -> result
		where
		  result := <fetch((?key, update))> uri* 
		<+ 
		  result := [(key, <nabl-base-uri; update> lang)|uri*]
			  
	lookup-uri(|lang, ns):
	  uri* -> <<lookup> (ns, uri*) <+ <nabl-base-uri> lang>
