module Dot
imports
  Layout
  QuotedLiterals
exports
  sorts Id Graph Stmt Attr 
        Node-Id Opt-Attrs EdgeRHS SubGraph EdgeOp Num-Con
  lexical syntax
    [0-9]+                 		-> Num-Con
    "-" [0-9]+                 		-> Num-Con
     [A-Za-z\_][A-Za-z0-9\_]* 		-> UnquotedId
    UnquotedId				-> Id
    QuotedLiteral			-> Id
  context-free restrictions
    Num-Con -/- [0-9]
  lexical restrictions
    UnquotedId -/- [A-Za-z0-9\_]
  context-free syntax
    "strict"? "graph" Id "{" Stmt* "}"   -> Graph 	{cons("dot-graph")}

    "strict"? "digraph" Id "{" Stmt* "}" -> Graph 	{cons("dot-digraph")}

    Id "=" Id ";"                      	-> Stmt		{cons("alias")}

    graph "[" { Attr "," }* "]" ";"     -> Stmt    	{cons("graph-attrs")}
    node  "[" { Attr "," }* "]" ";"     -> Stmt		{cons("node-attrs")}
    edge  "[" { Attr "," }* "]" ";"     -> Stmt		{cons("edge-attrs")}

    Id "=" Id                       	-> Attr		{cons("attr-id")}
    Id "=" Num-Con                  	-> Attr		{cons("attr-num-con")}

    Node-Id Attrs? ";"                 	-> Stmt		{cons("node")}

    Id                              	-> Node-Id	{cons("Id")}
    Id ":" (Id | Num-Con)               -> Node-Id	{cons("QualId")}

    "[" { Attr "," }* "]"               -> Attrs	{cons("attrs")}

    (Node-Id | SubGraph) EdgeOp 
       {(Node-Id | SubGraph) EdgeOp}+ 
       Attrs? ";"			-> Stmt		{cons("edge")}

    "subgraph" Id ("{" Stmt* "}")?	-> SubGraph	{cons("sub-graph")}

    "->"                            	-> EdgeOp	{cons("arrow")}
    "--"                            	-> EdgeOp	{cons("line")}

