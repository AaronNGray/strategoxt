module GraphXML2dot
imports
  liblib
  Dot
  GraphXML
  Literal-lib

signature
  constructors
    UrlPrefix : X -> Option
    UrlExt :    X -> Option

strategies

  main =
    io-wrap(GraphXML2dot-options, GraphXML2dot-usage, system-about,
      try(?"\"graphxml_1_1-0\""#([<id>]))
    ; GraphXML2dot
    ; !"\"dot-1\""#([<id>])
    )

  GraphXML2dot-options =
      ArgOption( "-p" + "--url-prefix", \x -> UrlPrefix(x) \, !"-p|--url-prefix <prefix>    generate url's with given prefix" )
    + ArgOption( "-e" + "--url-ext",    \x -> UrlExt(x) \,    !"-e|--url-ext <ext>          give url extension 'ext' (default .html)" )

  GraphXML2dot-usage =
    default-system-usage(
      !["GraphXML2dot -- Converts a GraphXML term to DOT."]
    , !["Input is a GraphXML term (in AST form).\n",
        "Output is a DOT term (in AST form).\n"]
    )

  GraphXML2dot
    = \GraphXML(_,[graph(_,xs)]) -> DotDigraph("GraphXML",[url|ss])
       where 
          option-value(UrlPrefix(?p), !"" => p) ;
          option-value(UrlExt(?e),    !".html" => e);
          <concat-strings;quote>[p, "\\N", e] => url-string;
          ![NodeAttrs([AttrId("URL", url-string), AttrId("color", <quote>"black")])] => url;
          <filter(node2dot<+edge2dot)>xs => ss
      \

  node2dot
    = \node1(as) -> Node(Id(n),Attrs(<concat>[shapes,styles]))
       where !as;oncetd(?name(n))
           ; <filter(attribute2shape)>as => shapes
           ; <filter(attribute2style)>as => styles
      \

  node2dot
    = \node(as, da) -> Node(Id(n),Attrs(<concat>[shapes,styles, labels]))
       where !as;oncetd(?name(n))
           ; <filter(attribute2shape)>as => shapes
           ; <filter(attribute2style)>as => styles
           ; <filter(data2label)>da => labels
      \


  edge2dot
    = \edge1(as) -> Edge(Id(t),[Arrow(Id(s))],[])
       where !as;oncetd(?source(s));oncetd(?target(t))
      \

  edge2dot
    = \edge(as,data) -> Edge(Id(t),[Arrow(Id(s))],[])
       where !as;oncetd(?source(s));oncetd(?target(t))
      \

  attribute2style
    = \class(c) -> AttrId("style","dotted")
       where <de-quote>c => "bottom"
      \
   <+ \class(c) -> AttrId("style","dashed")
       where <de-quote>c => "nondeclared-top"
      \ 
   <+ \class(c) -> AttrId("style","bold")
       where <de-quote>c => "declared-top"
      \ 

  attribute2shape
    = \class(c) -> AttrId("shape","record")
       where <de-quote>c => "declared"
      \ 
  data2label
    = \label(attrs, data) -> AttrId("label", data) 
      \
