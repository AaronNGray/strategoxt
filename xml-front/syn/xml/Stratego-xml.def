definition
module Stratego-Overlays
imports
  Stratego-Terms
  Stratego-Identifiers

exports
  sorts Overlay
  context-free syntax
    Id 			 "=" Term 	-> Overlay {cons("OverlayNoArgs")}
    Id "(" {Id ","}* ")" "=" Term 	-> Overlay {cons("Overlay")}

module Stratego-Strategies
imports
  Stratego-Terms
  Stratego-Constants
  Stratego-Rules
  Stratego-Modules
  Stratego-Signatures

exports
  sorts StrategyDef

  context-free syntax
    Id  		      "=" Strategy -> StrategyDef {cons("SDefNoArgs")}
    Id "(" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("SDef")}
    Id "(" {Typedid ","}* 
       "|" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("SDefT")}

    "external"
    Id "(" {Typedid ","}* 
       "|" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("ExtSDefInl")}

    "external"
    Id "(" {Typedid ","}* 
       "|" {Typedid ","}* ")"		   -> StrategyDef {cons("ExtSDef")}

  sorts Typedid
  context-free syntax
    ID 				  	  -> Typedid {cons("DefaultVarDec")}
    ID ":" Type 			  -> Typedid {cons("VarDec")}

  sorts StrategyParen Strategy SVar StrategyMid StrategyCurly StrategyAngle Mod
  context-free syntax
    "(" Strategy ")"			  -> StrategyParen {cons("ParenStrat")}

    "fail" 				  -> Strategy {cons("Fail")}
    "id" 				  -> Strategy {cons("Id")}

    %% Abstraction

    Id					  -> SVar {cons("SVar")}
    "let" Def* "in" Strategy "end"	  -> Strategy {cons("Let")}
    SVar "(" {Strategy ","}* ")" 	  -> Strategy {cons("Call")}
    SVar "(" {Strategy ","}* 
         "|" {Term ","}* ")" 	          -> Strategy {cons("CallT")}


    %% Match and build

    "?" Term 				  -> Strategy {cons("Match")}
    "!" Term 				  -> Strategy {cons("Build")}
    "{" Strategy "}" 			  -> Strategy {cons("ScopeDefault")}
    "{" {ID ","}* ":" Strategy "}" 	  -> Strategy {cons("Scope")}

     %%"<" Strategy ">" Term 		  -> Strategy {cons("BA")}
     StrategyAngle Term 		  -> Strategy {cons("BA")}
     "<" Strategy ">"			  -> StrategyAngle {bracket} %% {cons("AngleStrat")}


    %% Combinators

    Strategy ";" Strategy 		  -> Strategy {cons("Seq"),right}
    Strategy "<+" Strategy 		  -> Strategy {cons("LChoice"),right}
    Strategy "<++" Strategy 		  -> Strategy {cons("LGChoice"),right}
    Strategy "<" StrategyMid 
             "+" Strategy 		  -> Strategy {cons("GuardedLChoice"),right}
    Strategy 				  -> StrategyMid

    "rec" Id "(" Strategy ")" 		  -> Strategy {cons("Rec")}

    "not"   "(" Strategy ")" 		  -> Strategy {cons("Not")}
    "where" "(" Strategy ")" 		  -> Strategy {cons("Where")}
    "test"  "(" Strategy ")" 		  -> Strategy {cons("Test")}
    "bagof" "(" Strategy ")" 		  -> Strategy {cons("Bagof")}


    %% Primitives

    "prim" "(" String ")" 		  -> Strategy {cons("PrimNoArgs")}
    "prim" "(" String "," {Term ","}* ")" -> Strategy {cons("Prim")}
    "prim" "(" String "," {Strategy ","}* 
                      "|" {Term ","}*")"  -> Strategy {cons("PrimT")}

    %% Traversal

    Int Strategy 			  -> Strategy {cons("Path")}
    "some" "(" Strategy ")" 		  -> Strategy {cons("Some")}
    "one" "(" Strategy ")" 		  -> Strategy {cons("One")}
    "all" "(" Strategy ")" 		  -> Strategy {cons("All")}
    "thread" "(" Strategy ")" 		  -> Strategy {cons("Thread")}

    %% Congruence operators

    String 				  -> Strategy {cons("StrCong")}
    Int 				  -> Strategy {cons("IntCong")}
    Real 				  -> Strategy {cons("RealCong")}
    Char 			 	  -> Strategy {cons("CharCong")}

    String "(" {Strategy ","}* ")" 	  -> Strategy {cons("CongQ")}

    %%"(" {Strategy ","}* ")" 		  -> Strategy {cons("TupleCong"),avoid}

    Strategy StrategyCurly		  -> Strategy {cons("AnnoCong")}
    "{" Strategy "}"		  	  -> StrategyCurly {cons("StrategyCurly")}

    "("  ")" 		  		  -> Strategy {cons("EmptyTupleCong")}
    "(" Strategy  ")" 		          -> Strategy {bracket}
    "(" Strategy "," {Strategy ","}+ ")"  -> Strategy {cons("TupleCong")}

    Mod 	  			  -> Strategy {cons("ModCongNoArgs")}
    Mod "(" {Strategy ","}* ")"	  	  -> Strategy {cons("ModCong")}
    Id "^" Id				  -> Mod {cons("Mod")}
    "[" {Strategy ","}* "]" 		  -> Strategy {cons("ListCongNoTail")}
    "[" {Strategy ","}* "|" Strategy "]"  -> Strategy {cons("ListCong")}

%%    Strategy "#" "(" StrategyInj ")" 	  -> Strategy {cons("ExplodeCong")}
%%    Strategy "#" "(" Strategy ")" 	  -> Strategy {cons("ExplodeCong")}
    Strategy "#" StrategyParen	  	  -> Strategy {cons("ExplodeCong")}

  %% Syntactic sugar sugar

  context-free syntax

    SVar  		  		  -> Strategy {cons("CallNoArgs")}
    "\\" Rule "\\" 			  -> Strategy {cons("LRule")}
    "(" Rule ")" 			  -> Strategy {cons("SRule")}
    Strategy "+" Strategy 		  -> Strategy {cons("Choice"),right} 
    Strategy "+>" Strategy 		  -> Strategy {cons("RChoice"),right}
    Strategy "++" Strategy 		  -> Strategy {cons("GChoice"),right}
    Strategy "++>" Strategy 		  -> Strategy {cons("RGChoice"),right}
    "if" Strategy "then" Strategy "else" Strategy "end" -> Strategy {cons("CondChoice")}
    "switch" Strategy ("case" Strategy ":" Strategy)* "end" -> Strategy {cons("SwitchChoiceNoOtherwise")}
    "switch" Strategy ("case" Strategy ":" Strategy)*
                       "otherwise" ":" Strategy "end" -> Strategy {cons("SwitchChoice")}

    Strategy "=>" Term 		  	  -> Strategy {cons("AM")}

  %% Priorities

  context-free priorities
    { Strategy StrategyCurly		  -> Strategy {cons("AnnoCong")}
      Strategy "#" StrategyParen          -> Strategy {cons("ExplodeCong")}
    }
  > { "!" Term 				  -> Strategy {cons("Build")}
      "?" Term 				  -> Strategy {cons("Match")}
    }
  > StrategyAngle Term 		          -> Strategy {cons("BA")}
  > Strategy "=>" Term 		  	  -> Strategy {cons("AM")}
  > Strategy ";" Strategy 		  -> Strategy {cons("Seq"),right}
  > {right: 
     Strategy "+" Strategy 		  -> Strategy {cons("Choice"),right} 
     Strategy "<+" Strategy 		  -> Strategy {cons("LChoice"),right}
     Strategy "+>" Strategy 		  -> Strategy {cons("RChoice"),right}

     Strategy "++" Strategy 		  -> Strategy {cons("GChoice"),right}
     Strategy "<++" Strategy 		  -> Strategy {cons("LGChoice"),right}
     Strategy "++>" Strategy 		  -> Strategy {cons("RGChoice"),right}

     Strategy "<" StrategyMid 
              "+" Strategy 		  -> Strategy {cons("GuardedLChoice"),right}
    }

module Stratego-DynamicRules
imports
  Stratego-Identifiers
  Stratego-Strategies
  Stratego-Rules

exports
  context-free syntax

    "{|" {DynRuleScopeId ","}* ":" Strategy "|}" -> Strategy {cons("DynRuleScope")}

  sorts DynRuleDef DynRuleId DynRuleScopeId RuleDec
  context-free syntax

    "rules" "(" DynRuleDef* ")" -> Strategy {cons("GenDynRules")}

    Id "+" Term                 -> DynRuleDef {cons("AddScopeLabel")} 
    DynRuleId ":-"  Term        -> DynRuleDef {cons("UndefineDynRule")}
    DynRuleId ":"   Rule        -> DynRuleDef {cons("SetDynRule")}
    DynRuleId ":+"  Rule        -> DynRuleDef {cons("AddDynRule")}
    DynRuleId ":"   Term        -> DynRuleDef {cons("SetDynRuleMatch")}

    RuleDec "." Term            -> DynRuleId {cons("LabeledDynRuleId")}
    RuleDec "+" Term            -> DynRuleId {cons("AddLabelDynRuleId")}
    RuleDec                     -> DynRuleId {cons("DynRuleId")}

    Id "." Term                 -> DynRuleScopeId {cons("LabeledDynRuleScopeId")}
    Id                          -> DynRuleScopeId {cons("DynRuleScopeId")}

  context-free syntax

    Id                          -> RuleDec {cons("RDecNoArgs")}
    Id "(" {Typedid ","}* ")"   -> RuleDec {cons("RDec")}
    Id "(" {Typedid ","}* 
       "|" {Typedid ","}* ")"   -> RuleDec {cons("RDecT")}

  context-free syntax

    "/" {Id ","}* "\\*" Strategy          -> Strategy {cons("DynRuleIntersectFix")}
    "\\" {Id ","}* "/*" Strategy          -> Strategy {cons("DynRuleUnionFix")}
    Strategy "/" {Id ","}* "\\" Strategy  -> Strategy {cons("DynRuleIntersect"),right}
    Strategy "\\" {Id ","}* "/" Strategy  -> Strategy {cons("DynRuleUnion"),right}

  context-free priorities
    StrategyAngle Term 		          -> Strategy {cons("BA")}
  > {"/" {Id ","}* "\\*" Strategy         -> Strategy {cons("DynRuleIntersectFix")}
     "\\" {Id ","}* "/*" Strategy         -> Strategy {cons("DynRuleUnionFix")}
    }
  > Strategy "=>" Term 		  	  -> Strategy {cons("AM")}
  > Strategy "/" {Id ","}* "\\" Strategy  -> Strategy {cons("DynRuleIntersect"),right}
  > Strategy "\\" {Id ","}* "/" Strategy  -> Strategy {cons("DynRuleUnion"),right}
  > Strategy ";" Strategy 		  -> Strategy {cons("Seq"),right}

  context-free syntax %% legacy Dynamic rules

    "override" "rules" "(" RuleDef* ")"		 -> Strategy {cons("OverrideDynamicRules")}
    "extend"   "rules" "(" RuleDef* ")"		 -> Strategy {cons("ExtendDynamicRules")}
    "extend" "override" "rules" "(" RuleDef* ")" -> Strategy {cons("ExtendOverrideDynamicRules")}

module Stratego-Rules
imports Stratego-Strategies
exports

%%  context-free syntax
%%    Id 			      ":" (Rule | Stratrule) -> RuleDef {cons("RDefNoArgs")}
%%    Id "(" {Typedid ","}* ")" ":" (Rule | Stratrule) -> RuleDef {cons("RDef")}

  sorts RuleDef
  context-free syntax
    Id ":" Rule 				-> RuleDef {cons("RDefNoArgs")}
    Id "(" {Typedid ","}* ")" ":" Rule 		-> RuleDef {cons("RDef")}
    Id "(" {Typedid ","}* 
       "|" {Typedid ","}* ")" ":" Rule 		-> RuleDef {cons("RDefT")}

  context-free syntax
    Id "::" StratRule 				-> RuleDef {cons("SRDefNoArgs")}
    Id "(" {Typedid ","}* ")" "::" StratRule 	-> RuleDef {cons("SRDef")}
    Id "(" {Typedid ","}* 
       "|" {Typedid ","}*")" "::" StratRule 	-> RuleDef {cons("SRDefT")}

  sorts Rule
  context-free syntax
    Term "->" Term 		    		-> Rule {cons("RuleNoCond")}
    Term "->" Term "where" Strategy 		-> Rule {cons("Rule")}

  sorts StratRule
  context-free syntax
    Strategy "-->" Strategy 			-> StratRule {cons("StratRuleNoCond")}
    Strategy "-->" Strategy "where" Strategy 	-> StratRule {cons("StratRule")}

module Stratego-Terms
imports
  Stratego-Identifiers
  Stratego-Strategies

exports
  sorts ID LID Var
  context-free syntax
    Id 				-> Var  {cons("Var")}
    LId 			-> LID  {cons("ListVar")}
    LID				-> Var  {cons("Var")}
    Id				-> ID
    LId				-> ID
    ":" Var                     -> Var  {cons("SeqVar")}

  sorts Term
  context-free syntax
    Int 			 -> Term {cons("Int")}
    Real 			 -> Term {cons("Real")}
    String 			 -> Term {cons("Str")}
    Char 			 -> Term {cons("Char")}
    "_" 			 -> Term {cons("Wld")}
    Var 			 -> Term 
    Id "(" {Term ","}* ")" 	 -> Term {cons("Op")}
    String "(" {Term ","}* ")" 	 -> Term {cons("OpQ")}
    Term "#" "(" Term ")" 	 -> Term {cons("Explode")}
    Term "{" {Term ","}* "}"	 -> Term {cons("Anno")}
    Term "{" {Term ","}* "|" Term "}" -> Term {cons("AnnoTail")}

    "<" Strategy ">" Term 	 -> Term {cons("App")}
    StrategyAngle		 -> Term {cons("RootApp")}

    Var "@" Term 		 -> Term {cons("As")}
    "(" {Term ","}* ")" 	 -> Term {cons("Tuple")}
    "[" {Term ","}* "]" 	 -> Term {cons("List")}
    "[" {Term ","}* "|" Term "]" -> Term {cons("ListTail")}
    "_" Term 			 -> Term {cons("BuildDefault")}

    %% Var Context 		 -> Term {cons("Con")}
    %% Var "[" Term "]" "(" Id ")"  -> Term {cons("Con")}

    Var "[" Term "]" 				 -> Term {cons("Con1")}
    Var "[" Term "]" "(" Id ")" 		 -> Term {cons("Con")}
    Var "[" Term "where" Strategy "]"  		 -> Term {cons("Con3")}
    Var "[" Term "where" Strategy "]" "(" Id ")" -> Term {cons("Con4")}

  context-free priorities
    Term "#" "(" Term ")" 	 -> Term {cons("Explode")}
  > Term "{" {Term ","}* "}"	 -> Term {cons("Anno")}
  > Var "@" Term 		 -> Term {cons("As")}

module Stratego-Signatures
imports
  Stratego-Identifiers
  Stratego-Constants

exports

  sorts Sdecl
  context-free syntax
    "sorts" Sort* 		-> Sdecl {cons("Sorts")}
    "constructors" Opdecl* 	-> Sdecl {cons("Constructors")}

  sorts Sort
  context-free syntax
    LCID 			 -> Sort {cons("SortVar")}
    UCID 			 -> Sort {cons("SortNoArgs")}
    Id "(" {Sort ","}* ")" 	 -> Sort {cons("Sort")}
    "[" {Sort ","}* "]"		 -> Sort {cons("SortList")}
    "[" {Sort ","}* "|" Sort "]" -> Sort {cons("SortListTl")}
    "(" {Sort ","}* ")"		 -> Sort {cons("SortTuple")}

  sorts Kind
  context-free syntax
    "*" 			-> Kind {cons("Star")}
    "**" 			-> Kind {cons("StarStar")}

  sorts Opdecl
  context-free syntax
    Id     ":" Type 		-> Opdecl {cons("OpDecl")}
    String ":" Type 		-> Opdecl {cons("OpDeclQ")}
           ":" Type 		-> Opdecl {cons("OpDeclInj")}

  sorts Type
  context-free syntax
    Sort			-> Type {cons("ConstType")}
    {Type "*"}+ "->" Type 	-> Type {cons("FunType")}
    "(" Type ")" 		-> Type {bracket}

module Stratego-Modules
imports
  Stratego-Identifiers
  Stratego-Overlays
  Stratego-Strategies
  Stratego-Rules
  Stratego-Signatures

exports 
  sorts Module
  context-free syntax
    "module" ModName Decl* 	 -> Module {cons("Module")}
    "specification" Decl*	 -> Module {cons("Specification")}

  sorts Decl Def
  context-free syntax
    "imports" ModName* 		-> Decl {cons("Imports")}
    "rules" Def* 		-> Decl {cons("Rules")}
    "strategies" Def* 		-> Decl {cons("Strategies")}
    "signature" Sdecl*  	-> Decl {cons("Signature")}
    "overlays" Overlay* 	-> Decl {cons("Overlays")}

    StrategyDef 		-> Def 
    RuleDef 			-> Def 


module Stratego-Constants
imports Stratego-Identifiers
exports
  sorts Int Real String StrChar Char CharChar
  lexical syntax
    [\-]? [0-9]+ 		-> Int
    [\-]? [0-9]+ [\.] [0-9]+ 	-> Real
    "\"" StrChar* "\"" 		-> String
    ~[\"\\] 			-> StrChar
    [\\] [\"tnr\\] 		-> StrChar
    "\'" CharChar "\'"		-> Char
    ~[\']			-> CharChar
    [\\] [\'ntr\ ]		-> CharChar
    Char		 	-> Id {reject}

module Stratego-Identifiers
exports
  sorts ModName
  lexical syntax
    [a-zA-Z\'\.\-\_] [a-zA-Z0-9\'\.\-\_]* -> ModName
  lexical restrictions
    ModName -/- [a-zA-Z0-9\'\.\-\_]
  lexical syntax
    "imports" 		-> ModName {reject}
    "overlays" 		-> ModName {reject}
    "rules" 		-> ModName {reject}
    "signature" 	-> ModName {reject}
    "strategies" 	-> ModName {reject}

  sorts Id LId LCID UCID
  lexical syntax
    [a-zA-Z\'\-\_] [a-zA-Z0-9\'\-\_]*     -> Id
    [a-zA-Z\'\-\_] [a-zA-Z0-9\'\-\_]* "*" -> LId

    [a-z] [a-zA-Z0-9\'\-\_]*  -> LCID
    [A-Z] [a-zA-Z0-9\'\-\_]*  -> UCID
  lexical restrictions
    Id   -/- [a-zA-Z0-9\'\-\_\*]
    LId  -/- [a-zA-Z0-9\'\-\_]
    LCID -/- [a-zA-Z0-9\'\-\_]
    UCID -/- [a-zA-Z0-9\'\-\_]

  lexical syntax
    "all" 		-> Id {reject}
    "constructors" 	-> Id {reject}
    "fail" 		-> Id {reject}
    "id" 		-> Id {reject}
    "in" 		-> Id {reject}
    "let" 		-> Id {reject}
    "module" 		-> Id {reject}
    "not" 		-> Id {reject}
    "one" 		-> Id {reject}
    "overlays" 		-> Id {reject}
    "override" 		-> Id {reject}
    "prim" 		-> Id {reject}
    "rules" 		-> Id {reject}
    "script" 		-> Id {reject}
    "signature" 	-> Id {reject}
    "some" 		-> Id {reject}
    "sorts" 		-> Id {reject}
    "strategies" 	-> Id {reject}
    "stratego" 		-> Id {reject}
    "test" 		-> Id {reject}
    "thread" 		-> Id {reject}
    "where" 		-> Id {reject}
  lexical restrictions
    "all" "constructors" "fail" "id" "in" "let" "module" "not" "one"
    "overlays" "override" "prim" "rules" "script" "signature" "some"
    "sorts" "strategies" "stratego" "test" "thread" "where" 
    -/- [a-zA-Z0-9\'\-\_]

module Stratego-Layout
exports
  sorts Ws ShortCom LongCom CommChar1 CommChar2 Asterisk1 Asterisk2
  lexical syntax
    [\t\ \n\r]		 -> Ws

    "//" ~[\n]* ([\n] | Eof) -> ShortCom
    "/*" CommChar1* "*/"  -> LongCom
    "(*" CommChar2* "*)"  -> LongCom

    ~[\*]      -> CommChar1
    ~[\*]      -> CommChar2

    "*"        -> Asterisk1
    "*"        -> Asterisk2
    Asterisk1  -> CommChar1
    Asterisk2  -> CommChar2

  lexical restrictions
    Asterisk1 -/- [\/]
    Asterisk2 -/- [\)]

  sorts VeryLongCom Eof VLCchar Backslash
  lexical syntax
    "\\end{code}" VLCchar* "\\begin{code}" -> VeryLongCom
    "\\begin{code}" 			   -> VeryLongCom
    "\\end{code}" VLCchar* Eof 		   -> VeryLongCom
     					   -> Eof
    "\\literate" VLCchar* "\\begin{code}"  -> VeryLongCom
    ~[\\] 				   -> VLCchar
    Backslash 				   -> VLCchar
    [\\] 				   -> Backslash

  lexical restrictions
    Backslash -/- [b].[e].[g].[i].[n].[\{].[c].[o].[d].[e].[\}]
    Eof -/- ~[]

  lexical syntax
    ShortCom 	-> LAYOUT
    LongCom 	-> LAYOUT
    VeryLongCom -> LAYOUT
    Ws 		-> LAYOUT

  context-free restrictions
    LAYOUT? -/- [\ \t\n\r]

module Stratego
imports
  Stratego-Layout
  Stratego-Identifiers
  Stratego-Constants 
  Stratego-Modules
  Stratego-Signatures
  Stratego-Terms
  Stratego-Rules
  Stratego-DynamicRules
  Stratego-Strategies
  Stratego-Overlays

hiddens
  context-free start-symbols Module

module StrategoRenamed
imports Stratego
          [ RuleDec        => StrategoRuleDec
            DynRuleScopeId => StrategoDynRuleScopeId
            DynRuleId      => StrategoDynRuleId
            DynRuleDef     => StrategoDynRuleDef
            Def            => StrategoDef
            Decl           => StrategoDecl
            Module         => StrategoModule
            Overlay        => StrategoOverlay
            ID             => StrategoID
            LID            => StrategoLID
            Var            => StrategoVar
            Mod            => StrategoMod
            StrategyCurly  => StrategoStrategyCurly
            StrategyMid    => StrategoStrategyMid
            StrategyAngle  => StrategoStrategyAngle
            SVar           => StrategoSVar
            StrategyParen  => StrategoStrategyParen
            Typedid        => StrategoTypedid
            StrategyDef    => StrategoStrategyDef
            Type           => StrategoType
            Opdecl         => StrategoOpdecl
            Kind           => StrategoKind
            Sort           => StrategoSort
            Sdecl          => StrategoSdecl
            StratRule      => StrategoStratRule
            Rule           => StrategoRule
            RuleDef        => StrategoRuleDef
            CharChar       => StrategoCharChar
            Char           => StrategoChar
            StrChar        => StrategoStrChar
            String         => StrategoString
            Real           => StrategoReal
            Int            => StrategoInt
            UCID           => StrategoUCID
            LCID           => StrategoLCID
            LId            => StrategoLId
            Id             => StrategoId
            ModName        => StrategoModName
            Backslash      => StrategoBackslash
            VLCchar        => StrategoVLCchar
            Eof            => StrategoEof
            VeryLongCom    => StrategoVeryLongCom
            Asterisk2      => StrategoAsterisk2
            Asterisk1      => StrategoAsterisk1
            CommChar2      => StrategoCommChar2
            CommChar1      => StrategoCommChar1
            LongCom        => StrategoLongCom
            ShortCom       => StrategoShortCom
            Ws             => StrategoWs
            Term           => StrategoTerm
            Strategy       => StrategoStrategy ]


module xml-attribute
imports xml-names xml-text

exports

  context-free syntax

    QName "=" AttValue -> Attribute {cons("Attribute")}

  syntax

    "\"" DoubleQuotedPart* "\"" -> <AttValue-CF> {cons("DoubleQuoted")}
    "\'" SingleQuotedPart* "\'" -> <AttValue-CF> {cons("SingleQuoted")}

    FooDoubleQuotedText -> DoubleQuotedPart {cons("Literal")}
    FooSingleQuotedText -> SingleQuotedPart {cons("Literal")}

    <DoubleQuotedText-LEX> -> FooDoubleQuotedText
    <SingleQuotedText-LEX> -> FooSingleQuotedText

    <Ref-CF> -> DoubleQuotedPart
    <Ref-CF> -> SingleQuotedPart

  lexical syntax

    ~[\&\<\"]+ -> DoubleQuotedText
    ~[\&\<\']+ -> SingleQuotedText

  lexical restrictions

    DoubleQuotedText -/- ~[\&\<\"]
    SingleQuotedText -/- ~[\&\<\']

module xml-text
exports

  lexical syntax
    [\ \t\n\13] -> WhiteSpaceChar

  syntax

    CharDataPart+ -> CharData {cons("Text")}

    FooCharDataText -> CharDataPart {cons("Literal")}
    <Ref-CF> -> CharDataPart
    "<![CDATA[" <CData-LEX> "]]>" -> CharDataPart {cons("CDATASection")}

    <CharDataText-LEX> -> FooCharDataText

  lexical syntax

    ~[\<\&]+ -> CharDataText

  lexical restrictions

    CharDataText -/- ~[\<\&]

  syntax

    "&#"  <NatConst-LEX> ";" -> <DecCharRef-CF> {cons("DecCharRef")}
    "&#x" <HexConst-LEX> ";" -> <HexCharRef-CF> {cons("HexCharRef")}
    "&"   <NCName-LEX>   ";" -> <EntityRef-CF>  {cons("EntityRef")}

  context-free syntax

    DecCharRef -> CharRef
    HexCharRef -> CharRef
    CharRef    -> Ref
    EntityRef  -> Ref

  lexical syntax

    [0-9]+       -> NatConst
    [0-9a-fA-F]+ -> HexConst

  lexical syntax

    (~[\]] | CloseBracket | TwoCloseBrackets )* -> CData

    "]"  -> CloseBracket
    "]]" -> TwoCloseBrackets

  lexical restrictions

    CloseBracket     -/- [\]]
    TwoCloseBrackets -/- [\>]
    CharDataToken    -/- ~[\<\&\]\ \t\n\13]

module xml-external

exports
  context-free syntax
    "SYSTEM" SystemLit           -> ExternalID {cons("SystemExternalID")}
    "PUBLIC" PublicLit SystemLit -> ExternalID {cons("PublicExternalID")}
    "PUBLIC" PublicLit           -> PublicID   {cons("PublicID")  }

  lexical syntax

    "\"" ~[\"]* "\""     -> SystemLit
    "\'" ~[\']* "\'"     -> SystemLit
    "\"" PubIDChar* "\"" -> PublicLit
    "\'" PubIDChar* "\'" -> PublicLit

    [a-zA-Z0-9] -> PubIDChar
    [\ \n\13\-\'\(\)\+\,\.\/\:\=\?\;\!\*\#\@\$\_\%] -> PubIDChar


module xml-pi
imports xml-names

exports
  context-free syntax
    "<?" PITarget PIChars "?>" -> PI {cons("PI")}

  lexical syntax
    NCName -> PITarget
    [Xx][Mm][Ll] -> PITarget {reject}

    ( ~[\?\>] | ( [\?] ~[\>] ) )* -> PIChars



module xml-prolog
imports xml-whitespace xml-names xml-comments xml-pi xml-external

exports
  context-free syntax

    XMLDecl? Misc* DocTypePrologue? -> Prologue {cons("Prologue")}
    Misc* -> Epilogue {cons("Epilogue")}
    Comment -> Misc {cons("Comment")}
    PI      -> Misc

  context-free syntax

    "<?xml" VersionInfo EncodingDecl? StandaloneDecl? "?>" -> XMLDecl {cons("XMLDecl")}

    "standalone" "=" StandaloneValue -> StandaloneDecl {cons("StandaloneDecl")}
    "version"    "=" VersionValue    -> VersionInfo    {cons("VersionDecl")}
    "encoding"   "=" EncodingValue   -> EncodingDecl   {cons("EncodingDecl")}

    "\"" YesNo "\"" -> StandaloneValue {cons("Standalone")}
    "\'" YesNo "\'" -> StandaloneValue {cons("Standalone")}

    "\"" EncodingName "\"" -> EncodingValue {cons("Encoding")}
    "\'" EncodingName "\'" -> EncodingValue {cons("Encoding")}

    "\"" VersionNum "\"" -> VersionValue {cons("Version")}
    "'"  VersionNum "'"  -> VersionValue {cons("Version")}

  context-free syntax

    DocTypeDecl Misc* -> DocTypePrologue {cons("DocTypePrologue")}

    "<!DOCTYPE" QName ExternalID ">" -> DocTypeDecl {cons("DocTypeDecl")}

  lexical syntax

    [a-zA-Z0-9\_\.\:\-]+ -> VersionNum
    [A-Za-z] [A-Za-z0-9\.\_\-]* -> EncodingName

    "yes" -> YesNo
    "no"  -> YesNo


module xml-document
imports xml-prolog xml-whitespace xml-names xml-comments xml-text xml-attribute

exports
  sorts Document Element Content
  context-free syntax

    Prologue Element Epilogue -> Document {cons("Document")}

    "<" QName Attribute* "/>" -> Element {cons("EmptyElement")}

    Element -> Content
    Comment -> Content {cons("Comment")}
    PI      -> Content
  syntax

    CharData      -> <Content-CF>
    CDataSection  -> <Content-CF>

    "<"
    <LAYOUT?-CF> <QName-CF> <LAYOUT?-CF> <Attribute*-CF> <LAYOUT?-CF>
      ">" <Content-CF>* "</"
    <LAYOUT?-CF> <QName-CF> <LAYOUT?-CF>
    ">"  -> <Element-CF> {cons("Element")}

module xml-names

exports
  context-free syntax
    Qualifier? NCName -> QName     {cons("QName")}
    NCName ":"        -> Qualifier {cons("Prefix")}

  lexical syntax
    [A-Za-z\_] [A-Za-z0-9\.\-\_]* -> NCName

  lexical restrictions
    NCName -/- [A-Za-z0-9\.\-\_]

module xml-comments

exports
  lexical syntax
    "<!--" (~[\-] | Dash)* "-->" -> Comment
    "-" -> Dash

  lexical restrictions

    Dash -/- [\-]

module xml-whitespace

exports
  lexical syntax
    [\ \t\n\13] -> LAYOUT

  context-free restrictions
    LAYOUT? -/- [\ \t\n\13]

module xml-lexical
imports xml-whitespace xml-comments xml-names



module xml
imports xml-lexical xml-document
hiddens
  context-free start-symbols Document Content Attribute

module Stratego-xml
imports xml StrategoRenamed
hiddens
  context-free start-symbols StrategoModule

exports

  %% Term Quotation
  context-free syntax
    "%>" Document "<%" -> StrategoTerm     {cons("ToTerm"), avoid}

    "@>" Attribute  "<@" -> StrategoTerm   {cons("ToTerm"), prefer}
    "@>" Attribute* "<@" -> StrategoTerm   {cons("ToTerm")}

  syntax
    "%>" <Content-CF>  "<%" -> <StrategoTerm-CF> {cons("ToTerm"), prefer}
    "%>" <Content-CF>* "<%" -> <StrategoTerm-CF> {cons("ToTerm")}

    "%>" <Content-CF>* "<%" <LAYOUT?-CF> "::" <LAYOUT?-CF> "*" -> <StrategoTerm-CF> {cons("ToTerm")}

  %% Congruence Quotation
  context-free syntax  
    "%>" Document "<%" -> StrategoStrategy {cons("ToStrategy"), avoid}

  syntax
    "%>" <Content-CF>  "<%" -> <StrategoStrategy-CF> {cons("ToStrategy"), prefer}
    "%>" <Content-CF>* "<%" -> <StrategoStrategy-CF> {cons("ToStrategy")}

  %% Content Anti Quotation
  context-free syntax

    "<%=" StrategoTerm                 "%>" -> Content {cons("FromTerm")}
    "<%=" StrategoTerm "::" "content"  "%>" -> Content {cons("FromTerm")}

    "<%"  StrategoStrategy                 "%>" -> Content {cons("FromApp")}
    "<%"  StrategoStrategy "::" "content"  "%>" -> Content {cons("FromApp")}

  syntax

    "<%=" <LAYOUT?-CF> <StrategoTerm-CF>    <LAYOUT?-CF> "::" <LAYOUT?-CF> "*"        <LAYOUT?-CF> "%>" -> <Content-CF>* {cons("FromTerm")}
    "<%" <LAYOUT?-CF> <StrategoStrategy-CF> <LAYOUT?-CF> "::" <LAYOUT?-CF> "*"        <LAYOUT?-CF> "%>" -> <Content-CF>* {cons("FromApp")}
    "<%" <LAYOUT?-CF> <StrategoStrategy-CF> <LAYOUT?-CF> "::" <LAYOUT?-CF> "content*" <LAYOUT?-CF> "%>" -> <Content-CF>* {cons("FromApp")}

  %% Character Data Anti Quotation
  syntax

    "<%" <LAYOUT?-CF> <StrategoStrategy-CF> <LAYOUT?-CF> "::" <LAYOUT?-CF> "cdata" <LAYOUT?-CF> "%>"
      -> FooCharDataText {cons("FromApp")}

    "<%=" <LAYOUT?-CF> <StrategoTerm-CF> <LAYOUT?-CF> "::" <LAYOUT?-CF> "cdata" <LAYOUT?-CF> "%>"
      -> FooCharDataText {cons("FromTerm")}

  %% Anti quotation for attributes
  context-free syntax

    "<@"  StrategoStrategy          "@>" -> Attribute  {cons("FromApp")}
    "<@"  StrategoStrategy "::" "*" "@>" -> Attribute* {cons("FromApp")}

    "<@="  StrategoTerm          "@>" -> Attribute  {cons("FromTerm")}
    "<@="  StrategoTerm "::" "*" "@>" -> Attribute* {cons("FromTerm")}

  syntax
    %% obsolete
    "<"  <StrategoTerm-CF> -> <Attribute-CF>  {cons("FromTerm")}
    "<*" <StrategoTerm-CF> -> <Attribute*-CF> {cons("FromTerm")}

  %% Attribute Value Anti Quotation
  context-free syntax

    "<@"  StrategoStrategy "@>" -> AttValue   {cons("FromApp")}
    "<@=" StrategoTerm     "@>" -> AttValue   {cons("FromTerm")}

    %% obsolete
    "<%"  StrategoStrategy "%>" -> AttValue   {cons("FromApp")}
    "<%=" StrategoTerm     "%>" -> AttValue   {cons("FromTerm")}

  %% Attribute Character Data Anti Quotation
  syntax

    "<%" <LAYOUT?-CF> <StrategoStrategy-CF> <LAYOUT?-CF> "%>"
      -> FooDoubleQuotedText {cons("FromApp")}

    "<%=" <LAYOUT?-CF> <StrategoTerm-CF> <LAYOUT?-CF> "%>"
      -> FooDoubleQuotedText {cons("FromTerm")}

    "<%" <LAYOUT?-CF> <StrategoStrategy-CF> <LAYOUT?-CF> "::" <LAYOUT?-CF> "cdata" <LAYOUT?-CF> "%>"
      -> FooDoubleQuotedText {cons("FromApp")}

    "<" <StrategoTerm-CF> -> FooDoubleQuotedText {cons("FromTerm")}

  %% Anti quotation for element. This anti quotation is only used if anti quotation
  %% is used for the root element of an document.
  context-free syntax

    "<%" StrategoStrategy "%>" -> Element {cons("FromApp"), avoid}

  %% Name Anti-Quotation
  syntax

    "<"   <StrategoTerm-CF> -> <NCName-CF> {cons("FromTerm")}
    "~n:" <StrategoTerm-CF> -> <NCName-CF> {cons("FromTerm")}

  variables
    "@"    [0-9]*     -> Attribute
    "att"  [0-9]*     -> Attribute
    "@"    [0-9]* "*" -> Attribute*
    "att"  [0-9]* "*" -> Attribute*
    "atts" [0-9]*     -> Attribute*
    "qn"   [0-9]*     -> QName {prefer}