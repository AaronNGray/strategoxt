grammar -> grammar (start , define*)
start   -> start (top)
define  -> define (element) .name (NCName)
element -> element (nameClass, top)

top -> notallowed (E)
top -> pattern

pattern -> empty (E)
pattern -> nonEmptyPattern

nonEmptyPattern ->
    text (E)
  | data (param*, exceptPattern?) .type (String) .datatypeLibrary (String)
  | value (String)
         .type (String)
         .datatypeLibrary (String)
         .ns (String)
  | list (pattern)
  | attribute (nameClass, pattern)
  | ref (E) .name (NCName)

nonEmptyPattern ->
    oneOrMore  (nonEmptyPattern)
  | choice     (pattern nonEmptyPattern)
  | group      (nonEmptyPattern nonEmptyPattern)
  | interleave (nonEmptyPattern nonEmptyPattern)

param -> param (String) .name (NCName)
exceptPattern -> except (pattern)

nameClass ->
    anyName (exceptNameClass?)
  | nsName  (exceptNameClass?) .ns (String)
  | name  (NCName) .ns (String)
  | choice (nameClass, nameClass)

exceptNameClass -> except (nameClass)

