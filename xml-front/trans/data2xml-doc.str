module data2xml-doc
imports
  xml-doc
  xml-info2xml-doc
  xml-front-options
  liblib

strategies

  main-data2xml-doc =
    io-wrap(explicit-mode-option,
      dispatch-explicit-mode(
        implicit-data2xml
      , explicit-data2xml
      , very-explicit-data2xml
      )
    )

strategies

  very-explicit-data2xml =
    explicit-data2xml(
      rec x(
        VeryExplicitExplode-Annotated(x)
      )
    )

  explicit-data2xml =
    explicit-data2xml(
         ExplicitExplode-String
      <+ ExplicitExplode-Int
      <+ ExplicitExplode-List
      <+ ExplicitExplode-Tuple
      <+ Explode-Appl
    )

  implicit-data2xml =
    data2xml(
       Explode-String
    <+ Explode-Int
    <+ Explode-List
    <+ Explode-Tuple
    <+ Explode-Appl
    )

  data2xml =
    implicit-data2xml

  data2xml(s) =
    bottomup(
        try(
            \ None() -> [] \
         <+ ?Some(<id>)
         <+ s
        )
      )
    ; data2xml-finish

  explicit-data2xml(s) =
    bottomup(try(s))
    ; data2xml-finish

  data2xml-finish =
      !%>
        <?xml version="1.0"?>

        <% id %>
      <%

/**
 * Implicit mode
 */
strategies

  Explode-Appl =
    Explode-EmptyAppl <+ Explode-NotEmptyAppl

  Explode-EmptyAppl :
    s#([]){atts*} -> %>< ~n:s <@ <map(Explode-Attr)> atts* :: * @> /><%

  Explode-NotEmptyAppl :
    s#(children){atts*} ->
      %>< ~n:s <@ !atts2 :: * @> ><% <flatten-list> children :: * %></ ~n:s ><%
      where <filter(Explode-Attr)> atts* => atts2

  Explode-Attr :
    (s, v) -> @> ~n:s="<% <string2xml-attr-value> v %>" <@

  Explode-String :
    s -> %><% !s2 :: cdata %><%
      where <is-string; xml-escape> s => s2

  Explode-List :
    xs -> %><% !xs :: * %><% :: *
    where
      <is-list> xs

  Explode-Tuple :
    "" # (xs) -> %><% !xs :: * %><% :: *

  Explode-Int :
    i ->  %><% !s :: cdata %><%
    where
      <is-int> i
      ; <int-to-string> i => s

/**
 * Explicit mode
 */
rules

  ExplicitExplode-List =
    !%><list><% Explode-List :: * %></list><%

  ExplicitExplode-Tuple =
    !%><tuple><% Explode-Tuple :: * %></tuple><%

  ExplicitExplode-Int =
    !%><int><% Explode-Int %></int><%

  ExplicitExplode-String =
    !%><string><% Explode-String %></string><%

/**
 * Very explicit mode
 */
rules

  VeryExplicitExplode-Annotated(x) =
    ?_{anno*}
    ;  ( ExplicitExplode-List
      <+ VeryExplicitExplode-Int
      <+ VeryExplicitExplode-String
      <+ ExplicitExplode-Tuple
      <+ VeryExplicitExplode-Appl(x)
       )
    ; ?Element(n, atts, content, n)
    ; <map(VeryExplicitExplode-Attr(x))> anno* => anno-content
    ; !Element(n, atts, <conc> (anno-content, content), n)

  VeryExplicitExplode-Int :
    i -> %><int><value><% <Explode-Int> i %></value></int><%

  VeryExplicitExplode-String :
    s -> %><string><value><% <Explode-String> s %></value></string><%

  VeryExplicitExplode-Appl(x) :
    s#(children) -> %><appl cons="<% !s %>"><% <flatten-list> children :: * %></appl><%

  VeryExplicitExplode-Attr(x) =
    !%><anno><% bottomup(x) %></anno><%
