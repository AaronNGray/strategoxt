module interpret-tests
imports sunit xtc-lib

strategies

  io-interpret-tests =
    xtc-test-suite(!"XML interpretation",
      exp-tests
    ; exp-inj-tests
    ; html-tests
    ; xhtml-tests
//    ; tuple-tests
    )

  exp-tests =
      test-exp(!"Int",   !"<Int>45</Int>", !Int(45))
    ; test-exp(!"Var",   !"<Var>a</Var>",  !Var("a"))
    ; test-exp(!"Times", !"<Times><Int>3</Int><Int>45</Int></Times>",  !Times(Int(3), Int(45)))

  exp-inj-tests =
      test-exp-inj(!"Var and injected Id", !"<Var>a</Var>",  !Var("a"))
    ; test-exp-inj(!"Var and injected Id", !"<Mul><Var>a</Var><Var>ab</Var></Mul>",  !Mul(Var("a"), Var("ab")))

  html-tests =
      test-html(!"br 1", !"<br/>",      !br())
    ; test-html(!"br 2", !"<br></br>",  !br())
    ; test-html(!"br 3", !"<br> </br>", !br())
    ; test-html(!"a 1",  !"<a>My link</a>", !a("My link"))
    ; test-html(!"a 1",  !"<a href=\"http://www.cs.uu.nl\">My link</a>", !a("My link"){(href(), "http://www.cs.uu.nl")})
    ; test-html(!"a 1",  !"<a href=\"http://www.cs.uu.nl\" title=\"bla\">My link</a>",
                         !a("My link"){(href(), "http://www.cs.uu.nl"), (title(), "bla")})

  xhtml-tests =
      test-xhtml(!"br 1"
      , !"<br xmlns=\"http://www.w3.org/1999/xhtml\"/>"
      , !"\"{http://www.w3.org/1999/xhtml}br\""#([]))
    ; test-xhtml(!"br 2"
      , !"<br xmlns=\"http://www.w3.org/1999/xhtml\"></br>"
      , !"\"{http://www.w3.org/1999/xhtml}br\""#([]))
    ; test-xhtml(!"br 3"
      , !"<br xmlns=\"http://www.w3.org/1999/xhtml\"> </br>"
      , !"\"{http://www.w3.org/1999/xhtml}br\""#([]))
    ; test-xhtml(!"a 1"
      , !"<a xmlns=\"http://www.w3.org/1999/xhtml\">My link</a>"
      , !"\"{http://www.w3.org/1999/xhtml}a\""#(["My link"]))
    ; test-xhtml(!"a 1"
      , !"<a xmlns=\"http://www.w3.org/1999/xhtml\" href=\"http://www.cs.uu.nl\">My link</a>"
      , !"\"{http://www.w3.org/1999/xhtml}a\""#(["My link"])
            {(href(), "http://www.cs.uu.nl")})

    /*
    ; test-html(!"a 1"
      , !"<a  xmlns=\"http://www.w3.org/1999/xhtml\" href=\"http://www.cs.uu.nl\" title=\"bla\">My link</a>"
      , !a("My link"){(href(), "http://www.cs.uu.nl"), (title(), "bla")})
      test-html(!"br 1", !"<br/>",      !br())
    */

  tuple-tests =
      test-tuple(|"test without tuples", 
       "<t0>
          <i>1</i>
          <i>2</i>
        </t0>",
       t0(i(1), i(2))
      )
    ; test-tuple(|"test with tuples 1",
       "<t1>
          <i>1</i>
          <i>2</i>
          <i>3</i>
          <i>4</i>
        </t1>",
        t1(i(1), (i(2), i(3)), i(4))
      )
    ; test-tuple(|"test with tuples 2",
       "<t2>
          <i>1</i>
          <i>2</i>
          <i>3</i>
        </t2>",
        t2((i(1), i(2)), i(3))
      )
    ; test-tuple(|"test with tuples 3",
       "<t2>
          <i>1</i>
          <i>2</i>
          <i>3</i>
          <i>4</i>
        </t2>",
        t2(i(1), i(2), (i(3), i(4)))
      )
    ; test-tuple(|"test with tuples 4",
       "<t3>
          <i>1</i>
          <i>2</i>
          <i>3</i>
          <i>4</i>
          <i>5</i>
        </t3>",
        t3(i(1), i(2), (i(3), i(4), i(5)))
      )
    ; test-tuple(|"test with tuples 5",
       "<t0s>
            <i>1</i>
            <i>2</i>

            <i>3</i>
            <i>4</i>

            <i>5</i>
            <i>6</i>

            <i>7</i>
            <i>8</i>
        </t0s>",
        t0s([
          (i(1), i(2))
        , (i(3), i(4))
        , (i(5), i(6))
        , (i(7), i(8))
        ])
      )

strategies

  test-exp(name, input, output) =
    interpret-test(name, input, output, !"Exp-choice.rhg")

  test-exp-inj(name, input, output) =
    interpret-test(name, input, output, !"Exp1.rhg")

  test-tuple(|name, input, output) =
    interpret-test(!name, !input, !output, !"TupleStuff.rhg")

  test-html(name, input, output) =
    interpret-test(name, input, output, !"XHTML-1.1-no-ns.rhg")

  test-xhtml(name, input, output) =
    interpret-test(name, input, output, !"XHTML-1.1.rhg")


  interpret-test(name, input, output, rhg) = 
    new-apply-test(name
    , xtc-text2term(xtc-transform(!"xml-interpret", !["--rhg", <rhg> ()]))
    , input
    , output
    )

  xtc-text2term(s) =
    <print-to> [<id>]
    ; s
    ; read-from

signature
  constructors
    Int   : Int -> Exp
    Var   : String -> Var
    Times : Exp * Exp -> Exp
    Mul   : Exp * Exp -> Exp
    Plus  : Exp * Exp -> Exp
    Call  : Var * List(Exp) -> Exp

  constructors
    br    : Dummy
    a     : String -> Dummy
    href  : Dummy
    title : Dummy

signature
  constructors
    t0s : List((I, I)) -> Tuple
    t0  : I * I -> Tuple
    t1  : I * (I, I) * I -> Tuple
    t2  : (I, I) * I -> Tuple
    t2  : I * I * (I, I) -> Tuple
    t3  : I * I * (I, I, I) -> Tuple

    i   : Int -> I 

strategies


  xtc-test-suite(name, tests) =
    xtc-temp-files(
      new-test-suite(name, tests)
    )

  new-test-suite(name, tests) =
      echo-start(name)
    ; init-record
    ; tests
    ; echo-results(name)
    ; check-for-failures

  echo-start(name) =
    where(
      <echo> "-----------------------------------------------------------------------"
    ; <concat-strings; echo> ["executing testsuite ", <name> ()]
    ; <echo> "-----------------------------------------------------------------------"
    )

  echo-results(name) =
    where(
      ?(succ, failures)
    ; <echo> "-----------------------------------------------------------------------"
    ; <conc-strings; echo> ("results testsuite ", <name> ())
    ; <conc-strings; echo> ("successes : ", <int-to-string> succ)
    ; <conc-strings; echo> ("failures  : ", <int-to-string> failures)
    ; <echo> "-----------------------------------------------------------------------"
    )

  new-do-test(s) =
    where(s) < record-success + record-failure

  new-apply-test(name, s, input, output) =
    ?(x, y)
  ; where(
      <input> ()  => in-term
    ; <output> () => out-term
    ; <add; inc; int-to-string> (x, y) => nr
    )
  ; new-do-test(
      <s> in-term
    < (?result; (<eq> (result, out-term)
       < <concat-strings; echo> ["* OK   : test ", nr, " (", <name> (), ")"]
       + <concat-strings; echo> ["* ERROR: test ", nr, " (", <name> (), ")"]
         ; <debug(!"** Result:   ")> result
         ; <debug(!"** Expected: ")> out-term
         ; fail
      ))
    + <concat-strings; echo> ["* ERROR: test ", nr, " (", <name> (), ")"]
      ; <echo> ["** Application failed"]
      ; <debug(!"** Expected: ")> out-term
      ; fail
    )