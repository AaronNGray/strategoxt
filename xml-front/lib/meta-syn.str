/**
 * @authors Eelco Visser, Martin Bravenboer
 */
module meta-syn
imports options xtc-lib logging err-trace xtc-debug

/**
 * Signature for meta files
 */
signature
  constructors
    Meta   : List(MetaProperty) -> MetaData
    Syntax : String -> MetaProperty

strategies

  /**
   * Parse the current FILE using the syntax specified by --syntax or a meta file.
   *
   * @type FILE -> FILE
   */
  xtc-meta-parse =
    xtc-meta-parse(fail)

  /**
   * @type FILE -> FILE
   */
  xtc-meta-parse(default-syntax : a -> String) =
      where(FILE(basename => base); get-parse-table(default-syntax) => FILE(tbl))
    ; xtc-err-transform-file(!"sglr", !["-2", "-p", tbl | <![]; if-verbose3(!["-v"])>])
    ; xtc-implode-asfix

  get-parse-table(default-syntax : a -> String) =
       get-parse-table-config; !FILE(<id>)
    <+ get-syntax(default-syntax)
     ; get-parse-table-for-syntax

  xtc-err-transform-file(tool, args) :
    FILE(f) -> FILE(g)
      where <xtc-new-file> f => g
          ; ( <conc; xtc-command(tool)> (<args>, ["-i", f, "-o", g])
           <+ <ReadFromFile> g
            ; trace-err
            ; fail
            )

/**
 * Command line options for a meta syntax tool
 */
strategies

  meta-syn-options =
      include-dir-option
    + syntax-option
    + parse-table-option
    + err-output-option

  include-dir-option =
    ArgOption("-I" + "--Include"
    , where(<extend-config>("--includes", [<id>]))
    , !"-I p|--Include p   include modules from directory p"
    )

  syntax-option =
    ArgOption("--syntax"
    , where(<set-config>("--syntax", <id>))
    , !"--syntax syn        use syntax syn"
    )

  parse-table-option =
    ArgOption("--parse-table"
    , where(<set-config>("--parse-table", <id>))
    , !"--parse-table file        use parse table in file"
    )

  get-includes-config    = <get-config> "--includes" <+ ![]
  get-syntax-config      = <get-config> "--syntax"
  get-parse-table-config = <get-config> "--parse-table"


  /**
   * @type _ -> List(String)
   */
  pass-meta-syn-options =
    <concat> [<pass-syntax-option>, <pass-includes-option>, <pass-parse-table-option>, <pass-err-output-option>]

  /**
   * @type _ -> List(String)
   */
  pass-syntax-option =
    !["--syntax", <get-syntax-config>] <+ ![]

  /**
   * @type _ -> List(String)
   */
  pass-parse-table-option =
    !["--parse-table", <get-parse-table-config>] <+ ![]

  /**
   * @type _ -> List(String)
   */
  pass-includes-option =
      get-includes-config
    ; map(!["-I", <id>])
    ; concat

strategies

  find-in-includes =
    <find-in-path> (<id>, <get-includes-config>)

strategies

  get-syntax(default) = 
    (  get-syntax-config
    <+ get-syntax-from-meta
    <+ default
    <+ log(|Critical(), "Cannot find out what syntax to use.")
    )
    ; log(|Debug(), <conc-strings> ("using syntax ", <id>))

strategies

  get-syntax-from-meta = 
      ?FILE(file)
    ; ( get-meta
      ; (?Meta(<fetch-elem(?Syntax(<id>))>)
          <+ <error> ["Meta data ", <id>, " for module ", file, " not valid: "]; fail))

  get-meta = 
     ( FILE(guarantee-extension(!"meta"))
     ; read-from
    <+ FILE(guarantee-extension(!"syn"))
     ; read-from => syntax#(_)
     ; !Meta([Syntax(syntax)])
     )

strategies

  get-parse-table-for-syntax =
      ?syntax
    ; guarantee-extension(!"tbl") => tbl
    ; ( find-in-includes
      ; log(|Info(), <conc-strings> ("using parse-table ", <id>))
      ; !FILE(<id>)
     <+ <get-syntax-definition-for-syntax> syntax
      ; log(|Info(), <conc-strings> ("must create parse table ", <id>))
      ; xtc-transform(!"sdf2table", !["-m", syntax])
      ; rename-to(!tbl)
     <+ log(|Critical(), <conc-strings> ("cannot locate or create parse table ", syntax))
      ; fail
      )

  get-syntax-definition-for-syntax =
      where(guarantee-extension(!"def") => def)
    ; ( <find-in-includes> def
      ; log(|Info(), <conc-strings> ("using syntax definition ", <id>))
      ; !FILE(<id>)
     <+ get-syntax-module-for-syntax
      ; log(|Info(), <conc-strings> ("must create syntax definition ", def))
      ; xtc-transform(!"pack-sdf", pass-includes-option)
      ; xtc-transform(!"asfix-yield")
      ; rename-to(!def)
     <+ log(|Critical(), <conc-strings> ("cannot locate or create syntax definition ", <id>))
      ; fail
      )

  get-syntax-module-for-syntax =
       guarantee-extension(!"sdf")
     ; find-in-includes
     ; log(|Info(), <conc-strings> ("using syntax module ", <id>))
     ; !FILE(<id>)
    <+ log(|Critical(), <conc-strings> ("cannot locate syntax module ", <id>))
     ; fail