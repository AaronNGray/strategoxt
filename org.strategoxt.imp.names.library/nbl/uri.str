module nbl/uri

imports
  
  index/core
  
signature

  sorts
  
    Language
    Segment
    Qualifier
    
  constructors
    
    Language    : String                       -> Language
    ID          : Namespace * Name * Qualifier -> Segment
    Subsequent  : String                       -> Segment
    Anonymous   : String                       -> Segment
    ExternalDef : String                       -> Segment
    Unique      : String                       -> Qualifier
    NonUnique   :                                 Qualifier
    URI         : Language * List(Segment)     -> URI
    
rules // Construction
  
  nbl-base-uri = 
    !URI(<id>, [])
     
  nbl-extend-uri(|segment) = 
    URI(id, ![segment|<id>])
    
  nbl-extend-uri(|namespace, name, qualifier) = 
    URI(id, ![ID(namespace, name, qualifier)|<id>])
    
  nbl-replace-uri(|segment) = 
    URI(id, ![segment|<Tl>])
    
  nbl-replace-uri(|namespace, name, qualifier) = 
    URI(id, ![ID(namespace, name, qualifier)|<Tl>])
    
  nbl-replace-uri-qualifier(|qualifier) =
    ?URI(lang, [ID(namespace, name, _)|rest]);
    !URI(lang, [ID(namespace, name, qualifier)|rest])
  
  nbl-unique-qualifier = !Unique(<new>)
  nbl-nonunique-qualifier = !NonUnique()
  
  nbl-anonymous-segment  = !Anonymous(<new>)
  nbl-subsequent-segment = !Subsequent(<new>)
  
  nbl-external-segment: Anonymous(name) -> ExternalDef(name)
  
rules // Projections
  
  nbl-uri = 
    nbl-uri-impl <+ nbl-uri-generic
    
  nbl-uris =
    nbl-uris-impl <+ nbl-uris-generic

  nbl-value = 
    nbl-value-impl <+ nbl-value-generic
    
  nbl-values = 
    nbl-values-impl <+ nbl-values-generic
    
  
  nbl-uri-language:
    URI(language, _) -> language
    
  nbl-uri-language-name:
    URI(Language(name), _) -> name
    
  nbl-uri-path:
    URI(_, path) -> path
    
  nbl-uri-parent:
    URI(language, path) -> URI(language, parent)
    where
      [_|parent] := path
      
  nbl-uri-name:
    uri -> <nbl-uri-path; Hd; nbl-segment-name> uri
    
  nbl-uri-namespace:
    uri -> <nbl-uri-path; Hd; nbl-segment-namespace> uri    

  nbl-uri-qualifier:
    uri -> <nbl-uri-path; Hd; nbl-segment-qualifier> uri
    
    
  nbl-segment-namespace:
    ID(namespace, _, _) -> namespace
    
  nbl-segment-name:
    ID(_, name, _) -> name
    
  nbl-segment-qualifier:
    ID(_, _, qualifier) -> qualifier
    
    
  nbl-uri-scope      = URI(id, Tl)
  nbl-uri-scopes    = nbl-closure(nbl-uri-scope)
  
  nbl-uri-in-scope  = URI(id, [id|Tl])
  nbl-uri-in-scopes = nbl-closure(nbl-uri-in-scope)
  
  nbl-closure(s) = 
      s 
    < ![<id>|<nbl-closure(s)>] 
    + ![]

rules // Conditions
  
  nbl-is-unique =
    nbl-uri-qualifier;
    ?Unique(_)
    
  nbl-is-nonunique =
    nbl-uri-qualifier;
    ?NonUnique()

rules // Equality
  
  nbl-uri-eq = 
    ?(URI(lang1, segs1), URI(lang2, segs2));
    <eq> (lang1, lang2);
    <zip(nbl-uri-segment-eq)> (segs1, segs2)
    
  nbl-uri-segment-eq =
    ?(ID(ns1, name1, _), ID(ns2, name2, _));
    <eq> (ns1, ns2);
    <eq> (name1, name2)
     
  nbl-uri-segment-eq =
    ?(Subsequent(_), Subsequent(_))
    
  nbl-uri-segment-eq =
    ?(Anonymous(_), Anonymous(_))
    
  nbl-uri-segment-eq =
    ?(ExternalDef(_), ExternalDef(_))

rules // Printing
  
  nbl-print-uri:
    uri -> $[[ns] [names]]
    where
      ns#(_) := <nbl-uri-namespace> uri;
      names  := <nbl-uri-path; filter(nbl-segment-name); separate-by(|"."); concat-strings> uri
        
rules /** @internal Projections */

  /** @internal */
  nbl-uri-impl:
    URI(_, _) -> <id>

  /** @internal */
  nbl-uri-generic:
    term -> <?_#(<?[<id>|_]>)> term
    
 
  /** @internal */
  nbl-uris-impl = fail 
    
  /** @internal */
  nbl-uris-generic:
    terms -> <filter(nbl-uri)> terms
    where
      <is-list> terms
      
  /** @internal */    
  nbl-uris-generic:
    term -> [<nbl-uri> term]
    where
      not(<is-list> term)
    
    
  /** @internal */
  nbl-value-impl:
    URI(_, _) -> <id>
    
  /** @internal */
  nbl-value-generic:
    term -> <?_#(<?[_, <id>|_]> )> term
    

  /** @internal */
  nbl-values-impl = fail
    
  /** @internal */
  nbl-values-generic:
    terms -> <filter(nbl-value)> terms
    where
      <is-list> terms
      
  /** @internal */    
  nbl-values-generic:
    term -> [<nbl-value> term]
    where
      not(<is-list> term)
