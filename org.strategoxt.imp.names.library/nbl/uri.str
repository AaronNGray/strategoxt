module nbl/uri

imports
	
	index/utility
  
signature

  sorts
  
    Language
    URI
		Segment
		Qualifier
		
  constructors
  	
  	Language   : String                        ->  Language
  	ID         : Namespace * Name              ->  Segment
  	ID         : Namespace * Name * Qualifier  ->  Segment
  	Subsequent : String                        ->  Segment
  	Anonymous  : String                        ->  Segment
  	Unique     : String                        ->  Qualifier
  	URI        : Language * List(Segment)      ->  URI
    
rules // Construction
	
	nbl-base-uri = 
		!URI(<id>, [])
		 
	nbl-extend-uri(|segment) = 
		URI(id, ![segment|<id>])
  
rules // Projections
	
	nbl-uri =
		index-uri
		
	nbl-uris =
		index-uris
	
	nbl-uri-language:
		URI(language, _) -> language
		
  nbl-uri-language-name:
    URI(Language(name), _) -> name
    
  nbl-uri-path:
  	URI(_, path) -> path
  	
  nbl-uri-parent:
    URI(language, path) -> URI(language, parent)
    where
      [_|parent] := path
      
  nbl-uri-name:
  	uri -> <nbl-uri-path; nbl-segment-name> uri
  	
  nbl-uri-namespace:
  	uri -> <nbl-uri-path; nbl-segment-namespace> uri  	

  	
  nbl-segment-namespace:
  	ID(namespace, _) -> namespace
  	
  nbl-segment-namespace:
    ID(namespace, _, _) -> namespace
  	
  nbl-segment-name:
  	ID(_, name) -> name
  	
  nbl-segment-name:
    ID(_, name, _) -> name
    
  nbl-segment-qualifier:
    ID(_, _, qualifier) -> qualifier
    
    
	nbl-uri-scope			= URI(id, Tl)
	nbl-uri-scopes		= nbl-closure(nbl-uri-scope)
	
	nbl-uri-in-scope	= URI(id, [id|Tl])
	nbl-uri-in-scopes = nbl-closure(nbl-uri-in-scope)
	
	nbl-closure(s) = 
			s 
		< ![<id>|<nbl-closure(s)>] 
		+ ![]
    
rules // Conditions
    
  nbl-is-unique =
    ?ID(_, _, Unique(_))
    
  nbl-is-unique =
    ?Unique(_)
    
  nbl-is-id =
    ?ID(_, _)
    
  nbl-is-id =
    ?ID(_, _, _)
    
  nbl-is-subsequent =
    ?Subsequent(_)
