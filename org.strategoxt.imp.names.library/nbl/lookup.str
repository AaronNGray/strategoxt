module nbl/lookup

imports
  
  nbl/collect
  nbl/resolve
  nbl/query
  nbl/uri
  nbl/entries
  
rules // Index-based lookup
  
  nbl-lookup-definition:
    containsURI -> <nbl-lookup(nbl-definition-template)> containsURI
    
  nbl-lookup-definition(|namespace, name):
    uri -> <nbl-lookup-uri(nbl-definition-template|namespace, name)> uri
  
rules // Index based visibility
  
  nbl-visible-definitions:
    containsURI -> <nbl-visible(nbl-definition-template)> containsURI
  
rules /** @internal Index-based lookup */
  
  nbl-lookup(create-template|):
    containsURI -> entry
    where
      <with(uri             := <nbl-uri> containsURI   | "Could not extract URI from given term.")> [containsURI];
      <with(parentURI       := <nbl-uri-parent> uri    | "Could not construct a parent URI.")> [uri];
      <with(targetNamespace := <nbl-uri-namespace> uri | "Could not extract target namespace.")> [uri];
      <with(targetName      := <nbl-uri-name> uri      | "Could not extract target name.")> [uri];
      entry                 := <nbl-lookup-uri(create-template|targetNamespace, targetName)> parentURI
      
  nbl-lookup-uri(create-template|namespace, name):
    uri -> entry
    where
      entry*       := <nbl-lookup-uri-scoped(create-template|namespace, name)> uri;
      if not(entry := <Hd> entry*) then
        parentURI  := <nbl-uri-parent> uri;
        entry      := <nbl-lookup-uri(create-template|namespace, name)> parentURI
      end
    
  nbl-lookup-uri-scoped(create-template|namespace, name):
    uri -> [entry*, importEntry*]
    with
      // Standard lookup
      entry*       := <nbl-standard-lookup(create-template|namespace, name)> uri;
      
      // Imports & aliases
      importEntry* := <nbl-lookup-imported-entries(create-template|<nbl-uri-language> uri, namespace, name)> uri
      
      // TODO: External (defines x in y) definitions
      
      // TODO: Implicit (this, super) definitions
      
  nbl-standard-lookup-nonunique(create-template|namespace, name) =
    nbl-extend-uri(|namespace, name, NonUnique());
    create-template;
    nbl-get-all
    
  nbl-standard-lookup-unique(create-template|namespace, name):
    uri -> entry*
    where
      if alias := <nbl-get-value> Alias(<nbl-extend-uri(|namespace, name, NonUnique())> uri, ()) then
        entry* := <create-template; nbl-get-all> alias
      else
        entry* := []
      end

  nbl-standard-lookup(create-template|namespace, name):
    uri -> [entry*, nonUniqueEntry*]
    where
      entry*          := <nbl-standard-lookup-unique(create-template|namespace, name)> uri;
      nonUniqueEntry* := <nbl-standard-lookup-nonunique(create-template|namespace, name)> uri
      
rules /** @internal Index based visibility */
      
  nbl-visible(create-template|):
    containsURI -> entries
    with
      <with(uri             := <nbl-uri> containsURI   | "Could not extract URI from given term.")> [containsURI];
      <with(parentURI       := <nbl-uri-parent> uri    | "Could not construct a parent URI.")> [uri];
      <with(targetNamespace := <nbl-uri-namespace> uri | "Could not extract target namespace.")> [uri];
      <with(targetPrefix    := <nbl-uri-name> uri      | "Could not extract target prefix.")> [uri];
      entries               := <nbl-visible-uri(create-template|targetNamespace, targetPrefix)> parentURI
      
  nbl-visible-uri(create-template|namespace, prefix):
    uri -> allEntries
    with
      entries      := <nbl-visible-uri-scoped(create-template|namespace, prefix)> uri;
      if parentURI := <nbl-uri-parent> uri then
        entries2   := <nbl-visible-uri(create-template|namespace, prefix)> parentURI;
        allEntries := <conc> (entries, entries2)
      else
        allEntries := entries
      end
      
  nbl-visible-uri-scoped(create-template|namespace, prefix):
    uri -> [entry*, importEntry*]
    with
      // Standard lookup
      entry*       := <nbl-standard-visible(create-template|namespace, prefix)> uri;
      
      // Imports & aliases
      importEntry* := <nbl-visible-imported-entries(create-template|<nbl-uri-language> uri, namespace, prefix)> uri
      
      // TODO: External (defines x in y) definitions
      
      // TODO: Implicit (this, super) definitions

  nbl-standard-visible(create-template|namespace, prefix) =
    create-template;
    nbl-get-children(|namespace, prefix)

rules /** @internal Imports */

  nbl-lookup-imported-entries(create-template|language, namespace, name):
    uri -> <conc> (namedEntry*, unnamedEntry*)
    with
      namedImportURI*   := <nbl-get-import-uris-named(|language, namespace, name)> uri;
      namedEntry*       := <mapconcat(create-template; nbl-get-all)> namedImportURI*;
      unnamedImportURI* := <nbl-get-import-uris-unnamed(|language, namespace)> uri;
      unnamedEntry*     := <mapconcat(nbl-standard-lookup(create-template|namespace, name))> unnamedImportURI*
      
  nbl-visible-imported-entries(create-template|language, namespace, prefix):
    uri -> unnamedEntry*
    with
      unnamedImportURI* := <nbl-get-import-uris-unnamed(|language, namespace)> uri;
      unnamedEntry*     := <mapconcat(nbl-standard-visible(create-template|namespace, prefix))> unnamedImportURI* 

  nbl-get-import-uris-unnamed(|language, namespace) = nbl-get-import-uris-unnamed(|[], language, namespace)

  nbl-get-import-uris-unnamed(|seen, language, namespace):
    uri -> <conc> (importURI*, transitiveImportURI*)
    with
      importResult*        := <nbl-get-all-properties(|Import(language, namespace))> uri;
      importURI*           := <filter(nbl-resolve-result)> importResult*;
      importedResult*      := <nbl-get-all-properties(|Import(language, Imported(namespace)))> uri;
      importedURI*         := <filter(nbl-resolve-result)> importedResult*;
      transitiveImportURI* := <concat> <filter(nbl-get-import-uris-unnamed-transitive(|seen, language, namespace))> importedURI*

  nbl-get-import-uris-unnamed-transitive(|seen, language, namespace):
    uri -> transitiveImportURI*
    where
      not(<fetch(?uri)> seen);
      transitiveImportURI* := <nbl-get-import-uris-unnamed(|[uri|seen], language, namespace)> uri
    
  nbl-get-import-uris-named(|language, namespace, name):
    uri -> importURI*
    with
      importResult* := <nbl-get-all-properties(|Import(language, namespace, name))> uri;
      importURI*    := <filter(nbl-resolve-result)> importResult*

rules /** @internal Helpers */
  
  nbl-definition-template:
    uri -> Def(uri)
 