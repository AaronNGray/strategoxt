module nbl/lookup

imports
	
	index/core
	nbl/collect
	nbl/utils
	nbl/uri
	
rules // Index-based lookup interface
	
	nbl-lookup-definition:
		containsURI -> <nbl-lookup(nbl-definition-template)> containsURI
		
	nbl-lookup-property(|type):
		containsURI -> <nbl-lookup(nbl-property-template(|type))> containsURI
	
rules // Index based visibility interface
	
	nbl-visibile-definitions:
		containsURI -> <nbl-visible(nbl-definition-template)> containsURI
		
	nbl-visible-properties(|type):
		containsURI -> <nbl-visible(nbl-property-template(|type))> containsURI
	
rules // Index-based lookup internal
	
	nbl-lookup(create-template|):
		containsURI -> entry
		where
			with(uri        		 := <nbl-uri> containsURI		| "Could not extract URI from given term.");
			with(parentURI       := <nbl-uri-parent> uri		| "Could not construct a parent URI.");
			with(targetNamespace := <nbl-uri-namespace> uri	| "Could not extract target namespace.");
			with(targetName      := <nbl-uri-name> uri      | "Could not extract target name.");
			entry                := <nbl-lookup-uri(create-template|targetNamespace, targetName)> parentURI
			
	nbl-lookup-uri(create-template|namespace, name):
		uri -> entry
		where
			entries      := <nbl-lookup-uri-scoped(create-template|namespace, name)> uri;
      if not(entry := <Hd> entries) then
        parentURI  := <nbl-uri-parent> uri;
        entry      := <nbl-lookup-uri(create-template|namespace, name)> parentURI
      end
		
  nbl-lookup-uri-scoped(create-template|namespace, name):
  	uri -> entries'
  	where
  		lookupURI := <nbl-extend-uri(|namespace, name)> uri;
  		template  := <create-template> lookupURI;
  		entries   := <index-get-all> template;
  		if not(<Hd> entries) then
  			// TODO: This is not the proper way to look up unique items, requires indirection.
  			lookupURI' := <nbl-extend-uri(|namespace, name, Unique())> uri;
  			template'  := <create-template> lookupURI';
  			entries'   := <index-get-all> template'
  		else
  			entries' := entries
  		end

rules // Index based visibility internal
			
	nbl-visible(create-template|):
		containsURI -> entries
		with
			with(uri        		 := <nbl-uri> containsURI		| "Could not extract URI from given term.");
			with(parentURI       := <nbl-uri-parent> uri		| "Could not construct a parent URI.");
			with(targetNamespace := <nbl-uri-namespace> uri	| "Could not extract target namespace.");
			with(targetPrefix    := <nbl-uri-name> uri      | "Could not extract target prefix.");
			entries              := <nbl-visible-uri(create-template|targetNamespace, targetPrefix)> parentURI
			
	nbl-visible-uri(create-template|namespace, prefix):
		uri -> allEntries
		with
			entries      := <nbl-lookup-uri-scoped(create-template|namespace, prefix)> uri;
      if parentURI := <nbl-uri-parent> then
      	entries2   := <nbl-visible-uri(create-template|namespace, prefix)> parentURI;
        allEntries := <conc> (entries, entries2)
      else
        allEntries := entries
      end
			
	nbl-visible-uri-scoped(create-template|namespace, prefix):
		uri -> entries
		where
  		template        := <create-template> uri;
  		childrenEntries := <index-get-children> template;
  		entries 				:= <filter(nbl-compare-prefix(|namespace, prefix))> childrenEntries
  		
  nbl-compare-prefix(|namespace, prefix):
    entry -> <id>
    where
      uri := <nbl-uri> entry;
      <eq> (namespace, <nbl-uri-namespace> uri);
      <is-substring(!prefix)> <nbl-uri-name> uri
 
rules // Index-based lookup & visibility helpers
	
	nbl-definition-template:
		uri -> Def(uri)
		
	nbl-property-template(|type):
		uri -> Prop(uri, type, ())
 