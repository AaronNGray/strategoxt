	module nbl/tasks

imports 
	
	nbl/lookup
	nbl/uri
	
signature

	sorts
	
		Task Result Instruction
	
	constructors
		
		Task     : List(String) * List(String) * Instruction  -> Task
		Result   : String         											      -> Result
		DoneTask : String * Term											        -> DoneTask
		FailTask : String * Term                              -> FailTask
		
		Resolve  : URI * List(Prop)                           -> Instruction
		Resolve  : Segment * Term * List(Prop)                -> Instruction
		PropCalc : Property * Term                          	-> Instruction
		Match		 : ID * Term			                          	-> Instruction
		Done     : Term                                   		-> Instruction
		Fail     : Term                                       -> Instruction

rules
	
	new-task(|elems) = new-task(|elems, <dependent-tasks>)
		
	new-task(|elems, dep):
		instruction -> Result(name)
		with
			name := <newname> "";
			task := Task([name], dep, instruction);
			<iset-add(|task)> elems;
			<debug(!"Created task: ")> task
			
	dependent-tasks = collect-all(dependent-task, union); flatten-list; make-set
	dependent-task = ?Result(<id>) 
	dependent-task =
		has-annos; get-annos; dependent-tasks
	
rules
	
	merge-tasks =
		   [] 
		<+ ?[Task(names, dep, instr)|<fetch(Task(!(names, <id>); conc, !(dep, <id>); union, ?instr)); merge-tasks>]
		<+ [id|merge-tasks]
	
	perform-tasks:
		(tasks, elems) -> (tasks'', elems'')
		with
			if 
				(ts1, t, ts2) := <split-fetch-keep(Task(id, [], perform-task(|elems)))> tasks 
			then
			  Task(names, [], res) := t;
			  if Done(tr) := res then
					nr-map             := <map(!(<id>, tr))> names;
					elems'             := <map(!DoneTask(<id>, tr))> names
				else 
				  if Fail(tr) := res then
			      nr-map           := <map(!(<id>, tr))> names;
            elems'           := <map(!FailTask(<id>, tr))> names
          end
			  end;
				tasks'               := <conc; map(try(resolve-dependencies(|names, nr-map)))> (ts1, ts2);
				(tasks'', elems'')   := <perform-tasks> (tasks', <conc> (<distribute-results(|nr-map)> elems, elems'))
			else
				tasks'' := tasks;
				elems'' := elems
			end
				
rules
	
	perform-task(|elems): 
	  Resolve(uri, props) -> result
	  where
	    if resolvedURI := <nbl-uri> <nbl-lookup-definition> uri then 
	      result := Done(<nbl-uri> <nbl-lookup-definition> uri)
	    else
	      result := Fail(uri)
	    end
	perform-task(|elems): Resolve(segment, uri, props) -> <perform-task(|elems)> Resolve(<nbl-extend-uri(|segment)> uri, [])
	perform-task(|elems): PropCalc(prop, term) 		     -> Done(<calc-property(|elems)> (prop, term))
	perform-task(|elems): Match(key, term) 				     -> Done(<match-term> (key, term))
	
rules

	calc-property(|elems) = nbl-lookup-property(|elems)
	
	match-term = fail
	
rules
	
	split-tasks =
		partition(?Task(_, _, _))
		
	split-results = 
		partition(task-result; unzip; (concat, id))
		
  split-completed-tasks =
  	partition(?DoneTask(_, _) <+ ?FailTask(_, _))
	
	task-result: Task(names, _, Done(result)) -> (<map(!(<id>, result))> names, result)
	
	resolve-dependencies(|solved, results):
		Task(names, deps, task) -> Task(names, deps', task')
		where
			deps' := <diff; not(?deps)> (deps, solved);
			task' := <try(distribute-results(|results))> task
		
	distribute-results(|results) = 
		alltd(insert-result(|results))
	
	insert-result(|results): Result(n) -> <lookup> (n, results)

	insert-result(|results) = 
		has-annos; 
		!(<id>, <get-annos; map(try(insert-result(|results)))>); 
		set-annos

rules /** @internal Projections */
	
	/** @internal */
  nbl-uri-impl:
    Task(uri, _, _) -> uri
  
  /** @internal */  
  nbl-uri-impl:
  	Resolve(uri, _) -> uri
  
  /** @internal */
  nbl-uri-impl:
    DoneTask(_, uri) -> uri
    
  /** @internal */
  nbl-uri-impl:
    FailTask(_, uri) -> uri