	module nbl/tasks

imports 
	
	nbl/-
	
signature

	sorts
	
		Task Result Instruction
	
	constructors
		
		Task  : String * List(String) * Instruction -> Task
		Result: String         											-> Result
		DoneTask: String * Term											-> DoneTask
		
		Resolve  : List(Segment) * List(Prop) * ListImport()	-> Instruction
		Resolve  : Segment * Term * List(Prop) * ListImport() -> Instruction
		PropCalc : Property * Term                          	-> Instruction
		Match		 : ID * Term			                          	-> Instruction
		Done     : Term                                   		-> Instruction

rules
	
	new-task:
		instruction -> (Result(name), Task([name], [], instruction))
		where
			name := <newname> ""
			
	new-task(tasks'|tasks):
		instruction -> result
		where
			new-task => (result, task);
			match(tasks'|[task|tasks])
			
	merge-tasks =
		   [] 
		<+ ?[Task(names, dep, instr)|<fetch(Task(!(names, <id>); conc, !(dep, <id>); conc, ?instr)); merge-tasks>]
		<+ [id|merge-tasks]
	
	perform-tasks:
		(tasks, elems) -> (tasks'', elems'')
		with
			if 
				(ts1, t, ts2) := <split-fetch-keep(Task(id, id, vperform-task(|elems)))> tasks 
			then
			  Task(names, _, Done(tr))	:= t;
				nr-map                		:= <map(!(<id>, tr))> names;
				tasks'                		:= <conc; distribute-results(|nr-map)> (ts1, ts2);
				elems'                		:= <map(!DoneTask(<id>, tr))> names;
				(tasks'', elems'')    		:= <perform-tasks> (tasks', <conc> (<distribute-results(|nr-map)> elems, elems'))
			else
				tasks'' := tasks;
				elems'' := elems
			end
				
rules
	
	vperform-task(|elems) = 
		debug(!"try "); perform-task(|elems); debug(!"solved ")
	
	perform-task(|elems): Resolve(path, [], []) 		-> Done(<nbl-lookup(|elems)> path)
	perform-task(|elems): Resolve(s, path, [], []) 	-> <perform-task(|elems)> Resolve([s|path], [], []) where <is-list> path
	perform-task(|elems): PropCalc(prop, term) 			-> Done(<calc-property(|elems)> (prop, term))
	perform-task(|elems): Match(key, term) 					-> Done(<match-term> (key, term))
	
rules

	calc-property(|elems) = nbl-lookup-property(|elems)
	
	match-term = fail
	
rules
	
	split-tasks =
		partition(?Task(_, _, _))
		
	split-results = 
		partition(task-result; unzip; (concat, id))
	
	task-result: Task(names, _, Done(result)) -> (<map(!(<id>, result))> names, result)
	
	distribute-results(|results) = 
		alltd(insert-result(|results))
	
	insert-result(|results): Result(n) -> <lookup> (n, results)

	insert-result(|results) = 
		has-annos; 
		!(<id>, <get-annos; map(try(insert-result(|results)))>); 
		set-annos
		
