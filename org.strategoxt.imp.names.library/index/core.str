module index/core
  
imports
  
  index/utility
  
rules // Index management

  /**
   * Sets up the index library for given language, project paths and current file.
   * Must be called once before doing anything with the library.
   *
   * Example:
   *   <index-setup(|"MiniJava", [<project-path>], "test/test.mjv")
   *
   * @param language      The language to set the index up for.
   * @param project-path  The project paths that contain all source files to analyse and compile.
   * @param current-file  The current file that is being analysed. Can be retrieved later using index-get-current-file.
   *                      Can also be changed later using index-set-current-file.
   * @type x -> x
   */
  index-setup(|language, project-paths, current-file) =
    prim("LANG_index_setup", language, project-paths, current-file)
    
  /**
   * Sets the current file the index (analysis) is operating on to the given file.
   *
   * Example:
   *   <index-set-current-file> "fullpath/file.ext"
   *   <index-set-current-file> ("fullpath/file.ext", "subfile")
   *
   * @type x -> ?x
   */
  index-set-current-file = 
    prim("LANG_index_set_current_file", <id>)

  /**
   * Adds given element to the index with given file path and optionally subfile.
   *
   * Example:
   *   <index-add(|"fullpath/file.ext")> Def([Entity(), "Bar"])
   *   <index-add(|("fullpath/file.ext", "subfile"))> Def([Entity(), "Bar"])
   *
   * @param file  The file (and subfile) to add the element to.
   * @type x -> ?x
   */
  index-add(|file) =
    prim("LANG_index_add", <id>, file)

  /**
   * Adds all given elements to the index with given file path and optionally subfile.
   *
   * Example:
   *   <index-add-all(|"fullpath/file.ext")> [Def([Entity(), "Bar"]), ...]
   *   <index-add-all(|("fullpath/file.ext", "subfile"))> [Def([Entity(), "Bar"]), ...]
   *
   * @param file  The file (and subfile) to add the elements to.
   * @type List(x) -> ?List(x)
   */
  index-add-all(|file) =
    list-loop(with(index-add(|file)))
    
  /**
   * Removes given element from the index that is contained in given file path and optionally subfile.
   *
   * Example:
   *   <index-remove(|"fullpath/file.ext")> Def([Entity(), "Bar"])
   *   <index-remove(|("fullpath/file.ext", "subfile"))> Def([Entity(), "Bar"])
   * 
   * @param file  The file (and subfile) to remove the element from.
   * @type x -> ?x
   */
  index-remove(|file) =
    prim("LANG_index_remove", <id>, file)
    
  /**
   * Removes all given elements from the index that are contained in given file path and optionally subfile.
   *
   * Example:
   *   <index-remove-all(|"fullpath/file.ext")> [Def([Entity(), "Bar"]), ...]
   *   <index-remove-all(|("fullpath/file.ext", "subfile"))> [Def([Entity(), "Bar"]), ...]
   *
   * @param file  The file (and subfile) to remove the elements from.
   * @type List(x) -> ?List(x)
   */
  index-remove-all(|file) =
    list-loop(with(index-remove(|file)))
    
  /**
   * Removes all elements from the index that are contained in given file path and optionally subfile.
   *
   * Example:
   *   <index-clear-file> "fullpath/file.ext"
   *   <index-clear-file> ("fullpath/file.ext", "subfile")
   *
   * @type x -> ?x
   */
  index-clear-file = 
    prim("LANG_index_clear_file", <id>)
    
  /**
   * Clears all elements from the index.
   *
   * @type x -> x
   */
  index-clear = 
    prim("LANG_index_clear_all")
    
  /**
   * Clears all elements from the index and re-analyzes all files in the project.
   *
   * @type x -> x
   */
  index-reload = 
    prim("LANG_index_reload")
   
  /**
   * Commits index to a file on disk.
   *
   * @type x -> x
   */
  index-commit = 
    prim("LANG_index_commit")

  /**
   * Starts a transaction on the index for the current file. Additions to the index are not visible to other files 
   * until index-end-transaction is called. Operations on the index are only thread safe during a transaction.
   *
   * @type x -> x
   */
  index-start-transaction = 
    prim("LANG_index_start_transaction")
  
  /**
   * Ends a transaction on the index for the current file. Additions made to the index during the transaction are
   * added to the global index visible for other files. Operations on the index are not thread safe any more after 
   * this call.
   *
   * @type x -> x
   */
  index-end-transaction = 
    prim("LANG_index_end_transaction")
  
  /**
   * Starts a transaction, applies given strategy and ends the transaction. All index operations used from the given
   * strategy are thread safe.
   * 
   * @param s The strategy to apply. Transaction will still properly end if strategy fails.
   * @type x -> x'
   *
   * @see index-start-transaction
   * @see index-end-transaction
   */
  index-transaction(s) = 
	    prim("LANG_index_start_transaction")
	  ; try(s)
	  ; prim("LANG_index_end_transaction")
  
rules // Index querying
  
  /**
   * Gets the file that the analysis is currently in.
   *
   * @type x -> (file, subfile)
   *
   * @see index-setup(|language, project-paths, current-file)
   * @see index-set-current-file
   */
  index-get-current-file =
    prim("LANG_index_get_current_file")
  
  /**
   * Gets a list of all files and subfiles for current project.
   *
   * Example:
   *   <index-get-all-files> => [("fullpath/file.ext", "subfile"), ...]
   *
   * @type x -> List((file, subfile))
   */   
  index-get-all-files =
    prim("LANG_index_all_files")
  
  /**
   * Gets all index entries for the given file path and optionally subfile.
   *
   * Examples:
   *   <index-get-all-in-file> "fullpath/file.ext" => [Def([Entity(), "Bar"]), ...]
   *   <index-get-all-in-file> ("fullpath/file.ext", "subfile") => [Def([Entity(), "Bar"]), ...]
   *
   * @type file or (file, subfile) -> List(elem)
   */  
  index-get-all-in-file:
    filepath -> entries
    with
      entries := <prim("LANG_index_get_all_in_file", filepath)>
    
  /**
   * Gets the revision of a file and optionally subfile.
   *
   * Example:
   *   <index-get-file-revision> "fullpath/file.ext" => 13
   *   <index-get-file-revision> ("fullpath/file.ext", "subfile") => 37
   *
   * @type file or (file, subfile) -> Int
   */
  index-get-file-revision:
    file -> <prim("LANG_index_get_file_revision", file)>
    
  /**
   * Gets the containing files and subfiles of index entry with given template.
   *
   * Example:
   *   <index-get-files-of> Def([Entity(), "Bar"]) => [("fullpath/file.ext", "subfile"), ...]
   *
   * @type template -> List((file, subfile))
   */  
  index-get-files-of:
    template -> <prim("LANG_index_get_files_of", template)>
    
  /**
   * Get all index entries that match the given template.
   *
   * Example:
   *   <index-get-all> Def([Entity(), "Bar"]) => [Def([Entity(), "Bar"]), ...]
   *
   * @type template -> List(elem)
   */
  index-get-all:
    template -> <prim("LANG_index_get", template)>
    
  /**
   * Get all values of index entries that match the given template.
   *
   * Example:
   *   <index-get-all-values> DefData([Property(), "s"], Type(), ()) => [TYPE("String"), ...]
   *
   * @type template -> List(value)
   *
   * @see index-value
   */
  index-get-all-values:
    template -> <filter(index-value)> <index-get-all> template
 
  /**
   * Get the first index entry that matches the given template, or fail.
   *
   * Example:
   *   <index-get> Def([Entity(), "Bar"]) => Def([Entity(), "Bar"])
   *
   * @type template -> ?elem
   */
  index-get:
    template -> <?[<id>|_]> <index-get-all> template
   
  /**
   * Get the value of first index entry that matches the given template, or fail.
   *
   * Example:
   *   <index-get-value> DefData([Entity(), "Bar"], Type(), ()) => TYPE("Bar")
   *
   * @type template -> ?value
   *
   * @see index-value
   */
  index-get-value:
    template -> <index-value> <?[<id>|_]> <index-get-all> template
    
  index-get-children:
  	template -> <prim("LANG_index_get_children", template)>
