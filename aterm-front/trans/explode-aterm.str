/**
 * @author  Martin Bravenboer
 */
module explode-aterm
imports ATerms options

strategies

  io-explode-aterm =
    io-wrap(explode-aterm)

strategies

  explode-aterm =
       explode-list
    <+ explode-int
    <+ explode-fun
    <+ explode-appl

  implode-aterm =
       implode-list
    <+ implode-int
    <+ implode-fun
    <+ implode-appl

rules

  /**
   * list
   */
  explode-list :
    [x*]{} -> list(not-empty(<map(explode-aterm)> x*))

  implode-list :
    list(not-empty(x*)) -> <map(implode-aterm)> x*

  /**
   * integer
   */
  explode-int :
    i{} -> constant(int(natural(<int-to-string> i)))
      where <is-int> i

  implode-int :
    constant(int(natural(s))) -> <string-to-int> s

  /**
   * just fun
   */
  explode-fun :
    s#([]){} -> fun(<explode-afun> s)

  implode-fun :
    fun(s1) -> s2#([])
      where <implode-afun> s1 => s2

  /**
   * appl
   */
  explode-appl :
    s#([x*]){} -> appl(<explode-afun> s, <map(explode-aterm)> x*)

  implode-appl :
    appl(s1, x*) -> s2#(<map(implode-aterm)> x*)
      where <implode-afun> s1 => s2

  /**
   * afun
   */
  explode-afun :
    s -> uqlit(s)
      where <not(is-double-quoted)> s

  explode-afun :
    s -> qlit(s)
      where <is-double-quoted> s

  implode-afun :
    uqlit(s) -> s

  implode-afun :
    qlit(s) -> s

  /**
   * todo: annotations

    placeholder           : ATerm -> ATerm
    annotation            : List(ATerm) -> Ann
    annotated-constant    : ACon * Ann -> ATerm
    annotated-list        : ATermList * Ann -> ATerm
    annotated-fun         : AFun * Ann -> ATerm
    annotated-appl        : AFun * List(ATerm) * Ann -> ATerm
    annotated-placeholder : ATerm * Ann -> ATerm
    */