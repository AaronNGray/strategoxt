module parse-stratego-builder

imports libstrategolib
imports libstrc
imports cleardep/fileutils
imports pluto/builder
imports pluto/builderfactory
imports separate-compilation/utils
imports separate-compilation/fileutils

imports separate-compilation/builder/deps-path

signature
	constructors
		ParseStrategoInput : Path * IncludePath * OutputFolder -> ParseStrategoInput
		ParseStrategoOutput : ModuleName * AST -> ParseStrategoOutput
		
strategies
	
	
	parse-stratego-builder-factory = let
	
		description = {file: \
			ParseStrategoInput(RelativePath(_,file), _, _) -> <conc-strings> ("Parse ", file)
			\} <+ {file: \
			ParseStrategoInput(file, _, _) -> <conc-strings> ("Parse ", <path-get-full-path> file)
			\}
			
		persistent-path = {file, include-path, output-folder, relative-path: \
			ParseStrategoInput(file, include-path, output-folder) -> <get-dep-path(|"parse", output-folder)> relative-path
			where
				<fetch-elem({dir: \IncludeDir(dir) -> <path-relativize(|AbsolutePath(dir))> file\})> include-path => RelativePath(_, relative-path)
			\}
			
		build = let
			extract-module-name = {name: \Module(name,_) -> name\}
		in {file, pack-include-path, ast, module-name: 
			log(|Notice(), "A");
			?ParseStrategoInput(file, pack-include-path,_);
			log(|Notice(), "B");
			<require> file;
			log(|Notice(), "C");
			<path-get-full-path> file => file-path;
			log(|Notice(), "D");
			!(IncludePathName(file-path),pack-include-path);
			log(|Notice(), "E");
			(separate-compilation-parse-file 
			<+ (log(|Error(), ["File not found: ", <id>]); fail)) => (_, ast);
			log(|Notice(), "F");
			<extract-module-name> ast => module-name;
			log(|Notice(), "G");
			!ParseStrategoOutput(module-name, ast)
     	} end 
	
	in
		builder-factory(
			description,
			persistent-path,
			build | "ParseStrategoBuilderFactory"
		)
	end
	
	
			
	
	
	