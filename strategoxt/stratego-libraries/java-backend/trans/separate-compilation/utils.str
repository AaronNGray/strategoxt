module separate-compilation/utils

strategies

	fold-on-imports(import-predicate, import-transform, collect-transform) =
		{| CollectedImports:
		let
			transform-ast = bottomup(
				(?Imports(<id>);mapconcat(pack-expand-import);map(\s -> Import(s)\)) <
				  filter(
					if import-predicate
						then try(where(rules(CollectedImports := [<collect-transform> | <CollectedImports>])));import-transform
						else id;log(|Info(), ["Import predicate failed for ", <id>])
					end)
				; !Imports(<id>) + id) 
			collect-imports = collect-all(where(import-predicate))
		in	  id => Module(name, body)
			; !Module(name, body) => ast
			; rules(CollectedImports := [])
			; !ast
			; transform-ast
			; !(<id>, <CollectedImports;reverse>)
		end
		|}

	transform-imports-and-move-to-front (import-predicate, import-transform, collect-transform) =
		  ?Module(name, content)
		; !content
		; partition(\Imports(x)-> x\) => (import-terms, other-content)
		; !(import-terms, [])
		; foldl({imp, all-imp:
			  ?(imp, all-imp)
			; !imp
			; mapconcat(pack-expand-import)
			; !(<id>, all-imp)
			; conc
			}
		  ) => all-imports
		; map(\x -> Import(x)\)
		; partition(where(import-predicate)) => (filtered-imports, other-imports)
		; !filtered-imports
		; filter(collect-transform) => collected-imports
		; !filtered-imports
		; filter(import-transform) => transformed-imports
		; !(transformed-imports, other-imports)
		; conc
		; !(Module(name, [Imports(<id>) | other-content]), collected-imports)

		
	import-get-file = 
		  \Import(s) -> (IncludeFromPath(s),<pack-include-path>)\
		; is-module-available-get-file
		
	import-is-file =
		  import-get-file
		; has-extension(|"str")
		
	save-and-set-options(s|working-package,working-output,filename, modulename) = 
		where(input := <get-config> "-i"; output := <get-config> "-o"; package := <get-config> "-p"; islib := <get-config<+!0> "--library"; baseout := <get-config> "baseout");
		where(main := <get-config <+ !()> "-m");
		where(	<rm-config> "-m");
		where(	<set-config> ("-i",filename));
		where(	<set-config> ("-p", <concat-strings>[working-package, ".", <to-library-name;jify;string-char-replace(|'/','.');string-char-replace(|'-','_')> modulename]));
		where(	<set-config>("-o", <to-java-compilation-abs-path(|working-output); (mkdirs <+ err(|"Creating dir failed"))> modulename));
		where(	<set-config> ("baseout" ,<to-java-compilation-abs-file(|working-output)> modulename));
		where(  <set-config> ("--library" ,""));
		s;
		where(<set-config> ("-i", input); <set-config> ("-o", output); <set-config> ("-p", package); <(?0;!"--library";rm-config)<+id> islib; <set-config> ("baseout", baseout));
		where(<if not(?()) then <set-config> ("-m", <id>) end> main )
	 