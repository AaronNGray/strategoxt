module separate-compilation/utils

imports separate-compilation/fileutils
imports libstrc
imports backend-simplify
imports s2j

strategies

	string-char-replace(|c1, c2) = explode-string; map((?c1;!c2)<+id); implode-string

	is-main-module-contained(|circular-units) =
		where(<elem> (<MainModule;get-stratego-source-file>, <map(get-stratego-source-file)> circular-units))

	transform-imports-and-move-to-front (import-predicate, import-transform, collect-transform) =
		  ?Module(name, content)
		; !content
		; partition(\Imports(x)-> x\) => (import-terms, other-content)
		; !(import-terms, [])
		; foldl({imp, all-imp:
			  ?(imp, all-imp)
			; !imp
			; mapconcat(pack-expand-import)
			; !(<id>, all-imp)
			; conc
			}
		  ) => all-imports
		; map(\x -> Import(x)\)
		; partition(where(import-predicate)) => (filtered-imports, other-imports)
		; !filtered-imports
		; filter(collect-transform) => collected-imports
		; !filtered-imports
		; filter(import-transform) => transformed-imports
		; !(transformed-imports, other-imports)
		; conc
		; !(Module(name, [Imports(<id>) | other-content]), collected-imports)

		
	import-get-file = 
		  \Import(s) -> (IncludeFromPath(s),<pack-include-path>)\
		; is-module-available-get-file
		
	import-is-file =
		  import-get-file
		; has-extension(|"str")
		
	save-and-set-options(s|working-package,working-output,filename, modulename, circular-units) = 
		where(input := <get-config> "-i"; output := <get-config> "-o"; package := <get-config> "-p"; islib := <get-config<+!0> "--library"; baseout := <get-config> "baseout");
		where(main := <get-config <+ !()> "-m");
		where(	<set-config> ("-i",filename));
		where(	<set-config> ("-p", <concat-strings>[working-package, ".", <to-library-name;jify;string-char-replace(|'/','.');string-char-replace(|'-','_')> modulename]));
		where(	<set-config>("-o", <to-java-compilation-abs-path(|working-output); (mkdirs <+ err(|"Creating dir failed"))> modulename));
		where(	<set-config> ("baseout" ,<to-java-compilation-abs-file(|working-output)> modulename));
		where(  <set-config> ("--library" ,""));
		if is-main-module-contained(|circular-units)
		then
			if InitialCompilerConfig;not(fetch-elem(?("--library",_)))
				then where(<set-config> ("-m", <get-config <+ !"main"> "-m"))
			end
		else
			where(	<rm-config> "-m")
		end;
			
		s;
		
		where(<set-config> ("-i", input); <set-config> ("-o", output); <set-config> ("-p", package); <(?0;!"--library";rm-config)<+id> islib; <set-config> ("baseout", baseout));
		where(<if not(?()) then <set-config> ("-m", <id>) end> main )
		
		
	to-library-name = separate-compilation-modify-filename(if ?"char" + ?"term" + ?"interface" + ?"class" then !["_", <id>];concat-strings end ; jify)
	to-java-compilation-folder:   modulename -> <to-library-name;jify; dollars-for-capitals> modulename
	to-java-compilation-filename: modulename -> <to-library-name;path-get-filename;jify; dollars-for-capitals> modulename
	to-java-compilation-rel-file: modulename -> <concat-strings> [<to-java-compilation-folder> modulename ,"/",<to-java-compilation-filename> modulename]
	to-java-compilation-abs-path (| working-output):modulename -> <concat-strings> [working-output, <to-java-compilation-folder> modulename, "/"]
	to-java-compilation-abs-file (| working-output) =
		  id => modulename 
		; to-java-compilation-filename
		; string-path-append(|<to-java-compilation-abs-path(|working-output)> modulename)

	
	mkdirs = 
		   file-exists 
		<+ mkdir
		<+   where(	  explode-string
					;reverse
					;drop(|1)
					;drop-until(?'/')
					;drop(|1)
					;reverse
					;implode-string
					;mkdirs)
		   ; mkdir
	 