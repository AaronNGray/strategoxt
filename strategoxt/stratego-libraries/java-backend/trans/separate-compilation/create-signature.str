module separate-compilation/create-signature

imports libstrategolib
imports separate-compilation/utils

strategies

	calculate-transitive-externals(|comp-unit, circular-units) =
		  defs-to-external-defs; unpack-specification => local-externals
		; !circular-units
		; mapconcat(get-all-module-dependencies)
		; make-set
		; log(|Notice(), ["Deps: ", <id>])
		; !(<id>, circular-units)
		; log(|Notice(), ["Circ: ", circular-units])
		; diff
		; map(get-generated-rtree;path-get-full-path; ReadFromFile;unpack-specification) => dep-externals
		; foldr(!local-externals, merge-rtrees)
		; unify-and-sort-externals
		; pack-specification
		; where(export-externals(|".rtree") => externals-file)
		; externals-to-signature => signature-term
		; !(externals-file, signature-term)
		
	
	unpack-specification =
		  ?Specification([Signature([Constructors(cs)]), Strategies(ss)])
		; !(cs, ss)
		
	pack-specification =
		  ?(cs, ss)
		; !Specification([Signature([Constructors(cs)]), Strategies(ss)])

	merge-rtrees =
		  ?((cs1, ss1), (cs2, ss2))
		; !(<conc> (cs1,cs2), <conc> (ss1, ss2))
		
		
	unify-and-sort-externals =
		  ?(cs, ss)
		// The primitives sorts the constructors and signatures deterministically and removed duplicated
		// My implementations in Stratego where so slow, that it increases the compilation time significantly
		; !(<prim("Unify_and_sort_Constructors")> cs, <prim("Unify_and_sort_Signatures")> ss)
		

	externals-to-signature =
		  ?Specification([Signature([Constructors(cs)]), Strategies(ss)])
		; !Specification([Signature([Constructors(cs)]), Strategies(<filter-anno-cong;remove-var-decs>ss)])
		   
	filter-anno-cong =
		filter(where(\ExtSDef(f, s, t) -> <not(RemoveSDef)>(f, <length> s, <length> t)\))
		
	RemoveSDef: ("DR_DUMMY",0,0) -> <id>
	RemoveSDef: ("DR_UNDEFINE",1,0) -> <id>
	RemoveSDef: ("Anno_Cong__", 2, 0) -> <id>
		
	remove-var-decs =
		bottomup(\VarDec(s,x) -> VarDec("_", x)\<+id)
		
	  
	  export-externals(|ext) =
	      if <eq> (<get-config> "baseout", <get-config> "basein") then
	        <get-config> "baseout"
	        ; warn(|<concat-strings>["Could not export library signature: name for library same as name for base file"])
	      else
	        log-timed(
	            write-to
	          ; copy-to(strc-getoutfile(!ext) => file1)
	          ; log(|Info(), ["Abstract syntax in '", file1, "'"])
			  ; !file1
	        | "Export of externals succeeded"
	        , 1
	        )
	      end
	    
		