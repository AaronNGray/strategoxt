module cleardep/cleardep

imports libstrategolib
imports cleardep/fileutils
imports separate-compilation/process-deps

signature
	constructors
	
	TimeStamper       : Stamper
	ContentHashStamper: Stamper
	Editor  : Mode
	Compile : Mode
	StrategoCompilationUnit : Impl -> CompilationUnit
	
	BuildSchedule: Impl -> BuildSchedule
	BuildTask: Impl -> BuildTask
	Open: TaskState
	InProgress: TaskState
	Success: TaskState
	Failure: TaskState
	
	RebuildAll: ScheduleMode
	RebuildInconsistent: ScheduleMode

strategies

	pack-stratego-unit = !StrategoCompilationUnit(<id>)
	unpack-stratego-unit = ?StrategoCompilationUnit(<id>)
	fail-with-message (|message) = 
		  log(|Info(), message)
		; fail

	create-compilation-unit(|source-file) =
		  (where(<is-path;path-exists> source-file)
		; !source-file; path-replace-extension(|"meta") => meta-file
		; (if !meta-file; path-exists
			then ![source-file, meta-file]
			else ![source-file] 
			end) => sources
		; !(ContentHashStamper(), Some(<get-dep-file(|source-file)>), Some(source-file), None(), None(), sources, [], Compile(), None())
		; prim("ClearDep_CompilationUnit_create")
		; prim("ClearDep_CompilationUnit_set_current_options",|<InitialCompilerConfig>)
		; !StrategoCompilationUnit(<id>))
		<+ fail-with-message(|["Failed to create Compilation unit for ", source-file])
			
	create-compilation-unit = create-compilation-unit(|<id>)

	read-compilation-unit(|source-file) =
		  (where(<is-path;path-exists> source-file)
		; !(ContentHashStamper(), Some(<get-dep-file(|source-file)>), None(), [], Compile())
		; prim("ClearDep_CompilationUnit_read")
		; prim("ClearDep_CompilationUnit_set_current_options",|<InitialCompilerConfig>)
		; !StrategoCompilationUnit(<id>))
		<+ fail-with-message(|["Failed to read Compilation unit for ", source-file])
	
	read-or-create-compilation-unit =
		read-compilation-unit(|<id>) <+ create-compilation-unit(|<id>)
	
	read-or-create-compilation-unit(|source-file) =
		read-compilation-unit(|source-file) <+ create-compilation-unit(|source-file)

	get-source-files =
		  (   unpack-stratego-unit
			; prim("ClearDep_CompilationUnit_get_source_files")
			; is-list
		) <+ fail-with-message(|["Failed to get source files for ", <id>])
	
	get-generated-files =
		  (   unpack-stratego-unit
			; prim("ClearDep_CompilationUnit_get_generated_files")
			; is-list
		) <+ fail-with-message(|["Files to get generated files for ", <id>])

	get-stratego-source-file =
		  get-source-files
		; fetch-elem(where(?RelativePath(_,<id>);has-extension(|"str")))
	
	get-generated-rtree =
		  get-generated-files
		; fetch-elem(where(path-has-extension(|"rtree")))
		
	get-generated-ctree =
		  get-generated-files
		; fetch-elem(where(path-has-extension(|"ctree")))
	
	write-compilation-unit =
		 ( where (
			  unpack-stratego-unit
			; prim("ClearDep_CompilationUnit_set_compiled_options",|<InitialCompilerConfig>)
			; prim("ClearDep_CompilationUnit_write")
		  )  <+   (log(|Info(),["Failed to write Compilation unit ", <id>] )
				; fail) )
				
	add-external-file-dependency(|compilation-unit) =
		  where(
		      is-path
			; prim("ClearDep_CompilationUnit_add_external_file_dep",| <unpack-stratego-unit> compilation-unit)
		)  <+  log(|Info(), ["Failed to add external file dependency ", <id>, " to ", compilation-unit]); fail
		
	add-generated-file(|compilation-unit) =
		  where(
			  is-path
			  ; prim("ClearDep_CompilationUnit_add_generated_file", |<unpack-stratego-unit> compilation-unit)
		) <+ log(|Info(), ["Failed to add generated file ", <id>, " to ", compilation-unit]);fail
	
	add-generated-file(|compilation-unit, file) =
		where(  !file
		; add-generated-file(|compilation-unit))
	
	// Adds the current term as dependency to compilation-unit
	add-module-dependency(|compilation-unit) =
		  where(
			  unpack-stratego-unit
			; prim("ClearDep_CompilationUnit_add_module_dep",| <unpack-stratego-unit> compilation-unit)
		  ) <+  log(|Info(), ["Failed to add module dependency ", <id> , " to ", compilation-unit]);fail
	
	// Updates the module dependency interface hash for the current term in compilation-unit
	// That means that the current term is a dependency of compilation unit
	update-module-dependency-interface(|compilation-unit) =
		where (
			  unpack-stratego-unit
			; prim("ClearDep_CompilationUnit_update_module_dependency_interface", |<unpack-stratego-unit> compilation-unit)
		) <+ fail-with-message(|["Update module dependency interface failed for: update ", <id> , " in ", compilation-unit])
		  
	is-consistent =
		  where (
			  unpack-stratego-unit => unit
			; !(unit, [], Compile())
			; (prim("ClearDep_CompilationUnit_is_consistent") 
				<+ (log(|Info(), ["Is consistent failed for ", <id>]) ; fail))
			; ?1
		)
		
	is-consistent-shallow =
		  where (
			  unpack-stratego-unit => unit
			; !(unit, [], Compile())
			; (prim("ClearDep_CompilationUnit_is_consistent_shallow") 
				<+ (log(|Info(), ["Is consistent failed for ", <id>]) ; fail))
			; ?1
		)
		
	is-consistent-to-interfaces =
		  where (
			  unpack-stratego-unit
			; (prim("ClearDep_CompilationUnit_is_consistent_to_interfaces")
				<+ fail-with-message(|["Is consistent to interfaces failed for ", <id>]))
			; ?1
		  )
		
	is-persisted =
		  where (
			  unpack-stratego-unit
			; (prim("ClearDep_CompilationUnit_is_persisted")
			  <+ log(|Info(), ["Is persisted failed for ", <id>]);fail)
			; ?1
		)
	
	// Checks whether the current term depends on check-against-unit
	depends-on-transitivly(|check-against-unit) =
		  where (
			  unpack-stratego-unit
			; (prim("ClearDep_CompilationUnit_depends_on_transitivly",|<unpack-stratego-unit> check-against-unit)
				<+ (log(|Info(), ["Depends on transitivly failed for " , <id> , " on " , check-against-unit]) ; fail))
			; ?1
		)
		
	depends-on-transitivly-on-other(|unit2, unit1) =
		  (!unit2; depends-on-transitivly(|unit1)) + (!unit1; depends-on-transitivly(|unit2))

	depends-on-transitivly-noncircularly(|check-against-unit) =
		  where (
			  unpack-stratego-unit
			; (prim("ClearDep_CompilationUnit_depends_on_transitivly_non_circularly",|<unpack-stratego-unit> check-against-unit)
				<+ (log(|Info(), ["Depends on transitivly noncircular failed for " , <id> , " on " , check-against-unit]) ; fail))
			; ?1
		)
		
	depends-on-transitivly-circularly(|check-against-unit) =
		  depends-on-transitivly(|check-against-unit)
		; not(depends-on-transitivly-noncircularly(|check-against-unit))
		
	get-module-dependencies =
		(( unpack-stratego-unit
		; prim("ClearDep_CompilationUnit_get_module_deps")
		) <+ fail-with-message(|["Get module dependencies failed for ", <id>]) )
		; map(pack-stratego-unit)
		
	get-module-circular-dependencies =
		(( unpack-stratego-unit
		; prim("ClearDep_CompilationUnit_get_module_circ_deps")
		) <+ fail-with-message(|["Get module circular dependencies failed for ", <id>]))
		; map(pack-stratego-unit)
	
	get-all-module-dependencies =
		  !(<get-module-dependencies>, <get-module-circular-dependencies>)
		; conc
		
		
	
	get-dep-file(|source-file) =
		  !source-file
		; ?RelativePath(_, relative-source-file)
		; path-get-full-path
		; !(IncludePathName(<id>), <pack-include-path>)
		; separate-compilation-parse-file
		; Snd
		; ?Module(name, _)
		; where(
			if <eq>(<remove-extension> relative-source-file, name)
				then id
				else   log(|Error(), ["Module name ", name, " does not match path ", relative-source-file])
					 ; fail
			end
			)
		; !RelativePath(AbsolutePath(<output-dirname>), <conc-strings>(<to-java-compilation-folder>name, "/dependencies.dep"))
		
	createBuildSchedule(|schedule-mode) =
		    (is-list
		  ; map(unpack-stratego-unit)
		  ; prim("ClearDep_BuildSchedule_createBuildSchedule", extract-dependencies | schedule-mode)
		  ; !BuildSchedule(<id>)
		) <+ fail-with-message(|["createBuildSchedule failed for ", <id>])
	
	flattenBuildSchedule =
		(    ?BuildSchedule(<id>)
		  ; prim("ClearDep_BuildSchedule_flatten")
		  ; is-list
		  ; map(!BuildTask(<id>))
		) <+ fail-with-message(|["flattenBuildSchedule failed for ", <id>])
	
	needsTaskToBeBuild =
		(   ?BuildTask(<id>)
		  ; prim("ClearDep_BuildTask_needsToBeBuild")
		) <+ fail-with-message(|["needsTaskToBeBuiled failed for ", <id>])
		; ?1
		
	
	isTaskCompleted =
		  where(
			  ?BuildTask(<id>)
			; prim("ClearDep_BuildTask_isTaskCompleted")
			; ?1
		) <+ fail-with-message(|["isTaskCompleted failed for", <id>])
	
	getTaskState = 
		(   ?BuildTask(<id>)
		  ; prim("ClearDep_BuildTask_getState")
		) <+ fail-with-message(|["getTaskState failed for ", <id>])
		
	setTaskState(|state) =
		  where(
			  ?BuildTask(<id>)
			  ; prim("ClearDep_BuildTask_setState", |state)
		) <+ fail-with-message(|["setTaskState failed for ", <id>, " and state ", state])
		
	task-get-units = 
		  (	  ?BuildTask(<id>)
			; prim("ClearDep_BuildTask_get_units")
			; map(\s->StrategoCompilationUnit(s)\)
		) <+ fail-with-message(|["Get units for tasks failed for ", <id>])
		
	set-interface-hash(|unit, hash) = 
		where(
			  !unit
			; unpack-stratego-unit
			; prim("ClearDep_CompilationUnit_set_interface_hash",|hash)
		) <+ fail-with-message(|["Set local interface hash failed for ", <id> , " with hash " , hash])
		
	create-compiler-options = 
		prim("ClearDep_create_compiler_options")
		<+ fail-with-message(|["Create compiler options failed for ", <id>])