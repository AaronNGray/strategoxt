module separate-compilation

signature
	constructors
		IncludeAST: Term * String -> Include

strategies

    /*strc-front-end =
        log-timed(
          strc-get-infile
  		;strc-pack-stratego-trm
  		; tfc1(|"Stratego-Sugar-Cong", "pack")
    		; strc-output-ast
        	; frontend
        | "Front-end succeeded"
        , 1
        )*/
	  
    strc-front-end1(back-end) =
	where(rules(CompiledModules:=[]));
      log-timed(
        strc-get-infile  
	
  	; separate-compilation-front-end(back-end|<get-config> "-p",<get-config> "-o")
      | "Front-end succeeded"
      , 1
      )
	
  	strc-front-end2 = 
      //  strc-get-infile
      //  ; strc-pack-stratego-trm
  	 where(<debug> "FRONT END");
  		tfc1(|"Stratego-Sugar-Cong", "pack")
        ; strc-output-ast 
  	  	; frontend
   
    
	


	separate-compilation-front-end(back-end|working-package,working-output)=
	 where(fileName := <\FILE(s) -> s\>);
	 \ FILE(s) -> (IncludePathName(s),<pack-include-path>)\;
	 debug;
	 pack-process-options;
	 where(incl := <get-config <+ ![]> "-I");
	 where(libs := <get-config <+ ![]> "-la");
	 
	 separate-compilation-parse-file;
	 where(moduleName:=<\(_,Module(name,_))->name\><id>);
	 save-and-set-options(
		 where(<debug> "Rewrite");
		 (separate-compilation-rewrite-imports(back-end|working-package,working-output)) => (ast, newLibs);
		 where(<set-config>("-I", <conc> (<map(\(_,x)-> IncludeDir(x)\)> newLibs, incl)));
		 where(<set-config>("-la", <conc> (libs, <map(\(x,_)-> x\)> newLibs)));
		!IncludeAST(ast,fileName);
		pack-stratego(|<pack-include-path>) => (files, spec);
		where(<debug> "Old front end");
		!spec;
		strc-front-end2;
		where(<debug>"Backend");
		where(<get-config> "-o");
		back-end;
		where(<set-config> ("-la", libs); <set-config> ("-I", incl))
	 | working-package,working-output,fileName,moduleName);
	 where(<debug> "Separate finished")

	string-char-replace(|c1, c2) = explode-string; map((?c1;!c2)<+id); implode-string
	
	
	to-library-name = separate-compilation-modify-filename(!["_",<id;jify>];concat-strings)

	save-and-set-options(s|working-package,working-output,filename, modulename) = 
		where(input := <get-config> "-i"; output := <get-config> "-o"; package := <get-config> "-p"; islib := <get-config<+!0> "--library"; baseout := <get-config> "baseout");
		where(	<set-config> ("-i",filename));
		where(	<set-config> ("-p", <concat-strings>[working-package, ".", <to-library-name;jify;string-char-replace(|'/','.');string-char-replace(|'-','_')> modulename]));
		where(	<set-config> ("baseout" ,<concat-strings>[<concat-strings;(mkdirs <+ err(|"Creating dir failed"))> [working-output, "/", <to-library-name;jify> modulename] ,"/",<to-library-name;separate-compilation-get-filename;jify> modulename]));
		where(	<set-config>("-o",<concat-strings>[<get-config> "baseout",".java"]));
		where(  <set-config> ("--library" ,""));
		s;
		where(<set-config> ("-i", input); <set-config> ("-o", output); <set-config> ("-p", package); <(?0;!"--library";rm-config)<+id> islib; <set-config> ("baseout", baseout))
	 
	mkdirs = 
	file-exists <+ mkdir <+ where(explode-string;reverse;drop(|1);drop-until(?'/');drop(|1);reverse;implode-string;mkdirs);mkdir
	 
	separate-compilation-rewrite-imports(back-end|working-package,working-output) =
		?(fileName, <id>);
		let
			
			
			
			to-library-import = ?Import(<id>);to-library-name;\name -> [name,"/",<separate-compilation-get-filename> name]\;concat-strings;!Import(<id>)
			
			import-to-flag = \Import(name) -> (<concat-strings>[working-package, ".", <to-library-name;string-char-replace(|'/','.')> name],<separate-compilation-replace-file> (fileName, name))\
			
			fold-on-imports(import-predicate, import-transform, collect-transform) =
				let
					
					
					transform-ast = bottomup(
						(?Imports(<id>);debug;mapconcat(pack-expand-import);debug;map(\s -> Import(s)\);debug) <
						map(
							if import-predicate
								then import-transform
								else id
							end);
						!Imports(<id>) + id) 
					collect-imports = collect-all(where(import-predicate))
				in where(ast:=<id>);!(<transform-ast> ast, <collect-imports;map(collect-transform)> ast) end
				
				
			
				
				
		in
		fold-on-imports(
			\Import(s) -> (IncludeFromPath(s),<pack-include-path>)\;separate-compilation-parse-file,
			
			where(	\Import(name) -> name\;
					where(<debug> "Check to compile"); debug;
					if not(\name -> <elem> (name, <CompiledModules>)\) then
						where(<debug> "Do compile");
						rules(CompiledModules := Cons(<id>,<CompiledModules>));
						\name -> <separate-compilation-get-file;separate-compilation-front-end(back-end|working-package,working-output)> name\
					else
						!"Do not compile"
					end);
			to-library-import, 
			import-to-flag) end
		   
			separate-compilation-get-file : name->
			FILE(<pack-include-path;fetch-elem(\IncludeDir(dir) -><concat-strings; file-exists> [dir,"/", name, ".str"]\)>)
			
			
			separate-compilation-get-filename = explode-string;reverse;take-until(?'/');reverse;implode-string
			
			separate-compilation-modify-filename(s) =
			let
				split-string = reverse;split-at(?'/');tmap(reverse;implode-string)
				in explode-string;fetch(?'/') < split-string;?(name, path);![path, "/", <s> name];concat-strings+ s end
	
			separate-compilation-replace-file = 
			let
				cut-until-slash = explode-string;reverse;drop-until(?'/');reverse;implode-string
				in \(filePath, newName) -> <conc-strings> (<cut-until-slash> filePath, newName)\ end
	
	
	
	
    separate-compilation-parse-file =
       ?(IncludeFromPath(<id>), includes)
      ; if has-extension(|"str") then
          remove-extension
        end
      ;  ?mod
      ;  <fetch-elem(
             pack-include-from-dir(|mod)
             <+ pack-include-from-xtc(|mod)
           )
         > includes
      ; (id, report-ambs)
      ; pack-fc(|"Stratego-Sugar-Cong")
	  
	  separate-compilation-parse-file = 
      let pack-qualify-pathname =
              where(explode-string => cs)
            ; if <pack-is-qualified> cs then
                id
              else
                <implode-string> ['.', '/' | cs]
              end
  
           pack-is-qualified =
             ?['/' | _] + ?['.' | _ ] + ?['\' | _] + [is-alpha, ':', '\' | id]

       in ?(IncludePathName(<pack-qualify-pathname>), _)
        ; if file-exists then
            pack-include-pathname
            ; (id,report-ambs)
              // (id, xtc-transform(!"report-ambs")) // EV
            ; pack-fc(|"Stratego-Sugar-Cong")
          else
		  fail
          end
      end