module separate-compilation

imports cleardep/cleardep
imports cleardep/fileutils

signature
	constructors
		IncludeAST: Term * String -> Include

strategies

    /*strc-front-end =
        log-timed(
          strc-get-infile
  		;strc-pack-stratego-trm
  		; tfc1(|"Stratego-Sugar-Cong", "pack")
    		; strc-output-ast
        	; frontend
        | "Front-end succeeded"
        , 1
        )*/
	  
    strc-front-end1(back-end) =
	{| CompilingModules, ImportMap :
      log-timed(
        strc-get-infile ;
	    separate-compilation-front-end(back-end|<get-config <+ !"" > "-p",<get-config;string-ensure-trailing-slash <+ !"./"> "-o")
      | "Front-end succeeded", 1) |}
	
  	strc-front-end2 = 
      //  strc-get-infile
      //  ; strc-pack-stratego-trm
  		tfc1(|"Stratego-Sugar-Cong", "pack")
        ; strc-output-ast
  	  	; frontend



	separate-compilation-front-end(back-end|working-package,working-output)=
	  if !AbsolutePath(working-output);not(path-is-directory)
	    then log(|Error(), ["Given path is not a directory or does not end with a slash: ", working-output]); fail
	  end
	; where(fileName := <\FILE(s) -> s\>)
	; if read-compilation-unit(|AbsolutePath(fileName)) => read-unit; is-persisted; is-consistent
		then 
			  log(|Info(),["Check to compile, is consistent, do not compile ", fileName])
			  ; !read-unit => work-unit
		else
			  \ FILE(s) -> (IncludePathName(s),<pack-include-path>)\
			; pack-process-options
			; where(incl := <get-config <+ ![]> "-I")
			; where(libs := <get-config <+ ![]> "-la")
			; log(|Info(), ["Parse file:         ", <id>])
			; (separate-compilation-parse-file <+ log(|Error(), ["File not found: ", <id>])) => parseResult
			; where(moduleName:=<\(_,Module(name,_))->name\><id>)
			; log(|Info(), ["Check to compile, need to compile ", moduleName])
			; log(|Info(), ["Compile to package: ", working-package])
			; log(|Info(), ["Place files in:     ", working-output])
			; rules(CompilingModules: moduleName -> 1)
			; create-compilation-unit-for-module(|moduleName) => work-unit
			; save-and-set-options(
				  where(<debug> "Rewrite")
				  ; !parseResult
				  ; (separate-compilation-rewrite-imports(back-end|moduleName, work-unit, working-package,working-output)) => (ast, newLibs)
				  ; where(<set-config>("-I", <conc;make-set> (<map(Third;Snd;!IncludeDir(<id>))> newLibs, incl)))
				  ; where(<set-config>("-la", <conc;make-set> (libs, <map(Fst)> newLibs)))
				  ; log(|Notice(), ["Import transformation for ", moduleName])
				  ; log(|Notice(), ["Use import dirs: " , <get-config> "-I"])
				  ; log(|Notice(), ["Use libraries:   " , <get-config> "-la"])
				  ; !IncludeAST(ast,fileName)
				  ; pack-stratego(|<pack-include-path>) => (files, spec)
				  ; !spec
				  ; log(|Notice(), ["Calling Frontend for ", moduleName])
				  ; strc-front-end2
				  ; log(|Notice(), ["Calling Backend for ", moduleName])
				  ; back-end(|work-unit)
			  | working-package,working-output,fileName,moduleName)
			; !work-unit
			; persist-compilation-unit(|moduleName)
			; rules(CompilingModules-: moduleName)
			; log(|Info(), ["Compilation of ", moduleName, " completed."])

			; where(<set-config> ("-la", libs); <set-config> ("-I", incl))
	  end

	string-char-replace(|c1, c2) = explode-string; map((?c1;!c2)<+id); implode-string
	
	
	to-library-name = separate-compilation-modify-filename(if or(?"char",?"term") then !["_", <id>];concat-strings end ; jify)
	to-java-compilation-folder:   modulename -> <to-library-name;jify> modulename
	to-java-compilation-filename: modulename -> <to-library-name;path-get-filename;jify> modulename
	to-java-compilation-rel-file: modulename -> <concat-strings> [<to-java-compilation-folder> modulename ,"/",<to-java-compilation-filename> modulename]
	to-java-compilation-abs-path (| working-output):modulename -> <concat-strings> [working-output, <to-java-compilation-folder> modulename, "/"]
	to-java-compilation-abs-file (| working-output) =
		  id => modulename 
		; to-java-compilation-filename
		; string-path-append(|<to-java-compilation-abs-path(|working-output)> modulename)

	save-and-set-options(s|working-package,working-output,filename, modulename) = 
		where(input := <get-config> "-i"; output := <get-config> "-o"; package := <get-config> "-p"; islib := <get-config<+!0> "--library"; baseout := <get-config> "baseout");
		where(	<set-config> ("-i",filename));
		where(	<set-config> ("-p", <concat-strings>[working-package, ".", <to-library-name;jify;string-char-replace(|'/','.');string-char-replace(|'-','_')> modulename]));
		where(	<set-config>("-o", <to-java-compilation-abs-path(|working-output); (mkdirs <+ err(|"Creating dir failed"))> modulename));
		where(	<set-config> ("baseout" ,<to-java-compilation-abs-file(|working-output)> modulename));
		where(  <set-config> ("--library" ,""));
		s;
		where(<set-config> ("-i", input); <set-config> ("-o", output); <set-config> ("-p", package); <(?0;!"--library";rm-config)<+id> islib; <set-config> ("baseout", baseout))
	 
	mkdirs = 
	file-exists <+ mkdir <+ where(explode-string;reverse;drop(|1);drop-until(?'/');drop(|1);reverse;implode-string;mkdirs);mkdir
	
	create-compilation-unit-for-module(|module-name) = 
		  create-compilation-unit(|<separate-compilation-get-relative-file;where(path-exists)> module-name)
	
	read-compilation-unit-for-module(|module-name) = 
		  read-compilation-unit(|<separate-compilation-get-relative-file;where(path-exists)> module-name)
		
	persist-compilation-unit(|module-name) = 
		  write-compilation-unit
	
	separate-compilation-rewrite-imports(back-end|module-name, module-unit, working-package,working-output) =
		?(fileName, <id>);
		let
			to-library-import = ?Import(<id>);to-library-name;\name -> [name,"/",<path-get-filename> name]\;concat-strings;!Import(<id>)
			
			import-to-flag = \Import(name) -> 
				(<concat-strings>[working-package, ".", <to-java-compilation-folder;string-char-replace(|'/','.')> name],
				 <concat-strings> [working-output, <to-library-name> name], 
				 (name,Import(<to-java-compilation-rel-file> name)),
				 <separate-compilation-get-file> name )\
			
			fold-on-imports(import-predicate, import-transform, collect-transform) =
				let
					transform-ast = bottomup(
						(?Imports(<id>);mapconcat(pack-expand-import);map(\s -> Import(s)\)) <
						map(
							if import-predicate
								then import-transform
								else id;log(|Info(), ["Import predicate failed for ", <id>])
							end);
						!Imports(<id>) + id) 
					collect-imports = collect-all(where(import-predicate))
				in  id => Module(name, body); 
					//collect-all(?Import(_));
					//map(\Import(x)->x\;read-compilation-unit-for-module;get-transitive-imports(|[name]));
					//concat;make-set => newImports;
					
					!Module(name, body) => ast;
					!(<transform-ast> ast, <collect-imports;map(collect-transform)> ast) end
					
			maybe-compile(|imported-module-name) =
			{| import-unit:
				 (read-compilation-unit-for-module(|imported-module-name)
				 	<+ (where(<debug> "Create");create-compilation-unit-for-module(|imported-module-name);debug)) //=> import-unit
						;debug
				; if depends-on-transitivly-on-other(|module-unit, <id>)
						then
							  log(|Info(),["Depends transitivly, do not follow import ", imported-module-name])
							; add-circular-module-dependency(|module-unit)
						else if !imported-module-name; CompilingModules
							then log(|Info(), ["Module ", imported-module-name, " is already in work, do not follow import"])
							else 
								  log(|Info(),["Follow import ", imported-module-name]);debug
								; add-module-dependency(|module-unit)
								; !imported-module-name
								; separate-compilation-get-file
								; separate-compilation-front-end(back-end|working-package,working-output)
							end
					end
				  
			|}
	
		in
		fold-on-imports(
			\Import(s) -> (IncludeFromPath(s),<pack-include-path>)\;debug;separate-compilation-check-file,
			where(maybe-compile(|<\Import(name) -> name\> <id>));to-library-import, 
			import-to-flag) end
		   
	separate-compilation-get-file : name->
		FILE(<pack-include-path;fetch-elem(\IncludeDir(dir) -><concat-strings; file-exists> [dir,"/", name, ".str"]\)>)
	separate-compilation-get-relative-file : name->
		<pack-include-path;fetch-elem(
			\IncludeDir(dir) -> 
				<where(<concat-strings; file-exists> [dir,"/", name, ".str"])>
					 RelativePath(AbsolutePath(dir), <concat-strings> [name, ".str"])\)>
			
	separate-compilation-modify-filename(s) =
		let
			split-string = reverse;split-at(?'/');tmap(reverse;implode-string)
			in explode-string;fetch(?'/') < split-string;?(name, path);![path, "/", <s> name];concat-strings+ s end
	
	separate-compilation-replace-file = 
		let
			cut-until-slash = explode-string;reverse;drop-until(?'/');reverse;implode-string
			in \(filePath, newName) -> <conc-strings> (<cut-until-slash> filePath, newName)\ end
			

		    pack-include-from-dir-exists(|mod) :
		      IncludeDir(dir) ->  <concat-strings; file-exists> [dir,"/", mod, ".str"]
			  
			  pack-include-from-xtc-exists(|mod) :
			    IncludeXTC() -> <conc-strings; xtc-find-loc> (mod, ".str")

separate-compilation-check-file =
  /* ?(IncludeFromPath(<id>), includes)
  ; if has-extension(|"str") then
      remove-extension
    end
  ;  ?mod
  ;  <fetch-elem(
         pack-include-from-dir-exists(|mod)
         <+ pack-include-from-xtc-exists(|mod)
       )
     > includes*/ separate-compilation-parse-file
	 
	 
/*  separate-compilation-check-file = 
     let pack-qualify-pathname =
             where(explode-string => cs)
           ; if <pack-is-qualified> cs then
               id
             else
               <implode-string> ['.', '/' | cs]
             end
 
          pack-is-qualified =
            ?['/' | _] + ?['.' | _ ] + ?['\' | _] + [is-alpha, ':', '\' | id]

      in ?(IncludePathName(<pack-qualify-pathname>), _)
       ; file-exists
     end*/
	
    separate-compilation-parse-file =
       ?(IncludeFromPath(<id>), includes)
      ; if has-extension(|"str") then
          remove-extension
        end
      ;  ?mod
      ;  <fetch-elem(
             pack-include-from-dir(|mod)
             <+ pack-include-from-xtc(|mod)
           )
         > includes
      ; (id, report-ambs)
      ; pack-fc(|"Stratego-Sugar-Cong")
	  
	  separate-compilation-parse-file = 
      let pack-qualify-pathname =
              where(explode-string => cs)
            ; if <pack-is-qualified> cs then
                id
              else
                <implode-string> ['.', '/' | cs]
              end
  
           pack-is-qualified =
             ?['/' | _] + ?['.' | _ ] + ?['\' | _] + [is-alpha, ':', '\' | id]

       in ?(IncludePathName(<pack-qualify-pathname>), _)
        ; if file-exists then
            pack-include-pathname
            ; (id,report-ambs)
              // (id, xtc-transform(!"report-ambs")) // EV
            ; pack-fc(|"Stratego-Sugar-Cong")
          else
		  fail
          end
      end