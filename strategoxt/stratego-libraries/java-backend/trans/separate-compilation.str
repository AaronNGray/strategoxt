module separate-compilation

imports cleardep/cleardep
imports cleardep/fileutils
imports separate-compilation/utils
imports separate-compilation/process-deps
imports separate-compilation/separate-compilation-options
imports separate-compilation/fileutils

signature
	constructors
		IncludeAST: Term * String -> Include

strategies

    /*strc-front-end =
        log-timed(
          strc-get-infile
  		;strc-pack-stratego-trm
  		; tfc1(|"Stratego-Sugar-Cong", "pack")
    		; strc-output-ast
        	; frontend
        | "Front-end succeeded"
        , 1
        )*/
	  
	strc-front-end1(back-end) =
	{| CompilingModules, ImportMap :
		  log-timed(
			  strc-get-infile
			; log(|Info(), ["Calling separate front end ", <id>])
			; separate-compilation-front-end(back-end|<get-config <+ !"" > "-p",<get-config;string-ensure-trailing-slash <+ !"./"> "-o")
			| "Front-end succeeded", 1)
	|}
	
  	strc-front-end2 = 
      //  strc-get-infile
      //  ; strc-pack-stratego-trm
  		tfc1(|"Stratego-Sugar-Cong", "pack")
        ; strc-output-ast
  	  	; frontend
		; strc-optimize



	separate-compilation-front-end(back-end|working-package,working-output)=
		 // create-compilation-units(|working-package, working-output)
		  where(fileName := <\FILE(s) -> s\>) 
	// Make a relative file of the given with respect to the include path, then read or create the compilation unit for this file
		; !AbsolutePath(fileName) => absolute-file
		; pack-include-path
		; fetch-elem(\IncludeDir(d) -> <path-relativize(| AbsolutePath(d))>  absolute-file\)
	//	; path-relativize (|
	//		<pack-include-path; fetch-elem(\IncludeDir(d) -> AbsolutePath(d)\)> )
		; if complete-rebuild 
			then create-compilation-unit(|<id>)
			else read-or-create-compilation-unit(|<id>)
		  end
		; pack-process-options
		// But the output directory in the search path to find generated rtrees
		; where({i , is:
			  !"-I"
			; get-config => [i|is]
			; !("-I", [i,IncludeDir(working-output)|is])
			; set-config
		})
	// Create the build schedule for the compilation unit and flatten it
		; log(|Notice(), ["Calculating build schedule for ", <id>])
		; ![<id>]
		; createBuildSchedule(|<get-schedule-mode>)
		; flattenBuildSchedule
		; log(|Info(), ["Calculated build schedule ", <id>])
	// Compile according to the build schedule, outer map maps over the build tasks in the build schedule
		; map(	not(needsTaskToBeBuild) <+ (task-get-units
				; log(|Info(), ["Compile Build Task " , <id>])
	// Compiles a strongly connected component
				; compile(back-end|working-package,working-output)
	// Update the interface versions of the dependencies 
				; where( map ({unit: 
					  id => unit
					; get-all-module-dependencies
					; map(update-module-dependency-interface(|unit))
					}))
	// Finally write all units
				; map (write-compilation-unit)
			)
		)
		

	
	compile (back-end|working-package,working-output)=
	  if !AbsolutePath(working-output);not(path-is-directory)
	    then log(|Error(), ["Given path is not a directory or does not end with a slash: ", working-output]); fail
	  end
	; id => circular-units
	; if not(complete-rebuild);!circular-units; map(is-persisted; is-consistent-shallow; is-consistent-to-interfaces)
		then 
			  log(|Info(),["Check to compile, is consistent to interfaces, do not compile ", circular-units])
		else
			  map ( {parseResult, work-unit, fileName, moduleName:
				  get-stratego-source-file
				; path-get-full-path => fileName
				; !(IncludePathName(fileName),<pack-include-path>)
				 
				; log(|Info(), ["Parse file:         ", <id>])
				; (separate-compilation-parse-file <+ log(|Error(), ["File not found: ", <id>])) => parseResult
				; where(moduleName:=<\(_,Module(name,_))->name\><id>)
				; log(|Info(), ["Check to compile, need to compile ", moduleName])
				; log(|Info(), ["Compile to package: ", working-package])
				; log(|Info(), ["Place files in:     ", working-output])
				; (create-compilation-unit-for-module(|moduleName) => work-unit
					<+ (log(|Error(), ["Module name does not match file name: ", moduleName, " in " , fileName]); fail))
				; log(|Info(), "Create pair")
				; !(moduleName, work-unit, parseResult, fileName)
				 })
			; compile-asts(back-end|working-package,working-output, circular-units)
		end
			
	compile-asts(back-end|working-package,working-output, circular-units)= {x, xs, other-circular-units :
			  log(|Info(), ["Transforming import"])
			//  where(map(\(moduleName, _, _, _) -> moduleName\) => moduleNames)
			; map( {moduleName, work-unit, ast, fileName, transformed-ast, new-libs :
				  ?(moduleName, work-unit, ast, fileName)
				; !ast
				; (separate-compilation-rewrite-imports(back-end|moduleName, work-unit, working-package,working-output, circular-units)) => (transformed-ast, new-libs)
				; !(moduleName, work-unit, transformed-ast, new-libs, fileName)
				})
			
			// We know, that the list of units to compile at once is not empty, so we can guarantee a first element
			; ?[x|xs]
			; !(xs, x)
			; log(|Notice(), ["Combine modules"])
			; foldl( {new-content, new-libs, moduleName, work-unit, merged-name, merged-content, merged-libs, fileName :
				  ?( (_, _, Module(_, new-content), new-libs, _), (moduleName, work-unit, Module(merged-name, merged-content), merged-libs, fileName) )
				; !(moduleName, work-unit, Module(merged-name, <conc> (new-content, merged-content)), <conc> (new-libs, merged-libs), fileName)
			})
			
			; where(!xs;map(Snd) => other-circular-units)

			; log(|Info(), ["Prepare for front end"])
			; {moduleName, merged-ast, new-libs, fileName, work-unit, rtree-file, signature-term, externals:  
			  ?(moduleName, work-unit, merged-ast, new-libs, fileName)
			; save-and-set-options(
				  where(libs := <get-config <+ ![]> "-la")
				; where(<set-config>("-la", <conc;make-set> (libs, <map(Fst)> new-libs)))
				; log(|Notice(), ["Import transformation for ", moduleName])
				; log(|Notice(), ["Use libraries:   " , <get-config> "-la"])
			
				// Find declared externals, front end does not treat them specially
				// But we need to do in the backend
				; !merged-ast
				; collect-all(?ExtSDef(_,_,_)) => externals
				; !IncludeAST(merged-ast,fileName)
				; pack-stratego(|<pack-include-path>) => (files, spec)
				; !spec
			
				; log(|Notice(), ["Calling Frontend for ", moduleName])
				; strc-front-end2
			
				;  log(|Info(), ["Calculating transitive externals for ", work-unit])
				; where(
					  calculate-transitive-externals(|work-unit, circular-units) => (rtree-file, signature-term)
					; add-generated-file(|work-unit, AbsolutePath(rtree-file)) 
					; set-interface-hash(|work-unit, signature-term) 
				
				)
				
				; log(|Notice(), ["Calling Backend for ", moduleName])
				; back-end(|circular-units, externals)
				; where(<set-config> ("-la", libs))
			| working-package,working-output,fileName,moduleName)}
			;{compiled-module-name:
			  !x
			; ?(compiled-module-name, _, _ ,_,_)
			; !xs
			; map( {module-name, module-unit,  file-name:
				  ?(module-name, module-unit, _, _, file-name)
				; ![(module-name, module-unit, (file-name, Module(module-name, [Imports([Import(compiled-module-name)])])), file-name)]
				})
			; map(compile-asts(back-end|working-package,working-output, other-circular-units))
			}
			; !circular-units
			}
	 

	string-char-replace(|c1, c2) = explode-string; map((?c1;!c2)<+id); implode-string
	
	
	to-library-name = separate-compilation-modify-filename(if ?"char" + ?"term" + ?"interface" + ?"class" then !["_", <id>];concat-strings end ; jify)
	to-java-compilation-folder:   modulename -> <to-library-name;jify> modulename
	to-java-compilation-filename: modulename -> <to-library-name;path-get-filename;jify> modulename
	to-java-compilation-rel-file: modulename -> <concat-strings> [<to-java-compilation-folder> modulename ,"/",<to-java-compilation-filename> modulename]
	to-java-compilation-abs-path (| working-output):modulename -> <concat-strings> [working-output, <to-java-compilation-folder> modulename, "/"]
	to-java-compilation-abs-file (| working-output) =
		  id => modulename 
		; to-java-compilation-filename
		; string-path-append(|<to-java-compilation-abs-path(|working-output)> modulename)

	
	mkdirs = 
	file-exists <+ mkdir <+ where(explode-string;reverse;drop(|1);drop-until(?'/');drop(|1);reverse;implode-string;mkdirs);mkdir
	
	
	separate-compilation-rewrite-imports(back-end|module-name, module-unit, working-package,working-output, circular-units) =
		?(fileName, <id>);
		let
			to-library-import = 
				  ?Import(<id>)
				; to-java-compilation-rel-file
				; !Import(<id>)
			
			import-to-flag = \Import(name) -> 
				(<concat-strings>[working-package, ".", <to-java-compilation-folder;string-char-replace(|'/','.')> name],
		
				 <concat-strings> [working-output, <to-library-name> name], 
					 
				 (name,Import(<to-java-compilation-rel-file> name)),
				 
				 <separate-compilation-get-file> name )\
			
		
					
			get-unit-add-dependency(|imported-module-name) = 
			{ import-unit:
				  read-or-create-compilation-unit-for-module(|imported-module-name)
				; if equal(| module-unit)
					then	  log(|Info(), ["Module imports itself ", module-name])
					else
						  add-module-dependency(|module-unit)
					end
				
			}
			
			process-import-str(|circular-source-files) =
			{ term: 
				  ?(term, <has-extension(|"str")>)
				; get-unit-add-dependency(|<\Import(name) -> name\> term)
				; if !(<id;get-stratego-source-file>, circular-source-files); elem 
						then fail // Circular, do not transform
						else !term; to-library-import
				  end
			}
				
			process-import-rtree(|circular-source-files) =
			{ file :
				  ?(term, file)
				; where(<has-extension(|"rtree")> file)
				; !AbsolutePath(file)
				; add-external-file-dependency(|module-unit)
				; !term
				}
				
	
		in {| File: 
		  where(!circular-units;map(get-stratego-source-file) => circular-source-files)
		
		; fold-on-imports(
			{import, file:
				  id => import
				; import-get-file => file
				; rules(File: import -> file)
			},
			  !(<id>, <id;File>)
			;(process-import-str(|circular-source-files) + process-import-rtree(|circular-source-files))
			, if File;has-extension(|"str")
				then import-to-flag
				else fail // do not want to collect rtrees
			end
			)
		|}
		end
		   
