%%%
%%% SDF grammar for the language "pico".
%%%
%%% This grammar is part of the Grammar Base which is located at
%%%      http://www.program-transformation.org/gb/
%%% 
%%%  Grammar: pico
%%%  Version: 1
%%% Maturity: Stable
%%%
%%% Description:
%%%  Imperative pascal like toy programming language

definition

module Pico-Syntax
exports
  lexical syntax
    "%%" ~[\n]* [\n] -> LAYOUT
    [\ \t\n] -> LAYOUT

  sorts ID

  lexical syntax
    [a-z] [a-z0-9]* -> ID

  sorts NAT-CON

  lexical syntax
    [0-9]+ -> NAT-CON

  sorts STR-CON

  lexical syntax
    "\"" ~[\"\n]* "\"" -> STR-CON

  sorts EXP

  context-free syntax
    ID -> EXP {cons("ID")}
    NAT-CON -> EXP {cons("NAT-CON")}
    STR-CON -> EXP {cons("STR-CON")}
    "(" EXP ")" -> EXP {bracket}
    EXP "+" EXP -> EXP {left, cons("plus")}
    EXP "-" EXP -> EXP {left, cons("minus")}
    EXP "||" EXP -> EXP {left, cons("or")}

  context-free priorities
    { left : EXP "+" EXP -> EXP {left, cons("plus")} EXP "-" EXP -> EXP {left, cons("minus")} } non-assoc EXP "||" EXP -> EXP {left, cons("or")}

  sorts TYPE

  context-free syntax
    "natural" -> TYPE {cons("natural")}
    "string" -> TYPE {cons("string")}

  sorts STATEMENT

  context-free syntax
    ID ":=" EXP -> STATEMENT {cons("assign")}
    "if" EXP "then" {STATEMENT ";"}* "else" {STATEMENT ";"}* "fi" -> STATEMENT {cons("if-then-semicolon-else-semicolon-fi")}
    "while" EXP "do" {STATEMENT ";"}* "od" -> STATEMENT {cons("while-do-semicolon-od")}

  sorts PROGRAM DECLS IDTYPE

  context-free syntax
    "begin" DECLS {STATEMENT ";"}* "end" -> PROGRAM {cons("begin-semicolon-end")}
    ID ":" TYPE -> IDTYPE {cons("colon")}
    "declare" {IDTYPE ","}* ";" -> DECLS {cons("declare-comma-semicolon")}

module Main
imports Pico-Syntax
