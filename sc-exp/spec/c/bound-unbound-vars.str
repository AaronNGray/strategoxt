module bound-unbound-vars
imports Stratego
strategies

  mark-bound-unbound-vars =
    say(!"marking bound-unbound-vars");
    Specification([id, Strategies(map(mark-buv))])
    ;say(!"marked bound-unbound-vars")

  mark-scope =
    ? Scope(xs, _)
    ; Scope(id,
        {| MarkVar : 
           where(!xs; map({?x; rules(MarkVar : Var(x) -> Var(x){"unbound"})}))
           ; mark-buv
        |})

  mark-match :
    Match(t) -> Match(t')
    where <alltd(MarkVar)> t => t'
        ; <collect(?Var(<id>))> t
        ; map({?x; rules(MarkVar : Var(x) -> Var(x){"bound"})})

  mark-build = 
    Build(alltd(MarkVar))

  mark-call =
    Call(id,id)
    ; where(save-MarkVar => bnd)
    ; Call(id, mark-buv)
    ; where(<isect-MarkVar> bnd)

  mark-let =
    Let(id, id)
    ; where(save-MarkVar => bnd0)
    ; Let(id, mark-buv)
    ; where(<isect-MarkVar> bnd0; save-MarkVar => bnd1)
    ; Let(map(mark-buv; where(<restore-MarkVar> bnd1)), id)

  mark-buv =
    mark-match 
    <+ mark-build
    <+ mark-scope
    <+ mark-let
    <+ Choice(id, id); choice(mark-buv)
    <+ LChoice(id, id); lchoice(mark-buv)
    <+ GuardedLChoice(id, id, id); guardedlchoice(mark-buv)
    <+ all(mark-buv)

strategies // Choice
   
  choice(uv) =
    abstract-choice(Choice(uv,id),Choice(id, uv))

  lchoice(uv) =
    abstract-choice(LChoice(uv,id),LChoice(id, uv))

  guardedlchoice(uv) =
    abstract-choice(GuardedLChoice(uv,uv,id),GuardedLChoice(id,id,uv))

  abstract-choice(left, right) =
    where(save-MarkVar => bnd0)
    ; left
    ; where(save-MarkVar => bndL; <restore-MarkVar> bnd0)
    ; right
    ; where(<isect-MarkVar> bndL)


strategies // Dynamic rule manipulation

  save-MarkVar =
    <table-getlist> "MarkVar"

  clean-MarkVar =
    where(<table-destroy> "MarkVar";
          <table-putlist>("MarkVar", []))

  restore-MarkVar = ?tbl;
    where(<table-destroy> "MarkVar";
          <table-putlist>("MarkVar", tbl))

  isect-MarkVar =
     map(try(?(Scopes,_)
        <+ {?(key, [Defined(_)|_]);
            (where(<table-get> ("MarkVar", key) => [Defined(_)|_])
             <+ !(key, [Undefined]))
           }))
    ; restore-MarkVar
