----------------------------------------------------------------------
            __ __ __  __    _  __ __  __  __   __
           |__   |   |__|  /_\   |   |__ | _  |  |
            __|  |   | \  /   \  |   |__ |__| |__|

----------------------------------------------------------------------

STRATEGO : Specification of Program Transformation Systems

Version @VERSION@

----------------------------------------------------------------------

Copyright (c) 1998-2001 Eelco Visser <visser@acm.org>

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
USA.

----------------------------------------------------------------------

DESCRIPTION

Stratego is a modular language for the specification of fully
automatic program transformation systems based on the paradigm of
rewriting strategies.

In Stratego, basic transformation rules are expressed by means of
labeled conditional rewrite rules. Exhaustively applying all rewrite
rules in a collection of valid rules is often not desirable; a system
of rules can be non-terminating, or, more frequently,
non-confluent. The latter means that different outcomes of the
normalization process are possible depending on the position of
application and the selection of rules.  Therefore, it is necessary to
have more control over the application of rules. In standard systems
based on rewriting, normalization is controlled by a fixed default
rewriting strategy. In such systems more control is achieved by
encoding the desired strategy with additional rewrite rules that spell
out a traversal over the abstract syntax tree and apply the
transformations in the desired order.

To control the application of transformation rules, Stratego provides
a language for defining rewriting strategies based on primitives for
sequential programming and abstract syntax tree traversal. A rewriting
strategy selects a number of rules from the available rules and
defines in what order these rules are applied to a program
fragment. Thus, the separation of concerns between logic
(transformation rules) and control is maintained.

Transformation strategies can be defined generically, i.e.,
parameterized with a rule selection or other strategy to apply. The
language comes with a large library of generic strategies for syntax
tree traversal and built-in data type manipulation. In particular, the
library contains generic, language independent strategies for language
processing such as substitution, unification, and bound variable
renaming that are parameterized with the shape of the relevant
language constructs. Strategies cannot only be used to combine rules
into transformations, but can also be used inside rules to test
applicability conditions and perform local transformations.

Stratego specifications are compiled to C programs. Compiled
specifications have built-in support for exchange of abstract syntax
trees with other tools via the ATerm format. The Stratego distribution
also provides a (prototype) interpreter for the language for rapid
prototyping of specifications.

Stratego is being applied in a wide variety of program transformation
projects including a software improvement tool for Cobol programs
(CobolX), a compiler for Tiger, a documentation generation tool for
SDL, tools for grammar transformation, and a tool for deforestation of
functional programs through the warm fusion algorithm (HSX). The
StrategoCompiler is bootstrapped, i.e., implemented in Stratego
itself.

The Stratego system has been available as free software since March
1999. Since April 2000 the distribution is available from

      http://www.stratego-language.org

Stratego is also distributed as part of the XT package of
transformation tools that combines a number of free tools to support
program transformation. The package includes a collection of syntax
definitions for programming languages and tools for generating tools
such as pretty-printers from syntax definitions. See

     http://www.program-transformation.org/xt

----------------------------------------------------------------------

CONTENTS 

This directory contains the Stratego implementation. It consists of

 - spec/  	 : specification of the compiler components
	
 - src/		 : bootstrapped compiler components

 - test/	 : regression tests for the compiler

 - doc/ 	 : reference manual, tutorial, library and compiler
                   documentation

 - xmpl/	 : small examples

 - bench/	 : benchmarks


 - share/tex	 : LaTeX packages

 - share/bib	 : BibTeX files

 - www/		 : Stratego web site

 - build/	 : buildfiles for automatically building the distribution
		   (requires the autobuild software of Merijn de Jonge)

 - rpm/		 : RPM specifications for aterm and stratego

 installation creates the following directories

 - prefix/share/stratego : installed Stratego library

 - prefix/bin/		 : installed executables

 - prefix/include/	 : installed include files

 - prefix/lib/		 : installed binary libraries

----------------------------------------------------------------------

ATERM LIBRARY
 
For the installation of Stratego, the ATerm library is required. The
ATerm library can be obtained from
 
   http://www.cwi.nl/projects/MetaEnv/aterm/
 
For installation proceed as follows
 
 > cd /path/to/aterm
 > tar zxf aterm-x.y.tar.gz
 > cd aterm-x.y
 > ./configure --prefix=/aterm/install/directory --with-all
 > gmake
 > gmake install
 
After installation with this configuration, the library is installed
in /aterm/install/directory/lib, the executables in
/aterm/install/directory/bin, and the include files in
/aterm/install/directory/include.
 
 For further information about installion see the aterm README.
 
----------------------------------------------------------------------

USER CONFIGURATION
 
If you only intend to use the Stratego compiler and not work on its
development set prefix to any appropriate value when installing, e.g.,
 
 > ./configure --prefix=/usr/local \
               --with-aterm=/aterm/install/directory
 
This will cause executables to be installed in /usr/local/bin,
libraries in /usr/local/lib, include files in /usr/local/include and
the Stratego library in /usr/local/share/stratego.
 
Note that the --with-aterm option should point to the directory
containing the bin, lib and include directories with the aterm
installation.
 
----------------------------------------------------------------------

DEVELOPER CONFIGURATION
 
If you intend to change the compiler specification in spec/ and
bootstrap the compiler, you need to set prefix to the local directory.
Or at least a directory where you have write permissions such that it
is easy to re-install the compiler. This is the what I usually do:
 
 > ./configure --prefix=`pwd` \
               --with-aterm=/aterm/install/directory
 
This entails that you need to include `pwd`/bin in your PATH.
 
----------------------------------------------------------------------

INSTALLATION
 
For both kinds of configurations, make the compiler by
 
 > gmake
 > gmake install
 
----------------------------------------------------------------------

BOOTSTRAPPING
 
To create a new version of the compiler, edit the appropriate files in
the spec/* directories. Then do the following
 
 > cd spec
 > gmake
 > gmake install
 
Then use the generated compiler to compile some test specifications.
If that seems to work, try to bootstrap by
 
 > gmake bootstrap
 
This will compile the compiler components with itself.
 
If this goes wrong at some point, you'll have to reinstall the stable
compiler in the src/ tree:
 
 > cd ..
 > gmake install
 
It can be useful to have two installations of the compiler, one of
them the stable compiler from src. To achieve this do the following.
 
 1) Make a user configuration as described above and make and install
 the compiler with this configuration. This puts a stable version of
 the compiler in a standard place like /usr/local/bin.
 
 2) Make a developer configuration as described above.
 
 3) In one terminal use the stable compiler to compile the compiler
 components, i.e., PATH = /usr/local/bin:...
 
 4) In another terminal use the newly compiled compiler to test
 your changes i.e., PATH = /path/to/stratego/bin:...
 
 Now if something goes wrong in 4) it is easier to recompile the
 compiler components.

 After you have succesfully bootstrapped the new compiler components
 you can issue a 

 > gmake bootinstall

 in the spec/ directory to install the bootstrapped sources in the
 src/ tree.
 
----------------------------------------------------------------------

CONTRIBUTIONS

If you have made a useful improvement or extension of the library,
compiler, or language, please send a patch with respect to the
latest release to visser@cs.uu.nl. 

----------------------------------------------------------------------
