module tg2fold-strategy

imports Stratego tree-grammar
imports options string

/**
 * Transforms a Stratego signature in TreeGrammar format to a
 * Stratego module containing a fold strategy to systematically 
 * translate other languages into the language specified by the
 * input signature.
 *
 * Author: Martin Bravenboer <martin@mbravenboer.org>
 */
strategies
  
  io-tg2fold-strategy =
    iowrap( T2-Module )

  T2-Module:
    TreeGrammar(nt-decs)
      ->
    |[
      module TODO

      strategies
        ~*fold-sdefs

      strategies
        ~*t2-sdefs

      strategies
        fold-strategy(cond, transform, children) =
            ?(nt, <id>)
          ; (   cond
              < id
              + risky(
                  <concat-strings> ["\n\nTransformation failed when trying to transform to ", nt, ":\n-------------\n"]
                , transform
                )
            )
          ; risky(<concat-strings> ["\n\nExpected ", nt, ", but found:\n-------------\n"], children)
    ]|
      where <map(t2-sdef)>    nt-decs => t2-sdefs
          ; <map(to-nt-sdef)> nt-decs => fold-sdefs

  to-nt-sdef :
    NonTermDec(Id(n), argcount, prods)
      ->
    Def |[
      ~id:to-nt ( ~*args ) =
        <fold-strategy(~id:is-nt, ~id:t2-nt, ~recb )> ( ~str:n , <id>)
    ]|
      where <t2-nt> n => t2-nt
          ; <is-nt> n => is-nt
          ; <to-nt> n => to-nt
          ; <int-to-int-list; map(to-nt-paramname; to-Typedid)> argcount => args
          ; < foldr(
                !Strat |[ fail ]|
              , !Strat |[ ~<Fst; prod-to-cong> + ~<Snd>]|
              )
            > prods => recb

  prod-to-cong :
    Prod(Id(nt), args) -> Strat |[ ~id:nt ( ~*fargs ) ]|
      where <map(arg-to-fold-arg)> args => fargs

  arg-to-fold-arg :
     NonTermRef(Id(nt), args) -> Strat |[ ~id:to-nt ( ~*fargs ) ]|
      where <to-nt> nt => to-nt
          ; <map(arg-to-fold-arg)> args => fargs
 
  arg-to-fold-arg: Int()     -> Strat |[ is-int     ]|
  arg-to-fold-arg: String()  -> Strat |[ is-string  ]|
  arg-to-fold-arg: Param(x)  -> Strat |[ ~id:param  ]|
    where <to-nt-paramname> x => param

  to-Typedid :
    s -> Typedid |[ ~id:s ]|
      where <is-string> s

  t2-sdef :
    NonTermDec(Id(n), _, _) -> Def |[ ~id:t2-nt = fail ]|
      where <t2-nt> n => t2-nt

  t2-nt = <conc-strings> ("T2-", <id>)
  is-nt = <conc-strings> ("is-", <id>)
  to-nt = <conc-strings> ("to-", <id>)
  to-nt-paramname = <conc-strings> ("to-s", <int-to-string>)

  int-to-int-list = <copy> (<id>, ()); map-with-index(Fst)
