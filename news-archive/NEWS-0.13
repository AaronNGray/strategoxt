StrategoXT 0.13 -- released January ?, 2005

---------++ Summary of Changes

Language:
   * New dynamic rule features

Compiler:
   * Several bug fixes and new features

Library:

Tools:
   * StrategoXT Utils

---------++ New Dynamic Rule Features

    (Eelco Visser)

---------++ Separate package for StrategoXT Utils

Tools that are not essential to most Stratego users are now in a
separate package, =strategoxt-utils=. This package consists of the
ex-StrategoXT packages =aterm-tools=, =dot-tools=, =graph-tools=,
=stratego-util= and =stratego-tools=. Obviously, the installation of
this package is optional and most users will only need if you want to
visualize ATerms with the Dot language and =Graphviz=.

More concrete, the following tools are part of strategoxt-utils:
=GraphXML2dot=, =pp-dot=, =sdf-wf=, =term-to-dot=, =tohtml-sdf=,
=graph-term2GraphXML=, =GraphXML-analysis=, =pp-stratego-latex-alltt=,
=sdf-doc=, =sdf-wf=, =tohtml=, =GraphXML2dot=, =ismap2usemap=,
=sdf2sg=, =sdf-imports=, =term-to-adot=.

Furthermore, the Emacs mode for Stratego is now part of StrategoXT
Utils. In the future, release more utils might be moved to this
package.

    (Rob Vermaas)

---------++ Stratego Compiler

---------+++ Compilation of Pattern-Matching in Dynamic Rules

Pattern matching in dynamic rules is implemented by replacing
non-context variables in the left-hand side of the rule by dummy
terms. This term used to be the empty lists, which caused some
problems when if a the left-hand side itself already contains an empty
list. The dynamic rule dummy is now a =DR_DUMMY=, which solves these
issues.

Note, that two rules that have the same left-hand side pattern, except
for an empty list in the first and a non-context variable in the
second, now also have a different key. If you want them to have the
same key, then you can for example move the [] pattern to the where
condition.

---------+++ Redefinition of External Strategies

In program that use separate compilation, redefinition of external
strategies was not always detected in the previous release. If a
redefined strategy was only invoked from the code that was separately
compiled, then the redefinition was not noticed by the compiler. This
has now been fixed.

---------+++ Improved Reporting of Ambiguities

By default, SGLR applies some heuristic filters for removing
ambiguities in parse trees. These heuristic filters are discouraged,
since these disambiguations are not defined in a syntax
definition. These filters can now be disabled per Stratego module by
including the term =HeuristicFilters(Off)= in the .meta file for that
module. This is especially useful if you are using a lot of concrete
syntax and if you are implementing an object language embedding in
Stratego. Disabling the heuristic filters makes ambiguities and
non-ambiguities less surprising. See the next subsection for an
example.

---------+++ Improved Reporting of Ambiguities

If you are using concrete object syntax in Stratego, then you might
encounter ambiguities in your Stratego program, in particular if you
disable the heuristic filters of SGLR. Ambiguites in the Stratego code
(not in the object code) caused the compiler to fail in a horrible way
during C compilation. This has now been fixed by detecting these
ambiguities and reporting them in a more user-friendly way.

For example, consider this Stratego program
<verbatim>
module foo
imports Stratego list-cons tuple-cons
strategies

  main =
    !|[ Foo ]|
</verbatim>

and its meta file:
<verbatim>
Meta([
  Syntax("StrategoStratego")
, HeuristicFilters(Off())
])
</verbatim>

The =|[ Foo ]|= construct is highly ambiguous, which is now reported as:
<verbatim>
martin@logistico:~/tmp/str> strc -i foo.str
compiling foo.str
error: ambiguity in the definition of main. Alternatives:
    - Op("CallNoArgs",[Op("SVar",[Str("Foo")])])
    - Op("Var",[Str("Foo")])
    - Op("ConstType",[Op("SortNoArgs",[Str("Foo")])])
</verbatim>

This report uses abstract syntax for Stratego, which might be improved
to concrete syntax in the future.

---------+++ Cons and Nil: Special Constructor Names

=Cons/2= (=Cons= with two argument terms) and =Nil/0= are reserved
constructor names in Stratego, used for lists. The compiler handled
these constructors names somewhat sloppy, resulting in compilation
errors for programs that use =Cons= and =Nil= constructor names with a
differnt arity. This has now been fixed, hence only =Cons/2= and
=Nil/0= are reserved constructor names from now.


   * Support for quoted constructors

    (Martin Bravenboer)

---------++ Stratego Standard Library

   * iowrap is obsolete

    (Rob Vermaas)

* spec/pipe.str: bug fixes. 
  - stdin-from-pipe and stdout-to-pipe didn't work correctly when
  Pipe argument was stdin (0) or stdout (1). Since stdin and stdout
  were explicitly closed, the connection with the pipe was lost.
  Using dup2 instead of dup solves the problem because there is no
  need to close file descriptiors.
  -write-term-to-text-pipe uses WriteToTextFile but outfile argument
  is a stream. Replacing WriteToTextFile by fprint solved the
  problem.

    (Merijn de Jonge)

* logging

    (Niels Janssen)

* call(|opt-fdin, opt-fdout, opt-fderr)

    (Martin Bravenboer)

---------++ AutoXT

All macros now use the XT prefix

Use AC_CONFIG_AUX_DIR and fix in strc-core Makefile.am

	* autoxt.m4: USE_XT_PACKAGES is obsolete and should be replaced by
	in your configure.ac files by XT_USE_XT_PACKAGES. Thanks to Akim
	for suggesting to use autoupdate macros.

	* autoxt.m4: DETECT_SVN_REVISION was already obsolete, but now
	also used an autoupdate macro.

    (Akim Demaille and Martin Bravenboer)

---------++ ATerm to XML

	* trans/data2xml-doc.str, trans/xml-info2data.str: the --explicit
	and the --very-explicit mode now use the XML namespace
	http://aterm.org for the XML elements the represent ATerm
	structures and types, such as list, tuple, int, string, anno
	etc. In the explicit mode, this avoids conflicts with 'real'
	ATerms of the same name. I'm using the namespace prefix 'at'.

	* trans/data2xml-doc.str, trans/xml-info2data.str: all modes now
	preserve all annotations by representing them as nested "anno"
	elements in the XML namespace http://aterm.org.

	* xtc/xml2aterm.str: the explicity mode is no longer required for
	this tool, since it is no longer ambiguous whether the xml is
	implicit, explicit or very explicit.

    (Martin Bravenboer)

----------++ Separate compilation

liblib split into libstrategolib and libxtclib. The 
module liblib is still available and imports the
libraries above, in order to avoid having to patch
zillions of Stratego modules.

---------++ Emacs Mode

---------++ Misc. Fixes

   * --max-depth flag for pp-aterm (Rob Vermaas)

   * Removed dep on Perl.

gpp:

   * fixed error reporting of ppgen

asfix-tools:

	* src/implode/sglri.str: added the --no-heuristic-filters option
	to disable the heuristic filters of sglr.

stratego-regular:

	* trans/sdf2rtg/core-sdf-grammar2rtg.str: nice names for character
	classes.

   sdf2rtg: Report productions and symbols in concrete syntax. Also,
   added some hints about how to solve problems.

added error reporting of martin to sglri
	
---------++ Detailed List of Issues

The full list of issues closed in this release is available at:

   * http://www.stratego-language.org/Stratego/StrategoRelease013Issues

---------++ Download and Installation

The release page contains the source distributions, binary RPMs, and
detailed instructions on how to install the distributions:

   * http://www.stratego-language.org/Stratego/StrategoRelease013

---------++ Bugs and Known Problems

See our issue tracking systems for reports about (open) bugs:

   * https://catamaran.labs.cs.uu.nl/jira/browse/STR

Please report any problems with installation or bugs in the
implementation to our issue tracking system. Please check the existing
issues to see if a report about the problem was already submitted.

---------++ Contributions

Developments, beta tests, and bug fixes were carried out by

   * Martin Bravenboer
   * Akim Demaille
   * Niels Janssen
   * Merijn de Jonge
   * Rob van der Leek
   * Rob Vermaas
   * Eelco Visser
   * Karl Trygve Kalleberg
