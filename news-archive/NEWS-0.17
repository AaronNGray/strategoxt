-----------------------------------------------------------------------
Stratego/XT 0.17 - released April 2008
-----------------------------------------------------------------------

---------++!! Summary of Changes

Stratego/XT 0.17 introduces a major improvements across the board, including 
language additions, a new compiler library, numerous improvements to the compiler,
significant changes to the library handling, new libraries for parsing, pretty 
printing and term validation, 64-bit support, stack traces and more.

For this release, over 200 outstanding issues have been addressed, much thanks
to the efforts of external bug reporters and contributors.

The manual has been updated to reflect the changes made to the language and 
libraries, and the new libraries come with up-to-date source code documentation.


%TOC%


---------++ Stratego Compiler

---------+++ Nested functions

The backend has been changed so that the GCC-specific nested functions feature 
is no longer required. This makes the C-code a lot more portable across 
GCC-supported platforms, since nested functions are not reliably supported on 
all architectures, notably not on MIPS. This allows Stratego to use other C 
compilers for than GCC for the generation of platform-specific binary code.

   * [<a href="http://bugs.strategoxt.org/browse/STR-697">STR-697</a>] - Standalone strc; allow users to override --cc and ---ld
   * [<a href="http://bugs.strategoxt.org/browse/STR-119">STR-119</a>] - Replace GCC nested functions by stack-allocated closures as structs

---------+++ Stack traces on "rewriting failed"

The compiler backend and supporting runtime code has been modified to provide 
full stack traces for the dreaded "rewriting failed" situations. 

Consider the following program:

<verbatim>
  main = foo

  foo = bar

  bar = fap ; zap

  fap = id

  zap = fail 
</verbatim>

When executed, it will print:

<verbatim>
prog: rewriting failed, trace:
        main_0_0
        foo_0_0
        bar_0_0
        zap_0_0 
</verbatim>

This also works when you use =io-wrap= and friends, but there are some 
caveats: 

   * Only code compiled with the new compiler will show up in the stack 
     trace: if you call old libraries, stack frames for those strategies will 
     be invisble.
 
   * =let=-blocks and other reasons for lifting will show up as =lifted_X= frames.

A tiny set of stack introspection strategies for debugging purposes has also 
been introduced.

---------+++ Compiler library

The compiler has been librarified. Program analysis and transformation tools which
work on Stratego code may now be based on the Stratego compiler library. The intent
is to make meta-programming with Stratego a lot easier.

   * [<a href="http://bugs.strategoxt.org/browse/STR-311">STR-311</a>] - strc-lib : a library for compilation (meta-programming) Stratego

---------++ Stratego Language

---------+++ Dynamic rules


---------+++ Assignment operator

An assignment operator has been added to the language.

<verbatim>
  s = 
    t := !1
</verbatim>

   * [<a href="http://bugs.strategoxt.org/browse/STR-550">STR-550</a>] - Assignment operator

---------+++ Rule syntax in let

The =let= construct now allows the defition of rules in addition to strategies:

<verbatim>
  let R : p1 -> p2
  in 
    ...
  end
</verbatim>

---------+++ Import ATerm from file

A new language construct called =import-term= was added which allows the embedding 
of terms (data) directly into the program.

<verbatim>
  get-pp-table = import-term(pptable.trm)
</verbatim>

This removes the need for external data files, and may ease deployment in some 
situations significantly, at the cost of proportionately bigger program files.

   * [<a href="http://bugs.strategoxt.org/browse/STR-577">STR-577</a>] - Stratego: support import of an ATerm from a file


---------++ Stratego Libraries

A new discipline for library naming and usage is introduces in 0.17. The standard
library is now named =libstratego-lib=, whereas the XTC library is named
=libstratego-xtc=. Additional libraries have been added for parsing, pretty 
printing and term validation, see below.

---------+++ Migrating from XTC to libraries

To avoid the term serialization paid when composing transformation pipelines 
using XTC, the compiler and all supporting tools have been rearchitected to
as libraries in addition to the familiar XTC components.

For Stratego/XT users, the most significant change is that the SGLR parser,
the various RTG tools and the GPP tools are now available as libraries, 
respectively named =libstratego-sglr=, =libstratego-rtg= and =libstratego-gpp=.

The librarification allows parse tables to be loaded once, at startup, and 
used repeatedly when multiple files must be parsed (when using XTC, the parse
table is loaded by the =sglr= child process every time a file must be parsed). 

Consider the following program:

<verbatim>
module foo
imports
  libstratego-lib
  libstratego-sglr
strategies
  main =
    tbl := <import-term(Exp.tbl); open-parse-table>
    ; <parse-string(|tbl)> "a+b"
</verbatim>

It assumes the existence of a parse table (=Exp.tbl=). This table be included
into the program using the =import-term= construct (introduced above). The
call to =open-parse-table= will register the parse table with the 
=libstratego-sglr= library, and subsequent calls to =parse-string= will not
need to reload the parse table.

Compiling and executing the program:

<verbatim>
$ strc -i foo.str $(strcflags stratego-lib stratego-sglr)
$ ./foo 
Plus(Var("a"),Var("b"))
</verbatim>

The resulting program =foo= is now fully self-contained. It does not need
the =Exp.tbl= file to execute.

(The =strcflags= is an alias for =pkg-config --variable=strcflags=.)

---------+++ Easy library creation

Creating libraries using the Stratego compiler has never been easier. By using
the =--library= option to the compiler, all necessary library files will be 
created.

<verbatim>
$ strc -i foo.str --library
</verbatim>

The resulting output includes static and dynamic libraries, as well as libtool
support files:

<verbatim>
libfoo.a  libfoo.c  libfoo.dep  libfoo.la  libfoo.lo  libfoo.o  libfoo.rtree  libfoo.so 
</verbatim>

---------++ Deployment

This release brings about major improvements to the deployment capabilities of 
Stratego/XT. 

---------+++ Standards-compliant libraries

The Stratego libraries expose various features from the underlying platform 
Stratego/XT executes on. In 0.17, the library has been refactored so that the 
dependence on platforms is clearer, and this gives rise to several variants of 
the library, including one for C99, POSIX and one for POSIX+XSI. The great 
majority of Stratego/XT programs, use the high-level strategies for file and 
term I/O, and these programs will be unaffected.

   * [STR-613] - Stratego library: Allow creation of library for specific standard (C99, POSIX, POSIX XSI)


---------+++ MinGW support on Microsoft Windows

Stratego/XT now supports compiling natively on Microsoft Windows using MinGW. 
This results in a smaller footprint because of significantly fewer and smaller 
dependencies as compared with Cygwin.

---------+++ x86-64 support

Thanks to patches from Eelco Dolstra, the ATerm library now supports 64-bit machines, 
and the final blocker preventing Stratego/XT running on 64-bit is now removed. This
means 64-bit support is finally here. Binary packages for 64-bit Linux distributions
are provided for your convenience.

   * [<a href="http://bugs.strategoxt.org/browse/STR-698">STR-698</a>] - x86_64 support

---------++!! Detailed List of Issues

The full list of issues closed in this release is available at:

   * http://www.strategoxt.org/Stratego/StrategoRelease017Issues

---------++!! Download and Installation

The release page contains the source distributions, binary RPMs, and
detailed instructions on how to install the distributions:

   * http://www.strategoxt.org/Stratego/StrategoRelease017

---------++!! Bugs and Known Problems

See our issue tracking systems for reports about (open) bugs:

   * https://bugs.strategoxt.org/browse/STR

Please report any problems with installation or bugs in the
implementation to our issue tracking system. Please check the existing
issues to see if a report about the problem was already submitted.

---------++!! Contributions

Developments, bug reports, and beta tests carried out by

   * Sigoure Benoit
   * Eric Bouwers
   * Martin Bravenboer
   * Arthur van Dam
   * Valentin David
   * Eelco Dolstra
   * Bogdan Dumitriu
   * Karl Trygve Kalleberg
   * Lennart Kats 
   * Nicolas Pierron
   * Rob Vermaas
   * Eelco Visser

Thanks!

---------------------------------------------------------------------------------


