StrategoXT 0.12 -- released August ..., 2004

---------++ Summary of Changes

Stratego Language

   * New `if then' construct

   * Bigger bag of dynamic rules

Stratego Library

   * Improved newname in case of repeated application.

   * New mathematical operators: abs and gcd.

Tools

   * Various usability improvements in pack-sdf, a tool for collecting
     SDF modules in a single SDF definition.

   * Improved performance and error-reporting of format-check, a tool
     for checking the structure of an aterm,

   * New features and various usabily enhancements in parse-unit, a
     tool for unit testing SDF syntax definitions.

   * The parenthesize generator, sdf2parenthesize, now fixes much more
     conflicts: transitive priorities are now supported.

   * Support for comment preserving transformations.

   * New XML tools provide pragmatic interoperability with XML tools.

Deployment

   * Improved Autoconf macros in AutoXT

---------++ Format Checking

[[Tools.FormatCheck][format-check]] has been reimplemented to boost
the performance, error-reporting and visualization. The format checker
now uses a bottom-up algorithm for format checking. The tool infers
types in a bottom-up fashion and will complain at the innermost term
for which no type can be inferred. If this term has subterms, then
their types will be shown. The performance is even better in =--fast=
mode, but this might reduce the quality of the error reporting.

Format-check now supports a --vis mode for showing the format error in
a pretty-printed aterm at the command-line. Format-errors will be in
pretty-printed in red if the terminal supports colors.

Format-check also has a new feature to report the results of
format-checking in an HTML document. This document contains the input
term, formatted in the same way as pp-aterm. All innermost format
errors in the ATerm are indicated in red boxes. Moving over the ATerm
with your mouse will show the non-terminal of a term in an information
box.

More informaiton, examples, and a screenshot are available at the
Tools web:

   * http://www.program-transformation.org/Tools/FormatCheck

(Contributed by Martin Bravenboer)

---------++ Pack SDF

Several features have been added to pack-sdf to make it more
user-friendly:

   * pack-sdf now checks if the module name specified in an SDF module
     file, corresponds to the actual filename. Having different names
     can lead to very nasty problems.

   * The order of include path entries has been improved to make it
     more clear. The directory of the main module (specified with -i)
     is now the first include option. This is not always the current
     directory, in which case unexpected modules might be imported in
     previous versions of StrategoXT. So, pack-sdf -i syn/Foo.sdf will
     search for module in the syn directory.

   * The input file is no longer searched for in the include
     path. That is, pack-sdf -i Foo.sdf now always packs ./Foo.sdf,
     not a module Foo elsewhere in the include path if ./Foo.sdf does
     not exist.

   * A warning is printed if a specified include directory does not
     exist.

   * Improved error reporting for missing modules. Usually, the module
     is not really missing, but the name of this import is
     incorrect. Hence, it is useful to report the module(s) from where
     the 'missing' module is imported. Pack SDF now prints a detailed
     report of all missing modules and the module where these are
     imported.

   * pack-sdf now reports all missing modules in a single execution.

   * pack-sdf now (again) supports the creation of a dependency file
     suitable for inclusion in a Makefile. Makefile.xt will instruct
     pack-sdf to do this, so there is no longer a need to specify
     dependencies of SDF files.

(Contributed by Martin Bravenboer)

---------++ Parse Unit

In a previous releases of StrategoXT a parse-unit testsuite had to be
parsed with a separate tool before passing it to parse-unit. This is
obviously a bad idea, so parse-unit itself now parses the
testsuite. It will fall back to abstract syntax, so this change should
not break anything. The --abstract-input option can be used to declare
that you are passing a testsuite in abstract syntax.

Parse-unit now has an option to parse a single test and write the
result to the output. In this mode ambiguities are accepted, which is
useful for debugging. The option for the 'single test mode' is
=--single <nr>= where =<nr>= is the number in the testsuite (printed
when the testsuite is executed). The --asfix2 flag can be used to
produce asfix2 instead of an AST.

Parse-unit now accepts a =--no-heuristic-filters= flag to disable the
heuristic -fi (injection count) and -fe (eagerness) disambiguation
filters of sglr. Using this flag is highly encouraged.


More information and an example are available at the Tools Wiki:
   * http://www.program-transformation.org/Tools/ParseUnit

(Contributed by Martin Bravenboer)

---------++ Parenthesizer Generation

	* trans/sdf2ast-conflicts.str: separate tool for producing a list
	of conflict information from an SDF syntax
	definition. Currently, the only conflict information that is
	produced is a SubtermConflict.

	* trans/sdf2parenthesize.str: use the separate sdf2ast-conflicts
	tool.

	* trans/sdf2parenthesize.str: produce more Stratego compiler
	friendly output: for every constructor/pos there is now only a
	single rewrite rule. This rewrite rule checks for a conflicting
	subterm in the where clause. This reduces the number of generated
	rules, the LOC, and it doesn't blow up the compile-match
	component.

	* trans/sdf2ast-conflicts.str: fixed a major bug in the generation
	of rewrite rules for chain priorities. I was assuming that the SDF
	normalizer generates chain priorities for the transitive closure
	of the priorities that are defined in an SDF syntax
	definition. For example,

	----------------------------------------------------
	  context-free priorities
	      Exp "*" Exp -> Exp
            > Exp "+" Exp -> Exp
            > Exp "<" Exp -> Exp 	
	----------------------------------------------------

	will not result in a chain priority 

	----------------------------------------------------
	  Exp "*" Exp -> Exp
        > Exp "<" Exp -> Exp
	----------------------------------------------------

	sdf2parenthesize now takes the transitive closure itself, and
	generates all the required rules for chain priorities.

(Contributed Martin Bravenboer)

---------++ Pragmatic XML Support

	* xtc/aterm2xml.str: composes data2xml-doc and pp-xml-doc into a
	single aterm to xml tool. This tool uses the --explicit mode of
	data2xml-doc.

	* xtc/xml2aterm.str: composes parse-xml-info and xml-info2data
	into a single xml to aterm tool. This tool uses the --explicit
	mode of xml-info2data.

	* trans/data2xml-doc.str: added an --explicit and --very-explicit
	mode. The explicit mode uses XML elements for indicating string,
	int, list and tuple constructs. The --very-explicit mode also use
	an XML element for applications.

	* trans/xml-info2data.str: added support for the --explicit
          mode.

	* tests/xml-aterm-tests.str: aterm2xml | xml2aterm roundtrip
	testsuite.

	* trans/data2xml.str: in explicit mode, Some and None should be
	explictly represented in XML.

Added explicity argument to all tools. Default is explicit, but
aterm2xml can now also be invoked with --implicit mode.

xml-info2data now supports all explicity modes. The very explicit mode
is now even more explicit to support annotations for every all aterm
constructs

RELAX NG schema for the very explicit representation of an ATerm in
XML

(Contributed by Martin Bravenboer)

---------++ Support for Comment Preserving Transformations

asfix-anno-comments is a new asfix to asfix tool that preserves
comments that were of the input source code by putting them in
annotations of the AST.

An example is available at the Tools Wiki:
    * [[Tools.AsFixAnnoComments][asfix-anno-comments]]

Implode-asfix now supports preservation of annotations in AsFix
trees. This means that implode-asfix now supports the addPosInfo
position annotation tool, and the just mentioned comment annotation
tool.

(Contributed by Martin Bravenboer)

---------++ Language Enhancements

   all-R with R a dynamic rule produces the values for R in all scopes.

(Contributed by Eelco Visser)

	* syn/Stratego-Strategies.sdf: added the if-then construct: if s1
	then s2 end.

(Contributed by Martin Bravenboer)

---------++ Improved New Name

newname now trims any trailing digits up to the rightmost '_'. This
allows for feeding previously generated new names as prefix into
another call to SSL's newname.

Example:
<verbatim>
    <newname> "a"        // produces "a_0"
  ; <newname> "b"        // produces "b_0"
  ; <newname> "b_1"      // produces "b_2"
  ; <newname> "b_1729"   // produces "b_3"
  ; <newname> "b_a"      // produces "b_a_0"
</verbatim>

(Contributed Arthur van Dam)

----------++ AutoXT 

The Autconf support of AutoXT has been updated. The Autoconf macros of
autoxt.m4 now perform more checks. For example, Autoconf now fails if
there are undefined macros. Furthermore, autoxt.m4 now defines a macro
XT_ARG_WITH for concisely adding =--with-PACKAGE= arguments to
configure scripts.

(Contributed by Akim Demaille)
	
---------++ Detailed List of Issues

The full list of issues closed in this release is available at:

   * http://www.stratego-language.org/Stratego/StrategoRelease012Issues

---------++ Download and Installation

The release page contains the source distributions, binary RPMs, and
detailed instructions on how to install the distributions:

   * http://www.stratego-language.org/Stratego/StrategoRelease012

---------++ Bugs and Known Problems

See our issue tracking systems for reports about (open) bugs:

   * https://catamaran.labs.cs.uu.nl/jira/

Please report any problems with installation or bugs in the
implementation to our issue tracking system. Please check the existing
issues to see if a report about the problem was already submitted.

---------++ Contributions

Developments, beta tests, and bug fixes were carried out by

   * Martin Bravenboer
   * Arthur van Dam
   * Akim Demaille
   * Rob Vermaas
   * Eelco Visser
