module StrategoXtd
imports StrategoRenamed XtdPrefixed

exports
  context-free start-symbols StrategoModule

  context-free syntax %% quotation

    "|[" XtcMeta "]|"               -> StrategoStrategy {cons("ToStrategy")}
    "|[" XtcMeta* "]|*"              -> StrategoStrategy {cons("ToStrategy")}

    "|[" XtcMeta "]|"               -> StrategoTerm {cons("ToTerm")}
    "|[" XtcMeta* "]|*"             -> StrategoTerm {cons("ToTerm")}

    "|[" XtcType "]|"               -> StrategoTerm {cons("ToTerm")}

    "|[" XtcDesc "]|"               -> StrategoTerm {cons("ToTerm")}
    "|[" XtcDType "]|"              -> StrategoTerm {cons("ToTerm")}
 
    "|[" XtcDStream "]|"            -> StrategoTerm {cons("ToTerm")}
    "|[" XtcDStreamDef "]|"         -> StrategoTerm {cons("ToTerm")}
    
    "|[" XtcTemplate "]|"           -> StrategoTerm {cons("ToTerm")}

    "|[" XtcTLayout "]|"            -> StrategoTerm {cons("ToTerm")}
    "|[" XtcTArg "]|"               -> StrategoTerm {cons("ToTerm")}
    "|[" {XtcTArg ","}* "]|*"       -> StrategoTerm {cons("ToTerm")}
    "|[" XtcTVarType "]|"           -> StrategoTerm {cons("ToTerm")}
    "|[" XtcTDefault "]|"           -> StrategoTerm {cons("ToTerm")}

    "|[" XtcQuery "]|"              -> StrategoTerm {cons("ToTerm")}
    "|[" XtcQuery "]|"              -> StrategoStrategy {cons("ToStrategy")}

    "arg" "|[" XtcArg "]|"          -> StrategoTerm {cons("ToTerm")}
    "arg" "|[" {XtcArg ","}* "]|*"  -> StrategoTerm {cons("ToTerm")}

    "|[" XtcString "]|"             -> StrategoTerm {cons("ToTerm")}


  context-free syntax %% anti-quotation

    "<" StrategoStrategy ">"        -> XtcMeta {cons("FromStrategy")}
    "<" StrategoTerm ">"            -> XtcMeta {cons("FromTerm"),prefer}

    "<" StrategoStrategy ">"        -> XtcIdentifier {cons("FromStrategy")}
    "<" StrategoTerm ">"            -> XtcIdentifier {cons("FromTerm"),prefer}

    "<" StrategoStrategy ">"        -> FooString {cons("FromStrategy")}
    "<" StrategoTerm ">"            -> FooString {cons("FromTerm"),prefer}


  context-free syntax

    FooString -> XtcString {cons("String")}

  variables
    [m][0-9\']*    	-> XtcMeta 	     {prefer}
    "ms"[0-9\']*    	-> XtcMeta*   	     {prefer} 

    [d][0-9\']*         -> XtcDesc           {prefer}
    "strms"[0-9\']*     -> XtcDStreams       {prefer}
    "strm"[0-9\']*      -> XtcDStreamDef     {prefer}

    [t][0-9\']*         -> XtcTemplate       {prefer}
    "tTp"[0-9\']*       -> XtcTType          {prefer}
    [l][0-9\']*         -> XtcTArgs          {prefer}
    "tdef"[0-9\']*      -> XtcTDefault       {prefer}
    "tvarTp"[0-9\']*    -> XtcTVarType       {prefer}
    "tvalTp"[0-9\']*    -> XtcTValType       {prefer}
    "tks"[0-9\']*       -> XtcTArgKeys       {prefer}
    "tvs"[0-9\']* 	-> XtcTArgVals	     {prefer}
  
    [a][0-9\']*         -> XtcArg            {prefer}
    [k][0-9\']*    	-> XtcArgKey 	     {prefer}
    [v][0-9\']*    	-> XtcArgVal 	     {prefer}
    "args"[0-9\']*      -> XtcArgList        {prefer} 

    [q][0-9\']*    	-> XtcQuery 	     {prefer}

    [x][0-9\']*         -> XtcIdentifier     {prefer}
    [s][0-9\']*    	-> FooString 	     {prefer}