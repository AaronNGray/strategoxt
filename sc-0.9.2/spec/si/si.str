\literate[SI: The Stratego Interpreter]

% SI, the Stratego Interpreter
%
% Copyright (C) 2001 Eelco Visser <visser@acm.org>
% 
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2, or (at your option)
% any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
% 02111-1307, USA.

\begin{code}
module si
imports lib desugar spec-to-sdefs normalize-spec 
	eval-import stratego-eval

signature
  constructors
    StrategoDump : TermEnvironment * StrategyEnvironment -> StrategoDump
    Dump : String -> Command
    Load : String -> Command
    Eval : Strat -> Command

strategies

  main =
    create-runtime-environment;
    process-options;
    if-verbose1(copyright);
    read-script;
    evaluate-commands;
    destroy-runtime-environment;
    <exit> 0

 process-options =
   (split-fetch(?"--args") <+ !(<id>,[]))
   ; (make-option-table, id)
   ; Snd

 make-option-table =
   where(<set-config> ("-I", ["-I", "."]))
   ; parse-options(io-options <+ si-options)

 si-options = 
   ArgOption("-I", 
	<extend-config>("-I", ["-I", <id>]),
	!"-I dir           include modules from directory dir")

   + ArgOption("@version", 
	<set-config>("@version", <id>),
	!"@version v       declare version")

   + Option("-d", 
	<set-config>("-d", 1); <set-config>("--verbose", 2),
	!"-d               debug mode")

   + Option("-t", 
	<set-config>("-t", 1),
	!"-t               trace mode")

 ifdebug(s) =
   try(where(<get-config> "-d"); s)

 iftrace(s) =
   try(where(<get-config> "-t"); s)

 // Read script from standard input and save command-line options 
 // in second component of pair

 read-script =
   split(<ReadFromFile> stdin, id)

 copyright =
      say(!"--------------------------------------------------------------------")
    ; say(!"This is SI, the Stratego Interpreter ")
    ; say(!"Copyright (c) 2001, Eelco Visser <visser@acm.org>")
    ; say(!"This program is free software; you can redistribute it and/or modify")
    ; say(!"it under the terms of the GNU General Public License as published by")
    ; say(!"the Free Software Foundation; either version 2, or (at your option)")
    ; say(!"any later version.")
    ; say(!"--------------------------------------------------------------------")

  create-runtime-environment =
    where(<table-create> "options") // command-line options
    ; where(<table-create> "senv")  // strategy variables
    ; where(<table-create> "tenv")  // term variables

  destroy-runtime-environment =
    where(<table-destroy> "options")
    ; where(<table-destroy> "senv")
    ; where(<table-destroy> "tenv")

  evaluate-commands =
    repeat(
    {c, cs, t, t': 
      ?([c|cs], t);
      <eval-command> (c, t) => t';
      !(cs, t')
    })

  eval-command =
    ifdebug(debug(!"Evaluating command: "));
    ( eval-strategy
    + (eval-dump
      + eval-load
      + eval-import
      + eval-strategies
      + eval-rules
      , id); Snd
    ) <+ debug(!"unknown command: "); <exit> 1

  eval-strategy =
    ?(Eval(s), t)
    ; !App(<desugar>s, t)
    ; ifdebug(debug(!"Evaluate strategy: "))
    ; eval
    ; iftrace(debug(!"> "))
    ; try(Fail;  <fatal-error> ["rewriting failed"])

  eval-strategies =
    ?Strategies(<id>)
    ; map(define-lrules; DeclareVariables; desugar; strename)
    ; define-strategies

  define-strategies =
    map(\ def@SDef(f, xs, _) -> <table-push>("senv", (f,<length>xs), def)\ )

  eval-rules =
    ?Rules(<id>)
    ; ifdebug(debug(!"eval-rules: "))
    ; map(define-lrules; RDtoSD; desugar)
    ; ifdebug(debug(!"rules normalized: "))
    ; define-strategies

  eval-dump =
    ?Dump(file)
    ; <table-getlist> "tenv" => tenv
    ; <table-getlist> "senv" => senv
    ; <WriteToBinaryFile> (file, StrategoDump(tenv, senv))
    ; iftrace(say(<conc-strings> ("image written to file: ", file)))

  eval-load =
    ?Load(file)
    ; iftrace(say(<conc-strings> ("loading image from file: ", file)))
    ; <file-exists <+ <fatal-error> [ "image: ", <id>, " not found"]> file
    ; <ReadFromFile> file => StrategoDump(tenv, senv)
    ; <table-putlist> ("tenv", tenv)
    ; <table-putlist> ("senv", senv)
    ; iftrace(say(<concat-strings> ["image ", file, " loaded"]))
\end{code}
