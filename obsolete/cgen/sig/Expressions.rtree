Specification([Signature([Constructors([OpDecl("IntConst",FunType([ConstType(Var("INTEGERconstant"))],ConstType(Var("Constant")))),OpDecl("FloatConst",FunType([ConstType(Var("FLOATINGconstant"))],ConstType(Var("Constant")))),OpDecl("OctConst",FunType([ConstType(Var("OCTALconstant"))],ConstType(Var("Constant")))),OpDecl("HexConst",FunType([ConstType(Var("HEXconstant"))],ConstType(Var("Constant")))),OpDecl("CharConst",FunType([ConstType(Var("CHARACTERconstant"))],ConstType(Var("Constant"))))])]),Signature([Constructors([OpDecl("StringLit",FunType([ConstType(Op("List",[Var("STRINGliteral")]))],ConstType(Var("StringLiteralList"))))])]),Signature([Constructors([OpDecl("ArrayIndex",FunType([ConstType(Var("PostfixExpression")),ConstType(Var("CommaExpression"))],ConstType(Var("PostfixExpression")))),OpDecl("FunCall",FunType([ConstType(Var("PostfixExpression")),ConstType(Op("List",[Var("AssignmentExpression")]))],ConstType(Var("PostfixExpression")))),OpDecl("Field",FunType([ConstType(Var("PostfixExpression")),ConstType(Var("MemberName"))],ConstType(Var("PostfixExpression")))),OpDecl("DerefMember",FunType([ConstType(Var("PostfixExpression")),ConstType(Var("MemberName"))],ConstType(Var("PostfixExpression")))),OpDecl("PostIncr",FunType([ConstType(Var("PostfixExpression"))],ConstType(Var("PostfixExpression")))),OpDecl("PostDecr",FunType([ConstType(Var("PostfixExpression"))],ConstType(Var("PostfixExpression"))))])]),Signature([Constructors([OpDecl("PreIncr",FunType([ConstType(Var("UnaryExpression"))],ConstType(Var("UnaryExpression")))),OpDecl("PreDecr",FunType([ConstType(Var("UnaryExpression"))],ConstType(Var("UnaryExpression")))),OpDecl("SizeofExp",FunType([ConstType(Var("UnaryExpression"))],ConstType(Var("UnaryExpression")))),OpDecl("SizeofType",FunType([ConstType(Var("TypeName"))],ConstType(Var("UnaryExpression")))),OpDecl("Address",FunType([ConstType(Var("CastExpression"))],ConstType(Var("UnaryExpression")))),OpDecl("Deref",FunType([ConstType(Var("CastExpression"))],ConstType(Var("UnaryExpression")))),OpDecl("Positive",FunType([ConstType(Var("CastExpression"))],ConstType(Var("UnaryExpression")))),OpDecl("Negative",FunType([ConstType(Var("CastExpression"))],ConstType(Var("UnaryExpression")))),OpDecl("Tilde",FunType([ConstType(Var("CastExpression"))],ConstType(Var("UnaryExpression")))),OpDecl("Negation",FunType([ConstType(Var("CastExpression"))],ConstType(Var("UnaryExpression"))))])]),Signature([Constructors([OpDecl("TypeCast",FunType([ConstType(Var("TypeName")),ConstType(Var("CastExpression"))],ConstType(Var("CastExpression"))))])]),Signature([Constructors([OpDecl("Mul",FunType([ConstType(Var("MultiplicativeExpression")),ConstType(Var("CastExpression"))],ConstType(Var("MultiplicativeExpression")))),OpDecl("Div",FunType([ConstType(Var("MultiplicativeExpression")),ConstType(Var("CastExpression"))],ConstType(Var("MultiplicativeExpression")))),OpDecl("Mod",FunType([ConstType(Var("MultiplicativeExpression")),ConstType(Var("CastExpression"))],ConstType(Var("MultiplicativeExpression"))))])]),Signature([Constructors([OpDecl("Add",FunType([ConstType(Var("AdditiveExpression")),ConstType(Var("MultiplicativeExpression"))],ConstType(Var("AdditiveExpression")))),OpDecl("Subt",FunType([ConstType(Var("AdditiveExpression")),ConstType(Var("MultiplicativeExpression"))],ConstType(Var("AdditiveExpression"))))])]),Signature([Constructors([OpDecl("ShiftLeft",FunType([ConstType(Var("ShiftExpression")),ConstType(Var("AdditiveExpression"))],ConstType(Var("ShiftExpression")))),OpDecl("ShiftRight",FunType([ConstType(Var("ShiftExpression")),ConstType(Var("AdditiveExpression"))],ConstType(Var("ShiftExpression"))))])]),Signature([Constructors([OpDecl("Lt",FunType([ConstType(Var("RelationalExpression")),ConstType(Var("ShiftExpression"))],ConstType(Var("RelationalExpression")))),OpDecl("Gt",FunType([ConstType(Var("RelationalExpression")),ConstType(Var("ShiftExpression"))],ConstType(Var("RelationalExpression")))),OpDecl("Le",FunType([ConstType(Var("RelationalExpression")),ConstType(Var("ShiftExpression"))],ConstType(Var("RelationalExpression")))),OpDecl("Ge",FunType([ConstType(Var("RelationalExpression")),ConstType(Var("ShiftExpression"))],ConstType(Var("RelationalExpression"))))])]),Signature([Constructors([OpDecl("Equal",FunType([ConstType(Var("EqualityExpression")),ConstType(Var("RelationalExpression"))],ConstType(Var("EqualityExpression")))),OpDecl("NotEqual",FunType([ConstType(Var("EqualityExpression")),ConstType(Var("RelationalExpression"))],ConstType(Var("EqualityExpression"))))])]),Signature([Constructors([OpDecl("And",FunType([ConstType(Var("EqualityExpression")),ConstType(Var("ANDexpression"))],ConstType(Var("ANDexpression"))))])]),Signature([Constructors([OpDecl("ExOr",FunType([ConstType(Var("ANDexpression")),ConstType(Var("ExclusiveORExpression"))],ConstType(Var("ExclusiveORExpression"))))])]),Signature([Constructors([OpDecl("IncOr",FunType([ConstType(Var("ExclusiveORExpression")),ConstType(Var("InclusiveORExpression"))],ConstType(Var("InclusiveORExpression"))))])]),Signature([Constructors([OpDecl("LAnd",FunType([ConstType(Var("LogicalANDExpression")),ConstType(Var("InclusiveORExpression"))],ConstType(Var("LogicalANDExpression"))))])]),Signature([Constructors([OpDecl("LOr",FunType([ConstType(Var("LogicalORExpression")),ConstType(Var("LogicalANDExpression"))],ConstType(Var("LogicalORExpression"))))])]),Signature([Constructors([OpDecl("IfExp",FunType([ConstType(Var("LogicalORExpression")),ConstType(Var("CommaExpression")),ConstType(Var("ConditionalExpression"))],ConstType(Var("ConditionalExpression"))))])]),Signature([Constructors([OpDecl("Assign",FunType([ConstType(Var("UnaryExpression")),ConstType(Var("AssignmentOperator")),ConstType(Var("AssignmentExpression"))],ConstType(Var("AssignmentExpression"))))])]),Signature([Constructors([OpDecl("AssignEq",ConstType(Var("AssignmentOperator"))),OpDecl("AssignMul",ConstType(Var("AssignmentOperator"))),OpDecl("AssignDiv",ConstType(Var("AssignmentOperator"))),OpDecl("AssignMod",ConstType(Var("AssignmentOperator"))),OpDecl("AssignPlus",ConstType(Var("AssignmentOperator"))),OpDecl("AssignMin",ConstType(Var("AssignmentOperator"))),OpDecl("AssignSL",ConstType(Var("AssignmentOperator"))),OpDecl("AssignSR",ConstType(Var("AssignmentOperator"))),OpDecl("AssignAnd",ConstType(Var("AssignmentOperator"))),OpDecl("AssignExp",ConstType(Var("AssignmentOperator"))),OpDecl("AssignOr",ConstType(Var("AssignmentOperator")))])]),Signature([Constructors([OpDecl("Comma",FunType([ConstType(Var("AssignmentExpression")),ConstType(Var("CommaExpression"))],ConstType(Var("CommaExpression")))),OpDecl("EmptyExp",ConstType(Var("CommaExpressionOpt")))])]),Signature([])])
