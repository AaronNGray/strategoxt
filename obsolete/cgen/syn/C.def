definition

module Main
imports C

module C
imports Lexical Generated  Preprocessor Operators Keywords 
	Identifiers Constants

module Preprocessor
exports
  lexical syntax
    ~[\ \t\n\/]                      -> TokenChar
    [\/]                             -> Slash
    Slash                            -> TokenChar
    TokenChar+                       -> Token
    ([\ \t] | ([\\][\n]) | Comment)+ -> TokWS
    ([\ \t] | Comment)*              -> WS
    {Token TokWS}+                   -> TokenSeq
    ~[\"\ \t\n\>]+ 	             -> FileName
  lexical restrictions
    Slash    -/- [\*]
    Token    -/- ~[\ \t\n\/]
    TokenSeq -/- ~[\n]
    WS       -/- [\ \t]
  lexical syntax
    "#" WS "define" WS IDENTIFIER WS 
        ("(" WS {(IDENTIFIER WS) ("," WS)}* ")" WS)? 
        TokenSeq WS [\n] 				-> ControlLine

    "#" WS "undef"   WS IDENTIFIER WS [\n]         	-> ControlLine
    "#" WS "include" WS "<" FileName ">" WS [\n]    	-> ControlLine
    "#" WS "include" WS "\"" FileName "\"" WS [\n]  	-> ControlLine
    "#" WS "include" WS TokenSeq WS [\n] 		-> ControlLine
    "#" WS "line"    WS Constant 
                   ("\"" WS FileName WS "\"")? WS [\n]	-> ControlLine
    "#" WS "error"   WS TokenSeq? WS [\n]   		-> ControlLine
    "#" WS "pragma"  WS TokenSeq? WS [\n]   		-> ControlLine


    "#" WS "if"     WS ConstantExpression WS [\n] 	-> IfLine
    "#" WS "ifdef"  WS IDENTIFIER WS [\n]		-> IfLine
    "#" WS "ifndef" WS IDENTIFIER WS [\n]		-> IfLine

    "#" WS "elif" WS ConstantExpression WS [\n]		-> ElifLine

    "#" WS "else" WS [\n]				-> ElseLine

  context-free syntax

    ControlLine 				-> ExternalDefinition
    ControlLine 				-> MemberDeclaration

    IfLine ExternalDefinition*
    (ElifLine ExternalDefinition*)*
    (ElseLine ExternalDefinition*)?
    "#" "endif"					-> ExternalDefinition

module Lexical
exports
  lexical syntax
    [\ \t\n]			  -> LAYOUT
    "/*" (~[\*] | Asterisk)* "*/" -> Comment
    Comment 			  -> LAYOUT
    [\*] 			  -> Asterisk 
    "//" ~[\n]* [\n]              -> Comment
  lexical restrictions
    Asterisk -/- [\/]
  context-free restrictions
    LAYOUT? -/- [\ \t\n] %% | [\/].[\*\/]

module Keywords
exports   
  context-free syntax
    "auto"   	-> AUTO
    "double" 	-> DOUBLE
    "int" 	-> INT
    "struct" 	-> STRUCT
    "break" 	-> BREAK
    "else" 	-> ELSE
    "long" 	-> LONG
    "switch"	-> SWITCH
    "case"	-> CASE
    "enum"	-> ENUM
    "register"	-> REGISTER
    "typedef"	-> TYPEDEF
    "char"	-> CHAR
    "extern"	-> EXTERN
    "return"	-> RETURN
    "exit"	-> RETURN
    "union"	-> UNION
    "const"	-> CONST
    "float"	-> FLOAT
    "short"	-> SHORT
    "unsigned"	-> UNSIGNED
    "continue"	-> CONTINUE
    "for"	-> FOR
    "signed"	-> SIGNED
    "void"	-> VOID
    "default"	-> DEFAULT
    "goto"	-> GOTO
    "sizeof"	-> SIZEOF
    "volatile"	-> VOLATILE
    "do"	-> DO
    "if"	-> IF
    "static"	-> STATIC
    "while"	-> WHILE

  context-free syntax
    "auto"   	-> IDENTIFIER {reject}
    "double" 	-> IDENTIFIER {reject}
    "int" 	-> IDENTIFIER {reject}
    "struct" 	-> IDENTIFIER {reject}
    "break" 	-> IDENTIFIER {reject}
    "else" 	-> IDENTIFIER {reject}
    "long" 	-> IDENTIFIER {reject}
    "switch"	-> IDENTIFIER {reject}
    "case"	-> IDENTIFIER {reject}
    "enum"	-> IDENTIFIER {reject}
    "register"	-> IDENTIFIER {reject}
    "typedef"	-> IDENTIFIER {reject}
    "char"	-> IDENTIFIER {reject}
    "extern"	-> IDENTIFIER {reject}
    "return"	-> IDENTIFIER {reject}
    "exit"	-> IDENTIFIER {reject}
    "union"	-> IDENTIFIER {reject}
    "const"	-> IDENTIFIER {reject}
    "float"	-> IDENTIFIER {reject}
    "short"	-> IDENTIFIER {reject}
    "unsigned"	-> IDENTIFIER {reject}
    "continue"	-> IDENTIFIER {reject}
    "for"	-> IDENTIFIER {reject}
    "signed"	-> IDENTIFIER {reject}
    "void"	-> IDENTIFIER {reject}
    "default"	-> IDENTIFIER {reject}
    "goto"	-> IDENTIFIER {reject}
    "sizeof"	-> IDENTIFIER {reject}
    "volatile"	-> IDENTIFIER {reject}
    "do"	-> IDENTIFIER {reject}
    "if"	-> IDENTIFIER {reject}
    "static"	-> IDENTIFIER {reject}
    "while"	-> IDENTIFIER {reject}

module Identifiers
exports
  lexical syntax
    [a-zA-Z\_][a-zA-Z\_0-9]* 	-> IDENTIFIER
  lexical restrictions
    IDENTIFIER -/- [a-zA-Z\_0-9]
  context-free syntax
    IDENTIFIER -> TypedefName

module Constants
exports
  lexical syntax
    [L]? "\"" StringChar* "\""  -> STRINGliteral

    ~[\\\"\n] 			-> StringChar
    [\\][ntvbrfa\\\?\"] 	-> StringChar
    [\\][x][0-9A-E][0-9A-E]	-> StringChar
    Octal			-> StringChar
    [\\][0-7][0-7]?[0-7]?	-> Octal
   
  lexical syntax
           "." [0-9]+ ([eE] "-"? [0-9]+)? [fFlL]? -> FLOATINGconstant
    [0-9]+ "." [0-9]* ([eE] "-"? [0-9]+)? [fFlL]? -> FLOATINGconstant
    [0-9]+             [eE] "-"? [0-9]+   [fFlL]? -> FLOATINGconstant

    [0-9]+ 			-> INTEGERconstant

    [L]? "'" Char "'" 		-> CHARACTERconstant

    ~[\\\'\n] 			-> Char
    [\\][ntvbrfa\\\?\'\"] 	-> Char
    Octal			-> Char
    [\\][x][0-9A-E][0-9A-E]	-> Char
   
  lexical syntax
  %%  -> OCTALconstant %% subsumed by INTEGERconstant
  "0" [xX] [0-9]+  -> HEXconstant

  lexical restrictions
    INTEGERconstant HEXconstant FLOATINGconstant -/- [0-9]
   
module Operators
exports   
  lexical syntax
    "->" 	-> ARROW
    "++" 	-> ICR
    "--" 	-> DECR
    "<<" 	-> LS
    ">>" 	-> RS
    "<=" 	-> LE
    ">=" 	-> GE
    "==" 	-> EQ
    "!=" 	-> NE
    "&&" 	-> ANDAND
    "||" 	-> OROR
    "..." 	-> ELLIPSIS
    "*=" 	-> MULTassign
    "/=" 	-> DIVassign
    "%="	-> MODassign
    "+="	-> PLUSassign
    "-="	-> MINUSassign
    "<<="	-> LSassign
    ">>="	-> RSassign
    "&="	-> ANDassign
    "^="	-> ERassign
    "|="	-> ORassign

module Generated
exports
  sorts TranslationUnit 
   
  context-free syntax
    INTEGERconstant 	-> Constant
    FLOATINGconstant 	-> Constant
    OCTALconstant 	-> Constant
    HEXconstant 	-> Constant
    CHARACTERconstant 	-> Constant
   
  context-free syntax
    STRINGliteral+ 	-> StringLiteralList
   
  context-free syntax
    IDENTIFIER 			-> PrimaryExpression
    Constant 			-> PrimaryExpression
    StringLiteralList 		-> PrimaryExpression
    "(" CommaExpression ")" 	-> PrimaryExpression
   
  context-free syntax
    PrimaryExpression 					-> PostfixExpression
    PostfixExpression "[" CommaExpression "]" 		-> PostfixExpression
    PostfixExpression "(" ")" 				-> PostfixExpression
    PostfixExpression "(" ArgumentExpressionList ")" 	-> PostfixExpression
    PostfixExpression  "." MemberName 			-> PostfixExpression
    PostfixExpression  ARROW MemberName 		-> PostfixExpression
    PostfixExpression ICR 				-> PostfixExpression
    PostfixExpression DECR 				-> PostfixExpression
   
  context-free syntax
    IDENTIFIER 	-> MemberName
    TypedefName -> MemberName
   
  context-free syntax
    {AssignmentExpression ","}+ -> ArgumentExpressionList
   
  context-free syntax
    PostfixExpression 			-> UnaryExpression
    ICR UnaryExpression 		-> UnaryExpression
    DECR UnaryExpression 		-> UnaryExpression
    UnaryOperator CastExpression 	-> UnaryExpression
    SIZEOF UnaryExpression 		-> UnaryExpression
    SIZEOF "(" TypeName ")" 		-> UnaryExpression
   
  context-free syntax
    "&" -> UnaryOperator
    "*" -> UnaryOperator
    "+" -> UnaryOperator
    "-" -> UnaryOperator
    "~" -> UnaryOperator
    "!" -> UnaryOperator
   
  context-free syntax
    UnaryExpression -> CastExpression
    "(" TypeName ")" CastExpression -> CastExpression
   
  context-free syntax
    CastExpression -> MultiplicativeExpression
    MultiplicativeExpression "*" CastExpression -> MultiplicativeExpression
    MultiplicativeExpression "/" CastExpression -> MultiplicativeExpression
    MultiplicativeExpression "%" CastExpression -> MultiplicativeExpression
   
  context-free syntax
    MultiplicativeExpression 			    -> AdditiveExpression
    AdditiveExpression "+" MultiplicativeExpression -> AdditiveExpression
    AdditiveExpression "-" MultiplicativeExpression -> AdditiveExpression
   
  context-free syntax
    AdditiveExpression 			  -> ShiftExpression
    ShiftExpression LS AdditiveExpression -> ShiftExpression
    ShiftExpression RS AdditiveExpression -> ShiftExpression
   
  context-free syntax
    ShiftExpression -> RelationalExpression
    RelationalExpression "<" ShiftExpression 	-> RelationalExpression
    RelationalExpression ">" ShiftExpression 	-> RelationalExpression
    RelationalExpression LE ShiftExpression 	-> RelationalExpression
    RelationalExpression GE ShiftExpression 	-> RelationalExpression
   
  context-free syntax
    RelationalExpression 			-> EqualityExpression
    EqualityExpression EQ RelationalExpression 	-> EqualityExpression
    EqualityExpression NE RelationalExpression 	-> EqualityExpression
   
  context-free syntax
    {EqualityExpression "&"}+ -> ANDexpression
   
  context-free syntax
    {ANDexpression "^"}+ -> ExclusiveORExpression
   
  context-free syntax
    {ExclusiveORExpression "|"}+ -> InclusiveORExpression
   
  context-free syntax
    InclusiveORExpression 			      -> LogicalANDExpression
    LogicalANDExpression ANDAND InclusiveORExpression -> LogicalANDExpression
   
  context-free syntax
    LogicalANDExpression 			  -> LogicalORExpression
    LogicalORExpression OROR LogicalANDExpression -> LogicalORExpression
   
  context-free syntax
    LogicalORExpression 			  -> ConditionalExpression
    LogicalORExpression "?" 
	CommaExpression ":" ConditionalExpression -> ConditionalExpression
   
  context-free syntax
    ConditionalExpression -> AssignmentExpression
    UnaryExpression AssignmentOperator AssignmentExpression -> AssignmentExpression
   
  context-free syntax
    "=" 	-> AssignmentOperator
    MULTassign 	-> AssignmentOperator
    DIVassign 	-> AssignmentOperator
    MODassign 	-> AssignmentOperator
    PLUSassign 	-> AssignmentOperator
    MINUSassign -> AssignmentOperator
    LSassign 	-> AssignmentOperator
    RSassign 	-> AssignmentOperator
    ANDassign 	-> AssignmentOperator
    ERassign 	-> AssignmentOperator
    ORassign 	-> AssignmentOperator
   
  context-free syntax
    {AssignmentExpression ","}+ -> CommaExpression
   
  context-free syntax
    ConditionalExpression -> ConstantExpression
   
  context-free syntax
    CommaExpression? -> CommaExpressionOpt
   
  context-free syntax
    SueDeclarationSpecifier ";" -> Declaration
    SueTypeSpecifier ";" 	-> Declaration
    DeclaringList ";" 		-> Declaration
    DefaultDeclaringList ";" 	-> Declaration
   
  context-free syntax
    DeclarationQualifierList 
	IdentifierDeclarator InitializerOpt -> DefaultDeclaringList
    TypeQualifierList 
	IdentifierDeclarator InitializerOpt -> DefaultDeclaringList
    DefaultDeclaringList "," 
	IdentifierDeclarator InitializerOpt -> DefaultDeclaringList
   
  context-free syntax
    DeclarationSpecifier 
	Declarator InitializerOpt -> DeclaringList
    TypeSpecifier 
	Declarator InitializerOpt -> DeclaringList
    DeclaringList "," 
	Declarator InitializerOpt -> DeclaringList
   
  context-free syntax
    BasicDeclarationSpecifier 	-> DeclarationSpecifier
    SueDeclarationSpecifier 	-> DeclarationSpecifier
    TypedefDeclarationSpecifier -> DeclarationSpecifier
   
  context-free syntax
    BasicTypeSpecifier 	 -> TypeSpecifier
    SueTypeSpecifier 	 -> TypeSpecifier
    TypedefTypeSpecifier -> TypeSpecifier
   
  context-free syntax
    StorageClass 				  -> DeclarationQualifierList
    TypeQualifierList StorageClass 		  -> DeclarationQualifierList
    DeclarationQualifierList DeclarationQualifier -> DeclarationQualifierList
   
  context-free syntax
    TypeQualifier+ -> TypeQualifierList
   
  context-free syntax
    StorageClass  -> DeclarationQualifier
    TypeQualifier -> DeclarationQualifier
   
  context-free syntax
    CONST    -> TypeQualifier
    VOLATILE -> TypeQualifier
   
  context-free syntax
    DeclarationQualifierList BasicTypeName 	   -> BasicDeclarationSpecifier
    BasicTypeSpecifier StorageClass 		   -> BasicDeclarationSpecifier
    BasicDeclarationSpecifier DeclarationQualifier -> BasicDeclarationSpecifier
    BasicDeclarationSpecifier BasicTypeName 	   -> BasicDeclarationSpecifier
   
  context-free syntax
    BasicTypeName 			-> BasicTypeSpecifier
    TypeQualifierList BasicTypeName 	-> BasicTypeSpecifier
    BasicTypeSpecifier TypeQualifier 	-> BasicTypeSpecifier
    BasicTypeSpecifier BasicTypeName 	-> BasicTypeSpecifier
   
  context-free syntax
    DeclarationQualifierList ElaboratedTypeName  -> SueDeclarationSpecifier
    SueTypeSpecifier StorageClass 		 -> SueDeclarationSpecifier
    SueDeclarationSpecifier DeclarationQualifier -> SueDeclarationSpecifier
   
  context-free syntax
    ElaboratedTypeName 			 -> SueTypeSpecifier
    TypeQualifierList ElaboratedTypeName -> SueTypeSpecifier
    SueTypeSpecifier TypeQualifier 	 -> SueTypeSpecifier
   
  context-free syntax
    TypedefTypeSpecifier 
	StorageClass 		-> TypedefDeclarationSpecifier
    DeclarationQualifierList 
	TypedefName 	     	-> TypedefDeclarationSpecifier
    TypedefDeclarationSpecifier 
	DeclarationQualifier 	-> TypedefDeclarationSpecifier
   
  context-free syntax
    TypedefName 			-> TypedefTypeSpecifier
    TypeQualifierList TypedefName 	-> TypedefTypeSpecifier
    TypedefTypeSpecifier TypeQualifier 	-> TypedefTypeSpecifier
   
  context-free syntax
    TYPEDEF 	-> StorageClass
    EXTERN 	-> StorageClass
    STATIC 	-> StorageClass
    AUTO 	-> StorageClass
    REGISTER 	-> StorageClass
   
  context-free syntax
    INT 	-> BasicTypeName
    CHAR 	-> BasicTypeName
    SHORT 	-> BasicTypeName
    LONG 	-> BasicTypeName
    FLOAT 	-> BasicTypeName
    DOUBLE 	-> BasicTypeName
    SIGNED 	-> BasicTypeName
    UNSIGNED 	-> BasicTypeName
    VOID 	-> BasicTypeName
   
  context-free syntax
    StructOrUnionSpecifier	-> ElaboratedTypeName
    EnumSpecifier		-> ElaboratedTypeName
   
  context-free syntax
    StructOrUnion "{" MemberDeclarationList "}"
                                                -> StructOrUnionSpecifier
    StructOrUnion IdentifierOrTypedefName 
	"{" MemberDeclarationList "}"           -> StructOrUnionSpecifier
    StructOrUnion IdentifierOrTypedefName
                                                -> StructOrUnionSpecifier
   
  context-free syntax
    STRUCT 	-> StructOrUnion
    UNION 	-> StructOrUnion
   
  context-free syntax
    MemberDeclaration+ -> MemberDeclarationList
   
  context-free syntax
    MemberDeclaringList ";" 	   -> MemberDeclaration
    MemberDefaultDeclaringList ";" -> MemberDeclaration
   
  context-free syntax
    TypeQualifierList 
	MemberIdentifierDeclarator 	-> MemberDefaultDeclaringList
    MemberDefaultDeclaringList "," 
	MemberIdentifierDeclarator 	-> MemberDefaultDeclaringList
   
  context-free syntax
    TypeSpecifier MemberDeclarator 		-> MemberDeclaringList
    MemberDeclaringList "," MemberDeclarator 	-> MemberDeclaringList
   
  context-free syntax
    Declarator BitFieldSizeOpt 	-> MemberDeclarator
    BitFieldSize 		-> MemberDeclarator
   
  context-free syntax
    IdentifierDeclarator  BitFieldSizeOpt -> MemberIdentifierDeclarator
    BitFieldSize 			  -> MemberIdentifierDeclarator
   
  context-free syntax
    BitFieldSize? -> BitFieldSizeOpt
   
  context-free syntax
    ":" ConstantExpression -> BitFieldSize
   
  context-free syntax
    ENUM "{" EnumeratorList "}" 			-> EnumSpecifier
    ENUM IdentifierOrTypedefName "{" EnumeratorList "}" -> EnumSpecifier
    ENUM IdentifierOrTypedefName 			-> EnumSpecifier
   
  context-free syntax
    IdentifierOrTypedefName 
	EnumeratorValueOpt 			-> EnumeratorList
    EnumeratorList "," IdentifierOrTypedefName 
	EnumeratorValueOpt 			-> EnumeratorList
   
  context-free syntax
    			   -> EnumeratorValueOpt
    "=" ConstantExpression -> EnumeratorValueOpt
   
  context-free syntax
    ParameterList 		-> ParameterTypeList
    ParameterList "," ELLIPSIS 	-> ParameterTypeList
   
  context-free syntax
    {ParameterDeclaration ","}+ -> ParameterList
   
  context-free syntax
    DeclarationSpecifier 				-> ParameterDeclaration
    DeclarationSpecifier AbstractDeclarator 		-> ParameterDeclaration
    DeclarationSpecifier IdentifierDeclarator 		-> ParameterDeclaration
    DeclarationSpecifier ParameterTypedefDeclarator 	-> ParameterDeclaration
    DeclarationQualifierList 				-> ParameterDeclaration
    DeclarationQualifierList AbstractDeclarator 	-> ParameterDeclaration
    DeclarationQualifierList IdentifierDeclarator 	-> ParameterDeclaration
    TypeSpecifier 					-> ParameterDeclaration
    TypeSpecifier AbstractDeclarator 			-> ParameterDeclaration
    TypeSpecifier IdentifierDeclarator 			-> ParameterDeclaration
    TypeSpecifier ParameterTypedefDeclarator 		-> ParameterDeclaration
    TypeQualifierList 					-> ParameterDeclaration
    TypeQualifierList AbstractDeclarator 		-> ParameterDeclaration
    TypeQualifierList IdentifierDeclarator 		-> ParameterDeclaration
   
  context-free syntax
    {IDENTIFIER ","}+ -> IdentifierList
   
  context-free syntax
    IDENTIFIER  -> IdentifierOrTypedefName
    TypedefName -> IdentifierOrTypedefName
   
  context-free syntax
    TypeSpecifier 			 -> TypeName
    TypeSpecifier AbstractDeclarator 	 -> TypeName
    TypeQualifierList 			 -> TypeName
    TypeQualifierList AbstractDeclarator -> TypeName
   
  context-free syntax
    			-> InitializerOpt
    "=" Initializer 	-> InitializerOpt
   
  context-free syntax
    "{" InitializerList "}" 	-> Initializer
    "{" InitializerList "," "}" -> Initializer
    AssignmentExpression 	-> Initializer
   
  context-free syntax
    {Initializer ","}+ -> InitializerList
   
  context-free syntax
    LabeledStatement 	-> Statement
    CompoundStatement 	-> Statement
    ExpressionStatement -> Statement
    SelectionStatement 	-> Statement
    IterationStatement 	-> Statement
    JumpStatement 	-> Statement
   
  context-free syntax
    IdentifierOrTypedefName ":" Statement -> LabeledStatement
    CASE ConstantExpression ":" Statement -> LabeledStatement
    DEFAULT ":" Statement 		  -> LabeledStatement
   
  context-free syntax
    "{" "}" -> CompoundStatement
    "{" DeclarationList "}" 		  -> CompoundStatement
    "{" StatementList "}" 		  -> CompoundStatement
    "{" DeclarationList StatementList "}" -> CompoundStatement
   
  context-free syntax
    Declaration+ -> DeclarationList
   
  context-free syntax
    Statement+ -> StatementList
   
  context-free syntax
    CommaExpressionOpt ";" -> ExpressionStatement
   
  context-free syntax
    IF "(" CommaExpression ")" Statement 		-> SelectionStatement
    IF "(" CommaExpression ")" Statement ELSE Statement -> SelectionStatement
    SWITCH "(" CommaExpression ")" Statement 		-> SelectionStatement
   
  context-free syntax
    WHILE "(" CommaExpression ")" Statement 		-> IterationStatement
    DO Statement WHILE "(" CommaExpression ")" ";" 	-> IterationStatement
    FOR "(" CommaExpressionOpt ";" 
	    CommaExpressionOpt ";" 
            CommaExpressionOpt ")" Statement 		-> IterationStatement
   
  context-free syntax
    GOTO IdentifierOrTypedefName ";" 	-> JumpStatement
    CONTINUE ";" 			-> JumpStatement
    BREAK ";" 				-> JumpStatement
    RETURN CommaExpressionOpt ";" 	-> JumpStatement
   
  context-free syntax
    ExternalDefinition+ -> TranslationUnit
   
  context-free syntax
    FunctionDefinition 	-> ExternalDefinition
    Declaration 	-> ExternalDefinition
   
  context-free syntax
    IdentifierDeclarator 
	CompoundStatement 			-> FunctionDefinition
    DeclarationSpecifier IdentifierDeclarator 
	CompoundStatement 			-> FunctionDefinition
    TypeSpecifier IdentifierDeclarator 
	CompoundStatement 			-> FunctionDefinition
    DeclarationQualifierList IdentifierDeclarator 
	CompoundStatement 			-> FunctionDefinition
    TypeQualifierList IdentifierDeclarator 
	CompoundStatement 			-> FunctionDefinition
    OldFunctionDeclarator CompoundStatement 	-> FunctionDefinition
    DeclarationSpecifier OldFunctionDeclarator 
	CompoundStatement 			-> FunctionDefinition
    TypeSpecifier OldFunctionDeclarator 
	CompoundStatement 			-> FunctionDefinition
    DeclarationQualifierList OldFunctionDeclarator 
	CompoundStatement 			-> FunctionDefinition
    TypeQualifierList OldFunctionDeclarator 
	CompoundStatement 			-> FunctionDefinition
    OldFunctionDeclarator DeclarationList 
	CompoundStatement 			-> FunctionDefinition
    DeclarationSpecifier OldFunctionDeclarator DeclarationList 
	CompoundStatement 			-> FunctionDefinition
    TypeSpecifier OldFunctionDeclarator DeclarationList 
	CompoundStatement 			-> FunctionDefinition
    DeclarationQualifierList OldFunctionDeclarator DeclarationList 
	CompoundStatement 			-> FunctionDefinition
    TypeQualifierList OldFunctionDeclarator DeclarationList 
	CompoundStatement 			-> FunctionDefinition
   
  context-free syntax
    IdentifierDeclarator 	-> Declarator
    TypedefDeclarator 		-> Declarator
   
  context-free syntax
    ParenTypedefDeclarator -> TypedefDeclarator
    ParameterTypedefDeclarator -> TypedefDeclarator
   
  context-free syntax
    TypedefName -> ParameterTypedefDeclarator
    TypedefName PostfixingAbstractDeclarator -> ParameterTypedefDeclarator
    CleanTypedefDeclarator -> ParameterTypedefDeclarator
   
  context-free syntax
    CleanPostfixTypedefDeclarator -> CleanTypedefDeclarator
    "*" ParameterTypedefDeclarator -> CleanTypedefDeclarator
    "*" TypeQualifierList ParameterTypedefDeclarator -> CleanTypedefDeclarator
   
  context-free syntax
    "(" CleanTypedefDeclarator ")" -> CleanPostfixTypedefDeclarator
    "(" CleanTypedefDeclarator ")" PostfixingAbstractDeclarator -> CleanPostfixTypedefDeclarator
   
  context-free syntax
    ParenPostfixTypedefDeclarator -> ParenTypedefDeclarator
    "*"                   "(" SimpleParenTypedefDeclarator ")" -> ParenTypedefDeclarator
    "*" TypeQualifierList "(" SimpleParenTypedefDeclarator ")" -> ParenTypedefDeclarator
    "*"                   ParenTypedefDeclarator -> ParenTypedefDeclarator
    "*" TypeQualifierList ParenTypedefDeclarator -> ParenTypedefDeclarator
   
  context-free syntax
    "(" ParenTypedefDeclarator ")" -> ParenPostfixTypedefDeclarator
    "(" SimpleParenTypedefDeclarator PostfixingAbstractDeclarator ")" -> ParenPostfixTypedefDeclarator
    "(" ParenTypedefDeclarator ")" PostfixingAbstractDeclarator -> ParenPostfixTypedefDeclarator
   
  context-free syntax
    TypedefName -> SimpleParenTypedefDeclarator
    "(" SimpleParenTypedefDeclarator ")" -> SimpleParenTypedefDeclarator
   
  context-free syntax
    UnaryIdentifierDeclarator -> IdentifierDeclarator
    ParenIdentifierDeclarator -> IdentifierDeclarator
   
  context-free syntax
    PostfixIdentifierDeclarator -> UnaryIdentifierDeclarator
    "*" IdentifierDeclarator -> UnaryIdentifierDeclarator
    "*" TypeQualifierList IdentifierDeclarator -> UnaryIdentifierDeclarator
   
  context-free syntax
    ParenIdentifierDeclarator PostfixingAbstractDeclarator -> PostfixIdentifierDeclarator
    "(" UnaryIdentifierDeclarator ")" -> PostfixIdentifierDeclarator
    "(" UnaryIdentifierDeclarator ")" PostfixingAbstractDeclarator -> PostfixIdentifierDeclarator
   
  context-free syntax
    IDENTIFIER -> ParenIdentifierDeclarator
    "(" ParenIdentifierDeclarator ")" -> ParenIdentifierDeclarator
   
  context-free syntax
    PostfixOldFunctionDeclarator -> OldFunctionDeclarator
    "*" OldFunctionDeclarator -> OldFunctionDeclarator
    "*" TypeQualifierList OldFunctionDeclarator -> OldFunctionDeclarator
   
  context-free syntax
    ParenIdentifierDeclarator "(" IdentifierList ")" -> PostfixOldFunctionDeclarator
    "(" OldFunctionDeclarator ")" -> PostfixOldFunctionDeclarator
    "(" OldFunctionDeclarator ")" PostfixingAbstractDeclarator -> PostfixOldFunctionDeclarator
   
  context-free syntax
    UnaryAbstractDeclarator -> AbstractDeclarator
    PostfixAbstractDeclarator -> AbstractDeclarator
    PostfixingAbstractDeclarator -> AbstractDeclarator
   
  context-free syntax
    ArrayAbstractDeclarator -> PostfixingAbstractDeclarator
    "(" ")" -> PostfixingAbstractDeclarator
    "(" ParameterTypeList ")" -> PostfixingAbstractDeclarator
   
  context-free syntax
    "[" "]" -> ArrayAbstractDeclarator
    "[" ConstantExpression "]" -> ArrayAbstractDeclarator
    ArrayAbstractDeclarator "[" ConstantExpression "]" -> ArrayAbstractDeclarator
   
  context-free syntax
    "*" -> UnaryAbstractDeclarator
    "*" TypeQualifierList -> UnaryAbstractDeclarator
    "*" AbstractDeclarator -> UnaryAbstractDeclarator
    "*" TypeQualifierList AbstractDeclarator -> UnaryAbstractDeclarator
   
  context-free syntax
    "(" UnaryAbstractDeclarator ")" -> PostfixAbstractDeclarator
    "(" PostfixAbstractDeclarator ")" -> PostfixAbstractDeclarator
    "(" PostfixingAbstractDeclarator ")" -> PostfixAbstractDeclarator
    "(" UnaryAbstractDeclarator ")" PostfixingAbstractDeclarator -> PostfixAbstractDeclarator
