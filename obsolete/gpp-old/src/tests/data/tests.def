definition
module Main
imports Literals
exports
   sorts Opt-seq Opt-seq2 Opt-iter Opt-iter1 Iter-sep Iter-sep1 Iter-sep2
         Iter-sep3 Iter-sep-seq Iter-sep-seq2 Alt Alt2 Alt3 Seq Seq2 Iter-seq
         Seq3 Or QLiteral Lit-Iter-Star

lexical syntax
   [\ \t\n] -> LAYOUT
   [a-z]  -> A
   [A-Z] -> B

context-free restrictions
   LAYOUT? -/- [\ \t\n]

context-free syntax
   (A "noot" B)? 		-> Opt-seq  {cons("opt-seq")}
   (A "noot" B)? 		-> Opt-seq2  {cons("opt-seq2")}

   "aap" A+?     		-> Opt-iter {cons("opt-iter")}
   "aap" A+?     		-> Opt-iter1 {cons("opt-iter1")}  

   {A ","}+      		-> Iter-sep {cons("iter-sep")}
   {A ","}+      		-> Iter-sep1 {cons("iter-sep1")}

   {A+ B+}+     		-> Iter-sep2 {cons("iter-sep2")}
   {A+ B+}+     		-> Iter-sep3 {cons("iter-sep3")}

   {(A A A) ";"}+ 		-> Iter-sep-seq {cons("iter-sep-seq")}

   {(A {A B}* A) ";"}+ 		-> Iter-sep-seq2 {cons("iter-sep-seq2")}

   {A","}+|B 			-> Alt {cons("alt")}
   {A","}+| {B ","}+ 		-> Alt2 {cons("alt2")}

   "aap" | "noot" | "mies" 	-> Alt3 {cons("alt3")}

   ( A B A ) 			-> Seq {cons("seq")}
   ( A? B A ) 			-> Seq2 {cons("seq2")}

   ("FROM" A)? ("TO" B)? 	-> Seq3 {cons("seq3")}

   ((A B))+ 			-> Iter-seq {cons("iter-seq")}

   A "\\/" B			-> Or {cons("or")}


   "aap"*                       -> Lit-Iter-Star {cons("lit-iter-star")}

module Literals
imports Layout

exports
  sorts QLiteral UQLiteral Literal

  lexical syntax
    "\\" ~[] -> AlphaNumericalEscChar {avoid}
    "\\" [01] [0-9] [0-9] -> DecimalEscChar
    "\\" "2" [0-4] [0-9] -> DecimalEscChar
    "\\" "2" "5" [0-5] -> DecimalEscChar
    AlphaNumericalEscChar -> EscChar
    DecimalEscChar -> EscChar
    ~[\0-\31\"\\] \/ [\t\n] -> L-Char
    EscChar -> L-Char
    "\"" L-Char* "\"" -> QLiteral
    [A-Za-z\-\_] [A-Za-z0-9\-\_]* -> UQLiteral

  lexical syntax
    QLiteral -> Literal
    UQLiteral -> Literal
