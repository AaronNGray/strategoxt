%%%
%%% SDF grammar for the language "pp-tables".
%%%
%%% This grammar is part of the Grammar Base which is located at
%%%      http://www.program-transformation.org/gb/
%%% 
%%%  Grammar: pp-tables
%%%  Version: 0
%%% Maturity: Volatile
%%%
%%% Description:
%%%  Syntax of Pretty-Print Tables

%%% Copyright (C) 2001 Merijn de Jonge <mdejonge@cwi.nl>,
%%%                    Eelco Visser <visser@acm.org>,
%%%                    Joost Visser <jvisser@cwi.nl>
%%%
%%% This program is free software; you can redistribute it and/or modify
%%% it under the terms of the GNU General Public License as published by
%%% the Free Software Foundation; either version 2, or (at your option)
%%% any later version.
%%%
%%% This program is distributed in the hope that it will be useful,
%%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%% GNU General Public License for more details.
%%%
%%% You should have received a copy of the GNU General Public License
%%% along with this program; if not, write to the Free Software
%%% Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
%%% 02111-1307, USA.
%%%
%%% $Id: pp-tables.def,v 1.1 2001/12/18 11:25:32 mdejonge Exp $

definition

module Box-Disambiguation
exports
  context-free restrictions
    LAYOUT? -/- [\ \t\n\%]

module Box-Layout
imports Layout

exports
  lexical syntax
    "%%" ~[\n]* "\n" -> LAYOUT

module Box-Lists-Syntax
exports
  imports Box-Syntax-Base

exports
  sorts BOX-LIST

  context-free syntax
    BOX* -> BOX-LIST 

module IntCon
imports Layout

exports
  sorts NatCon IntCon

  lexical syntax
    [0-9]+ -> NatCon

  context-free syntax
    NatCon -> IntCon {cons("NatCon")}
    "+" NatCon -> IntCon {cons("plus")}
    "-" NatCon -> IntCon {cons("minus")}

module Box-Operators-Syntax
imports IntCon

exports
  sorts SPACE-SYMBOL S-OPTION S-OPTIONS

  context-free syntax
    SPACE-SYMBOL "=" NatCon -> S-OPTION {cons("SOpt")}
    SPACE-SYMBOL "=" BOX -> S-OPTION {cons("SOptB")}
    S-OPTION* -> S-OPTIONS 
    "vs" -> SPACE-SYMBOL {cons("VS")}
    "hs" -> SPACE-SYMBOL {cons("HS")}
    "is" -> SPACE-SYMBOL {cons("IS")}

exports
  context-free syntax
    "H" S-OPTIONS "[" BOX-LIST "]" -> BOX {cons("H")}
    "V" S-OPTIONS "[" BOX-LIST "]" -> BOX {cons("V")}
    "HV" S-OPTIONS "[" BOX-LIST "]" -> BOX {cons("HV")}

exports
  context-free syntax
    "ALT" "[" BOX BOX "]" -> BOX {cons("ALT")}

exports
  sorts A-OPTION A-OPTIONS

  context-free syntax
    "A" A-OPTIONS S-OPTIONS "[" BOX-LIST "]" -> BOX {cons("A")}
    "R" S-OPTIONS "[" BOX-LIST "]" -> BOX {cons("R")}
    "l" S-OPTIONS -> A-OPTION {cons("AL")}
    "c" S-OPTIONS -> A-OPTION {cons("AC")}
    "r" S-OPTIONS -> A-OPTION {cons("AR")}
    "(" {A-OPTION ","}* ")" -> A-OPTIONS {cons("AOPTIONS")}

exports
  sorts FID FONT-PARAM F-OPTION F-OPTIONS FONT-OPERATOR

  lexical syntax
    [A-Za-z]+ -> FID

  context-free syntax
    FONT-PARAM "=" NatCon -> F-OPTION {cons("FNAT")}
    FONT-PARAM "=" FID -> F-OPTION {cons("FFID")}
    F-OPTION* -> F-OPTIONS 
    "F" F-OPTIONS -> FONT-OPERATOR {cons("F")}
    FONT-OPERATOR "[" BOX "]" -> BOX {cons("FBOX")}
    "fn" -> FONT-PARAM {cons("FN")}
    "fm" -> FONT-PARAM {cons("FM")}
    "se" -> FONT-PARAM {cons("SE")}
    "sh" -> FONT-PARAM {cons("SH")}
    "sz" -> FONT-PARAM {cons("SZ")}
    "cl" -> FONT-PARAM {cons("CL")}

exports
  context-free syntax
    "KW" -> FONT-OPERATOR {cons("KW")}
    "VAR" -> FONT-OPERATOR {cons("VAR")}
    "NUM" -> FONT-OPERATOR {cons("NUM")}
    "MATH" -> FONT-OPERATOR {cons("MATH")}

exports
  context-free syntax
    "LBL" "[" BoxLiteral BOX "]" -> BOX {cons("LBL")}
    "REF" "[" BoxLiteral BOX "]" -> BOX {cons("REF")}

exports
  context-free syntax
    "C" S-OPTIONS "[" BOX-LIST "]" -> BOX {cons("C")}

exports
  context-free syntax
    "L" "[" BOX BOX "]" -> BOX {cons("L")}
    "L" "[" NatCon BOX "]" -> BOX {cons("LNAT")}

module Layout
exports
  lexical syntax
    [\ \t\n] -> LAYOUT

  context-free restrictions
    LAYOUT? -/- [\ \t\n]

module Literals
imports Layout

exports
  sorts QLiteral UQLiteral Literal

  lexical syntax
    "\\" ~[] -> AlphaNumericalEscChar {avoid}
    "\\" [01] [0-9] [0-9] -> DecimalEscChar
    "\\" "2" [0-4] [0-9] -> DecimalEscChar
    "\\" "2" "5" [0-5] -> DecimalEscChar
    AlphaNumericalEscChar -> EscChar
    DecimalEscChar -> EscChar
    ~[\0-\31\"\\] \/ [\t\n] -> L-Char
    EscChar -> L-Char
    "\"" L-Char* "\"" -> QLiteral
    [A-Za-z\-\_] [A-Za-z0-9\-\_]* -> UQLiteral

  lexical syntax
    QLiteral -> Literal
    UQLiteral -> Literal

module Literal-Box-Syntax
imports Literals

exports
  aliases
    QLiteral -> BoxLiteral

module Box-Syntax-Base
exports
  sorts BOX

module Box-Atoms-Syntax
exports
  imports Box-Syntax-Base Literal-Box-Syntax

exports
  context-free syntax
    BoxLiteral -> BOX {cons("S")}

module Box-Syntax
exports
  imports Box-Atoms-Syntax Box-Operators-Syntax Box-Lists-Syntax Box-Layout Box-Disambiguation

module PlaceHolder
imports Box-Syntax

exports
  context-free syntax
    "_" NatCon -> BOX {cons("Arg")}
    "_" NatCon "." NatCon -> BOX {cons("Arg2")}

module PP-Tables
imports PlaceHolder

exports
  sorts PP-Entry PP-Table PP-Tables PP-Identifier

  lexical syntax
    ~[\ \t\n\.]+ -> ConsName
    "\"" ~[\"]+ "\"" -> ConsName

  context-free restrictions
    ConsName -/- ~[\ \t\n\.]

  context-free syntax
    "[" {PP-Entry ","}* "]" -> PP-Table {cons("PP-Table")}
    PP-Table* -> PP-Tables 
    NatCon ":" UQLiteral -> Selector {cons("selector")}
    ConsName -> Path {cons("Path1")}
    ConsName "." {Selector "."}+ -> Path {cons("Path")}
    Path "--" BOX-LIST -> PP-Entry {cons("PP-Entry")}

module Main
imports PP-Tables

module GB-Main
imports Main

exports
  syntax
    <START> -> SURROGATE-START {cons("\"pp-tables-0\"")}
    SURROGATE-START [\256] -> <Start> {prefer, cons("SURROGATE-START")}
