#! /bin/sh
# Copyright (C) 2000 Merijn de Jonge <mdejonge@cwi.nl>
#                    Eelco Visser <visser@acm.org>
#                    Joost Visser <jvisser@cwi.nl>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
# 02111-1307, USA.

# $Id: ppgen.sh.src,v 1.1 2001/08/23 09:00:23 visser Exp $

# usage:
#   ppgen [-A] [-a] [-h] [-i grammar] [-o file] [-S] [-v]
#
# where
#   -A          Input is parse tree.
#   -a          Input is abstract syntax tree.
#   -h          Displays usage information.
#   -i grammars Specifies SDF module or definition for whihc to generate a
#               pretty-print table.
#   -o file     Specifies the name of the resulting pretty-print table.
#   -S          Run silently.
#   -v          Run verbosely.

SGLR=__SGLR__
PREFIX=__PREFIX__
pkgdatadir=__pkgdatadir__

# default input type (change with -a or -A switch)
INPUT_TYPE="plain-text"

PATH=${PREFIX}/bin:${PATH}; export PATH

# no core files
ulimit -c 0

usage () {
cat <<ENDCAT
usage:
  ppgen [-A] [-a] [-h] [-i grammar] [-o file] [-v]

where
  -A          Input is parse tree.
  -a          Input is abstract syntax tree.
  -h          Displays usage information.
  -i grammars Specifies SDF module or definition for whihc to generate a
              pretty-print table.
  -o file     Specifies the name of the resulting pretty-print table.
  -S          Run silently.
  -v          Run verbosely.
ENDCAT
}

for arg in $*
do
   case $1 in
      -A ) INPUT_TYPE="parse-tree"; shift ;;
      -a ) INPUT_TYPE="abstract-syntax-tree"; shift ;;
      -h ) usage; exit 0 ;;
      -i ) INPUT=$2; shift; shift ;;
      -o ) OUTPUT=$2; shift ; shift ;;
      -S ) SILENT="--silent"; shift ;;
      -v ) VERBOSE="-v"; shift ;;
      -* ) usage; exit 1 ;;
   esac
done

cmd="cat ${INPUT}"

case $INPUT_TYPE in
   plain-text )             cmd="$cmd \
                          | ${SGLR}/bin/sglr -p ${pkgdatadir}/sdf.cons.tbl \
                          | ${PREFIX}/bin/implode-asfix" ;;
                     
   parse-tree )           cmd="$cmd | ${PREFIX}/bin/implode-asfix" ;;

   abstract-syntax-tree ) ;;
esac
   
cmd="$cmd \
     | ${PREFIX}/libexec/Ppgen ${SILENT} \
     | ast2abox ${VERBOSE} -p ${PREFIX}/share/gpp/pp-tables.pp \
     | ${PREFIX}/bin/abox2text"

# -o option has been specified
if [ "a${OUTPUT}" != "a-" -a "a${OUTPUT}" != "a" ]; then
   cmd="$cmd -o ${OUTPUT}"
fi

# Finally, evaluate the constructed command line
eval ${cmd}
