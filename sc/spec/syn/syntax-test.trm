Specification([Strategies([SDef("free-vars",[DefaultVarDec("getvars"),DefaultVarDec("boundvars")],Rec("x",LChoice(Call(SVar("getvars"),[]),Seq(Call(SVar("split"),[Call(SVar("crush"),[Build(Op("Nil",[])),Call(SVar("union"),[]),Call(SVar("x"),[])]),LChoice(Call(SVar("boundvars"),[]),Build(Op("Nil",[])))]),Call(SVar("diff"),[]))))),SDef("free-vars",[DefaultVarDec("getvars"),DefaultVarDec("boundvars"),VarDec("boundin",FunType([ConstType(Var("term")),FunType([ConstType(Var("term"))],ConstType(Var("term"))),FunType([ConstType(Var("term"))],ConstType(Var("term"))),FunType([ConstType(Var("term"))],ConstType(Var("term")))],ConstType(Var("term"))))],Rec("x",LChoice(Call(SVar("getvars"),[]),LChoice(Seq(Scope(["vs"],Seq(Where(AM(Call(SVar("boundvars"),[]),Var("vs"))),Call(SVar("boundin"),[Seq(Call(SVar("split"),[Call(SVar("x"),[]),Build(Var("vs"))]),Call(SVar("diff"),[])),Call(SVar("x"),[]),Build(Op("Nil",[]))]))),Call(SVar("crush"),[Build(Op("Nil",[])),Call(SVar("union"),[]),Id])),Call(SVar("crush"),[Build(Op("Nil",[])),Call(SVar("union"),[]),Call(SVar("x"),[])]))))),SDef("free-vars",[DefaultVarDec("getvars"),DefaultVarDec("boundvars"),VarDec("boundin",FunType([ConstType(Var("term")),FunType([ConstType(Var("term"))],ConstType(Var("term"))),FunType([ConstType(Var("term"))],ConstType(Var("term"))),FunType([ConstType(Var("term"))],ConstType(Var("term")))],ConstType(Var("term")))),DefaultVarDec("eq")],Rec("x",LChoice(Call(SVar("getvars"),[]),LChoice(Seq(Scope(["vs"],Seq(Where(AM(Call(SVar("boundvars"),[]),Var("vs"))),Call(SVar("boundin"),[Seq(Call(SVar("split"),[Call(SVar("x"),[]),Build(Var("vs"))]),Call(SVar("diff"),[Call(SVar("eq"),[])])),Call(SVar("x"),[]),Build(Op("Nil",[]))]))),Call(SVar("crush"),[Build(Op("Nil",[])),Call(SVar("union"),[]),Id])),Call(SVar("crush"),[Build(Op("Nil",[])),Call(SVar("union"),[]),Call(SVar("x"),[])])))))]),Strategies([SDef("free-vars2",[DefaultVarDec("getvars"),DefaultVarDec("boundvars")],Rec("x",Seq(Call(SVar("split"),[LChoice(Call(SVar("getvars"),[]),Build(Op("Nil",[]))),Seq(Call(SVar("split"),[Call(SVar("crush"),[Build(Op("Nil",[])),Call(SVar("union"),[]),Call(SVar("x"),[])]),LChoice(Call(SVar("boundvars"),[]),Build(Op("Nil",[])))]),Call(SVar("diff"),[]))]),Call(SVar("union"),[])))),SDef("free-vars2",[DefaultVarDec("getvars"),DefaultVarDec("boundvars"),VarDec("boundin",FunType([ConstType(Var("term")),FunType([ConstType(Var("term"))],ConstType(Var("term"))),FunType([ConstType(Var("term"))],ConstType(Var("term"))),FunType([ConstType(Var("term"))],ConstType(Var("term")))],ConstType(Var("term"))))],Rec("x",Seq(Call(SVar("split"),[LChoice(Call(SVar("getvars"),[]),Build(Op("Nil",[]))),LChoice(Seq(Scope(["vs"],Seq(Where(AM(Call(SVar("boundvars"),[]),Var("vs"))),Call(SVar("boundin"),[Seq(Call(SVar("split"),[Call(SVar("x"),[]),Build(Var("vs"))]),Call(SVar("diff"),[])),Call(SVar("x"),[]),Build(Op("Nil",[]))]))),Call(SVar("crush"),[Build(Op("Nil",[])),Call(SVar("union"),[]),Id])),Call(SVar("crush"),[Build(Op("Nil",[])),Call(SVar("union"),[]),Call(SVar("x"),[])]))]),Call(SVar("union"),[])))),SDef("free-vars2",[DefaultVarDec("getvars"),DefaultVarDec("boundvars"),VarDec("boundin",FunType([ConstType(Var("term")),FunType([ConstType(Var("term"))],ConstType(Var("term"))),FunType([ConstType(Var("term"))],ConstType(Var("term"))),FunType([ConstType(Var("term"))],ConstType(Var("term")))],ConstType(Var("term")))),DefaultVarDec("eq")],Rec("x",Seq(Call(SVar("split"),[LChoice(Call(SVar("getvars"),[]),Build(Op("Nil",[]))),LChoice(Scope(["vs"],Seq(Where(AM(Call(SVar("boundvars"),[]),Var("vs"))),Seq(Call(SVar("boundin"),[Seq(Call(SVar("split"),[Call(SVar("x"),[]),Build(Var("vs"))]),Call(SVar("diff"),[Call(SVar("eq"),[])])),Call(SVar("x"),[]),Build(Op("Nil",[]))]),Call(SVar("crush"),[Build(Op("Nil",[])),Call(SVar("union"),[]),Id])))),Call(SVar("crush"),[Build(Op("Nil",[])),Call(SVar("union"),[]),Call(SVar("x"),[])]))]),Call(SVar("union"),[]))))]),Strategies([SDef("equal",[],Call(SVar("for"),[Id,Call(SVar("Nil"),[]),LChoice(Call(SVar("UfIdem"),[]),Call(SVar("UfDecompose"),[]))]))]),Rules([RDef("UfIdem",[],Rule(Op("Cons",[Op("",[Var("x"),Var("x")]),Var("ps")]),Var("ps"),Id)),RDef("UfDecompose",[],Rule(Op("Cons",[Op("",[Explode(Var("f"),Var("xs")),Explode(Var("f"),Var("ys"))]),Var("ps")]),App(Call(SVar("conc"),[]),Op("",[App(Call(SVar("zip"),[Id]),Op("",[Var("xs"),Var("ys")])),Var("ps")])),Id))]),Strategies([SDef("diff",[],Call(SVar("for"),[LRule(Rule(Var("ps"),Op("",[Op("Nil",[]),Var("ps")]),Id)),Call(SVar(""),[Id,Call(SVar("Nil"),[])]),LChoice(Call(SVar(""),[Id,LChoice(Call(SVar("UfIdem"),[]),Call(SVar("UfDecompose"),[]))]),Call(SVar("UfShift"),[]))]))]),Rules([RDef("UfShift",[],Rule(Op("",[Var("ps1"),Op("Cons",[Var("p"),Var("ps2")])]),Op("",[Op("Cons",[Var("p"),Var("ps1")]),Var("ps2")]),Id))]),Strategies([SDef("pattern-match",[DefaultVarDec("isvar")],Call(SVar("for"),[LRule(Rule(Var("pairs"),Op("",[Var("pairs"),Op("Nil",[])]),Id)),LRule(Rule(Op("",[Op("Nil",[]),Var("sbs")]),Var("sbs"),Id)),LChoice(Call(SVar(""),[Call(SVar("UfIdem"),[]),Id]),Choice(Call(SVar("MatchVar"),[Call(SVar("isvar"),[])]),Call(SVar(""),[Call(SVar("UfDecompose"),[]),Id])))]))]),Rules([RDef("MatchVar",[DefaultVarDec("isvar")],Rule(Op("",[Op("Cons",[Op("",[Var("x"),Var("y")]),Var("ps")]),Var("sbs")]),Op("",[Var("ps"),Op("Cons",[Op("",[Var("x"),Var("y")]),Var("sbs")])]),Seq(BA(Call(SVar("isvar"),[]),Var("x")),BA(Not(Call(SVar("fetch"),[Scope(["z"],Seq(Match(Op("",[Var("x"),Var("z")])),BA(Not(Call(SVar("eq"),[])),Op("",[Var("y"),Var("z")]))))])),Var("sbs")))))]),Strategies([SDef("unify",[DefaultVarDec("isvar")],Call(SVar("for"),[LRule(Rule(Var("pairs"),Op("",[Var("pairs"),Op("Nil",[])]),Id)),LRule(Rule(Op("",[Op("Nil",[]),Var("sbs")]),Var("sbs"),Id)),LChoice(Call(SVar(""),[Call(SVar("UfIdem"),[]),Id]),Choice(Call(SVar("UfVar"),[Call(SVar("isvar"),[])]),LChoice(Call(SVar("UfSwap"),[Call(SVar("isvar"),[])]),Call(SVar(""),[Call(SVar("UfDecompose"),[]),Id]))))]))]),Rules([RDef("UfVar",[DefaultVarDec("isvar")],Rule(Op("",[Op("Cons",[Op("",[Var("x"),Var("y")]),Var("ps")]),Var("sbs")]),Op("",[Var("ps'"),Op("Cons",[Op("",[Var("x"),Var("y")]),Var("sbs''")])]),Seq(BA(Call(SVar("isvar"),[]),Var("x")),Seq(BA(Not(Call(SVar("in"),[])),Op("",[Var("x"),Var("y")])),AM(BA(Call(SVar("substitute"),[Call(SVar("isvar"),[])]),Op("",[Op("Cons",[Op("",[Var("x"),Var("y")]),Op("Nil",[])]),Op("",[Var("sbs"),Var("ps")])])),Op("",[Var("sbs''"),Var("ps'")])))))),RDef("UfSwap",[DefaultVarDec("isvar")],Rule(Op("",[Op("Cons",[Op("",[Var("x"),Var("y")]),Var("ps")]),Var("sbs")]),Op("",[Op("Cons",[Op("",[Var("y"),Var("x")]),Var("ps")]),Var("sbs")]),Seq(BA(Not(Call(SVar("isvar"),[])),Var("x")),BA(Call(SVar("isvar"),[]),Var("y")))))]),Rules([RDef("in",[],Rule(Op("",[Var("a"),Var("t")]),App(Call(SVar("oncetd"),[Match(Var("a"))]),Var("t")),Id))]),Strategies([SDef("equal",[DefaultVarDec("fltr")],Call(SVar("for"),[Id,Call(SVar("Nil"),[]),LChoice(Call(SVar("UfIdem"),[]),Seq(Call(SVar("try"),[Call(SVar("Cons"),[Call(SVar(""),[Call(SVar("fltr"),[]),Call(SVar("fltr"),[])]),Id])]),Call(SVar("UfDecompose"),[])))]))]),Strategies([SDef("equal",[DefaultVarDec("fltr1"),DefaultVarDec("fltr2")],Call(SVar("for"),[Id,Call(SVar("Nil"),[]),LChoice(Call(SVar("UfIdem"),[]),Seq(Call(SVar("Cons"),[Seq(Call(SVar(""),[Call(SVar("try"),[Call(SVar("fltr1"),[])]),Call(SVar("try"),[Call(SVar("fltr1"),[])])]),Call(SVar("try"),[Call(SVar("fltr2"),[])])),Id]),Call(SVar("UfDecompose"),[])))]))]),Rules([RDef("RnVar",[VarDec("isvar",FunType([ConstType(Var("name")),FunType([ConstType(Var("name"))],ConstType(Var("env")))],ConstType(Var("term"))))],Rule(Op("",[Var("t"),Var("env")]),App(Call(SVar("isvar"),[Seq(Call(SVar("split"),[Id,Build(Var("env"))]),Call(SVar("lookup"),[]))]),Var("t")),Id)),RDef("RnBinding",[DefaultVarDec("bndvrs")],Rule(Op("",[Var("t"),Var("env1")]),Op("",[Var("t"),Var("env1"),Var("env2")]),Seq(AM(BA(Call(SVar("bndvrs"),[]),Var("t")),Var("xs")),Seq(AM(Call(SVar("map"),[Call(SVar("new"),[])]),Var("ys")),AM(BA(Call(SVar("conc"),[]),Op("",[App(Call(SVar("zip"),[Id]),Op("",[Var("xs"),Var("ys")])),Var("env1")])),Var("env2")))))),RDef("DistBinding",[DefaultVarDec("s")],Rule(Op("",[Var("t"),Var("env1"),Var("env2")]),App(All(LRule(Rule(Var("x"),App(Call(SVar("s"),[]),Op("",[Var("x"),Var("env2")])),Id))),Var("t")),Id))]),Strategies([SDef("rename",[VarDec("isvar",FunType([ConstType(Var("name")),FunType([ConstType(Var("name"))],ConstType(Var("env")))],ConstType(Var("term")))),DefaultVarDec("bndvars")],Seq(LRule(Rule(Var("t"),Op("",[Var("t"),Op("Nil",[])]),Id)),Rec("x",Call(SVar("env-alltd"),[LChoice(Call(SVar("RnVar"),[Call(SVar("isvar"),[])]),Seq(Call(SVar("RnBinding"),[Call(SVar("bndvars"),[])]),Call(SVar("DistBinding"),[Call(SVar("x"),[])])))]))))]),Rules([RDef("DistBinding",[DefaultVarDec("s"),VarDec("boundin",FunType([ConstType(Var("term")),FunType([ConstType(Var("term"))],ConstType(Var("term"))),FunType([ConstType(Var("term"))],ConstType(Var("term"))),FunType([ConstType(Var("term"))],ConstType(Var("term")))],ConstType(Var("term"))))],Rule(Op("",[Var("t"),Var("env1"),Var("env2")]),App(Call(SVar("boundin"),[LRule(Rule(Var("x"),App(Call(SVar("s"),[]),Op("",[Var("x"),Var("env2")])),Id)),LRule(Rule(Var("x"),App(Call(SVar("s"),[]),Op("",[Var("x"),Var("env1")])),Id)),Id]),Var("t")),Id))]),Strategies([SDef("rename",[VarDec("isvar",FunType([ConstType(Var("name")),FunType([ConstType(Var("name"))],ConstType(Var("env")))],ConstType(Var("term")))),DefaultVarDec("bndvars"),VarDec("boundin",FunType([ConstType(Var("term")),FunType([ConstType(Var("term"))],ConstType(Var("term"))),FunType([ConstType(Var("term"))],ConstType(Var("term"))),FunType([ConstType(Var("term"))],ConstType(Var("term")))],ConstType(Var("term"))))],Seq(LRule(Rule(Var("t"),Op("",[Var("t"),Op("Nil",[])]),Id)),Rec("x",Call(SVar("env-alltd"),[LChoice(Call(SVar("RnVar"),[Call(SVar("isvar"),[])]),Seq(Call(SVar("RnBinding"),[Call(SVar("bndvars"),[])]),Call(SVar("DistBinding"),[Call(SVar("x"),[]),Call(SVar("boundin"),[])])))]))))]),Rules([RDef("RnBinding",[DefaultVarDec("bndvrs"),VarDec("paste",FunType([ConstType(Var("term")),FunType([ConstType(Var("term"))],ConstType(Var("vars")))],ConstType(Var("term"))))],Rule(Op("",[Var("t"),Var("env1")]),Op("",[App(Call(SVar("paste"),[Build(Var("ys"))]),Var("t")),Var("env1"),Var("env2")]),Seq(AM(BA(Call(SVar("bndvrs"),[]),Var("t")),Var("xs")),Seq(AM(Call(SVar("map"),[Call(SVar("new"),[])]),Var("ys")),AM(BA(Call(SVar("conc"),[]),Op("",[App(Call(SVar("zip"),[Id]),Op("",[Var("xs"),Var("ys")])),Var("env1")])),Var("env2"))))))]),Strategies([SDef("rename",[VarDec("isvar",FunType([ConstType(Var("name")),FunType([ConstType(Var("name"))],ConstType(Var("env")))],ConstType(Var("term")))),DefaultVarDec("bndvars"),VarDec("boundin",FunType([ConstType(Var("term")),FunType([ConstType(Var("term"))],ConstType(Var("term"))),FunType([ConstType(Var("term"))],ConstType(Var("term"))),FunType([ConstType(Var("term"))],ConstType(Var("term")))],ConstType(Var("term")))),VarDec("paste",FunType([ConstType(Var("term")),FunType([ConstType(Var("term"))],ConstType(Var("vars")))],ConstType(Var("term"))))],Seq(LRule(Rule(Var("t"),Op("",[Var("t"),Op("Nil",[])]),Id)),Rec("x",Call(SVar("env-alltd"),[LChoice(Call(SVar("RnVar"),[Call(SVar("isvar"),[])]),Seq(Call(SVar("RnBinding"),[Call(SVar("bndvars"),[]),Call(SVar("paste"),[])]),Call(SVar("DistBinding"),[Call(SVar("x"),[]),Call(SVar("boundin"),[])])))]))))]),Strategies([SDef("subs-args",[],LChoice(Match(Op("",[Var("sbs"),Var("t")])),LRule(Rule(Op("",[Var("xs"),Var("ys"),Var("t")]),Op("",[App(Call(SVar("zip"),[Id]),Op("",[Var("xs"),Var("ys")])),Var("t")]),Id))))]),Rules([RDef("SubsVar",[DefaultVarDec("isvar"),DefaultVarDec("mksbs")],Rule(Var("t"),App(Call(SVar("lookup"),[]),Op("",[Var("x"),Var("sbs")])),Seq(AM(BA(Call(SVar("isvar"),[]),Var("t")),Var("x")),AM(Call(SVar("mksbs"),[]),Var("sbs")))))]),Strategies([SDef("substitute",[DefaultVarDec("isvar"),DefaultVarDec("ren")],Seq(AM(Call(SVar("subs-args"),[]),Op("",[Var("sbs"),Var("t")])),Seq(Build(Var("t")),Call(SVar("alltd"),[Seq(Call(SVar("SubsVar"),[Call(SVar("isvar"),[]),Build(Var("sbs"))]),Call(SVar("ren"),[]))])))),SDef("substitute",[DefaultVarDec("isvar")],Call(SVar("substitute"),[Call(SVar("isvar"),[]),Id])),SDef("substitute",[DefaultVarDec("isvar"),VarDec("varshape",FunType([ConstType(Var("name")),FunType([ConstType(Var("name"))],ConstType(Var("env")))],ConstType(Var("term")))),DefaultVarDec("bndvars"),VarDec("boundin",FunType([ConstType(Var("term")),FunType([ConstType(Var("term"))],ConstType(Var("term"))),FunType([ConstType(Var("term"))],ConstType(Var("term"))),FunType([ConstType(Var("term"))],ConstType(Var("term")))],ConstType(Var("term")))),VarDec("paste",FunType([ConstType(Var("term")),FunType([ConstType(Var("term"))],ConstType(Var("vars")))],ConstType(Var("term")))),DefaultVarDec("ren")],Seq(AM(Call(SVar("subs-args"),[]),Op("",[Var("sbs"),Var("t")])),Seq(Build(Op("",[Var("t"),Op("Nil",[])])),Rec("x",Call(SVar("env-alltd"),[LChoice(Call(SVar("RnVar"),[Call(SVar("varshape"),[])]),LChoice(Seq(Call(SVar("Fst"),[]),Seq(Call(SVar("SubsVar"),[Call(SVar("isvar"),[]),Build(Var("sbs"))]),Call(SVar("ren"),[]))),Seq(Call(SVar("RnBinding"),[Call(SVar("bndvars"),[]),Call(SVar("paste"),[])]),Call(SVar("DistBinding"),[Call(SVar("x"),[]),Call(SVar("boundin"),[])]))))]))))),SDef("substitute",[DefaultVarDec("isvar"),VarDec("varshape",FunType([ConstType(Var("name")),FunType([ConstType(Var("name"))],ConstType(Var("env")))],ConstType(Var("term")))),DefaultVarDec("bndvars"),VarDec("boundin",FunType([ConstType(Var("term")),FunType([ConstType(Var("term"))],ConstType(Var("term"))),FunType([ConstType(Var("term"))],ConstType(Var("term"))),FunType([ConstType(Var("term"))],ConstType(Var("term")))],ConstType(Var("term")))),VarDec("paste",FunType([ConstType(Var("term")),FunType([ConstType(Var("term"))],ConstType(Var("vars")))],ConstType(Var("term"))))],Call(SVar("substitute"),[Call(SVar("isvar"),[]),Call(SVar("varshape"),[]),Call(SVar("bndvars"),[]),Call(SVar("boundin"),[]),Call(SVar("paste"),[]),Id]))]),Strategies([SDef("table-create",[],Seq(Match(Var("name")),Prim("SSL_table_create",[Var("name")]))),SDef("table-destroy",[],Seq(Match(Var("name")),Prim("SSL_table_destroy",[Var("name")]))),SDef("table-put",[],Where(Seq(Match(Op("",[Var("table"),Var("key"),Var("value")])),Prim("SSL_table_put",[Var("table"),Var("key"),Var("value")])))),SDef("table-get",[],Seq(Match(Op("",[Var("table"),Var("key")])),Prim("SSL_table_get",[Var("table"),Var("key")]))),SDef("table-remove",[],Where(Seq(Match(Op("",[Var("table"),Var("key")])),Prim("SSL_table_remove",[Var("table"),Var("key")])))),SDef("table-keys",[],Seq(Match(Var("table")),Prim("SSL_table_keys",[Var("table")]))),SDef("table-getlist",[],Seq(Match(Var("name")),Seq(Call(SVar("table-keys"),[]),Call(SVar("map"),[LRule(Rule(Var("x"),Op("",[Var("x"),App(Call(SVar("table-get"),[]),Op("",[Var("name"),Var("x")]))]),Id))])))),SDef("table-putlist",[],Seq(Match(Op("",[Var("name"),Var("list")])),BA(Call(SVar("map"),[Scope(["x","y"],Seq(Match(Op("",[Var("x"),Var("y")])),BA(Call(SVar("table-put"),[]),Op("",[Var("name"),Var("x"),Var("y")]))))]),Var("list"))))]),Strategies([SDef("table-push",[],Seq(Match(Op("",[Var("dis"),Var("key"),Var("val")])),Where(BA(Call(SVar("table-put"),[]),Op("",[Var("dis"),Var("key"),Op("Cons",[Var("val"),App(LChoice(Call(SVar("table-get"),[]),Build(Op("Nil",[]))),Op("",[Var("dis"),Var("key")]))])]))))),SDef("table-pop",[],Seq(Match(Op("",[Var("dis"),Var("key")])),Where(BA(Call(SVar("table-put"),[]),Op("",[Var("dis"),Var("key"),App(LChoice(Seq(Call(SVar("table-get"),[]),Call(SVar("Tl"),[])),Build(Op("Nil",[]))),Op("",[Var("dis"),Var("key")]))]))))),SDef("table-pop-get",[],Seq(Match(Op("",[Var("dis"),Var("key")])),Seq(Where(Seq(AM(BA(Call(SVar("table-get"),[]),Op("",[Var("dis"),Var("key")])),Op("Cons",[Var("val"),Var("vals")])),BA(Call(SVar("table-put"),[]),Op("",[Var("dis"),Var("key"),Var("vals")])))),Build(Var("val"))))),SDef("table-lookup",[],Seq(Match(Op("",[Var("dis"),Var("key")])),Seq(BA(Call(SVar("table-get"),[]),Op("",[Var("dis"),Var("key")])),Call(SVar("Hd"),[])))),SDef("table-replace",[],Seq(Match(Op("",[Var("dis"),Var("key"),Var("value")])),Where(Seq(AM(BA(Call(SVar("table-get"),[]),Op("",[Var("dis"),Var("key")])),Op("Cons",[Wld,Var("values")])),BA(Call(SVar("table-put"),[]),Op("",[Var("dis"),Var("key"),Op("Cons",[Var("value"),Var("values")])])))))),SDef("table-union",[],Seq(Match(Op("",[Var("table"),Var("key"),Var("val")])),Where(BA(Call(SVar("set"),[]),Op("",[Var("table"),Var("key"),App(Call(SVar("union"),[]),Op("",[Var("val"),App(LChoice(Call(SVar("get"),[]),Build(Op("Nil",[]))),Op("",[Var("table"),Var("key")]))]))]))))),SDef("table-diff",[],Seq(Match(Op("",[Var("table"),Var("key"),Var("val")])),Where(BA(Call(SVar("set"),[]),Op("",[Var("table"),Var("key"),App(Call(SVar("diff"),[]),Op("",[App(LChoice(Call(SVar("get"),[]),Build(Op("Nil",[]))),Op("",[Var("table"),Var("key")])),Var("val")]))]))))),SDef("set",[],Call(SVar("table-put"),[])),SDef("get",[],Call(SVar("table-get"),[]))]),Strategies([SDef("destroy-display",[],Seq(Call(SVar("obsolete"),[Build(Str("destroy-display; use table-destroy"))]),Call(SVar("table-destroy"),[]))),SDef("create-display",[],Seq(Call(SVar("obsolete"),[Build(Str("create-display; use table-create"))]),Call(SVar("table-create"),[]))),SDef("display-lookup",[],Seq(Call(SVar("obsolete"),[Build(Str("display-lookup; use table-lookup"))]),Call(SVar("table-lookup"),[]))),SDef("display-replace",[],Seq(Call(SVar("obsolete"),[Build(Str("display-replace; use table-replace"))]),Call(SVar("table-replace"),[]))),SDef("display-pop",[],Seq(Call(SVar("obsolete"),[Build(Str("display-pop; use table-pop"))]),Call(SVar("table-pop"),[]))),SDef("display-push",[],Seq(Call(SVar("obsolete"),[Build(Str("display-push; use table-push"))]),Call(SVar("table-push"),[]))),SDef("push-set",[],Seq(Call(SVar("obsolete"),[Build(Str("push-set; use table-push"))]),Call(SVar("table-push"),[]))),SDef("pop-get",[],Seq(Call(SVar("obsolete"),[Build(Str("pop-get; use table-pop-get"))]),Call(SVar("table-pop-get"),[]))),SDef("union-set",[],Seq(Call(SVar("obsolete"),[Build(Str("union-set; use table-union"))]),Call(SVar("table-union"),[]))),SDef("diff-set",[],Seq(Call(SVar("obsolete"),[Build(Str("diff-set; use table-diff"))]),Call(SVar("table-diff"),[]))),SDef("create-table",[],Seq(Call(SVar("obsolete"),[Build(Str("create-table: use table-create"))]),Call(SVar("table-create"),[]))),SDef("destroy-table",[],Seq(Call(SVar("obsolete"),[Build(Str("destroy-table: use table-destroy"))]),Call(SVar("table-destroy"),[])))]),Strategies([SDef("exit",[],Seq(Match(Var("n")),Prim("SSL_exit",[Var("n")]))),SDef("call",[],Seq(Match(Op("",[Var("prog"),Var("args")])),Prim("SSL_call",[Var("prog"),Var("args")]))),SDef("call-noisy",[],Seq(Match(Op("",[Var("prog"),Var("args")])),Prim("SSL_call_noisy",[Var("prog"),Var("args")]))),SDef("get-pid",[],Prim("SSL_get_pid",[])),SDef("rm-files",[],Seq(Match(Var("files")),Where(BA(Call(SVar("call"),[]),Op("",[Str("rm"),Op("Cons",[Str("-f"),Var("files")])]))))),SDef("pipe",[DefaultVarDec("c"),DefaultVarDec("suf2")],Call(SVar("pipe"),[Call(SVar("c"),[]),Call(SVar("suf2"),[]),Build(Op("Nil",[]))])),SDef("pipe",[DefaultVarDec("c"),DefaultVarDec("suf2"),DefaultVarDec("args")],Seq(Where(AM(Call(SVar("conc-strings"),[]),Var("in"))),Seq(Call(SVar(""),[Id,Call(SVar("suf2"),[])]),Seq(Where(AM(Call(SVar("conc-strings"),[]),Var("out"))),Where(BA(Call(SVar("call"),[]),Op("",[App(Call(SVar("c"),[]),Op("",[])),Op("Cons",[Str("-i"),Op("Cons",[Var("in"),Op("Cons",[Str("-o"),Op("Cons",[Var("out"),App(Call(SVar("args"),[]),Op("",[]))])])])])]))))))),SDef("pipe'",[DefaultVarDec("c"),DefaultVarDec("suf2"),DefaultVarDec("args")],Seq(Call(SVar("obsolete"),[Build(Str("pipe'/3; use pipe/3"))]),Call(SVar("pipe"),[Call(SVar("c"),[]),Call(SVar("suf2"),[]),Call(SVar("args"),[])]))),SDef("transform-file",[DefaultVarDec("s"),DefaultVarDec("suf")],Seq(Where(AM(Call(SVar("conc-strings"),[]),Var("in"))),Seq(Call(SVar(""),[Id,Call(SVar("suf"),[])]),Seq(Where(AM(Call(SVar("conc-strings"),[]),Var("out"))),Where(BA(Call(SVar("apply-to-file"),[Call(SVar("s"),[])]),Op("",[Var("in"),Var("out")]))))))),SDef("apply-to-file",[DefaultVarDec("s")],Seq(Match(Op("",[Var("in"),Var("out")])),Seq(Where(AM(BA(Seq(Call(SVar("ReadFromFile"),[]),Call(SVar("s"),[])),Var("in")),Var("trm"))),Where(BA(Call(SVar("WriteToBinaryFile"),[]),Op("",[Var("out"),Var("trm")])))))),SDef("copy-file",[DefaultVarDec("s"),DefaultVarDec("new-base"),DefaultVarDec("new-suf")],Seq(Match(Op("",[Var("base"),Var("suf")])),Seq(Call(SVar(""),[Call(SVar("new-base"),[]),Call(SVar("new-suf"),[])]),Seq(Match(Op("",[Var("nbase"),Var("nsuf")])),Where(BA(Call(SVar("apply-to-file"),[Call(SVar("s"),[])]),Op("",[App(Call(SVar("conc-strings"),[]),Op("",[Var("base"),Var("suf")])),App(Call(SVar("conc-strings"),[]),Op("",[Var("nbase"),Var("nsuf")]))]))))))),SDef("apply-program",[DefaultVarDec("name")],Call(SVar("apply-program"),[Call(SVar("name"),[]),Build(Op("Nil",[]))])),SDef("apply-program",[DefaultVarDec("name"),DefaultVarDec("args")],Call(SVar("temp-file"),[Seq(Match(Op("",[Var("infile"),Wld])),Seq(Call(SVar("WriteToBinaryFile"),[]),Call(SVar("temp-file"),[Seq(Match(Op("",[Var("outfile"),Wld])),Seq(BA(Call(SVar("call"),[]),Op("",[App(Call(SVar("name"),[]),Op("",[])),Op("Cons",[Str("-i"),Op("Cons",[Var("infile"),Op("Cons",[Str("-o"),Op("Cons",[Var("outfile"),App(Call(SVar("args"),[]),Op("",[]))])])])])])),BA(Call(SVar("ReadFromFile"),[]),Var("outfile"))))])))]))]),Signature([Sorts([Sort("Option",[])]),Constructors([OpDecl("Program",FunType([ConstType(Var("String"))],ConstType(Var("Option")))),OpDecl("Undefined",FunType([ConstType(Var("String"))],ConstType(Var("Option"))))])]),Strategies([SDef("system-usage-switch",[],Call(SVar("Option"),[Choice(Match(Str("--help")),Choice(Match(Str("-h")),Match(Str("-?")))),Build(Op("Help",[])),Build(Str("-h|-?|--help     Display usage information"))])),SDef("short-description",[DefaultVarDec("s")],Fail),SDef("long-description",[DefaultVarDec("s")],Fail),SDef("parse-options",[DefaultVarDec("s")],Seq(Where(BA(Call(SVar("table-put"),[]),Op("",[Str("usage-table"),Str("usage"),Op("Nil",[])]))),Seq(Call(SVar("parse-options'"),[Choice(Call(SVar("s"),[]),Call(SVar("system-usage-switch"),[]))]),Seq(Call(SVar("try"),[Choice(Seq(Call(SVar("option-defined"),[Call(SVar("Help"),[])]),Seq(Call(SVar("system-usage"),[]),BA(Call(SVar("exit"),[]),Int(0)))),Seq(Call(SVar("option-defined"),[Call(SVar("Undefined"),[Match(Var("option"))])]),Seq(Where(BA(Call(SVar("printnl"),[]),Op("",[Var("stderr"),Op("Cons",[Str("Invalid option: "),Op("Cons",[Var("option"),Op("Nil",[])])])]))),Seq(Call(SVar("system-usage"),[]),BA(Call(SVar("exit"),[]),Int(1))))))]),Where(BA(Call(SVar("table-destroy"),[]),Str("usage-table"))))))),SDef("parse-options'",[DefaultVarDec("s")],Seq(Where(Call(SVar("try"),[BA(Call(SVar("s"),[]),Str("register-usage-info"))])),Call(SVar("Cons"),[LRule(Rule(Var("x"),Op("Program",[Var("x")]),Id)),Rec("x",LChoice(Choice(Call(SVar("Nil"),[]),Seq(Call(SVar("s"),[]),Call(SVar("Cons"),[Id,Call(SVar("x"),[])]))),Call(SVar("UndefinedOption"),[])))]))),SDef("register-usage",[DefaultVarDec("s")],Seq(BA(Call(SVar("table-push"),[]),Op("",[Str("usage-table"),Str("usage"),App(Call(SVar("s"),[]),Op("",[]))])),Fail)),SDef("system-usage",[],Seq(Call(SVar("option-defined"),[Call(SVar("Program"),[Match(Var("p"))])]),Seq(Call(SVar("try"),[BA(Call(SVar("printnl"),[]),Op("",[Var("stderr"),Op("Cons",[App(Seq(Call(SVar("short-description"),[Build(Var("p"))]),Call(SVar("concat-strings"),[])),Op("",[])),Op("Nil",[])])]))]),Seq(BA(Call(SVar("printnl"),[]),Op("",[Var("stderr"),Op("Cons",[Str("\nOptions:"),Op("Nil",[])])])),Seq(BA(Seq(Call(SVar("table-get"),[]),Call(SVar("reverse"),[])),Op("",[Str("usage-table"),Str("usage")])),Seq(Call(SVar("map"),[LRule(Rule(Var("x"),App(Call(SVar("printnl"),[]),Op("",[Var("stderr"),Op("Cons",[Str("   "),Op("Cons",[Var("x"),Op("Nil",[])])])])),Id))]),Call(SVar("try"),[BA(Call(SVar("printnl"),[]),Op("",[Var("stderr"),Op("Cons",[Str("\nDescription:\n"),Op("Cons",[App(Seq(Call(SVar("long-description"),[Build(Var("p"))]),Call(SVar("concat-strings"),[])),Op("",[])),Op("Nil",[])])])]))])))))))]),Rules([RDef("Option",[DefaultVarDec("is-flag"),DefaultVarDec("label"),DefaultVarDec("s")],Rule(Op("Cons",[Var("flag"),Var("rest")]),Op("Cons",[App(Call(SVar("label"),[]),Op("",[])),Var("rest")]),BA(Call(SVar("is-flag"),[]),Var("flag")))),SDef("Option",[DefaultVarDec("is-flag"),DefaultVarDec("label")],Call(SVar("Option"),[Call(SVar("is-flag"),[]),Call(SVar("label"),[]),Build(Str(""))])),SDef("Option",[DefaultVarDec("is-flag"),DefaultVarDec("label"),DefaultVarDec("s")],Seq(Match(Str("register-usage-info")),Call(SVar("register-usage"),[Call(SVar("s"),[])]))),RDef("ArgOption",[DefaultVarDec("is-flag"),DefaultVarDec("label"),DefaultVarDec("s")],Rule(Op("Cons",[Var("flag"),Op("Cons",[Var("arg"),Var("rest")])]),Op("Cons",[App(Call(SVar("label"),[]),Var("arg")),Var("rest")]),BA(Call(SVar("is-flag"),[]),Var("flag")))),SDef("ArgOption",[DefaultVarDec("is-flag"),DefaultVarDec("label"),DefaultVarDec("s")],Seq(Match(Str("register-usage-info")),Call(SVar("register-usage"),[Call(SVar("s"),[])]))),SDef("ArgOption",[DefaultVarDec("is-flag"),DefaultVarDec("label")],Call(SVar("ArgOption"),[Call(SVar("is-flag"),[]),Call(SVar("label"),[]),Build(Str(""))])),RDef("Arg2Option",[DefaultVarDec("is-flag"),DefaultVarDec("label")],Rule(Op("Cons",[Var("flag"),Op("Cons",[Var("arg1"),Op("Cons",[Var("arg2"),Var("rest")])])]),Op("Cons",[App(Call(SVar("label"),[]),Op("",[Var("arg1"),Var("arg2")])),Var("rest")]),BA(Call(SVar("is-flag"),[]),Var("flag")))),RDef("UndefinedOption",[],Rule(Op("Cons",[Var("x"),Var("rest")]),Op("Cons",[Op("Undefined",[Var("x")]),Var("rest")]),Id))]),Strategies([SDef("defined-option",[DefaultVarDec("s")],Call(SVar("fetch"),[Call(SVar("s"),[])])),SDef("option-defined",[DefaultVarDec("s")],Call(SVar("fetch"),[Call(SVar("s"),[])])),SDef("arg-option-value",[DefaultVarDec("s")],Call(SVar("fetch"),[Call(SVar("s"),[])]))]),Signature([Constructors([OpDecl("Silent",ConstType(Var("Option"))),OpDecl("Verbose",ConstType(Var("Option"))),OpDecl("Version",ConstType(Var("Option"))),OpDecl("Input",FunType([ConstType(Var("String"))],ConstType(Var("Option")))),OpDecl("Output",FunType([ConstType(Var("String"))],ConstType(Var("Option")))),OpDecl("Binary",ConstType(Var("Option"))),OpDecl("Statistics",ConstType(Var("Option"))),OpDecl("Help",ConstType(Var("Option"))),OpDecl("Runtime",FunType([ConstType(Var("Real"))],ConstType(Var("Option")))),OpDecl("DeclVersion",FunType([ConstType(Var("String"))],ConstType(Var("Option"))))])]),Strategies([SDef("iowrap",[DefaultVarDec("strat")],Call(SVar("iowrap"),[Call(SVar(""),[Id,Call(SVar("strat"),[])]),Fail])),SDef("iowrapO",[DefaultVarDec("strat"),DefaultVarDec("extra-options")],Seq(Call(SVar("obsolete"),[Build(Str("iowrapO/2: use iowrap/2"))]),Call(SVar("iowrap"),[Call(SVar("strat"),[]),Call(SVar("extra-options"),[])]))),SDef("iowrap",[DefaultVarDec("strat"),DefaultVarDec("extra-options")],Call(SVar("iowrap"),[Call(SVar("strat"),[]),Call(SVar("extra-options"),[]),Call(SVar("default-usage"),[])])),SDef("iowrapO",[DefaultVarDec("strat"),DefaultVarDec("extra-options"),DefaultVarDec("usage")],Seq(Call(SVar("obsolete"),[Build(Str("iowrapO/3: use iowrap/3"))]),Call(SVar("iowrap"),[Call(SVar("strat"),[]),Call(SVar("extra-options"),[]),Call(SVar("usage"),[])]))),SDef("iowrap",[DefaultVarDec("strat"),DefaultVarDec("extra-options"),DefaultVarDec("usage")],Seq(Call(SVar("parse-options"),[LChoice(Call(SVar("extra-options"),[]),Call(SVar("io-options"),[]))]),Seq(Call(SVar("store-options"),[]),LChoice(Call(SVar("need-help"),[Call(SVar("usage"),[])]),LChoice(Seq(Call(SVar("input-file"),[]),Seq(Call(SVar("apply-strategy"),[Call(SVar("strat"),[])]),Seq(Call(SVar("output-file"),[]),Call(SVar("report-success"),[])))),Call(SVar("report-failure"),[])))))),SDef("iowrapNoOutput",[DefaultVarDec("strat"),DefaultVarDec("extra-options")],Call(SVar("iowrapNoOutput"),[Call(SVar("strat"),[]),Call(SVar("extra-options"),[]),Call(SVar("default-usage"),[])])),SDef("iowrapNoOutput",[DefaultVarDec("strat"),DefaultVarDec("extra-options"),DefaultVarDec("usage")],Seq(Call(SVar("parse-options"),[LChoice(Call(SVar("extra-options"),[]),Call(SVar("io-options"),[]))]),Seq(Call(SVar("store-options"),[]),LChoice(Call(SVar("need-help"),[Call(SVar("usage"),[])]),LChoice(Seq(Call(SVar("input-file"),[]),Seq(Call(SVar("apply-strategy"),[Call(SVar("strat"),[])]),Call(SVar("report-success"),[]))),Call(SVar("report-failure"),[])))))),SDef("store-options",[],Seq(Match(Var("options")),Where(Seq(BA(Call(SVar("table-create"),[]),Str("option-table")),BA(Call(SVar("table-put"),[]),Op("",[Str("option-table"),Str("options"),Var("options")])))))),SDef("get-options",[],BA(Call(SVar("table-get"),[]),Op("",[Str("option-table"),Str("options")]))),SDef("has-option",[DefaultVarDec("s")],Test(BA(Seq(Call(SVar("s"),[]),Call(SVar("check-option"),[])),Op("",[])))),SDef("option-value",[DefaultVarDec("s"),DefaultVarDec("default")],LChoice(Seq(Call(SVar("get-options"),[]),Call(SVar("fetch-elem"),[Call(SVar("s"),[])])),Call(SVar("default"),[])))]),Rules([RDef("check-option",[],Rule(Var("option"),Op("",[]),Seq(AM(Call(SVar("get-options"),[]),Var("ops")),BA(Call(SVar("in"),[]),Op("",[Var("option"),Var("ops")])))))]),Strategies([SDef("io-options",[],Choice(Call(SVar("Option"),[Choice(Match(Str("-S")),Match(Str("--silent"))),Build(Op("Silent",[])),Build(Str("-S|--silent      Silent execution"))]),Choice(Call(SVar("Option"),[Match(Str("--verbose")),Build(Op("Verbose",[])),Build(Str("--verbose        Verbose execution"))]),Choice(Call(SVar("Option"),[Choice(Match(Str("-v")),Match(Str("--version"))),Build(Op("Version",[])),Build(Str("-v|--version     Display prgram's version"))]),Choice(Call(SVar("ArgOption"),[Match(Str("@version")),Build(Op("DeclVersion",[RootApp(Id)])),Build(Str("@version         Unknown"))]),Choice(Call(SVar("ArgOption"),[Choice(Match(Str("-i")),Match(Str("--input"))),Build(Op("Input",[RootApp(Id)])),Build(Str("-i f|--input f   Read input from f"))]),Choice(Call(SVar("ArgOption"),[Choice(Match(Str("-o")),Match(Str("--uotput"))),Build(Op("Output",[RootApp(Id)])),Build(Str("-o f|--output f  Write output to f"))]),Choice(Call(SVar("Option"),[Match(Str("-b")),Build(Op("Binary",[])),Build(Str("-b               Write binary output"))]),Call(SVar("Option"),[Match(Str("-s")),Build(Op("Statistics",[])),Build(Str("-s               Turn on statisctics"))]))))))))),SDef("usage'",[],Call(SVar("obsolete"),[Build(Str("usage': use default-usage"))])),SDef("default-usage",[],Where(Seq(Call(SVar("option-defined"),[Match(Op("Program",[Var("prog")]))]),Seq(BA(Call(SVar("printnl"),[]),Op("",[Var("stderr"),Op("Cons",[Str("usage : "),Op("Cons",[Var("prog"),Op("Cons",[Str(" [-S] [-i file] [-o file] [-b] [-s] [--help|-h|-?]"),Op("Nil",[])])])])])),BA(Call(SVar("exit"),[]),Int(1)))))),SDef("need-help",[DefaultVarDec("u")],Seq(Call(SVar("option-defined"),[Choice(Call(SVar("Help"),[]),Choice(Call(SVar("Undefined"),[Id]),Call(SVar("Version"),[])))]),Call(SVar("u"),[]))),SDef("need-help",[],Call(SVar("need-help"),[Call(SVar("default-usage"),[])])),SDef("input-file'",[],Seq(Call(SVar("obsolete"),[Build(Str("input-file'; use input-file"))]),Call(SVar("input-file"),[]))),SDef("input-file",[],Seq(Where(LChoice(Call(SVar("option-defined"),[Match(Op("Input",[Var("infile")]))]),AM(Build(Var("stdin")),Var("infile")))),Call(SVar("split"),[Id,BA(Call(SVar("ReadFromFile"),[]),Var("infile"))]))),SDef("apply-strategy",[DefaultVarDec("strat")],Seq(Where(Call(SVar("dtime"),[])),Seq(Call(SVar("strat"),[]),Seq(Where(AM(Call(SVar("dtime"),[]),Var("runtime"))),LRule(Rule(Op("",[Var("options"),Var("trm")]),Op("",[Op("Cons",[Op("Runtime",[Var("runtime")]),Var("options")]),Var("trm")]),Id)))))),SDef("output-file'",[],Seq(Call(SVar("obsolete"),[Build(Str("output-file'; use output-file"))]),Call(SVar("output-file"),[]))),SDef("output-file",[],Seq(Where(Call(SVar(""),[LChoice(Call(SVar("option-defined"),[Match(Op("Output",[Var("outfile")]))]),AM(Build(Var("stdout")),Var("outfile"))),Id])),Seq(Call(SVar(""),[Id,Call(SVar("split"),[Build(Var("outfile")),Id])]),LChoice(Call(SVar(""),[Call(SVar("option-defined"),[Match(Op("Binary",[]))]),Call(SVar("WriteToBinaryFile"),[])]),Call(SVar(""),[Id,Call(SVar("WriteToTextFile"),[])]))))),SDef("report-success",[],Seq(Where(Call(SVar("try"),[Seq(Call(SVar(""),[Not(Call(SVar("option-defined"),[Match(Op("Silent",[]))])),Id]),Seq(Call(SVar(""),[Call(SVar("option-defined"),[Match(Op("Runtime",[Var("runtime")]))]),Id]),Seq(Call(SVar(""),[Call(SVar("option-defined"),[Match(Op("Program",[Var("prog")]))]),Id]),BA(Call(SVar("printnl"),[]),Op("",[Var("stderr"),Op("Cons",[Var("prog"),Op("Cons",[Str(" ("),Op("Cons",[Var("runtime"),Op("Cons",[Str(" secs)"),Op("Nil",[])])])])])])))))])),BA(Call(SVar("exit"),[]),Int(0)))),SDef("report-failure",[],Seq(BA(Call(SVar("printnl"),[]),Op("",[Var("stderr"),Op("Cons",[Str("rewriting failed"),Op("Nil",[])])])),BA(Call(SVar("exit"),[]),Int(1))))]),Signature([Constructors([OpDecl("Scopes",ConstType(Var("Key")))])]),Strategies([SDef("init-name-space",[DefaultVarDec("ns")],Where(Seq(Call(SVar("ns"),[]),Call(SVar("table-create"),[])))),SDef("exit-name-space",[DefaultVarDec("ns")],Where(Seq(Call(SVar("ns"),[]),Call(SVar("table-destroy"),[])))),SDef("begin-scope",[DefaultVarDec("ns")],Where(Seq(AM(Call(SVar("ns"),[]),Var("ns")),BA(Call(SVar("table-put"),[]),Op("",[Var("ns"),Var("Scopes"),Op("Cons",[Op("Nil",[]),App(LChoice(Call(SVar("table-get"),[]),Build(Op("Nil",[]))),Op("",[Var("ns"),Var("Scopes")]))])]))))),SDef("end-scope",[DefaultVarDec("ns")],Where(Seq(AM(Call(SVar("ns"),[]),Var("ns")),Seq(AM(LChoice(BA(Call(SVar("table-get"),[]),Op("",[Var("ns"),Var("Scopes")])),Build(Op("Cons",[Op("Nil",[]),Op("Nil",[])]))),Op("Cons",[Var("scope"),Var("scopes")])),Seq(BA(Call(SVar("table-put"),[]),Op("",[Var("ns"),Var("Scopes"),Var("scopes")])),BA(Call(SVar("map"),[LRule(Rule(Var("key"),App(Call(SVar("table-pop"),[]),Op("",[Var("ns"),Var("key")])),Id))]),Var("scope"))))))),SDef("scope",[DefaultVarDec("ns"),DefaultVarDec("s")],Seq(Call(SVar("begin-scope"),[Call(SVar("ns"),[])]),Call(SVar("restore-always"),[Call(SVar("s"),[]),Call(SVar("end-scope"),[Call(SVar("ns"),[])])]))),SDef("assert",[DefaultVarDec("ns")],Seq(Match(Op("",[Var("key"),Var("val")])),Where(Seq(AM(Call(SVar("ns"),[]),Var("ns")),Seq(BA(Call(SVar("table-push"),[]),Op("",[Var("ns"),Var("key"),Var("val")])),Seq(AM(LChoice(BA(Call(SVar("table-get"),[]),Op("",[Var("ns"),Var("Scopes")])),Build(Op("Cons",[Op("Nil",[]),Op("Nil",[])]))),Op("Cons",[Var("scope"),Var("scopes")])),BA(Call(SVar("table-put"),[]),Op("",[Var("ns"),Var("Scopes"),Op("Cons",[Op("Cons",[Var("key"),Var("scope")]),Var("scopes")])])))))))),SDef("override-key",[DefaultVarDec("ns")],Seq(Match(Op("",[Var("key"),Var("val")])),Where(Seq(AM(Call(SVar("ns"),[]),Var("ns")),BA(Call(SVar("table-replace"),[]),Op("",[Var("ns"),Var("key"),Var("val")])))))),SDef("rewrite",[DefaultVarDec("ns")],LRule(Rule(Var("key"),App(Call(SVar("table-lookup"),[]),Op("",[App(Call(SVar("ns"),[]),Op("",[])),Var("key")])),Id)))]),Signature([Constructors([OpDecl("Keys",ConstType(Var("Keys"))),OpDecl("Keys",FunType([ConstType(Var("Term"))],ConstType(Var("Keys")))),OpDecl("Keys",FunType([ConstType(Var("Term")),ConstType(Var("Term"))],ConstType(Var("Keys")))),OpDecl("Keys",FunType([ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term"))],ConstType(Var("Keys")))),OpDecl("Keys",FunType([ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term"))],ConstType(Var("Keys")))),OpDecl("Keys",FunType([ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term"))],ConstType(Var("Keys")))),OpDecl("Keys",FunType([ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term"))],ConstType(Var("Keys")))),OpDecl("Keys",FunType([ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term"))],ConstType(Var("Keys")))),OpDecl("Keys",FunType([ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term"))],ConstType(Var("Keys")))),OpDecl("Keys",FunType([ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term"))],ConstType(Var("Keys")))),OpDecl("Keys",FunType([ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term"))],ConstType(Var("Keys")))),OpDecl("Defined",ConstType(Var("Vals"))),OpDecl("Defined",FunType([ConstType(Var("Term"))],ConstType(Var("Vals")))),OpDecl("Defined",FunType([ConstType(Var("Term")),ConstType(Var("Term"))],ConstType(Var("Vals")))),OpDecl("Defined",FunType([ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term"))],ConstType(Var("Vals")))),OpDecl("Defined",FunType([ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term"))],ConstType(Var("Vals")))),OpDecl("Defined",FunType([ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term"))],ConstType(Var("Vals")))),OpDecl("Defined",FunType([ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term"))],ConstType(Var("Vals")))),OpDecl("Defined",FunType([ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term"))],ConstType(Var("Vals")))),OpDecl("Defined",FunType([ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term"))],ConstType(Var("Vals")))),OpDecl("Defined",FunType([ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term"))],ConstType(Var("Vals")))),OpDecl("Defined",FunType([ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term")),ConstType(Var("Term"))],ConstType(Var("Vals")))),OpDecl("Undefined",ConstType(Var("Vals")))])]),Strategies([SDef("memo-scope",[DefaultVarDec("s")],DynRuleScope(["Memo"],Call(SVar("s"),[]))),RDef("memo",[DefaultVarDec("s")],Rule(Var("t"),Var("t'"),LChoice(AM(BA(Call(SVar("Memo"),[]),Var("t")),Var("t'")),Seq(AM(BA(Call(SVar("s"),[]),Var("t")),Var("t'")),DynamicRules([RDef("Memo",[],Rule(Var("t"),Var("t'"),Id))]))))),SDef("memo-init",[],Call(SVar("obsolete"),[Build(Str("memo-init; use memo-scope"))])),SDef("memo-purge",[],Call(SVar("obsolete"),[Build(Str("memo-purge; use memo-scope"))])),SDef("memo",[DefaultVarDec("lab"),DefaultVarDec("s")],Seq(Call(SVar("obsolete"),[Build(Str("memo/2; use memo/1"))]),Call(SVar("memo"),[Call(SVar("s"),[])])))]),Rules([RDef("find-in-path",[],Rule(Op("",[Var("file"),Var("path")]),App(Rec("x",LChoice(LRule(Rule(Op("Cons",[Var("dir"),Wld]),App(Seq(Call(SVar("concat-strings"),[]),Call(SVar("file-exists"),[])),Op("Cons",[Var("dir"),Op("Cons",[Str("/"),Op("Cons",[Var("file"),Op("Nil",[])])])])),Id)),Seq(Call(SVar("Tl"),[]),Call(SVar("x"),[])))),Var("path")),Id))]),Strategies([SDef("find-in-path",[DefaultVarDec("mkpath")],LChoice(Call(SVar("file-exists"),[]),LChoice(Seq(Call(SVar("split"),[Id,Call(SVar("mkpath"),[])]),Call(SVar("find-in-path"),[])),LRule(Rule(Var("x"),App(Call(SVar("fatal-error"),[]),Op("Cons",[Str("no such file: "),Op("Cons",[Var("x"),Op("Nil",[])])])),Id))))),SDef("find-file",[DefaultVarDec("mkpath"),DefaultVarDec("ext")],Seq(Call(SVar("guarantee-extension"),[Call(SVar("ext"),[])]),Call(SVar("find-in-path"),[Call(SVar("mkpath"),[])])))]),Strategies([SDef("dtime",[],Prim("SSL_dtime",[]))]),Signature([Sorts([Sort("File",[])]),Constructors([OpDecl("stdin",ConstType(Var("File"))),OpDecl("stdout",ConstType(Var("File"))),OpDecl("stderr",ConstType(Var("File")))])]),Strategies([SDef("file-exists",[],Seq(Match(Var("name")),Seq(Prim("SSL_open_file",[Var("name"),Str("r")]),Prim("SSL_close_file",[Var("name")])))),SDef("close-file",[],Seq(Match(Var("name")),Prim("SSL_close_file",[Var("name")]))),SDef("open-file",[],LChoice(Seq(Match(Op("",[Var("name"),Var("mode")])),Prim("SSL_open_file",[Var("name"),Var("mode")])),Seq(Call(SVar("obsolete"),[Build(Str("<open-file> file; use <open-file>(file, mode)"))]),Seq(Match(Var("name")),Prim("SSL_open_file",[Var("name"),Str("w")]))))),SDef("append-file",[],Seq(Match(Var("name")),Prim("SSL_open_file",[Var("name"),Str("a")]))),SDef("print",[],Seq(Match(Op("",[Var("name"),Var("strs")])),Where(Prim("SSL_print",[Var("name"),Var("strs")])))),SDef("printnl",[],Seq(Match(Op("",[Var("name"),Var("strs")])),Where(Prim("SSL_printnl",[Var("name"),Var("strs")])))),SDef("printascii",[],Seq(Match(Op("",[Var("name"),Var("strs")])),Where(Prim("SSL_printascii",[Var("name"),Var("strs")])))),SDef("getchar",[],Seq(Match(Var("file")),Prim("SSL_getchar",[Var("file")]))),SDef("readline",[],Seq(Match(Var("file")),Rec("x",LChoice(Build(Op("Cons",[App(Seq(Call(SVar("getchar"),[]),Not(Match(Int(10)))),Var("file")),App(Call(SVar("x"),[]),Op("",[]))])),Build(Op("Nil",[])))))),SDef("ReadFromFile",[],Seq(Match(Var("file")),Prim("SSL_ReadFromFile",[Var("file")]))),SDef("WriteToBinaryFile",[],Seq(Match(Op("",[Var("file"),Var("t")])),Prim("SSL_WriteToBinaryFile",[Var("file"),Var("t")]))),SDef("WriteToTextFile",[],Seq(Match(Op("",[Var("file"),Var("t")])),Prim("SSL_WriteToTextFile",[Var("file"),Var("t")]))),SDef("print-stack",[],Call(SVar("obsolete"),[Build(Str("print-stack; use debug or gdb"))]))]),Strategies([SDef("open",[DefaultVarDec("file")],Seq(Call(SVar("file"),[]),Call(SVar("ReadFromFile"),[]))),SDef("save",[DefaultVarDec("file")],BA(Call(SVar("WriteToTextFile"),[]),Op("",[RootApp(Call(SVar("file"),[])),RootApp(Id)]))),SDef("debug",[],Where(BA(Call(SVar("printnl"),[]),Op("",[Var("stderr"),Op("Cons",[RootApp(Id),Op("Nil",[])])])))),SDef("debug",[DefaultVarDec("msg")],Where(BA(Call(SVar("printnl"),[]),Op("",[Var("stderr"),Op("Cons",[RootApp(Call(SVar("msg"),[])),Op("Cons",[RootApp(Id),Op("Nil",[])])])])))),SDef("say",[DefaultVarDec("msg")],Where(Seq(Call(SVar("msg"),[]),Call(SVar("debug"),[])))),SDef("echo",[],Where(BA(Call(SVar("printnl"),[]),Op("",[Var("stdout"),Op("Cons",[RootApp(Id),Op("Nil",[])])])))),SDef("echo",[DefaultVarDec("msg")],Where(BA(Call(SVar("printnl"),[]),Op("",[Var("stdout"),Op("Cons",[RootApp(Call(SVar("msg"),[])),Op("Cons",[RootApp(Id),Op("Nil",[])])])])))),SDef("debug-stdout",[DefaultVarDec("msg")],Seq(Call(SVar("obsolete"),[Build(Str("debug-stdout; use echo"))]),Where(BA(Call(SVar("printnl"),[]),Op("",[Var("stdout"),Op("Cons",[RootApp(Call(SVar("msg"),[])),Op("Cons",[RootApp(Id),Op("Nil",[])])])]))))),SDef("trace",[DefaultVarDec("msg"),DefaultVarDec("s")],Seq(Call(SVar("debug"),[Call(SVar("msg"),[])]),LChoice(Seq(Call(SVar("s"),[]),Call(SVar("debug"),[Build(Str("succeeded: "))])),Call(SVar("debug"),[Build(Str("failed: "))])))),SDef("error",[],Where(BA(Call(SVar("printnl"),[]),Op("",[Var("stderr"),RootApp(Id)])))),SDef("fatal-error",[],Where(Seq(Call(SVar("error"),[]),BA(Call(SVar("exit"),[]),Int(1))))),SDef("giving-up",[],BA(Call(SVar("fatal-error"),[]),Op("Cons",[Str("giving-up"),Op("Nil",[])]))),SDef("printchar",[],Where(BA(Call(SVar("printascii"),[]),Op("",[Var("stdout"),Op("Cons",[RootApp(Id),Op("Nil",[])])])))),SDef("printstring",[],Where(BA(Call(SVar("print"),[]),Op("",[Var("stdout"),Op("Cons",[RootApp(Id),Op("Nil",[])])])))),SDef("print-strings-nl",[DefaultVarDec("out")],Where(BA(Call(SVar("printnl"),[]),Op("",[RootApp(Call(SVar("out"),[])),RootApp(Id)])))),SDef("obsolete",[DefaultVarDec("msg")],Where(Seq(Call(SVar("msg"),[]),Call(SVar("debug"),[Build(Str("obsolete library strategy: "))])))),SDef("Assert",[DefaultVarDec("s"),DefaultVarDec("msg")],LChoice(Test(Call(SVar("s"),[])),Call(SVar("debug"),[Call(SVar("msg"),[])]))),SDef("risky",[DefaultVarDec("msg"),DefaultVarDec("s")],Call(SVar("restore"),[Call(SVar("s"),[]),Call(SVar("debug"),[Call(SVar("msg"),[])])]))]),Strategies([SDef("stdio",[DefaultVarDec("s")],LChoice(Seq(BA(Call(SVar("ReadFromFile"),[]),Var("stdin")),Seq(Call(SVar("s"),[]),Seq(Call(SVar("split"),[Build(Var("stdout")),Id]),Call(SVar("WriteToTextFile"),[])))),BA(Call(SVar("fatal-error"),[]),Op("Cons",[Str("** rewriting failed"),Op("Nil",[])]))))]),Strategies([SDef("stdioO",[DefaultVarDec("s")],LChoice(Seq(Call(SVar("split"),[Id,BA(Call(SVar("ReadFromFile"),[]),Var("stdin"))]),Seq(Call(SVar("s"),[]),Seq(Call(SVar("split"),[Build(Var("stdout")),Id]),Call(SVar("WriteToTextFile"),[])))),BA(Call(SVar("fatal-error"),[]),Op("Cons",[Str("** rewriting failed"),Op("Nil",[])]))))]),Strategies([SDef("new-file",[],Rec("x",Seq(BA(Call(SVar("conc-strings"),[]),Op("",[App(Call(SVar("new"),[]),Op("",[])),Str(".tmp")])),Call(SVar("try"),[Seq(Call(SVar("file-exists"),[]),Call(SVar("x"),[]))])))),SDef("temp-file",[DefaultVarDec("s")],Seq(Where(AM(Call(SVar("new-file"),[]),Var("f"))),Seq(Call(SVar("split"),[Build(Var("f")),Id]),LChoice(Seq(Call(SVar("s"),[]),Where(BA(Call(SVar("rm-files"),[]),Op("Cons",[Var("f"),Op("Nil",[])])))),Seq(Where(BA(Call(SVar("rm-files"),[]),Op("Cons",[Var("f"),Op("Nil",[])]))),Fail)))))]),Strategies([SDef("is-real",[],Seq(Match(Var("x")),Prim("SSL_is_real",[Var("x")]))),SDef("cos",[],Seq(Match(Var("x")),Prim("SSL_cos",[Var("x")]))),SDef("sin",[],Seq(Match(Var("x")),Prim("SSL_sin",[Var("x")]))),SDef("sqrt",[],Seq(Match(Var("x")),Prim("SSL_sqrt",[Var("x")]))),SDef("atan2",[],Seq(Match(Op("",[Var("x"),Var("y")])),Prim("SSL_atan2",[Var("x"),Var("y")]))),SDef("real-to-string",[],Seq(Match(Var("x")),Prim("SSL_real_to_string",[Var("x")]))),SDef("string-to-real",[],Seq(Match(Var("x")),Prim("SSL_string_to_real",[Var("x")]))),SDef("real",[],Seq(Match(Var("x")),Prim("SSL_real",[Var("x")])))]),Strategies([SDef("is-int",[],Seq(Match(Var("i")),Prim("SSL_is_int",[Var("i")]))),SDef("minus",[],Seq(Call(SVar("obsolete"),[Build(Str("minus; use subt"))]),Call(SVar("subt"),[]))),SDef("plus",[],Seq(Call(SVar("obsolete"),[Build(Str("plus; use add"))]),Call(SVar("add"),[]))),SDef("add",[],Seq(Match(Op("",[Var("x"),Var("y")])),LChoice(Prim("SSL_addi",[Var("x"),Var("y")]),Prim("SSL_addr",[Var("x"),Var("y")])))),SDef("addi",[],Seq(Match(Op("",[Var("x"),Var("y")])),Prim("SSL_addi",[Var("x"),Var("y")]))),SDef("addr",[],Seq(Match(Op("",[Var("x"),Var("y")])),Prim("SSL_addr",[Var("x"),Var("y")]))),SDef("subt",[],Seq(Match(Op("",[Var("x"),Var("y")])),LChoice(Prim("SSL_subti",[Var("x"),Var("y")]),Prim("SSL_subtr",[Var("x"),Var("y")])))),SDef("subti",[],Seq(Match(Op("",[Var("x"),Var("y")])),Prim("SSL_subti",[Var("x"),Var("y")]))),SDef("subtr",[],Seq(Match(Op("",[Var("x"),Var("y")])),Prim("SSL_subtr",[Var("x"),Var("y")]))),SDef("mul",[],Seq(Match(Op("",[Var("x"),Var("y")])),LChoice(Prim("SSL_muli",[Var("x"),Var("y")]),Prim("SSL_mulr",[Var("x"),Var("y")])))),SDef("muli",[],Seq(Match(Op("",[Var("x"),Var("y")])),Prim("SSL_muli",[Var("x"),Var("y")]))),SDef("mulr",[],Seq(Match(Op("",[Var("x"),Var("y")])),Prim("SSL_mulr",[Var("x"),Var("y")]))),SDef("div",[],Seq(Match(Op("",[Var("x"),Var("y")])),LChoice(Prim("SSL_divi",[Var("x"),Var("y")]),Prim("SSL_divr",[Var("x"),Var("y")])))),SDef("divi",[],Seq(Match(Op("",[Var("x"),Var("y")])),Prim("SSL_divi",[Var("x"),Var("y")]))),SDef("divr",[],Seq(Match(Op("",[Var("x"),Var("y")])),Prim("SSL_divr",[Var("x"),Var("y")]))),SDef("mod",[],Seq(Match(Op("",[Var("x"),Var("y")])),Prim("SSL_mod",[Var("x"),Var("y")]))),SDef("gt",[],Seq(Match(Op("",[Var("x"),Var("y")])),Test(LChoice(Prim("SSL_gti",[Var("x"),Var("y")]),Prim("SSL_gtr",[Var("x"),Var("y")]))))),SDef("gti",[],Seq(Match(Op("",[Var("x"),Var("y")])),Test(Prim("SSL_gti",[Var("x"),Var("y")])))),SDef("gtr",[],Seq(Match(Op("",[Var("x"),Var("y")])),Test(Prim("SSL_gtr",[Var("x"),Var("y")])))),SDef("geq",[],LChoice(Match(Op("",[Var("x"),Var("x")])),Call(SVar("gt"),[]))),SDef("lt",[],Not(Call(SVar("geq"),[]))),SDef("leq",[],Not(Call(SVar("gt"),[]))),SDef("max",[],LChoice(Seq(Call(SVar("gt"),[]),Call(SVar("Fst"),[])),Call(SVar("Snd"),[]))),SDef("min",[],LChoice(Seq(Call(SVar("gt"),[]),Call(SVar("Snd"),[])),Call(SVar("Fst"),[]))),SDef("int",[],Seq(Match(Var("x")),Prim("SSL_int",[Var("x")]))),SDef("int-to-string",[],Seq(Match(Var("x")),Prim("SSL_int_to_string",[Var("x")]))),SDef("string-to-int",[],Seq(Match(Var("x")),Prim("SSL_string_to_int",[Var("x")])))]),Rules([RDef("inc",[],Rule(Var("a"),App(Call(SVar("add"),[]),Op("",[Var("a"),Int(1)])),Id)),RDef("dec",[],Rule(Var("a"),App(Call(SVar("subt"),[]),Op("",[Var("a"),Int(1)])),Id))]),Strategies([SDef("sum",[],Call(SVar("foldr"),[Build(Int(0)),Call(SVar("add"),[])])),SDef("average",[],Seq(Call(SVar("split"),[Call(SVar("sum"),[]),Call(SVar("length"),[])]),Call(SVar("div"),[]))),SDef("list-min",[],Call(SVar("list-accum"),[Call(SVar("min"),[])])),SDef("list-max",[],Call(SVar("list-accum"),[Call(SVar("max"),[])])),SDef("list-accum",[DefaultVarDec("s")],Seq(Build(Op("",[RootApp(Call(SVar("Tl"),[])),RootApp(Call(SVar("Hd"),[]))])),Call(SVar("foldl"),[Call(SVar("s"),[])]))),SDef("add-lists",[],Call(SVar("list-accum"),[Call(SVar("zip"),[LChoice(Call(SVar("add"),[]),Build(Str("")))])])),SDef("averages",[],Scope(["len"],Seq(Where(AM(Call(SVar("length"),[]),Var("len"))),Seq(Call(SVar("add-lists"),[]),Call(SVar("map"),[Call(SVar("try"),[Call(SVar("sect"),[Call(SVar("div"),[]),Build(Var("len"))])])]))))),SDef("round-list",[],Call(SVar("map"),[LChoice(Test(Call(SVar("sect"),[Call(SVar("leq"),[]),Build(Int(100))])),Call(SVar("int"),[]))])),SDef("int-sort",[],Call(SVar("sort-list"),[Call(SVar("SortL"),[Call(SVar("gt"),[])])])),SDef("is-interval-from",[],Rec("r",LChoice(LRule(Rule(Op("",[Var("low"),Op("Nil",[])]),Var("low"),Id)),Scope(["l"],LRule(Rule(Op("",[Var("low"),Op("Cons",[Var("x"),Var("xs")])]),App(Call(SVar("r"),[]),Op("",[Var("x"),Var("xs")])),Seq(AM(BA(Call(SVar("add"),[]),Op("",[Var("low"),Int(1)])),Var("l")),BA(Call(SVar("eq"),[]),Op("",[Var("x"),Var("l")])))))))))]),Rules([RDef("is-interval",[],Rule(Op("Cons",[Var("x"),Var("xs")]),Op("",[Var("x"),App(Call(SVar("is-interval-from"),[]),Op("",[Var("x"),Var("xs")]))]),Id))]),Strategies([SDef("mkterm",[],Seq(Match(Op("",[Var("c"),Var("ts")])),Prim("SSL_mkterm",[Var("c"),Var("ts")]))),SDef("explode-term",[],Seq(Match(Var("t")),Prim("SSL_explode_term",[Var("t")]))),SDef("address-lt",[],Seq(Match(Op("",[Var("t1"),Var("t2")])),Prim("SSL_address_lt",[Var("t1"),Var("t2")]))),SDef("address",[],Seq(Match(Var("t")),Prim("SSL_address",[Var("t")])))]),Strategies([SDef("is-alphanum",[],Choice(Call(SVar("is-num"),[]),Call(SVar("is-alpha"),[]))),SDef("is-alpha",[],Choice(Call(SVar("is-upper"),[]),Call(SVar("is-lower"),[]))),SDef("is-num",[],Seq(Match(Var("c")),Where(Seq(BA(Call(SVar("geq"),[]),Op("",[Var("c"),Int(48)])),BA(Call(SVar("leq"),[]),Op("",[Var("c"),Int(57)])))))),SDef("is-upper",[],Seq(Match(Var("c")),Where(Seq(BA(Call(SVar("geq"),[]),Op("",[Var("c"),Int(65)])),BA(Call(SVar("leq"),[]),Op("",[Var("c"),Int(90)])))))),SDef("is-lower",[],Seq(Match(Var("c")),Where(Seq(BA(Call(SVar("geq"),[]),Op("",[Var("c"),Int(97)])),BA(Call(SVar("leq"),[]),Op("",[Var("c"),Int(122)])))))),SDef("is-ascii",[],Seq(Match(Var("c")),Where(Seq(BA(Call(SVar("geq"),[]),Op("",[Var("c"),Int(32)])),BA(Call(SVar("leq"),[]),Op("",[Var("c"),Int(127)])))))),SDef("case-char",[DefaultVarDec("s")],Seq(Call(SVar(""),[Call(SVar("to-upper"),[]),Call(SVar("to-upper"),[])]),Call(SVar("s"),[]))),SDef("to-upper",[],Call(SVar("try"),[Seq(Call(SVar("is-lower"),[]),LRule(Rule(Var("x"),App(Call(SVar("subt"),[]),Op("",[Var("x"),Int(32)])),Id)))])),SDef("to-lower",[],Call(SVar("try"),[Seq(Call(SVar("is-upper"),[]),LRule(Rule(Var("x"),App(Call(SVar("add"),[]),Op("",[Var("x"),Int(32)])),Id)))]))]),Rules([RDef("sect",[DefaultVarDec("op"),DefaultVarDec("arg")],Rule(Var("x"),App(Call(SVar("op"),[]),Op("",[Var("x"),App(Call(SVar("arg"),[]),Op("",[]))])),Id))]),Strategies([SDef("new",[],Prim("SSL_new",[])),SDef("is-string",[],Seq(Match(Var("x")),Prim("SSL_is_string",[Var("x")]))),SDef("implode-string",[],Seq(Match(Var("x")),Prim("SSL_implode_string",[Var("x")]))),SDef("explode-string",[],Seq(Match(Var("x")),Prim("SSL_explode_string",[Var("x")])))]),Strategies([SDef("conc-strings",[],Seq(Call(SVar(""),[Call(SVar("explode-string"),[]),Call(SVar("explode-string"),[])]),Seq(Call(SVar("conc"),[]),Call(SVar("implode-string"),[])))),SDef("concat-strings",[],Seq(Call(SVar("map"),[Call(SVar("explode-string"),[])]),Seq(Call(SVar("concat"),[]),Call(SVar("implode-string"),[])))),SDef("escape",[VarDec("esc",FunType([ConstType(Op("List",[Var("String")])),FunType([ConstType(Op("List",[Var("String")]))],ConstType(Op("List",[Var("String")])))],ConstType(Op("List",[Var("String")]))))],Seq(Call(SVar("explode-string"),[]),Seq(Rec("x",LChoice(Call(SVar("esc"),[Call(SVar("x"),[])]),LChoice(Call(SVar("Cons"),[Id,Call(SVar("x"),[])]),Call(SVar("Nil"),[])))),Call(SVar("implode-string"),[])))),SDef("cify",[],Call(SVar("escape"),[Call(SVar("Cify"),[])])),SDef("escape",[],Seq(Call(SVar("explode-string"),[]),Seq(Rec("x",LChoice(Seq(Call(SVar("Escape"),[]),Call(SVar("Cons"),[Id,Call(SVar("Cons"),[Id,Call(SVar("x"),[])])])),LChoice(Call(SVar("Cons"),[Id,Call(SVar("x"),[])]),Call(SVar("Nil"),[])))),Call(SVar("implode-string"),[])))),SDef("bla",[DefaultVarDec("s")],Where(Seq(LRule(Rule(Var("x"),Op("Cons",[Var("x"),Op("Nil",[])]),Id)),Call(SVar("debug"),[Call(SVar("s"),[])])))),SDef("unescape",[],Seq(Call(SVar("explode-string"),[]),Seq(Rec("x",Seq(Call(SVar("try"),[Call(SVar("UnEscape"),[])]),LChoice(Call(SVar("Cons"),[Id,Call(SVar("x"),[])]),Call(SVar("Nil"),[])))),Call(SVar("implode-string"),[])))),SDef("string-length",[],Seq(Call(SVar("explode-string"),[]),Call(SVar("length"),[])))]),Rules([RDef("Cify",[DefaultVarDec("x")],Rule(Op("Cons",[Int(39),Var("cs")]),Op("Cons",[Int(95),Op("Cons",[Int(112),Op("Cons",[Int(95),App(Call(SVar("x"),[]),Var("cs"))])])]),Id)),RDef("Cify",[DefaultVarDec("x")],Rule(Op("Cons",[Int(45),Var("cs")]),Op("Cons",[Int(95),App(Call(SVar("x"),[]),Var("cs"))]),Id)),RDef("Cify",[DefaultVarDec("x")],Rule(Op("Cons",[Int(95),Var("cs")]),Op("Cons",[Int(95),Op("Cons",[Int(95),App(Call(SVar("x"),[]),Var("cs"))])]),Id)),RDef("Escape",[],Rule(Op("Cons",[Int(34),Var("cs")]),Op("Cons",[Int(92),Op("Cons",[Int(34),Var("cs")])]),Id)),RDef("Escape",[],Rule(Op("Cons",[Int(92),Var("cs")]),Op("Cons",[Int(92),Op("Cons",[Int(92),Var("cs")])]),Id)),RDef("Escape",[],Rule(Op("Cons",[Int(10),Var("cs")]),Op("Cons",[Int(92),Op("Cons",[Int(110),Var("cs")])]),Id)),RDef("UnEscape",[],Rule(Op("Cons",[Int(92),Op("Cons",[Int(34),Var("cs")])]),Op("Cons",[Int(34),Var("cs")]),Id)),RDef("UnEscape",[],Rule(Op("Cons",[Int(92),Op("Cons",[Int(92),Var("cs")])]),Op("Cons",[Int(92),Var("cs")]),Id)),RDef("UnEscape",[],Rule(Op("Cons",[Int(92),Op("Cons",[Int(110),Var("cs")])]),Op("Cons",[Int(10),Var("cs")]),Id)),RDef("UnEscape",[],Rule(Op("Cons",[Int(92),Op("Cons",[Int(116),Var("cs")])]),Op("Cons",[Int(9),Var("cs")]),Id)),RDef("S2I1",[],Rule(Op("",[Var("n"),Op("Nil",[])]),Var("n"),Id)),RDef("S2I2",[],Rule(Op("",[Var("n"),Op("Cons",[Var("m"),Var("ms")])]),Op("",[App(Call(SVar("add"),[]),Op("",[App(Call(SVar("mul"),[]),Op("",[Int(10),Var("n")])),App(Call(SVar("subt"),[]),Op("",[Var("m"),Int(48)]))])),Var("ms")]),Seq(BA(Call(SVar("geq"),[]),Op("",[Var("m"),Int(48)])),BA(Call(SVar("leq"),[]),Op("",[Var("m"),Int(57)]))))),RDef("S2D0",[],Rule(Op("",[Var("n"),Op("Cons",[Int(46),Var("ys")])]),Op("",[Var("n"),Int(10),Var("ys")]),Id)),RDef("S2D1",[],Rule(Op("",[Var("n"),Var("f"),Op("Nil",[])]),Var("n"),Id)),RDef("S2D2",[],Rule(Op("",[Var("n"),Var("f"),Op("Cons",[Var("m"),Var("ms")])]),Op("",[App(Call(SVar("add"),[]),Op("",[Var("n"),App(Call(SVar("div"),[]),Op("",[App(Call(SVar("subt"),[]),Op("",[Var("m"),Int(48)])),Var("f")]))])),App(Call(SVar("mul"),[]),Op("",[Var("f"),Int(10)])),Var("ms")]),Seq(BA(Call(SVar("geq"),[]),Op("",[Var("m"),Int(48)])),BA(Call(SVar("leq"),[]),Op("",[Var("m"),Int(57)])))))]),Strategies([SDef("string-to-num",[],Seq(Call(SVar("explode-string"),[]),Seq(Call(SVar("split"),[Build(Int(0)),Id]),Seq(Call(SVar("repeat"),[Call(SVar("S2I2"),[])]),Choice(Call(SVar("S2I1"),[]),Seq(Call(SVar("S2D0"),[]),Seq(Call(SVar("repeat"),[Call(SVar("S2D2"),[])]),Call(SVar("S2D1"),[]))))))))]),Strategies([SDef("lower-case",[],Seq(Call(SVar("explode-string"),[]),Seq(Call(SVar("map"),[Call(SVar("lc"),[])]),Call(SVar("implode-string"),[])))),SDef("lc",[],Call(SVar("try"),[Seq(Where(Call(SVar("sect"),[Call(SVar("geq"),[]),Build(Int(65))])),Seq(Where(Call(SVar("sect"),[Call(SVar("leq"),[]),Build(Int(90))])),Call(SVar("sect"),[Call(SVar("add"),[]),Build(Int(32))])))])),SDef("upper-case",[],Seq(Call(SVar("explode-string"),[]),Seq(Call(SVar("map"),[Call(SVar("uc"),[])]),Call(SVar("implode-string"),[])))),SDef("uc",[],Call(SVar("try"),[Seq(Where(Call(SVar("sect"),[Call(SVar("geq"),[]),Build(Int(97))])),Seq(Where(Call(SVar("sect"),[Call(SVar("leq"),[]),Build(Int(122))])),Call(SVar("sect"),[Call(SVar("subt"),[]),Build(Int(32))])))]))]),Rules([RDef("SplitInit",[],Rule(Var("x"),Op("",[Op("Nil",[]),Op("Nil",[]),Var("x")]),Id)),RDef("SplitExit",[],Rule(Op("",[Var("xs"),Var("cs"),Op("Nil",[])]),App(Call(SVar("reverse"),[]),Op("Cons",[App(Seq(Call(SVar("reverse"),[]),Call(SVar("implode-string"),[])),Var("cs")),Var("xs")])),Id)),RDef("SplitNext",[],Rule(Op("",[Var("xs"),Var("cs"),Op("Cons",[Int(32),Var("ys")])]),Op("",[Op("Cons",[App(Seq(Call(SVar("reverse"),[]),Call(SVar("implode-string"),[])),Var("cs")),Var("xs")]),Op("Nil",[]),Var("ys")]),Id)),RDef("SplitNext",[],Rule(Op("",[Var("xs"),Var("cs"),Op("Cons",[Var("y"),Var("ys")])]),Op("",[Var("xs"),Op("Cons",[Var("y"),Var("cs")]),Var("ys")]),BA(Not(Call(SVar("eq"),[])),Op("",[Var("y"),Int(32)]))))]),Strategies([SDef("split-at-space",[],Seq(Call(SVar("explode-string"),[]),Seq(Call(SVar("SplitInit"),[]),Rec("x",LChoice(Call(SVar("SplitExit"),[]),Seq(Call(SVar("SplitNext"),[]),Call(SVar("x"),[]))))))),SDef("basename",[],Call(SVar("basename"),[Id])),SDef("basename",[DefaultVarDec("ext")],Seq(Call(SVar("explode-string"),[]),Seq(Call(SVar("try"),[Rec("x",LChoice(Call(SVar("Cons"),[Id,Call(SVar("x"),[])]),LChoice(Call(SVar("Cons"),[Match(Int(47)),Id]),Seq(Call(SVar("Cons"),[Match(Int(46)),Call(SVar("ext"),[])]),Build(Op("Nil",[]))))))]),Call(SVar("implode-string"),[])))),SDef("guarantee-extension",[DefaultVarDec("ext")],Seq(Call(SVar("basename"),[]),Seq(Call(SVar("split"),[Id,BA(Call(SVar("ext"),[]),Op("",[]))]),Call(SVar("add-extension"),[])))),SDef("get-path",[],Seq(Call(SVar("explode-string"),[]),Seq(LChoice(Rec("x",LChoice(Call(SVar("Cons"),[Id,Call(SVar("x"),[])]),Call(SVar("Cons"),[Match(Int(47)),Build(Op("Nil",[]))]))),Build(Op("Nil",[]))),Call(SVar("implode-string"),[]))))]),Rules([RDef("add-extension",[],Rule(Op("",[Var("name"),Var("ext")]),App(Call(SVar("concat-strings"),[]),Op("Cons",[Var("name"),Op("Cons",[Str("."),Op("Cons",[Var("ext"),Op("Nil",[])])])])),Id)),RDef("quote",[DefaultVarDec("c")],Rule(Var("s"),App(Seq(Call(SVar("concat"),[]),Call(SVar("implode-string"),[])),Op("Cons",[Op("Cons",[Var("char"),Op("Nil",[])]),Op("Cons",[App(Call(SVar("explode-string"),[]),Var("s")),Op("Cons",[Op("Cons",[Var("char"),Op("Nil",[])]),Op("Nil",[])])])])),AM(Call(SVar("c"),[]),Var("char"))))]),Strategies([SDef("single-quote",[],Call(SVar("quote"),[Build(Int(39))])),SDef("double-quote",[],Call(SVar("quote"),[Build(Int(34))])),SDef("unquote",[DefaultVarDec("c")],Seq(AM(Call(SVar("explode-string"),[]),Var("s")),Seq(BA(Call(SVar("Hd"),[]),Var("s")),Seq(Call(SVar("c"),[]),Seq(BA(Call(SVar("last"),[]),Var("s")),Seq(Call(SVar("c"),[]),Seq(BA(Seq(Call(SVar("Tl"),[]),Call(SVar("init"),[])),Var("s")),Call(SVar("implode-string"),[])))))))),SDef("un-single-quote",[],Call(SVar("unquote"),[Match(Int(39))])),SDef("un-double-quote",[],Call(SVar("unquote"),[Match(Int(34))])),SDef("split-at-dot",[],Seq(Call(SVar("split"),[Build(Op("Nil",[])),Call(SVar("explode-string"),[])]),Seq(Rec("r",LChoice(LRule(Rule(Op("",[Var("int"),Op("Cons",[Int(46),Var("frac")])]),Op("",[Var("int"),Var("frac")]),Id)),LChoice(LRule(Rule(Op("",[Var("int"),Op("Cons",[Var("i"),Var("rest")])]),App(Call(SVar("r"),[]),Op("",[App(Call(SVar("at-end"),[Build(Op("Cons",[Var("i"),Op("Nil",[])]))]),Var("int")),Var("rest")])),Id)),Call(SVar(""),[Id,Call(SVar("Nil"),[])])))),Call(SVar(""),[Call(SVar("implode-string"),[]),Call(SVar("implode-string"),[])])))),SDef("padd-with",[DefaultVarDec("s")],Seq(Match(Op("",[Var("str"),Var("n")])),Seq(Build(Var("str")),Seq(AM(Call(SVar("explode-string"),[]),Var("str'")),Seq(AM(Call(SVar("length"),[]),Var("l")),LChoice(Seq(BA(Call(SVar("geq"),[]),Op("",[Var("l"),Var("n")])),Build(Var("str"))),Seq(BA(Call(SVar("subt"),[]),Op("",[Var("n"),Var("l")])),Seq(Rec("r",LChoice(LRule(Rule(Int(0),Op("Nil",[]),Id)),LRule(Rule(Var("n"),Op("Cons",[App(Call(SVar("s"),[]),Op("",[])),App(Seq(Call(SVar("subt"),[]),Call(SVar("r"),[])),Op("",[Var("n"),Int(1)]))]),Id)))),Seq(LRule(Rule(Var("padd"),Op("",[Var("padd"),Var("str'")]),Id)),Seq(Call(SVar("conc"),[]),Call(SVar("implode-string"),[]))))))))))),SDef("split-before",[],Seq(Match(Op("",[Var("l"),Var("sub")])),Seq(AM(BA(Call(SVar("explode-string"),[]),Var("sub")),Var("sub'")),Seq(BA(Call(SVar("explode-string"),[]),Var("l")),Seq(LRule(Rule(Var("x"),Op("",[Op("Nil",[]),Var("x")]),Id)),Seq(Rec("r",LChoice(LRule(Rule(As(Var("x"),Op("",[Wld,Var("x'")])),Var("x"),BA(Call(SVar("left-match"),[]),Op("",[Var("x'"),Var("sub'")])))),LRule(Rule(Op("",[Var("x'"),Op("Cons",[Var("x"),Var("xs")])]),App(Call(SVar("r"),[]),Op("",[App(Call(SVar("at-end"),[Build(Op("Cons",[Var("x"),Op("Nil",[])]))]),Var("x'")),Var("xs")])),Id)))),Call(SVar(""),[Call(SVar("implode-string"),[]),Call(SVar("implode-string"),[])]))))))),SDef("split-after",[],Seq(Match(Op("",[Var("l"),Var("sub")])),Seq(AM(BA(Call(SVar("explode-string"),[]),Var("sub")),Var("sub'")),Seq(BA(Call(SVar("explode-string"),[]),Var("l")),Seq(LRule(Rule(Var("x"),Op("",[Op("Nil",[]),Var("x")]),Id)),Seq(Rec("r",LChoice(Call(SVar(""),[Id,Call(SVar("Nil"),[])]),LChoice(LRule(Rule(Op("",[Var("x"),Var("x'")]),Op("",[App(Call(SVar("conc"),[]),Op("",[Var("x"),Var("sub'")])),App(Call(SVar("left-match"),[]),Op("",[Var("x'"),Var("sub'")]))]),Id)),LRule(Rule(Op("",[Var("x'"),Op("Cons",[Var("x"),Var("xs")])]),App(Call(SVar("r"),[]),Op("",[App(Call(SVar("at-end"),[Build(Op("Cons",[Var("x"),Op("Nil",[])]))]),Var("x'")),Var("xs")])),Id))))),Call(SVar(""),[Call(SVar("implode-string"),[]),Call(SVar("implode-string"),[])]))))))),SDef("left-match",[],Seq(Rec("r",LChoice(Scope(["l","ls","rs"],Seq(Match(Op("",[Op("Cons",[Var("l"),Var("ls")]),Op("Cons",[Var("l"),Var("rs")])])),BA(Call(SVar("r"),[]),Op("",[Var("ls"),Var("rs")])))),Call(SVar(""),[Id,Call(SVar("Nil"),[])]))),Call(SVar("Fst"),[]))),SDef("is-substring",[DefaultVarDec("s")],Seq(Call(SVar("explode-string"),[]),Seq(Match(Var("long")),Seq(Call(SVar("s"),[]),Seq(AM(Call(SVar("explode-string"),[]),Var("sub")),LChoice(BA(Call(SVar("eq"),[]),Op("",[Var("sub"),Var("long")])),BA(Rec("r",Scope(["a","xs"],Seq(Match(As(Var("a"),Op("Cons",[Wld,Var("xs")]))),LChoice(BA(Call(SVar("left-match"),[]),Op("",[Var("a"),Var("sub")])),BA(Call(SVar("r"),[]),Var("xs")))))),Var("long")))))))),SDef("copy-char",[],Seq(Call(SVar("copy"),[]),Call(SVar("implode-string"),[]))),SDef("string-sort",[],Seq(Call(SVar("map"),[Call(SVar("explode-string"),[])]),Seq(Call(SVar("sort-list"),[Call(SVar("SortL"),[Call(SVar("string-gt"),[])])]),Call(SVar("map"),[Call(SVar("implode-string"),[])])))),SDef("string-sort-desc",[],Seq(Call(SVar("map"),[Call(SVar("explode-string"),[])]),Seq(Call(SVar("sort-list"),[Call(SVar("SortL"),[Call(SVar("string-lt"),[])])]),Call(SVar("map"),[Call(SVar("implode-string"),[])])))),SDef("string-gt",[],Seq(Call(SVar("try"),[Call(SVar(""),[Call(SVar("explode-string"),[]),Call(SVar("explode-string"),[])])]),Seq(Call(SVar("strcasecmp"),[]),Match(Int(1))))),SDef("string-lt",[],Seq(Call(SVar("try"),[Call(SVar(""),[Call(SVar("explode-string"),[]),Call(SVar("explode-string"),[])])]),Seq(Call(SVar("strcasecmp"),[]),Match(Int(-1))))),SDef("strcmp",[],Rec("r",LChoice(LRule(Rule(Op("",[Op("Cons",[Var("x"),Var("xs")]),Op("Cons",[Var("x"),Var("ys")])]),App(Call(SVar("r"),[]),Op("",[Var("xs"),Var("ys")])),Id)),LChoice(LRule(Rule(Op("",[Op("Nil",[]),Op("Nil",[])]),Int(0),Id)),LChoice(LRule(Rule(Op("",[Op("Cons",[Var("x"),Wld]),Op("Cons",[Var("y"),Wld])]),Int(-1),BA(Call(SVar("lt"),[]),Op("",[Var("x"),Var("y")])))),LChoice(LRule(Rule(Op("",[Op("Nil",[]),Op("Cons",[Wld,Wld])]),Int(-1),Id)),Build(Int(1)))))))),SDef("strncmp",[],Rec("r",LChoice(LRule(Rule(Op("",[Wld,Wld,Int(0)]),Int(0),Id)),LChoice(LRule(Rule(Op("",[Op("Cons",[Var("x"),Var("xs")]),Op("Cons",[Var("x"),Var("ys")]),Var("i")]),App(Call(SVar("r"),[]),Op("",[Var("xs"),Var("ys"),App(Call(SVar("subt"),[]),Op("",[Var("i"),Int(1)]))])),Id)),LChoice(LRule(Rule(Op("",[Op("Nil",[]),Op("Nil",[]),Wld]),Int(0),Id)),LChoice(LRule(Rule(Op("",[Op("Cons",[Var("x"),Wld]),Op("Cons",[Var("y"),Wld]),Wld]),Int(-1),BA(Call(SVar("lt"),[]),Op("",[Var("x"),Var("y")])))),LChoice(LRule(Rule(Op("",[Op("Nil",[]),Op("Cons",[Wld,Wld]),Wld]),Int(-1),Id)),Build(Int(1))))))))),SDef("strcasecmp",[],Rec("r",LChoice(LRule(Rule(Op("",[Op("Cons",[Var("x"),Var("xs")]),Op("Cons",[Var("y"),Var("ys")])]),App(Call(SVar("r"),[]),Op("",[Var("xs"),Var("ys")])),BA(Call(SVar("case-char"),[Call(SVar("eq"),[])]),Op("",[Var("x"),Var("y")])))),LChoice(LRule(Rule(Op("",[Op("Nil",[]),Op("Nil",[])]),Int(0),Id)),LChoice(LRule(Rule(Op("",[Op("Cons",[Var("x"),Wld]),Op("Cons",[Var("y"),Wld])]),Int(-1),BA(Call(SVar("case-char"),[Call(SVar("lt"),[])]),Op("",[Var("x"),Var("y")])))),LChoice(LRule(Rule(Op("",[Op("Nil",[]),Op("Cons",[Wld,Wld])]),Int(-1),Id)),Build(Int(1))))))))]),Signature([Sorts([Sort("Option",[Var("a")])]),Constructors([OpDecl("None",ConstType(Op("Option",[Var("a")]))),OpDecl("Some",FunType([ConstType(Var("a"))],ConstType(Op("Option",[Var("a")]))))])]),Strategies([SDef("option",[DefaultVarDec("s")],Choice(Call(SVar("None"),[]),Call(SVar("Some"),[Call(SVar("s"),[])])))]),Strategies([RDef("TupleToList",[],Rule(Explode(Str(""),Var("xs")),Var("xs"),Id)),RDef("ListToTuple",[],Rule(Var("xs"),Explode(Str(""),Var("xs")),Id)),RDef("Fst",[],Rule(Explode(Str(""),Op("Cons",[Var("x"),Var("xs")])),Var("x"),Id)),RDef("Snd",[],Rule(Explode(Str(""),Op("Cons",[Var("x"),Op("Cons",[Var("y"),Var("xs")])])),Var("y"),Id)),RDef("Third",[],Rule(Explode(Str(""),Op("Cons",[Var("x"),Op("Cons",[Var("y"),Op("Cons",[Var("z"),Var("xs")])])])),Var("z"),Id)),RDef("Dupl",[],Rule(Var("x"),Op("",[Var("x"),Var("x")]),Id)),SDef("split",[DefaultVarDec("f"),DefaultVarDec("g")],Build(Op("",[RootApp(Call(SVar("f"),[])),RootApp(Call(SVar("g"),[]))]))),SDef("split3",[DefaultVarDec("f"),DefaultVarDec("g"),DefaultVarDec("h")],Build(Op("",[RootApp(Call(SVar("f"),[])),RootApp(Call(SVar("g"),[])),RootApp(Call(SVar("h"),[]))]))),RDef("Swap",[],Rule(Op("",[Var("x"),Var("y")]),Op("",[Var("y"),Var("x")]),Id)),SDef("Thd",[],Call(SVar("Fst"),[])),RDef("Ttl",[],Rule(Explode(Str(""),Op("Cons",[Var("x"),Var("xs")])),Explode(Str(""),Var("xs")),Id)),SDef("tindex",[],Seq(Call(SVar(""),[Id,Match(Explode(Str(""),RootApp(Id)))]),Call(SVar("index"),[]))),SDef("is-tuple",[],Match(Explode(Str(""),Wld))),SDef("tmap",[DefaultVarDec("s")],Seq(Call(SVar("is-tuple"),[]),All(Call(SVar("s"),[])))),SDef("tconcat",[DefaultVarDec("s")],Seq(Call(SVar("is-tuple"),[]),Call(SVar("crush"),[Build(Op("Nil",[])),Call(SVar("s"),[])]))),SDef("tconcat'",[DefaultVarDec("s1"),DefaultVarDec("s2")],Seq(Call(SVar("is-tuple"),[]),Call(SVar("crush"),[BA(Call(SVar("s1"),[]),Op("Nil",[])),Call(SVar("s2"),[])]))),SDef("tcata",[DefaultVarDec("s1"),DefaultVarDec("s2")],Seq(Call(SVar("is-tuple"),[]),Call(SVar("crush"),[Call(SVar("s1"),[]),Call(SVar("s2"),[])]))),SDef("tfoldr",[DefaultVarDec("s1"),DefaultVarDec("s2")],Call(SVar("tcata"),[Call(SVar("s1"),[]),Call(SVar("s2"),[])])),SDef("tzip",[DefaultVarDec("s")],Seq(Call(SVar(""),[Call(SVar("TupleToList"),[]),Call(SVar("TupleToList"),[])]),Call(SVar("zip"),[Call(SVar("s"),[])]))),SDef("tuple-zip",[DefaultVarDec("s")],Rec("x",LChoice(Build(Op("Cons",[RootApp(Seq(Call(SVar("tmap"),[Call(SVar("Hd"),[])]),Call(SVar("s"),[]))),RootApp(Seq(Call(SVar("tmap"),[Call(SVar("Tl"),[])]),Call(SVar("x"),[])))])),Seq(Call(SVar("tmap"),[Call(SVar("Nil"),[])]),Build(Op("Nil",[])))))),SDef("tuple-unzip",[DefaultVarDec("s")],Seq(Rec("x",LChoice(Build(Op("Cons",[RootApp(Seq(Call(SVar("map"),[Call(SVar("Thd"),[])]),Call(SVar("s"),[]))),RootApp(Seq(Call(SVar("map"),[Call(SVar("Ttl"),[])]),Call(SVar("x"),[])))])),Seq(Call(SVar("map"),[Call(SVar(""),[])]),Build(Op("Nil",[]))))),Build(Explode(Str(""),RootApp(Id)))))]),Strategies([SDef("filter",[DefaultVarDec("s")],Choice(Call(SVar("Nil"),[]),LChoice(Call(SVar("Cons"),[Call(SVar("s"),[]),Call(SVar("filter"),[Call(SVar("s"),[])])]),Match(Op("Cons",[Wld,RootApp(Call(SVar("filter"),[Call(SVar("s"),[])]))]))))),SDef("filter-gen",[DefaultVarDec("pred"),VarDec("cont",FunType([ConstType(Var("term")),FunType([ConstType(Var("term"))],ConstType(Var("term")))],ConstType(Var("term"))))],Rec("x",Choice(Call(SVar("Nil"),[]),LChoice(Seq(Call(SVar("pred"),[]),Call(SVar("cont"),[Call(SVar("x"),[])])),Seq(Call(SVar("Tl"),[]),Call(SVar("x"),[])))))),SDef("skip1",[DefaultVarDec("s")],Call(SVar("at-tail"),[Call(SVar("s"),[])])),SDef("skip2",[DefaultVarDec("s")],Call(SVar("at-tail"),[Call(SVar("at-tail"),[Call(SVar("s"),[])])])),SDef("filter-option-args",[DefaultVarDec("flag")],Call(SVar("filter-gen"),[Seq(Call(SVar("Cons"),[Call(SVar("flag"),[]),Id]),Call(SVar("Tl"),[])),Call(SVar("skip1"),[])])),SDef("filter-options",[DefaultVarDec("flag")],Call(SVar("filter-gen"),[Call(SVar("Cons"),[Call(SVar("flag"),[]),Id]),Call(SVar("skip2"),[])])),SDef("partition",[DefaultVarDec("s")],Rec("part",Choice(LRule(Rule(Op("Nil",[]),Op("",[Op("Nil",[]),Op("Nil",[])]),Id)),LChoice(ScopeDefault(Seq(Call(SVar("Cons"),[AM(Call(SVar("s"),[]),Var("x")),Id]),Seq(Match(Op("Cons",[Wld,RootApp(Call(SVar("part"),[]))])),Build(Op("",[Op("Cons",[Var("x"),RootApp(Call(SVar("Fst"),[]))]),RootApp(Call(SVar("Snd"),[]))]))))),ScopeDefault(Seq(Call(SVar("Cons"),[AM(Id,Var("x")),Id]),Seq(Match(Op("Cons",[Wld,RootApp(Call(SVar("part"),[]))])),Build(Op("",[RootApp(Call(SVar("Fst"),[])),Op("Cons",[Var("x"),RootApp(Call(SVar("Snd"),[]))])]))))))))),SDef("partition'",[DefaultVarDec("s")],Rec("part",Choice(LRule(Rule(Op("Nil",[]),Op("",[Op("Nil",[]),Op("Nil",[])]),Id)),LRule(Rule(Op("Cons",[Var("z"),Var("zs")]),RootApp(LChoice(Build(Op("",[Op("Cons",[App(Call(SVar("s"),[]),Var("z")),Var("xs")]),Var("ys")])),Build(Op("",[Var("xs"),Op("Cons",[Var("z"),Var("ys")])])))),AM(BA(Call(SVar("part"),[]),Var("zs")),Op("",[Var("xs"),Var("ys")])))))))]),Strategies([SDef("member",[],Call(SVar(""),[Match(Var("x")),Call(SVar("fetch"),[Match(Var("x"))])]))]),Rules([RDef("FoldR1",[],Rule(Op("Cons",[Var("x"),Op("Cons",[Var("y"),Op("Nil",[])])]),Op("",[Var("x"),Var("y")]),Id)),RDef("FoldR",[],Rule(Op("Cons",[Var("x"),Var("xs")]),Op("",[Var("x"),Var("xs")]),Id)),RDef("FoldL",[DefaultVarDec("s")],Rule(Op("",[Op("Cons",[Var("x"),Var("xs")]),Var("y")]),Op("",[Var("xs"),App(Call(SVar("s"),[]),Op("",[Var("x"),Var("y")]))]),Id)),RDef("lsplit",[DefaultVarDec("f"),DefaultVarDec("g")],Rule(Var("x"),Op("Cons",[App(Call(SVar("f"),[]),Var("x")),Op("Cons",[App(Call(SVar("g"),[]),Var("x")),Op("Nil",[])])]),Id))]),Strategies([SDef("foldr1",[DefaultVarDec("s1"),DefaultVarDec("s2")],Rec("x",LChoice(Seq(Call(SVar("Cons"),[Id,Call(SVar("Nil"),[])]),Call(SVar("s1"),[])),Seq(Call(SVar("FoldR"),[]),Seq(Call(SVar(""),[Id,Call(SVar("x"),[])]),Call(SVar("s2"),[])))))),SDef("foldr1",[DefaultVarDec("s")],Rec("x",Seq(LChoice(Call(SVar("FoldR1"),[]),Seq(Call(SVar("FoldR"),[]),Call(SVar(""),[Id,Call(SVar("x"),[])]))),Call(SVar("s"),[])))),SDef("foldr",[DefaultVarDec("s1"),DefaultVarDec("s2")],Choice(Seq(Call(SVar("Nil"),[]),Call(SVar("s1"),[])),LRule(Rule(Op("Cons",[Var("y"),Var("ys")]),App(Call(SVar("s2"),[]),Op("",[Var("y"),App(Call(SVar("foldr"),[Call(SVar("s1"),[]),Call(SVar("s2"),[])]),Var("ys"))])),Id)))),SDef("foldr",[DefaultVarDec("s1"),DefaultVarDec("s2"),DefaultVarDec("f")],Choice(Seq(Call(SVar("Nil"),[]),Call(SVar("s1"),[])),LRule(Rule(Op("Cons",[Var("y"),Var("ys")]),App(Call(SVar("s2"),[]),Op("",[App(Call(SVar("f"),[]),Var("y")),App(Call(SVar("foldr"),[Call(SVar("s1"),[]),Call(SVar("s2"),[]),Call(SVar("f"),[])]),Var("ys"))])),Id)))),SDef("foldl",[DefaultVarDec("s")],Rec("x",Choice(LRule(Rule(Op("",[Op("Nil",[]),Var("y")]),Var("y"),Id)),Seq(Call(SVar("FoldL"),[Call(SVar("s"),[])]),Call(SVar("x"),[]))))),SDef("mapfoldr",[DefaultVarDec("s1"),DefaultVarDec("s2"),DefaultVarDec("s3")],Seq(Call(SVar("obsolete"),[Build(Str("mapfoldr; use foldr/3"))]),Call(SVar("foldr"),[Call(SVar("s1"),[]),Call(SVar("s3"),[]),Call(SVar("s2"),[])]))),SDef("mapfoldr1",[DefaultVarDec("s1"),DefaultVarDec("s2"),DefaultVarDec("s3")],Rec("x",LChoice(Seq(Call(SVar("Cons"),[Id,Call(SVar("Nil"),[])]),Call(SVar("s1"),[])),Seq(Call(SVar("Cons"),[Call(SVar("s2"),[]),Call(SVar("x"),[])]),Seq(LRule(Rule(Op("Cons",[Var("a"),Var("b")]),Op("",[Var("a"),Var("b")]),Id)),Call(SVar("s3"),[])))))),SDef("last",[],Rec("x",LChoice(Call(SVar("Last"),[]),Seq(Call(SVar("Tl"),[]),Call(SVar("x"),[]))))),SDef("init",[],Call(SVar("at-last"),[Call(SVar("Tl"),[])])),SDef("copy",[],Call(SVar("for"),[LRule(Rule(Op("",[Var("n"),Var("t")]),Op("",[Var("n"),Var("t"),Op("Nil",[])]),Id)),LRule(Rule(Op("",[Int(0),Var("t"),Var("ts")]),Var("ts"),Id)),LRule(Rule(Op("",[Var("n"),Var("t"),Var("ts")]),Op("",[App(Call(SVar("subt"),[]),Op("",[Var("n"),Int(1)])),Var("t"),Op("Cons",[Var("t"),Var("ts")])]),BA(Call(SVar("geq"),[]),Op("",[Var("n"),Int(1)]))))])),SDef("copy",[DefaultVarDec("s")],Call(SVar("for"),[LRule(Rule(Op("",[Var("n"),Var("t")]),Op("",[Var("n"),Var("t"),Op("Nil",[])]),Id)),LRule(Rule(Op("",[Int(0),Var("t"),Var("ts")]),Var("ts"),Id)),LRule(Rule(Op("",[Var("n"),Var("t"),Var("ts")]),Op("",[App(Call(SVar("subt"),[]),Op("",[Var("n"),Int(1)])),Var("t"),Op("Cons",[App(Call(SVar("s"),[]),Var("t")),Var("ts")])]),BA(Call(SVar("geq"),[]),Op("",[Var("n"),Int(1)]))))])),SDef("thread-map",[DefaultVarDec("s")],Rec("x",Choice(Call(SVar(Mod("Cons","T")),[Call(SVar("s"),[]),Call(SVar("x"),[])]),Call(SVar(Mod("Nil","T")),[])))),SDef("take-while",[DefaultVarDec("s")],Call(SVar("at-suffix"),[Choice(Call(SVar("Nil"),[]),Seq(Call(SVar("Cons"),[Not(Call(SVar("s"),[])),Id]),Build(Op("Nil",[]))))])),SDef("take-until",[DefaultVarDec("s")],Call(SVar("at-suffix"),[Choice(Call(SVar("Nil"),[]),Seq(Call(SVar("Cons"),[Call(SVar("s"),[]),Id]),Build(Op("Nil",[]))))])),SDef("take",[DefaultVarDec("isn")],Seq(Call(SVar("nzip0"),[Id]),Seq(Call(SVar("take-until"),[Call(SVar(""),[Call(SVar("isn"),[]),Id])]),Call(SVar("map"),[Call(SVar("Snd"),[])])))),SDef("drop-while",[DefaultVarDec("s")],Seq(Call(SVar("at-suffix"),[Seq(Choice(Call(SVar("Nil"),[]),Call(SVar("Cons"),[Not(Call(SVar("s"),[])),Id])),Match(Var("xs")))]),Build(Var("xs")))),SDef("drop-until",[DefaultVarDec("s")],Seq(Call(SVar("at-suffix"),[Seq(Choice(Call(SVar("Nil"),[]),Call(SVar("Cons"),[Call(SVar("s"),[]),Id])),Match(Var("xs")))]),Build(Var("xs")))),SDef("drop",[DefaultVarDec("isn")],Seq(Call(SVar("nzip0"),[Id]),Seq(Call(SVar("drop-until"),[Call(SVar(""),[Call(SVar("isn"),[]),Id])]),Call(SVar("map"),[Call(SVar("Snd"),[])]))))]),Rules([RDef("Look1",[],Rule(Op("",[Var("x"),Op("Cons",[Op("",[Var("x"),Var("y")]),Wld])]),Var("y"),Id)),RDef("Look2",[],Rule(Op("",[Var("x"),Op("Cons",[Wld,Var("xs")])]),Op("",[Var("x"),Var("xs")]),Id)),RDef("Look1'",[DefaultVarDec("keyeq")],Rule(Op("",[Var("x"),Op("Cons",[Var("y"),Wld])]),Var("y"),BA(Call(SVar("keyeq"),[]),Op("",[Var("x"),Var("y")]))))]),Strategies([SDef("lookup",[],Rec("x",LChoice(Call(SVar("Look1"),[]),Seq(Call(SVar("Look2"),[]),Call(SVar("x"),[]))))),SDef("getfirst",[DefaultVarDec("s")],Rec("x",LChoice(Seq(Call(SVar("Hd"),[]),Call(SVar("s"),[])),Seq(Call(SVar("Tl"),[]),Call(SVar("x"),[]))))),SDef("lookup'",[],Scope(["x","xs"],Seq(Match(Op("",[Var("x"),Var("xs")])),BA(Call(SVar("getfirst"),[Scope(["y"],Seq(Match(Op("",[Var("x"),Var("y")])),Build(Var("y"))))]),Var("xs"))))),SDef("lookup",[DefaultVarDec("keyeq")],Rec("x",LChoice(Call(SVar("Look1'"),[Call(SVar("keyeq"),[])]),Seq(Call(SVar("Look2"),[]),Call(SVar("x"),[])))))]),Rules([RDef("HdMember",[DefaultVarDec("mklst")],Rule(Op("Cons",[Var("x"),Var("xs")]),Var("xs"),Seq(Call(SVar("mklst"),[]),Call(SVar("fetch"),[Match(Var("x"))])))),RDef("HdMember'",[DefaultVarDec("eq"),DefaultVarDec("mklst")],Rule(Op("Cons",[Var("x"),Var("xs")]),Var("xs"),Seq(Call(SVar("mklst"),[]),Call(SVar("fetch"),[LRule(Rule(Var("y"),App(Call(SVar("eq"),[]),Op("",[Var("x"),Var("y")])),Id))]))))]),Rules([RDef("union",[],Rule(Op("",[Var("l1"),Var("l2")]),App(Rec("x",LChoice(Seq(Call(SVar("Nil"),[]),Build(Var("l2"))),LChoice(Seq(Call(SVar("HdMember"),[Build(Var("l2"))]),Call(SVar("x"),[])),Call(SVar("Cons"),[Id,Call(SVar("x"),[])])))),Var("l1")),Id))]),Strategies([SDef("unions",[],Call(SVar("foldr"),[Build(Op("Nil",[])),Call(SVar("union"),[])]))]),Rules([RDef("diff",[],Rule(Op("",[Var("l1"),Var("l2")]),App(Rec("x",LChoice(Call(SVar("Nil"),[]),LChoice(Seq(Call(SVar("HdMember"),[Build(Var("l2"))]),Call(SVar("x"),[])),Call(SVar("Cons"),[Id,Call(SVar("x"),[])])))),Var("l1")),Id))]),Rules([SDef("diff'",[DefaultVarDec("eq")],Seq(Call(SVar("obsolete"),[Build(Str("diff'/1; use diff/1"))]),Call(SVar("diff"),[Call(SVar("eq"),[])]))),RDef("diff",[DefaultVarDec("eq")],Rule(Op("",[Var("l1"),Var("l2")]),App(Rec("x",LChoice(Call(SVar("Nil"),[]),LChoice(Seq(Call(SVar("HdMember'"),[Call(SVar("eq"),[]),Build(Var("l2"))]),Call(SVar("x"),[])),Call(SVar("Cons"),[Id,Call(SVar("x"),[])])))),Var("l1")),Id))]),Rules([RDef("isect",[],Rule(Op("",[Var("l1"),Var("l2")]),App(Rec("x",LChoice(Call(SVar("Nil"),[]),LChoice(Seq(Test(Call(SVar("HdMember"),[Build(Var("l2"))])),Call(SVar("Cons"),[Id,Call(SVar("x"),[])])),Seq(Call(SVar("Tl"),[]),Call(SVar("x"),[]))))),Var("l1")),Id))]),Rules([RDef("crush",[DefaultVarDec("nul"),DefaultVarDec("sum")],Rule(Explode(Wld,Var("xs")),App(Call(SVar("foldr"),[Call(SVar("nul"),[]),Call(SVar("sum"),[])]),Var("xs")),Id)),RDef("crush",[DefaultVarDec("nul"),DefaultVarDec("sum"),DefaultVarDec("s")],Rule(Explode(Wld,Var("xs")),App(Call(SVar("foldr"),[Call(SVar("nul"),[]),Call(SVar("sum"),[]),Call(SVar("s"),[])]),Var("xs")),Id))]),Strategies([SDef("foldr-kids",[DefaultVarDec("nul"),DefaultVarDec("sum")],Seq(Call(SVar("obsolete"),[Build(Str("foldr-kids/2; use crush/2"))]),Call(SVar("crush"),[Call(SVar("nul"),[]),Call(SVar("sum"),[])]))),SDef("foldr-kids",[DefaultVarDec("nul"),DefaultVarDec("sum"),DefaultVarDec("s")],Seq(Call(SVar("obsolete"),[Build(Str("foldr-kids/3; use crush/3"))]),Call(SVar("crush"),[Call(SVar("nul"),[]),Call(SVar("sum"),[]),Call(SVar("s"),[])]))),SDef("node-size",[],Call(SVar("crush"),[Build(Int(0)),Call(SVar("add"),[]),Build(Int(1))])),SDef("term-size",[],Seq(Call(SVar("debug"),[Build(Str("in: "))]),Seq(Call(SVar("crush"),[Build(Int(1)),Seq(Call(SVar("debug"),[]),Seq(Call(SVar("add"),[]),Call(SVar("debug"),[]))),Call(SVar("term-size"),[])]),Call(SVar("debug"),[Build(Str("out: "))]))))]),Strategies([SDef("collect-kids",[DefaultVarDec("s")],Seq(Call(SVar("obsolete"),[Build(Str("collect-kids(s); use crush(![],union,s)"))]),Call(SVar("crush"),[Build(Op("Nil",[])),Call(SVar("union"),[]),Call(SVar("s"),[])]))),SDef("collect-all",[DefaultVarDec("s")],Rec("x",LChoice(Build(Op("Cons",[RootApp(Call(SVar("s"),[])),RootApp(Call(SVar("crush"),[Build(Op("Nil",[])),Call(SVar("union"),[]),Call(SVar("x"),[])]))])),Call(SVar("crush"),[Build(Op("Nil",[])),Call(SVar("union"),[]),Call(SVar("x"),[])])))),SDef("collect-om",[DefaultVarDec("s")],Rec("x",LChoice(Build(Op("Cons",[RootApp(Call(SVar("s"),[])),Op("Nil",[])])),Call(SVar("crush"),[Build(Op("Nil",[])),Call(SVar("union"),[]),Call(SVar("x"),[])])))),SDef("collect",[DefaultVarDec("s")],Call(SVar("collect-om"),[Call(SVar("s"),[])])),SDef("collect-set",[DefaultVarDec("s")],Rec("x",LChoice(Build(Op("Cons",[RootApp(Call(SVar("s"),[])),Op("Nil",[])])),Call(SVar("crush"),[Build(Op("Nil",[])),Call(SVar("conc"),[]),Call(SVar("x"),[])])))),SDef("collect",[DefaultVarDec("s"),VarDec("skip",FunType([ConstType(Var("a")),FunType([ConstType(Var("a"))],ConstType(Var("a"))),FunType([ConstType(Var("a"))],ConstType(Var("a")))],ConstType(Var("a"))))],Rec("x",LChoice(Build(Op("Cons",[RootApp(Call(SVar("s"),[])),Op("Nil",[])])),LChoice(Seq(Call(SVar("skip"),[Call(SVar("x"),[]),Build(Op("Nil",[]))]),Call(SVar("crush"),[Build(Op("Nil",[])),Call(SVar("union"),[]),Id])),Call(SVar("crush"),[Build(Op("Nil",[])),Call(SVar("union"),[]),Call(SVar("x"),[])]))))),SDef("collect-exc",[DefaultVarDec("base"),VarDec("special",FunType([ConstType(Var("a")),FunType([ConstType(Var("a"))],ConstType(Var("b")))],ConstType(Var("b"))))],Rec("coll",Choice(Call(SVar("base"),[]),Choice(Call(SVar("special"),[Call(SVar("coll"),[])]),Call(SVar("crush"),[Build(Op("Nil",[])),Call(SVar("union"),[]),Call(SVar("coll"),[])]))))),SDef("bu-collect",[DefaultVarDec("s")],LChoice(Rec("x",LChoice(Seq(Some(Call(SVar("x"),[])),Call(SVar("crush"),[Build(Op("Nil",[])),Call(SVar("union"),[]),LChoice(Call(SVar("Cons"),[Call(SVar("s"),[]),Id]),Build(Op("Nil",[])))])),Build(Op("Cons",[RootApp(Call(SVar("s"),[])),Op("Nil",[])])))),Build(Op("Nil",[])))),SDef("collect-split",[DefaultVarDec("splitter")],Rec("x",LChoice(Seq(Choice(Call(SVar("is-string"),[]),Call(SVar("is-int"),[])),Call(SVar("splitter"),[])),Call(SVar("CollectSplit"),[Call(SVar("x"),[]),Call(SVar("splitter"),[])])))),SDef("collect-split",[DefaultVarDec("f"),DefaultVarDec("g")],Call(SVar("collect-split"),[Call(SVar("split"),[Call(SVar("try"),[Call(SVar("f"),[])]),LChoice(Call(SVar("g"),[]),Build(Op("Nil",[])))])]))]),Rules([RDef("CollectSplit",[DefaultVarDec("s"),DefaultVarDec("splitter")],Rule(Explode(Var("c"),Var("as")),Op("",[Var("t"),App(Call(SVar("union"),[]),Op("",[Var("ys"),App(Call(SVar("unions"),[]),Var("xs"))]))]),Seq(AM(BA(Seq(Call(SVar("list"),[Call(SVar("s"),[])]),Call(SVar("unzip"),[])),Var("as")),Op("",[Var("bs"),Var("xs")])),AM(BA(Call(SVar("splitter"),[]),Explode(Var("c"),Var("bs"))),Op("",[Var("t"),Var("ys")]))))),SDef("CollectSplit",[DefaultVarDec("s"),DefaultVarDec("f"),DefaultVarDec("g")],Call(SVar("CollectSplit"),[Call(SVar("s"),[]),Call(SVar("split"),[Call(SVar("try"),[Call(SVar("f"),[])]),LChoice(Call(SVar("g"),[]),Build(Op("Nil",[])))])]))]),Strategies([SDef("nrofoccs",[DefaultVarDec("s")],Seq(Call(SVar("obsolete"),[Build(Str("nrofoccs/1; use occurrences/1"))]),Call(SVar("occurrences"),[Call(SVar("s"),[])]))),SDef("om-occurrences",[DefaultVarDec("s")],LChoice(Seq(Call(SVar("s"),[]),Build(Int(1))),Call(SVar("crush"),[Build(Int(0)),Call(SVar("add"),[]),Call(SVar("occurrences"),[Call(SVar("s"),[])])]))),SDef("occurrences",[DefaultVarDec("s")],Seq(Call(SVar("split"),[LChoice(Seq(Call(SVar("s"),[]),Build(Int(1))),Build(Int(0))),Call(SVar("crush"),[Build(Int(0)),Call(SVar("add"),[]),Call(SVar("occurrences"),[Call(SVar("s"),[])])])]),Call(SVar("add"),[]))),SDef("twicetd",[DefaultVarDec("s")],Call(SVar("oncetd"),[Seq(Call(SVar("explode-term"),[]),Seq(Call(SVar(""),[Id,Call(SVar("at-suffix"),[Call(SVar("Cons"),[Call(SVar("oncetd"),[Call(SVar("s"),[])]),Call(SVar("oncetd"),[Call(SVar("s"),[])])])])]),Call(SVar("mkterm"),[])))])),SDef("atmostonce",[DefaultVarDec("s")],Not(Call(SVar("twicetd"),[Call(SVar("s"),[])]))),SDef("atmostonce'",[DefaultVarDec("s")],Scope(["n"],Seq(AM(Call(SVar("nrofoccs"),[Call(SVar("s"),[])]),Var("n")),BA(Call(SVar("leq"),[]),Op("",[Var("n"),Int(1)])))))]),Rules([RDef("SortL",[DefaultVarDec("s")],Rule(Op("Cons",[Var("x"),Op("Cons",[Var("y"),Var("l")])]),Op("Cons",[Var("y"),Op("Cons",[Var("x"),Var("l")])]),BA(Call(SVar("s"),[]),Op("",[Var("x"),Var("y")])))),RDef("LSort",[DefaultVarDec("s")],Rule(Op("Cons",[Var("x"),Var("l")]),Op("Cons",[Var("y"),Op("Cons",[Var("x"),Var("l'")])]),AM(BA(Call(SVar("at-suffix"),[Scope(["ys"],Seq(Match(Op("Cons",[Var("y"),Var("ys")])),Seq(Where(BA(Call(SVar("s"),[]),Op("",[Var("x"),Var("y")]))),Build(Var("ys")))))]),Var("l")),Var("l'")))),RDef("LMerge",[DefaultVarDec("s")],Rule(Op("Cons",[Var("x"),Var("l")]),Op("Cons",[Var("z"),Var("l'")]),AM(BA(Call(SVar("at-suffix"),[LRule(Rule(Op("Cons",[Var("y"),Var("ys")]),Var("ys"),AM(BA(Call(SVar("s"),[]),Op("",[Var("x"),Var("y")])),Var("z"))))]),Var("l")),Var("l'"))))]),Strategies([SDef("sort-list",[DefaultVarDec("s")],Call(SVar("try"),[Rec("x",Seq(LChoice(Call(SVar("s"),[]),Call(SVar("Cons"),[Id,Call(SVar("x"),[])])),Call(SVar("try"),[Call(SVar("x"),[])])))])),SDef("isort-list",[DefaultVarDec("s")],Call(SVar("try"),[Rec("x",Seq(LChoice(Call(SVar("Cons"),[Id,Call(SVar("x"),[])]),Call(SVar("s"),[])),Call(SVar("try"),[Call(SVar("x"),[])])))])),SDef("jsort-list",[DefaultVarDec("s")],Call(SVar("try"),[Rec("x",LChoice(Call(SVar("Cons"),[Id,Call(SVar("x"),[])]),Seq(Call(SVar("s"),[]),Call(SVar("try"),[Call(SVar("x"),[])]))))])),SDef("Uniq",[],LRule(Rule(Op("Cons",[Var("x"),Var("xs")]),Op("Cons",[Var("x"),Var("l")]),AM(BA(Call(SVar("filter"),[Not(Match(Var("x")))]),Var("xs")),Var("l"))))),SDef("uniq",[],Call(SVar("listtd"),[Call(SVar("try"),[Call(SVar("Uniq"),[])])]))]),Rules([RDef("Zip1",[],Rule(Op("",[Op("Nil",[]),Op("Nil",[])]),Op("Nil",[]),Id)),RDef("Zip1a'",[],Rule(Op("",[Op("Nil",[]),Wld]),Op("Nil",[]),Id)),RDef("Zip1b'",[],Rule(Op("",[Wld,Op("Nil",[])]),Op("Nil",[]),Id)),RDef("Zip1c",[],Rule(Op("",[Op("Nil",[]),Var("x")]),Var("x"),Id)),RDef("Zip1c'",[],Rule(Op("",[Var("x"),Op("Nil",[])]),Var("x"),Id)),RDef("Zip1d",[],Rule(Op("",[Op("Nil",[]),Op("Cons",[Wld,Wld])]),Op("Nil",[]),Id)),RDef("Zip2",[],Rule(Op("",[Op("Cons",[Var("x"),Var("xs")]),Op("Cons",[Var("y"),Var("ys")])]),Op("",[Op("",[Var("x"),Var("y")]),Op("",[Var("xs"),Var("ys")])]),Id)),RDef("LZip2",[],Rule(Op("",[Op("Cons",[Var("x"),Var("xs")]),Var("y")]),Op("",[Op("",[Var("x"),Var("y")]),Op("",[Var("xs"),Var("y")])]),Id)),RDef("RZip2",[],Rule(Op("",[Var("x"),Op("Cons",[Var("y"),Var("ys")])]),Op("",[Op("",[Var("x"),Var("y")]),Op("",[Var("x"),Var("ys")])]),Id)),RDef("Zip3",[],Rule(Op("",[Var("x"),Var("xs")]),Op("Cons",[Var("x"),Var("xs")]),Id)),RDef("UnZip1",[],Rule(Op("Nil",[]),Op("",[Op("Nil",[]),Op("Nil",[])]),Id)),RDef("UnZip2",[],Rule(Op("",[Op("",[Var("x"),Var("y")]),Op("",[Var("xs"),Var("ys")])]),Op("",[Op("Cons",[Var("x"),Var("xs")]),Op("Cons",[Var("y"),Var("ys")])]),Id)),RDef("UnZip3",[],Rule(Op("Cons",[Var("x"),Var("xs")]),Op("",[Var("x"),Var("xs")]),Id)),RDef("NZip00",[],Rule(Var("xs"),Op("",[Int(0),Var("xs")]),Id)),RDef("NZip01",[],Rule(Var("xs"),Op("",[Int(1),Var("xs")]),Id)),RDef("NZip1",[],Rule(Op("",[Var("n"),Op("Nil",[])]),Op("Nil",[]),Id)),RDef("NZip2",[],Rule(Op("",[Var("n"),Op("Cons",[Var("y"),Var("ys")])]),Op("",[Op("",[Var("n"),Var("y")]),Op("",[App(Call(SVar("add"),[]),Op("",[Var("n"),Int(1)])),Var("ys")])]),Id)),RDef("NZip3",[],Rule(Op("",[Var("x"),Var("xs")]),Op("Cons",[Var("x"),Var("xs")]),Id)),RDef("cart",[DefaultVarDec("s")],Rule(Op("",[Var("xs"),Var("ys")]),App(Seq(Call(SVar("map"),[LRule(Rule(Var("x"),App(Call(SVar("map"),[LRule(Rule(Var("y"),App(Call(SVar("s"),[]),Op("",[Var("x"),Var("y")])),Id))]),Var("ys")),Id))]),Call(SVar("foldr"),[Build(Op("Nil",[])),Call(SVar("union"),[])])),Var("xs")),Id)),RDef("Skip",[DefaultVarDec("s")],Rule(Op("",[Op("Cons",[Var("x"),Var("xs")]),Var("ys")]),Op("",[Var("x"),Op("",[Var("xs"),Var("ys")])]),Id))]),Strategies([SDef("genzip",[DefaultVarDec("a"),DefaultVarDec("b"),DefaultVarDec("c"),DefaultVarDec("s")],Rec("x",Choice(Call(SVar("a"),[]),Seq(Call(SVar("b"),[]),Seq(Call(SVar(""),[Call(SVar("s"),[]),Call(SVar("x"),[])]),Call(SVar("c"),[])))))),SDef("zip",[DefaultVarDec("s")],Call(SVar("genzip"),[Call(SVar("Zip1"),[]),Call(SVar("Zip2"),[]),Call(SVar("Zip3"),[]),Call(SVar("s"),[])])),SDef("zip'",[DefaultVarDec("s")],Call(SVar("genzip"),[LChoice(Call(SVar("Zip1a'"),[]),Call(SVar("Zip1b'"),[])),Call(SVar("Zip2"),[]),Call(SVar("Zip3"),[]),Call(SVar("s"),[])])),SDef("zipl",[DefaultVarDec("s")],Call(SVar("genzip"),[Call(SVar("Zip1a'"),[]),Call(SVar("Zip2"),[]),Call(SVar("Zip3"),[]),Call(SVar("s"),[])])),SDef("zipr",[DefaultVarDec("s")],Call(SVar("genzip"),[Call(SVar("Zip1b'"),[]),Call(SVar("Zip2"),[]),Call(SVar("Zip3"),[]),Call(SVar("s"),[])])),SDef("rest-zip",[DefaultVarDec("s")],Seq(Call(SVar("genzip"),[Seq(Choice(Match(Op("",[Op("Nil",[]),Wld])),Match(Op("",[Wld,Op("Nil",[])]))),Seq(Match(Op("",[Var("tla"),Var("tlb")])),Build(Op("Nil",[])))),Call(SVar("Zip2"),[]),Call(SVar("Zip3"),[]),Call(SVar("s"),[])]),LRule(Rule(Var("pairs"),Op("",[Var("tla"),Var("tlb"),Var("pairs")]),Id)))),SDef("unzip",[],Call(SVar("genzip"),[Call(SVar("UnZip1"),[]),Call(SVar("UnZip3"),[]),Call(SVar("UnZip2"),[]),Id])),SDef("unzip",[DefaultVarDec("s")],Call(SVar("genzip"),[Call(SVar("UnZip1"),[]),Call(SVar("UnZip3"),[]),Call(SVar("UnZip2"),[]),Call(SVar("s"),[])])),SDef("nzip0",[DefaultVarDec("s")],Seq(Call(SVar("NZip00"),[]),Call(SVar("genzip"),[Call(SVar("NZip1"),[]),Call(SVar("NZip2"),[]),Call(SVar("NZip3"),[]),Call(SVar("s"),[])]))),SDef("nzip",[DefaultVarDec("s")],Seq(Call(SVar("NZip01"),[]),Call(SVar("genzip"),[Call(SVar("NZip1"),[]),Call(SVar("NZip2"),[]),Call(SVar("NZip3"),[]),Call(SVar("s"),[])]))),SDef("lzip",[DefaultVarDec("s")],Call(SVar("genzip"),[Call(SVar("Zip1a'"),[]),Call(SVar("LZip2"),[]),Call(SVar("Zip3"),[]),Call(SVar("s"),[])])),SDef("rzip",[DefaultVarDec("s")],Call(SVar("genzip"),[Call(SVar("Zip1b'"),[]),Call(SVar("RZip2"),[]),Call(SVar("Zip3"),[]),Call(SVar("s"),[])])),SDef("zipFetch",[DefaultVarDec("s")],Rec("x",Seq(Call(SVar("Zip2"),[]),LChoice(Call(SVar(""),[Call(SVar("s"),[]),Id]),Call(SVar(""),[Id,Call(SVar("x"),[])]))))),SDef("lzipFetch",[DefaultVarDec("s")],Rec("x",Seq(Call(SVar("LZip2"),[]),LChoice(Call(SVar(""),[Call(SVar("s"),[]),Id]),Call(SVar(""),[Id,Call(SVar("x"),[])]))))),SDef("rzipFetch",[DefaultVarDec("s")],Rec("x",Seq(Call(SVar("RZip2"),[]),LChoice(Call(SVar(""),[Call(SVar("s"),[]),Id]),Call(SVar(""),[Id,Call(SVar("x"),[])]))))),SDef("zipPad",[DefaultVarDec("s"),DefaultVarDec("padding")],Rec("x",Choice(Call(SVar("Zip1"),[]),Choice(Seq(Call(SVar("Zip2"),[]),Seq(Call(SVar(""),[Call(SVar("s"),[]),Call(SVar("x"),[])]),Call(SVar("Zip3"),[]))),Choice(Seq(Call(SVar(""),[Call(SVar("Nil"),[]),Call(SVar("Cons"),[Id,Id])]),Seq(Call(SVar(""),[Build(Op("Cons",[App(Call(SVar("padding"),[]),Op("",[])),Op("Nil",[])])),Id]),Call(SVar("x"),[]))),Seq(Call(SVar(""),[Call(SVar("Cons"),[Id,Id]),Call(SVar("Nil"),[])]),Seq(Call(SVar(""),[Id,Build(Op("Cons",[App(Call(SVar("padding"),[]),Op("",[])),Op("Nil",[])]))]),Call(SVar("x"),[])))))))),SDef("zip-tail",[],Rec("x",Choice(Call(SVar("Zip1c"),[]),Seq(Call(SVar(""),[Call(SVar("Tl"),[]),Call(SVar("Tl"),[])]),Call(SVar("x"),[]))))),SDef("zipl-tail-match",[DefaultVarDec("s")],Rec("x",Choice(Call(SVar("Zip1c"),[]),Seq(Call(SVar("Zip2"),[]),Seq(Call(SVar(""),[Call(SVar("s"),[]),Id]),Seq(Call(SVar("Snd"),[]),Call(SVar("x"),[]))))))),SDef("zipr-tail-match",[DefaultVarDec("s")],Rec("x",Choice(Call(SVar("Zip1c'"),[]),Seq(Call(SVar("Zip2"),[]),Seq(Call(SVar(""),[Call(SVar("s"),[]),Id]),Seq(Call(SVar("Snd"),[]),Call(SVar("x"),[]))))))),SDef("zip-skip",[DefaultVarDec("pred"),DefaultVarDec("s")],Rec("x",Choice(Call(SVar("Zip1"),[]),Seq(LChoice(Seq(Call(SVar("Skip"),[Call(SVar("pred"),[])]),Call(SVar(""),[Id,Call(SVar("x"),[])])),Seq(Call(SVar("Zip2"),[]),Call(SVar(""),[Call(SVar("s"),[]),Call(SVar("x"),[])]))),Call(SVar("Zip3"),[])))))]),Strategies([SDef("index",[],Seq(Call(SVar("repeat"),[Call(SVar("Ind2"),[])]),Call(SVar("Ind1"),[]))),RDef("Ind1",[],Rule(Op("",[Int(1),Op("Cons",[Var("x"),Var("xs")])]),Var("x"),Id)),RDef("Ind2",[],Rule(Op("",[Var("n"),Op("Cons",[Var("x"),Var("xs")])]),Op("",[App(Call(SVar("subt"),[]),Op("",[Var("n"),Int(1)])),Var("xs")]),BA(Call(SVar("geq"),[]),Op("",[Var("n"),Int(2)])))),SDef("get_index",[],Seq(Call(SVar("Gind0"),[]),Rec("x",LChoice(Call(SVar("Gind1"),[]),Seq(Call(SVar("Gind2"),[]),Call(SVar("x"),[])))))),SDef("get-index",[],Seq(Call(SVar("Gind0"),[]),Rec("x",LChoice(Call(SVar("Gind1"),[]),Seq(Call(SVar("Gind2"),[]),Call(SVar("x"),[])))))),SDef("get-index0",[DefaultVarDec("s")],Seq(Call(SVar("at-suffix"),[Seq(Call(SVar("Cons"),[Call(SVar("s"),[]),Id]),Build(Op("Nil",[])))]),Call(SVar("length"),[]))),RDef("Gind0",[],Rule(Op("",[Var("x"),Var("ys")]),Op("",[Int(1),Var("x"),Var("ys")]),Id)),RDef("Gind1",[],Rule(Op("",[Var("n"),Var("x"),Op("Cons",[Var("x"),Var("xs")])]),Var("n"),Id)),RDef("Gind2",[],Rule(Op("",[Var("n"),Var("y"),Op("Cons",[Var("x"),Var("xs")])]),Op("",[App(Call(SVar("add"),[]),Op("",[Var("n"),Int(1)])),Var("y"),Var("xs")]),Id)),RDef("Sind0",[],Rule(Op("",[Var("i"),Var("x"),Var("ys")]),Op("",[Int(0),Var("i"),Var("x"),Var("ys")]),Id)),RDef("Sind1",[],Rule(Op("",[Var("i"),Var("i"),Var("x"),Op("Cons",[Var("y"),Var("ys")])]),Op("Cons",[Var("x"),Var("ys")]),Id)),RDef("Sind2",[DefaultVarDec("r")],Rule(Op("",[Var("n"),Var("i"),Var("x"),Op("Cons",[Var("y"),Var("ys")])]),Op("Cons",[Var("y"),App(Call(SVar("r"),[]),Op("",[App(Call(SVar("add"),[]),Op("",[Var("n"),Int(1)])),Var("i"),Var("x"),Var("ys")]))]),Id)),SDef("set-index",[],Seq(Call(SVar("Sind0"),[]),Rec("x",LChoice(Call(SVar("Sind1"),[]),Call(SVar("Sind2"),[Call(SVar("x"),[])]))))),SDef("insert",[],Seq(Call(SVar("Ins0"),[]),Rec("x",LChoice(Call(SVar("Ins1"),[]),Call(SVar("Ins2"),[Call(SVar("x"),[])]))))),RDef("Ins0",[],Rule(Op("",[Var("i"),Var("x"),Var("ys")]),Op("",[Int(0),Var("i"),Var("x"),Var("ys")]),Id)),RDef("Ins1",[],Rule(Op("",[Var("i"),Var("i"),Var("x"),Var("xs")]),Op("Cons",[Var("x"),Var("xs")]),Id)),RDef("Ins2",[DefaultVarDec("r")],Rule(Op("",[Var("n"),Var("i"),Var("x"),Op("Cons",[Var("y"),Var("ys")])]),Op("Cons",[Var("y"),App(Call(SVar("r"),[]),Op("",[App(Call(SVar("add"),[]),Op("",[Var("n"),Int(1)])),Var("i"),Var("x"),Var("ys")]))]),Id))]),Rules([RDef("Hd",[],Rule(Op("Cons",[Var("x"),Var("l")]),Var("x"),Id)),RDef("Tl",[],Rule(Op("Cons",[Var("x"),Var("l")]),Var("l"),Id)),RDef("Last",[],Rule(Op("Cons",[Var("x"),Op("Nil",[])]),Var("x"),Id)),RDef("MkCons",[],Rule(Op("",[Var("x"),Var("xs")]),Op("Cons",[Var("x"),Var("xs")]),Id)),SDef("MkSingleton",[],Build(Op("Cons",[RootApp(Id),Op("Nil",[])])))]),Strategies([SDef("is-list",[],Choice(Match(Op("Nil",[])),Match(Op("Cons",[Wld,Wld])))),SDef("map",[DefaultVarDec("s")],Rec("x",Choice(Call(SVar("Nil"),[]),Call(SVar("Cons"),[Call(SVar("s"),[]),Call(SVar("x"),[])])))),SDef("list",[DefaultVarDec("s")],Rec("x",Choice(Call(SVar("Nil"),[]),Call(SVar("Cons"),[Call(SVar("s"),[]),Call(SVar("x"),[])])))),SDef("list-some",[DefaultVarDec("s")],Rec("x",LChoice(Seq(Call(SVar("Cons"),[Call(SVar("s"),[]),Id]),Call(SVar("Cons"),[Id,Call(SVar("list"),[Call(SVar("try"),[Call(SVar("s"),[])])])])),Call(SVar("Cons"),[Id,Call(SVar("x"),[])])))),SDef("list-some-filter",[DefaultVarDec("s")],Rec("x",LChoice(Seq(Call(SVar("Cons"),[Call(SVar("s"),[]),Id]),Call(SVar("Cons"),[Id,Call(SVar("filter"),[Call(SVar("s"),[])])])),Seq(Call(SVar("Cons"),[Id,Call(SVar("x"),[])]),Call(SVar("Tl"),[]))))),SDef("length",[],Call(SVar("foldr"),[Build(Int(0)),Call(SVar("add"),[]),Build(Int(1))])),SDef("fetch",[DefaultVarDec("s")],Rec("x",LChoice(Call(SVar("Cons"),[Call(SVar("s"),[]),Id]),Call(SVar("Cons"),[Id,Call(SVar("x"),[])])))),SDef("fetch-elem",[DefaultVarDec("s")],Seq(Call(SVar("fetch"),[Seq(Call(SVar("s"),[]),Match(Var("x")))]),Build(Var("x")))),SDef("split-fetch",[DefaultVarDec("s")],Seq(Call(SVar("at-suffix"),[Seq(Call(SVar("Cons"),[Call(SVar("s"),[]),Id]),Seq(Call(SVar("Cons"),[Id,Match(Var("tl"))]),Build(Op("Nil",[]))))]),Call(SVar("split"),[Id,Build(Var("tl"))]))),SDef("at-tail",[DefaultVarDec("s")],Call(SVar("Cons"),[Id,Call(SVar("s"),[])])),SDef("at_tail",[DefaultVarDec("s")],Seq(Call(SVar("obsolete"),[Build(Str("at_tail -> at-tail"))]),Call(SVar("at-tail"),[Call(SVar("s"),[])]))),SDef("at-end",[DefaultVarDec("s")],Rec("x",Choice(Call(SVar("Cons"),[Id,Call(SVar("x"),[])]),Seq(Call(SVar("Nil"),[]),Call(SVar("s"),[]))))),SDef("at_end",[DefaultVarDec("s")],Seq(Call(SVar("obsolete"),[Build(Str("at_end -> at-end"))]),Rec("x",Choice(Call(SVar("Cons"),[Id,Call(SVar("x"),[])]),Seq(Call(SVar("Nil"),[]),Call(SVar("s"),[])))))),SDef("at-suffix",[DefaultVarDec("s")],Rec("x",LChoice(Call(SVar("s"),[]),Call(SVar("Cons"),[Id,Call(SVar("x"),[])])))),SDef("at_suffix",[DefaultVarDec("s")],Seq(Call(SVar("obsolete"),[Build(Str("at_suffix -> at-suffix"))]),Rec("x",LChoice(Call(SVar("s"),[]),Call(SVar("Cons"),[Id,Call(SVar("x"),[])]))))),SDef("at_last",[DefaultVarDec("s")],Seq(Call(SVar("obsolete"),[Build(Str("at_last -> at-last"))]),Rec("x",LChoice(Seq(Call(SVar("Cons"),[Id,Call(SVar("Nil"),[])]),Call(SVar("s"),[])),Call(SVar("Cons"),[Id,Call(SVar("x"),[])]))))),SDef("at-last",[DefaultVarDec("s")],Rec("x",LChoice(Seq(Call(SVar("Cons"),[Id,Call(SVar("Nil"),[])]),Call(SVar("s"),[])),Call(SVar("Cons"),[Id,Call(SVar("x"),[])])))),SDef("listbu",[DefaultVarDec("s")],Rec("x",Seq(Choice(Call(SVar("Nil"),[]),Call(SVar("Cons"),[Id,Call(SVar("x"),[])])),Call(SVar("s"),[])))),SDef("listtd",[DefaultVarDec("s")],Rec("x",Seq(Call(SVar("s"),[]),Choice(Call(SVar("Nil"),[]),Call(SVar("Cons"),[Id,Call(SVar("x"),[])]))))),SDef("listdu",[DefaultVarDec("s")],Rec("x",Seq(Call(SVar("s"),[]),Seq(Choice(Call(SVar("Nil"),[]),Call(SVar("Cons"),[Id,Call(SVar("x"),[])])),Call(SVar("s"),[]))))),SDef("listdu2",[DefaultVarDec("s1"),DefaultVarDec("s2")],Rec("x",Seq(Call(SVar("s1"),[]),Seq(Choice(Call(SVar("Nil"),[]),Call(SVar("Cons"),[Id,Call(SVar("x"),[])])),Call(SVar("s2"),[]))))),RDef("RevInit",[],Rule(Var("xs"),Op("",[Var("xs"),Op("Nil",[])]),Id)),RDef("Rev",[],Rule(Op("",[Op("Cons",[Var("x"),Var("xs")]),Var("ys")]),Op("",[Var("xs"),Op("Cons",[Var("x"),Var("ys")])]),Id)),RDef("RevExit",[],Rule(Op("",[Op("Nil",[]),Var("ys")]),Var("ys"),Id)),SDef("reverse",[],Call(SVar("reverse"),[Build(Op("Nil",[]))])),RDef("reverse",[DefaultVarDec("acc")],Rule(Op("Nil",[]),App(Call(SVar("acc"),[]),Op("",[])),Id)),RDef("reverse",[DefaultVarDec("acc")],Rule(Op("Cons",[Var("x"),Var("xs")]),App(Call(SVar("reverse"),[Build(Op("Cons",[Var("x"),RootApp(Call(SVar("acc"),[]))]))]),Var("xs")),Id))]),Rules([RDef("UptoInit",[],Rule(Var("i"),Op("",[Var("i"),Op("Nil",[])]),Id)),RDef("UptoExit",[],Rule(Op("",[Var("i"),Var("xs")]),Var("xs"),BA(Call(SVar("lt"),[]),Op("",[Var("i"),Int(0)])))),RDef("UptoStep",[],Rule(Op("",[Var("i"),Var("xs")]),Op("",[App(Call(SVar("subt"),[]),Op("",[Var("i"),Int(1)])),Op("Cons",[Var("i"),Var("xs")])]),Id))]),Strategies([SDef("upto",[],Seq(Call(SVar("UptoInit"),[]),Rec("x",LChoice(Call(SVar("UptoExit"),[]),Seq(Call(SVar("UptoStep"),[]),Call(SVar("x"),[]))))))]),Rules([RDef("conc",[],Rule(Op("",[Var("l1"),Var("l2")]),App(Call(SVar("at-end"),[Build(Var("l2"))]),Var("l1")),Id))]),Strategies([SDef("concat",[],Rec("x",Choice(Call(SVar("Nil"),[]),LRule(Rule(Op("Cons",[Var("l"),Var("ls")]),App(Call(SVar("at-end"),[BA(Call(SVar("x"),[]),Var("ls"))]),Var("l")),Id)))))]),Rules([RDef("Sep",[DefaultVarDec("s")],Rule(Op("Cons",[Var("x"),Var("xs")]),Op("Cons",[App(Call(SVar("s"),[]),Op("",[])),Op("Cons",[Var("x"),Var("xs")])]),Id))]),Strategies([SDef("separate-by",[DefaultVarDec("s")],Choice(Call(SVar("Nil"),[]),Call(SVar("Cons"),[Id,Rec("x",Choice(Call(SVar("Nil"),[]),Seq(Call(SVar("Cons"),[Id,Call(SVar("x"),[])]),Call(SVar("Sep"),[Call(SVar("s"),[])]))))])))]),Rules([RDef("all-dist",[DefaultVarDec("s")],Rule(Op("",[Var("t"),Var("env")]),App(All(LRule(Rule(Var("x"),App(Call(SVar("s"),[]),Op("",[Var("x"),Var("env")])),Id))),Var("t")),Id)),RDef("one-dist",[DefaultVarDec("s")],Rule(Op("",[Var("t"),Var("env")]),App(One(LRule(Rule(Var("x"),App(Call(SVar("s"),[]),Op("",[Var("x"),Var("env")])),Id))),Var("t")),Id)),RDef("d",[DefaultVarDec("s")],Rule(Op("",[Var("t"),Var("env")]),App(Call(SVar("s"),[]),Var("t")),Id)),RDef("t",[DefaultVarDec("s")],Rule(Op("",[Var("t"),Var("env")]),Op("",[App(Call(SVar("s"),[]),Var("t")),Var("env")]),Id)),RDef("coll",[DefaultVarDec("s")],Rule(Explode(Var("f"),Var("xs")),Op("",[Explode(Var("f"),Var("ys")),Var("zs")]),AM(BA(Call(SVar("unzip"),[Call(SVar("s"),[])]),Var("xs")),Op("",[Var("ys"),Var("zs")]))))]),Strategies([SDef("env-alltd",[DefaultVarDec("s")],Rec("x",LChoice(Call(SVar("s"),[]),Call(SVar("all-dist"),[Call(SVar("x"),[])])))),SDef("env-topdown",[DefaultVarDec("s")],Rec("x",Seq(Call(SVar("s"),[]),Call(SVar("all-dist"),[Call(SVar("x"),[])])))),SDef("env-topdown",[DefaultVarDec("s"),VarDec("skip",FunType([ConstType(Var("term")),FunType([ConstType(Var("term"))],ConstType(Var("term")))],ConstType(Var("term"))))],Rec("x",Seq(Call(SVar("s"),[]),LChoice(Call(SVar("skip"),[Call(SVar("x"),[])]),Call(SVar("all-dist"),[Call(SVar("x"),[])]))))),SDef("env-bottomup",[DefaultVarDec("s")],Rec("x",Seq(Call(SVar("split"),[Call(SVar("all-dist"),[Call(SVar("x"),[])]),Call(SVar("Snd"),[])]),Call(SVar("s"),[])))),SDef("thread-alltd",[DefaultVarDec("s")],Rec("x",LChoice(Call(SVar("s"),[]),Thread(Call(SVar("x"),[]))))),SDef("env-oncetd",[DefaultVarDec("s")],Rec("x",LChoice(Call(SVar("s"),[]),Call(SVar("one-dist"),[Call(SVar("x"),[])]))))]),Strategies([SDef("reduce",[DefaultVarDec("s")],Call(SVar("repeat"),[Rec("x",Choice(Some(Call(SVar("x"),[])),Call(SVar("s"),[])))])),SDef("outermost",[DefaultVarDec("s")],Call(SVar("repeat"),[Call(SVar("oncetd"),[Call(SVar("s"),[])])])),SDef("innermost'",[DefaultVarDec("s")],Call(SVar("repeat"),[Call(SVar("oncebu"),[Call(SVar("s"),[])])])),SDef("innermost",[DefaultVarDec("s")],Rec("x",Seq(All(Call(SVar("x"),[])),LChoice(Seq(Call(SVar("s"),[]),Call(SVar("x"),[])),Id)))),SDef("pseudo-innermost3",[DefaultVarDec("s")],Rec("x",Seq(All(Call(SVar("x"),[])),Rec("y",Call(SVar("try"),[Seq(Call(SVar("s"),[]),Seq(All(Seq(All(Seq(All(Call(SVar("y"),[])),Call(SVar("y"),[]))),Call(SVar("y"),[]))),Call(SVar("y"),[])))]))))),SDef("innermost-memo",[DefaultVarDec("s")],Rec("x",Call(SVar("memo"),[Seq(All(Call(SVar("x"),[])),LChoice(Seq(Call(SVar("s"),[]),Call(SVar("x"),[])),Id))])))]),Strategies([SDef("topdown",[DefaultVarDec("s")],Rec("x",Seq(Call(SVar("s"),[]),All(Call(SVar("x"),[]))))),SDef("bottomup",[DefaultVarDec("s")],Rec("x",Seq(All(Call(SVar("x"),[])),Call(SVar("s"),[])))),SDef("downup",[DefaultVarDec("s")],Rec("x",Seq(Call(SVar("s"),[]),Seq(All(Call(SVar("x"),[])),Call(SVar("s"),[]))))),SDef("downup",[DefaultVarDec("s1"),DefaultVarDec("s2")],Rec("x",Seq(Call(SVar("s1"),[]),Seq(All(Call(SVar("x"),[])),Call(SVar("s2"),[]))))),SDef("downup2",[DefaultVarDec("s1"),DefaultVarDec("s2")],Rec("x",Seq(Call(SVar("s1"),[]),Seq(All(Call(SVar("x"),[])),Call(SVar("s2"),[]))))),SDef("topdownS",[DefaultVarDec("s"),VarDec("stop",FunType([ConstType(Var("a")),FunType([ConstType(Var("a"))],ConstType(Var("a")))],ConstType(Var("a"))))],Rec("x",Seq(Call(SVar("s"),[]),LChoice(Call(SVar("stop"),[Call(SVar("x"),[])]),All(Call(SVar("x"),[])))))),SDef("bottomupS",[DefaultVarDec("s"),VarDec("stop",FunType([ConstType(Var("a")),FunType([ConstType(Var("a"))],ConstType(Var("a")))],ConstType(Var("a"))))],Rec("x",Seq(LChoice(Call(SVar("stop"),[Call(SVar("x"),[])]),All(Call(SVar("x"),[]))),Call(SVar("s"),[])))),SDef("downupS",[DefaultVarDec("s"),VarDec("stop",FunType([ConstType(Var("a")),FunType([ConstType(Var("a"))],ConstType(Var("a")))],ConstType(Var("a"))))],Rec("x",Seq(Call(SVar("s"),[]),Seq(LChoice(Call(SVar("stop"),[Call(SVar("x"),[])]),All(Call(SVar("x"),[]))),Call(SVar("s"),[]))))),SDef("downupS",[DefaultVarDec("s1"),DefaultVarDec("s2"),VarDec("stop",FunType([ConstType(Var("a")),FunType([ConstType(Var("a"))],ConstType(Var("a")))],ConstType(Var("a"))))],Rec("x",Seq(Call(SVar("s1"),[]),Seq(LChoice(Call(SVar("stop"),[Call(SVar("x"),[])]),All(Call(SVar("x"),[]))),Call(SVar("s2"),[]))))),SDef("don't-stop",[DefaultVarDec("s")],Fail),SDef("spinetd",[DefaultVarDec("s")],Rec("x",Seq(Call(SVar("s"),[]),Call(SVar("try"),[One(Call(SVar("x"),[]))])))),SDef("spinebu",[DefaultVarDec("s")],Rec("x",Seq(Call(SVar("try"),[One(Call(SVar("x"),[]))]),Call(SVar("s"),[])))),SDef("spinetd'",[DefaultVarDec("s")],Rec("x",Seq(Call(SVar("s"),[]),Choice(One(Call(SVar("x"),[])),All(Fail))))),SDef("spinebu'",[DefaultVarDec("s")],Rec("x",Seq(Choice(One(Call(SVar("x"),[])),All(Fail)),Call(SVar("s"),[])))),SDef("somespinetd",[DefaultVarDec("s")],Rec("x",Seq(Call(SVar("s"),[]),Call(SVar("try"),[Some(Call(SVar("x"),[]))])))),SDef("somespinebu",[DefaultVarDec("s")],Rec("x",Seq(Call(SVar("try"),[Some(Call(SVar("x"),[]))]),Call(SVar("s"),[])))),SDef("spinetd'",[DefaultVarDec("s")],Rec("x",Seq(Call(SVar("s"),[]),Choice(One(Call(SVar("x"),[])),All(Fail))))),SDef("spinebu'",[DefaultVarDec("s")],Rec("x",Seq(Choice(One(Call(SVar("x"),[])),All(Fail)),Call(SVar("s"),[])))),SDef("oncetd",[DefaultVarDec("s")],Rec("x",LChoice(Call(SVar("s"),[]),One(Call(SVar("x"),[]))))),SDef("oncebu",[DefaultVarDec("s")],Rec("x",LChoice(One(Call(SVar("x"),[])),Call(SVar("s"),[])))),SDef("oncetd",[DefaultVarDec("s"),VarDec("skip",FunType([ConstType(Var("a")),FunType([ConstType(Var("a"))],ConstType(Var("a")))],ConstType(Var("a"))))],Rec("x",LChoice(Call(SVar("s"),[]),LChoice(Call(SVar("skip"),[Call(SVar("x"),[])]),One(Call(SVar("x"),[])))))),SDef("oncetd-stop",[DefaultVarDec("s"),VarDec("stop",FunType([ConstType(Var("a")),FunType([ConstType(Var("a"))],ConstType(Var("a")))],ConstType(Var("a"))))],Seq(Call(SVar("obsolete"),[Build(Str("oncetd-stop"))]),Rec("x",LChoice(Call(SVar("s"),[]),Seq(Not(Call(SVar("stop"),[Id])),One(Call(SVar("x"),[]))))))),SDef("sometd",[DefaultVarDec("s")],Rec("x",LChoice(Call(SVar("s"),[]),Some(Call(SVar("x"),[]))))),SDef("somebu",[DefaultVarDec("s")],Rec("x",LChoice(Some(Call(SVar("x"),[])),Call(SVar("s"),[])))),SDef("alltd",[DefaultVarDec("s")],Rec("x",LChoice(Call(SVar("s"),[]),All(Call(SVar("x"),[]))))),SDef("alldownup2",[DefaultVarDec("s1"),DefaultVarDec("s2")],Rec("x",Seq(LChoice(Call(SVar("s1"),[]),All(Call(SVar("x"),[]))),Call(SVar("s2"),[])))),SDef("downup2'-obsolete",[DefaultVarDec("s1"),DefaultVarDec("s2")],Rec("x",Seq(LChoice(Call(SVar("s1"),[]),All(Call(SVar("x"),[]))),Call(SVar("s2"),[])))),SDef("alltd-fold",[DefaultVarDec("s1"),DefaultVarDec("s2")],Rec("x",LChoice(Call(SVar("s1"),[]),Seq(All(Call(SVar("x"),[])),Call(SVar("s2"),[]))))),SDef("leaves",[DefaultVarDec("s"),DefaultVarDec("is-leaf"),VarDec("skip",FunType([ConstType(Var("a")),FunType([ConstType(Var("a"))],ConstType(Var("a")))],ConstType(Var("a"))))],Rec("x",LChoice(Seq(Call(SVar("is-leaf"),[]),Call(SVar("s"),[])),LChoice(Call(SVar("skip"),[Call(SVar("x"),[])]),All(Call(SVar("x"),[])))))),SDef("leaves",[DefaultVarDec("s"),DefaultVarDec("is-leaf")],Rec("x",LChoice(Seq(Call(SVar("is-leaf"),[]),Call(SVar("s"),[])),All(Call(SVar("x"),[]))))),SDef("is-leaf",[],All(Fail)),SDef("manybu",[DefaultVarDec("s")],Rec("x",LChoice(Seq(Some(Call(SVar("x"),[])),Call(SVar("try"),[Call(SVar("s"),[])])),Call(SVar("s"),[])))),SDef("manytd",[DefaultVarDec("s")],Rec("x",LChoice(Seq(Call(SVar("s"),[]),All(Call(SVar("try"),[Call(SVar("x"),[])]))),Some(Call(SVar("x"),[]))))),SDef("somedownup",[DefaultVarDec("s")],Rec("x",LChoice(Seq(Call(SVar("s"),[]),Seq(All(Call(SVar("x"),[])),Call(SVar("try"),[Call(SVar("s"),[])]))),Seq(Some(Call(SVar("x"),[])),Call(SVar("try"),[Call(SVar("s"),[])]))))),SDef("breadthfirst",[DefaultVarDec("s")],Rec("x",Seq(All(Call(SVar("s"),[])),All(Call(SVar("x"),[])))))]),Strategies([SDef("repeat",[DefaultVarDec("s"),DefaultVarDec("c")],Rec("x",LChoice(Seq(Call(SVar("s"),[]),Call(SVar("x"),[])),Call(SVar("c"),[])))),SDef("repeat",[DefaultVarDec("s")],Call(SVar("repeat"),[Call(SVar("s"),[]),Id])),SDef("repeat1",[DefaultVarDec("s"),DefaultVarDec("c")],Rec("x",Seq(Call(SVar("s"),[]),LChoice(Call(SVar("x"),[]),Call(SVar("c"),[]))))),SDef("repeat1",[DefaultVarDec("s")],Call(SVar("repeat1"),[Call(SVar("s"),[]),Id])),SDef("repeat-until",[DefaultVarDec("s"),DefaultVarDec("c")],Rec("x",Seq(Call(SVar("s"),[]),LChoice(Call(SVar("c"),[]),Call(SVar("x"),[]))))),SDef("while",[DefaultVarDec("c"),DefaultVarDec("s")],Rec("x",Call(SVar("try"),[Seq(Call(SVar("c"),[]),Seq(Call(SVar("s"),[]),Call(SVar("x"),[])))]))),SDef("do-while",[DefaultVarDec("s"),DefaultVarDec("c")],Rec("x",Seq(Call(SVar("s"),[]),Call(SVar("try"),[Seq(Call(SVar("c"),[]),Call(SVar("x"),[]))])))),SDef("while-not",[DefaultVarDec("c"),DefaultVarDec("s")],Rec("x",LChoice(Call(SVar("c"),[]),Seq(Call(SVar("s"),[]),Call(SVar("x"),[]))))),SDef("for",[DefaultVarDec("i"),DefaultVarDec("c"),DefaultVarDec("s")],Seq(Call(SVar("i"),[]),Call(SVar("while-not"),[Call(SVar("c"),[]),Call(SVar("s"),[])])))]),Signature([Constructors([OpDecl("CUT",ConstType(Var("Control")))])]),Strategies([SDef("try",[DefaultVarDec("s")],LChoice(Call(SVar("s"),[]),Id)),SDef("if",[DefaultVarDec("c"),DefaultVarDec("b")],Call(SVar("try"),[Seq(Call(SVar("c"),[]),Call(SVar("b"),[]))])),SDef("cut",[DefaultVarDec("s")],LChoice(Call(SVar("s"),[]),Build(Op("CUT",[])))),SDef("cutchoice",[DefaultVarDec("s1"),DefaultVarDec("s2")],Seq(LChoice(Call(SVar("s1"),[]),Call(SVar("s2"),[])),Not(Match(Op("CUT",[]))))),SDef("if",[DefaultVarDec("c"),DefaultVarDec("b1"),DefaultVarDec("b2")],Call(SVar("cutchoice"),[Seq(Call(SVar("c"),[]),Call(SVar("cut"),[Call(SVar("b1"),[])])),Call(SVar("b2"),[])])),SDef("ior",[DefaultVarDec("a"),DefaultVarDec("b")],LChoice(Seq(Call(SVar("a"),[]),Call(SVar("try"),[Call(SVar("b"),[])])),Call(SVar("b"),[]))),SDef("eq",[],Scope(["x"],Match(Op("",[Var("x"),Var("x")])))),SDef("FAIL",[],Seq(Call(SVar("obsolete"),[Build(Str("FAIL: use fail"))]),Fail)),SDef("restore",[DefaultVarDec("s"),DefaultVarDec("rest")],LChoice(Call(SVar("s"),[]),Seq(Call(SVar("rest"),[]),Fail))),SDef("restore-always",[DefaultVarDec("s"),DefaultVarDec("rest")],LChoice(Seq(Call(SVar("s"),[]),Call(SVar("rest"),[])),Seq(Call(SVar("rest"),[]),Fail)))]),Rules([RDef("A",[],Rule(Op("F",[Var("x"),Con(Var("a"),Op("G",[Var("x")]),Call(SVar("oncetd"),[])),Var("b")]),Op("F",[Var("x"),Con(Var("a"),Op("H",[Var("b")]),Call(SVar("oncetd"),[])),Var("b")]),Id)),RDef("StringsWithQuotes",[],Rule(Str("\"quoted\""),Str("unquoted"),Id))]),Signature([]),Overlays([Overlay("Pair",["x","y"],Op("",[Var("x"),Var("y")]))]),Signature([Sorts([Sort("List",[Var("Type")])]),Constructors([OpDecl("Nil",ConstType(Op("List",[Var("a")]))),OpDecl("Cons",FunType([ConstType(Var("a")),ConstType(Op("List",[Var("a")]))],ConstType(Op("List",[Var("a")]))))])])])
