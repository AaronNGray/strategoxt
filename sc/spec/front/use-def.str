module use-def
imports Stratego list-set stratlib lib bound-unbound-vars 
strategies

  use-def-io =
    io-wrap(where(spec-use-def))

  /**
   * Test whether all variables used in builds are matched before.
   *
   * This analysis makes use of bound-unbound-vars to the real work.
   */

  spec-use-def = 
    Specification([Signature(id),
                   Overlays(defs-use-def),
		   Strategies(defs-use-def)])

  defs-use-def =
    [] <+ where(filter(def-use-def); [])

  def-use-def = 
  where(
    {| Context, MarkVar :
      !Scope(<tvars>, <id>)
      ; mark-scope
      ; ?Scope(_, <id>)
      ; (sdef-ud <+ rdef-ud <+ overlay-ud)
      ; debug(!"Error: ")
    |}
  )

  sdef-ud =
    ?|[ f(as) = s ]|
    ; where(
        rules(
	  Context : msg -> ["** Error in definition ", f, ": " | msg]
	  Warning : msg -> ["* Warning in definition ", f, ": " | msg] 
	)
       ; <unbound-vars> s
      )

  sdef-ud =
    ?|[ f(a1* | a2*) = s ]|
    ; where(
        rules(
	  Context : msg -> ["** Error in definition ", f, ": " | msg]
	  Warning : msg -> ["* Warning in definition ", f, ": " | msg] )
        ; <unbound-vars> s
      )

  rdef-ud =
    ?|[ f(as) : t1 -> t2 where s ]|
    ; where(
        rules(
	  Context : msg -> ["** Error in rule ", f, ": " | msg]
	  Warning : msg -> ["* Warning in rule ", f, ": " | msg] 
	)
	; <bind-vars> t1
        + <unbound-vars> s
        + <use-vars> t2
      )

  rdef-ud =
    ?|[ f(a1* | a2*) : t1 -> t2 where s ]|
    ; where(
        rules( 
	  Context : msg -> ["** Error in rule ", f, ": " | msg] 
	  Warning : msg -> ["* Warning in rule ", f, ": " | msg] 
	)
	; <bind-vars> t1
        + <unbound-vars> s
        + <use-vars> t2
      )

  rdef-ud =
    ?RDefT(f, as1, as2, StratRule(s1, s2, s3))
    ; where(
        rules( 
	  Context : msg -> ["** Error in rule ", f, ": " | msg] 
	  Warning : msg -> ["* Warning in rule ", f, ": " | msg] 
	)
        ; <unbound-vars> (s1, s2, s3)
      )

  overlay-ud =
    ?Overlay|[ f(x*) = t ]|
    ; where(
        rules( 
	  Context : msg -> ["** Error in overlay ", f, ": " | msg] 
	  Warning : msg -> ["* Warning in overlay ", f, ": " | msg] 
	)
        ; <use-vars> t
      )

  unbound-vars = 
    Build(id)         < Build(use-vars)
    + Match(id)	      < Match(bind-vars)
    + Rule(id,id,id)  < (Rule(bind-vars,id,id)
			 + Rule(id,id,unbound-vars)
			 + Rule(id,use-vars,id))
    + some(unbound-vars)

  bind-vars = 
      Var(id)     < fail
    + App(id,id)  < App(unbound-vars, use-vars)
    + RootApp(id) < RootApp(unbound-vars)
    + some(bind-vars)

  use-vars = 
      ?Var(x){a*} < where(!a*; ( ?["bound"]     < fail
		               + ?["(un)bound"] < <MaybeUnbound> Var(x); fail
		               + ?["unbound"]   < <Unbound> Var(x)
		               + ?[]            ; <Unbound> Var(x)))
    + App(id,id)  < App(unbound-vars, use-vars)
    + RootApp(id) < RootApp(unbound-vars)
    + some(use-vars)

  Unbound = 
    ?Var(x)
    ; <Context; error> ["variable '", x, "' used, but not bound"]

  MaybeUnbound = 
    ?Var(x)
    ; <Warning; error> ["variable '", x, "' used, but may not be bound"]

\end{code}

% Copyright (C) 1998-2003 Eelco Visser <visser@acm.org>
% 
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2, or (at your option)
% any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
% 02111-1307, USA.
