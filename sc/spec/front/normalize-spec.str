module normalize-spec
imports Stratego lib desugar lift-dynamic-rules

/* The first phase of the front-end is the normalization of
specifications. A specification consists of a list of basic
specifications (signatures, overlays, rules and strategy definitions)
in any order. Normalization collects the basic specifications of each
kind and creates a specification of the form. */

strategies

  normalize-specIO = 
    iowrap(normalize-spec)

  normalize-spec =
    CombineSections
    ; topdown(try(HL))		// remove syntactic sugar
    ; vars-to-consts
    ; define-lrules
    ; LiftDynamicRules
    ; topdown(try(HL))		// remove syntactic sugar
    ; Specification(fetch(\ Constructors(decls) -> Signature([Constructors(decls)]) \ ))

// Combine sections of the same sort into single sections

  CombineSections =
    Specification(
      foldr(![Constructors([]),Overlays([]),Strategies([])]
	   , InsertBSpec
	   , try(GetConstructors + RulesToStrategies))
    )

  GetConstructors :
    Signature(decls) -> 
    Constructors(<filter(?Constructors(<id>)); concat> decls)

  RulesToStrategies :
    Rules(rd*) -> Strategies(rd*)

  InsertBSpec =
    ?(section#([decls1]), <id>)
    ; fetch({decls2: (section#([decls2]) -> section#([<conc>(decls2,decls1)]))})

// Rename syntactic variables to nullary constructors if declared in the signature

  vars-to-consts =
    {| VarToConst :
       Specification(map(try(Constructors(map(try(DeclareVarToConst))) 
			     + Overlays(map(try(DeclareVarToConst))))))
     ; alltd(VarToConst)
     |}

  DeclareVarToConst =
    ?|[ x : t ]|
    ; rules( VarToConst : Term|[ x ]| -> Term|[ x() ]| )

  DeclareVarToConst =
    ?Overlay|[ x() = t ]|
    ; rules( VarToConst : Term|[ x ]| -> Term|[ x() ]| )

// Define explicit variable scopes for \ ... \ rules 

  define-lrules = 
    bottomup(try(DefLRule + DefScopeDefault))

  DefLRule : 
    |[ \ t1 -> t2 where s \ ]| ->
    |[ { ~<tvars> t1 : (t1 -> t2 where s) } ]|

  DefScopeDefault :
    |[ { s } ]| -> |[ { ~<tvars> s : s } ]|
\end{code}

% Copyright (C) 1998-2002 Eelco Visser <visser@acm.org>
% 
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2, or (at your option)
% any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
% 02111-1307, USA.

