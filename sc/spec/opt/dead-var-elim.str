
module dead-var-elim
imports stratlib lib
strategies
 
  dead-var-elim-io =
    iowrap(dead-var-elim)

  dead-var-elim =
    Specification(
      [Signature(id),
       Strategies(
	 map(dead-var-elim)
        )
      ])

  remove-annotations-from-vars = 
    alltd(\ Var(x){_} -> Var(x) \ )

  dead-var-elim = rec dve(
    elim-scope(dve)
    <+ elim-sdef(dve)
    <+ MarkBuild
    <+ PrimT(id, reverse-map(dve), reverse-map(mark-build-term))
    <+ CallT(id, reverse-map(dve), reverse-map(mark-build-term))
    <+ Seq(id, dve); Seq(dve, id) 
    <+ elim-choice(dve)
    <+ elim-lchoice(dve)
    <+ elim-guardedlchoice(dve)
    <+ EliminateFromMatch
    <+ all-rl(dve)
  )

  all-rl(x) = 
    id # ( reverse-map(x) )

  elim-sdef(x) =
    ?SDefT(_,_,_,_)
    ; {| ElimVar :
           SDefT(id, id, map(where(?VarDec(<id>,_); DeclareAlive)), x)
      |}

  elim-scope(x) =
    ?Scope(_,_)
    ; {| ElimVar :
           Scope(map(DeclareDead), x)
           ; EliminateFromScope
      |}

  DeclareDead =
    ?x; rules(ElimVar : Var(x) -> Wld)

  EliminateFromScope =
    Scope(filter(not(!Var(<id>); ElimVar)), id)

  DeclareAlive =
    ?x; rules(ElimVar : Var(x) -> Undefined)

  mark-build-term =
    alltd(where({?Var(x); override rules(ElimVar : Var(x) -> Undefined)}))

  MarkBuild =
    Build(mark-build-term)

  EliminateFromMatch =
    Match(
      alltd(
        {x : (?Var(x){"bound"} + ?Var(x){"(un)bound"} + ?Var(x){})
         ; override rules(ElimVar : Var(x) -> Undefined)}
      )
      ; alltd(?Var(<!Var(<id>)>){_}; ElimVar)
    )

strategies // Choice 

  elim-choice(uv) =
    Choice(id, id)
    ; elim-abstract-choice(Choice(uv,id),Choice(id, uv))

  elim-lchoice(uv) =
    LChoice(id, id)
    ; elim-abstract-choice(LChoice(uv,id),LChoice(id, uv))

  elim-guardedlchoice(uv) =
    GuardedLChoice(id, id, id)
    ; elim-abstract-choice(GuardedLChoice(id,uv,id); GuardedLChoice(uv,id,id)
	           ,GuardedLChoice(id,id,uv))

  elim-abstract-choice(left, right) =
    where(save-ElimVar => bnd0)
    ; left
    ; where(
	save-ElimVar => bndL; <restore-ElimVar> bnd0
      )
    ; right
    ; where(
        <isect-ElimVar> bndL
      )

strategies // Dynamic rule manipulation

  save-ElimVar =
    <table-getlist> "ElimVar"

  clean-ElimVar =
    where(<table-destroy> "ElimVar";
          <table-putlist>("ElimVar", []))

  restore-ElimVar = ?tbl;
    where(<table-destroy> "ElimVar";
          <table-putlist>("ElimVar", tbl))

  isect-ElimVar =
     map(try(?(Scopes,_)
        <+ {?(key, [Defined(_)|_]);
            (where(<table-get> ("ElimVar", key) => [Defined(_)|_])
             <+ !(key, [Undefined]))
           }))
    ; restore-ElimVar
