\literate[{\btt stratego-laws}]

	This module specifies basic simplification rules for strategies.

\begin{code}
module stratego-laws
imports Stratego desugar list scope-laws bind-laws idfail-laws
        congruence-laws build-match-laws
strategies

  Simplify = 
    ElimId
    + ElimFail 
    + HL
    + AssociateR
    + Idempotency
    + EmptyScope
    + LetNoDefs
    + LetHoist
    + BuildMatch
    + MatchSimplify

  DefineCongruences =
    (MatchingCongruence <+ TransformingAnnoCongruence <+ TransformingCongruence)

  Optimize =
    Simplify
    + HoistLet 
    + FuseScope
    + WidenScope
    + WhereSavesCurrentTerm
    + TestSavesCurrentTerm

  simplify0 = 
    downup(repeat(Simplify))

  simplify = 
    downup(repeat(Optimize))

  simplify-widen = // note same as simplify
    downup(repeat(Optimize + WidenScope))

  simplify-narrow =
    topdown(try(NarrowScope))

  simplify-clean =
    topdown(try(CleanupScope; try(FuseScope)))

  simplify-lift =
    downup2(repeat(Optimize + LiftPrimArgs + LiftCallArgs)
	   ,repeat(Optimize))

rules

  Commutativity : 
    Choice(x, y) -> Choice(y, x)

  AssociateR: 
    Choice(Choice(x, y), z) -> Choice(x, Choice(y, z))

  AssociateR : 
    Seq(Seq(x, y), z) -> Seq(x, Seq(y, z))

  AssociateR : 
    LChoice(LChoice(x, y), z) -> LChoice(x, LChoice(y, z))
 
  AssociateL: 
    Seq(s1, Seq(s2, s3)) -> Seq(Seq(s1, s2), s3)

  Idempotency :
    Choice(x, x)  -> x
  Idempotency :
    LChoice(x, x) -> x
  Idempotency :
    Where(Where(s))  -> Where(s)
  Idempotency :
    Not(Not(s)) -> Test(s)
  Idempotency :
    Test(Test(s)) -> Test(s)
  Idempotency :
    Where(Seq(Where(s1), Seq(Build(t), s2))) ->
    Where(Seq(s1, Seq(Build(t), s2)))
\end{code}

% Copyright (C) 1998-2003 Eelco Visser <visser@acm.org>

