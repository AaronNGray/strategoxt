regular tree grammar
  start Strategy Module
  productions
    f_0         -> d_0
    f_0         -> <nil>()
    f_0         -> <conc>(f_0,f_0)
    d_0         -> <conc>(f_0,d_0)
    d_0         -> <conc>(d_0,f_0)
    d_0         -> <conc>(d_0,d_0)
    d_0         -> <cons>(Id,f_0)
    h_0         -> g_0
    h_0         -> <nil>()
    h_0         -> <conc>(h_0,h_0)
    g_0         -> <conc>(h_0,g_0)
    g_0         -> <conc>(g_0,h_0)
    g_0         -> <conc>(g_0,g_0)
    g_0         -> <cons>(Typedid,h_0)
    n_0         -> m_0
    n_0         -> <nil>()
    n_0         -> <conc>(n_0,n_0)
    m_0         -> <conc>(n_0,m_0)
    m_0         -> <conc>(m_0,n_0)
    m_0         -> <conc>(m_0,m_0)
    m_0         -> <cons>(Overlay,n_0)
    p_0         -> o_0
    p_0         -> <nil>()
    p_0         -> <conc>(p_0,p_0)
    o_0         -> <conc>(p_0,o_0)
    o_0         -> <conc>(o_0,p_0)
    o_0         -> <conc>(o_0,o_0)
    o_0         -> <cons>(Def,p_0)
    u_0         -> t_0
    u_0         -> <nil>()
    u_0         -> <conc>(u_0,u_0)
    t_0         -> <conc>(u_0,t_0)
    t_0         -> <conc>(t_0,u_0)
    t_0         -> <conc>(t_0,t_0)
    t_0         -> <cons>(Strategy,u_0)
    w_0         -> v_0
    w_0         -> <nil>()
    w_0         -> <conc>(w_0,w_0)
    v_0         -> <conc>(w_0,v_0)
    v_0         -> <conc>(v_0,w_0)
    v_0         -> <conc>(v_0,v_0)
    v_0         -> <cons>(Term,w_0)
    y_0         -> x_0
    y_0         -> <nil>()
    y_0         -> <conc>(y_0,y_0)
    x_0         -> <conc>(y_0,x_0)
    x_0         -> <conc>(x_0,y_0)
    x_0         -> <conc>(x_0,x_0)
    x_0         -> <cons>(Sort,y_0)
    a_1         -> z_0
    a_1         -> <nil>()
    a_1         -> <conc>(a_1,a_1)
    z_0         -> <conc>(a_1,z_0)
    z_0         -> <conc>(z_0,a_1)
    z_0         -> <conc>(z_0,z_0)
    z_0         -> <cons>(Sdecl,a_1)
    c_1         -> b_1
    c_1         -> <nil>()
    c_1         -> <conc>(c_1,c_1)
    b_1         -> <conc>(c_1,b_1)
    b_1         -> <conc>(b_1,c_1)
    b_1         -> <conc>(b_1,b_1)
    b_1         -> <cons>(ModName,c_1)
    e_1         -> d_1
    e_1         -> <nil>()
    e_1         -> <conc>(e_1,e_1)
    d_1         -> <conc>(e_1,d_1)
    d_1         -> <conc>(d_1,e_1)
    d_1         -> <conc>(d_1,d_1)
    d_1         -> <cons>(Decl,e_1)
    g_1         -> f_1
    g_1         -> <nil>()
    g_1         -> <conc>(g_1,g_1)
    f_1         -> <conc>(g_1,f_1)
    f_1         -> <conc>(f_1,g_1)
    f_1         -> <conc>(f_1,f_1)
    f_1         -> <cons>(ID,g_1)
    i_1         -> h_1
    i_1         -> <nil>()
    i_1         -> <conc>(i_1,i_1)
    h_1         -> <conc>(i_1,h_1)
    h_1         -> <conc>(h_1,i_1)
    h_1         -> <conc>(h_1,h_1)
    h_1         -> <cons>(Type,i_1)
    k_1         -> j_1
    k_1         -> <nil>()
    k_1         -> <conc>(k_1,k_1)
    j_1         -> <conc>(k_1,j_1)
    j_1         -> <conc>(j_1,k_1)
    j_1         -> <conc>(j_1,j_1)
    j_1         -> <cons>(Opdecl,k_1)
    m_1         -> l_1
    m_1         -> <nil>()
    m_1         -> <conc>(m_1,m_1)
    l_1         -> <conc>(m_1,l_1)
    l_1         -> <conc>(l_1,m_1)
    l_1         -> <conc>(l_1,l_1)
    l_1         -> <cons>(Sort,m_1)
    Decl        -> Overlays(n_0)
    Overlay     -> Overlay(Id,f_0,Term)
    Strategy    -> GChoice(Strategy,Strategy)
    Strategy    -> Choice(Strategy,Strategy)
    Strategy    -> Where(Strategy)
    Strategy    -> Rec(Id,Strategy)
    Strategy    -> LChoice(Strategy,Strategy)
    Strategy    -> Call(SVar,u_0)
    Sort        -> SortTuple(y_0)
    Sort        -> SortListTl(y_0,Sort)
    Sort        -> SortList(y_0)
    Term        -> BuildDefault(Term)
    PreTerm     -> BuildDefault(Term)
    ID          -> LId
    Var         -> Var(LID)
    LID         -> ListVar(LId)
    Decl        -> Signature(a_1)
    Decl        -> Strategies(p_0)
    Decl        -> Imports(c_1)
    Module      -> Specification(e_1)
    Module      -> Module(ModName,e_1)
    Strategy    -> All(Strategy)
    Strategy    -> One(Strategy)
    Strategy    -> Some(Strategy)
    Strategy    -> Path(Int,Strategy)
    Strategy    -> PrimT(String,u_0,w_0)
    Strategy    -> Bagof(Strategy)
    StrategyMid -> Strategy
    Strategy    -> GuardedLChoice(Strategy,StrategyMid,Strategy)
    Strategy    -> LGChoice(Strategy,Strategy)
    Strategy    -> Seq(Strategy,Strategy)
    Strategy    -> Scope(g_1,Strategy)
    Strategy    -> Build(Term)
    Strategy    -> Match(Term)
    Strategy    -> Id()
    Strategy    -> Fail()
    Typedid     -> VarDec(ID,Type)
    StrategyDef -> ExtSDef(Id,h_0,h_0)
    StrategyDef -> ExtSDefInl(Id,h_0,h_0,Strategy)
    StrategyDef -> SDefT(Id,h_0,h_0,Strategy)
    Strategy    -> CallT(SVar,u_0,w_0)
    Strategy    -> Let(p_0,Strategy)
    SVar        -> SVar(Id)
    Def         -> StrategyDef
    Type        -> FunType(h_1,Type)
    Type        -> ConstType(Sort)
    Opdecl      -> OpDeclInj(Type)
    Opdecl      -> OpDeclQ(String,Type)
    Opdecl      -> OpDecl(Id,Type)
    Sort        -> Sort(Id,y_0)
    Sort        -> SortNoArgs(UCID)
    Sort        -> SortVar(LCID)
    Sdecl       -> Constructors(k_1)
    Sdecl       -> Sorts(m_1)
    Term        -> As(Var,Term)
    Term        -> Anno(PreTerm,PreTerm)
    PreTerm     -> Explode(Term,Term)
    PreTerm     -> OpQ(String,w_0)
    PreTerm     -> Op(Id,w_0)
    PreTerm     -> Str(String)
    PreTerm     -> Real(Real)
    PreTerm     -> Int(Int)
    Term        -> Wld()
    PreTerm     -> Wld()
    Term        -> Var
    PreTerm     -> Var
    Var         -> SeqVar(Var)
    ID          -> Id
    Var         -> Var(Id)
    String      -> <string>
    Real        -> <string>
    Int         -> <string>
    UCID        -> <string>
    LCID        -> <string>
    LId         -> <string>
    Id          -> <string>
    ModName     -> <string>
    Strategy    -> Cong(Id,u_0)
