regular tree grammar
  start Module
  productions
    c_0           -> a_0
    c_0           -> <nil>()
    c_0           -> <conc>(c_0,c_0)
    a_0           -> <conc>(c_0,a_0)
    a_0           -> <conc>(a_0,c_0)
    a_0           -> <conc>(a_0,a_0)
    a_0           -> <cons>(Sdecl,c_0)
    f_0           -> d_0
    f_0           -> <nil>()
    f_0           -> <conc>(f_0,f_0)
    d_0           -> <conc>(f_0,d_0)
    d_0           -> <conc>(d_0,f_0)
    d_0           -> <conc>(d_0,d_0)
    d_0           -> <cons>(Def,f_0)
    h_0           -> g_0
    h_0           -> <nil>()
    h_0           -> <conc>(h_0,h_0)
    g_0           -> <conc>(h_0,g_0)
    g_0           -> <conc>(g_0,h_0)
    g_0           -> <conc>(g_0,g_0)
    g_0           -> <cons>(ModName,h_0)
    j_0           -> i_0
    j_0           -> <nil>()
    j_0           -> <conc>(j_0,j_0)
    i_0           -> <conc>(j_0,i_0)
    i_0           -> <conc>(i_0,j_0)
    i_0           -> <conc>(i_0,i_0)
    i_0           -> <cons>(Decl,j_0)
    l_0           -> k_0
    l_0           -> <nil>()
    l_0           -> <conc>(l_0,l_0)
    k_0           -> <conc>(l_0,k_0)
    k_0           -> <conc>(k_0,l_0)
    k_0           -> <conc>(k_0,k_0)
    k_0           -> <cons>(Term,l_0)
    n_0           -> m_0
    n_0           -> <nil>()
    n_0           -> <conc>(n_0,n_0)
    m_0           -> <conc>(n_0,m_0)
    m_0           -> <conc>(m_0,n_0)
    m_0           -> <conc>(m_0,m_0)
    m_0           -> <cons>(Strategy,n_0)
    p_0           -> o_0
    p_0           -> <nil>()
    p_0           -> <conc>(p_0,p_0)
    o_0           -> <conc>(p_0,o_0)
    o_0           -> <conc>(o_0,p_0)
    o_0           -> <conc>(o_0,o_0)
    o_0           -> <cons>(ID,p_0)
    r_0           -> q_0
    r_0           -> <nil>()
    r_0           -> <conc>(r_0,r_0)
    q_0           -> <conc>(r_0,q_0)
    q_0           -> <conc>(q_0,r_0)
    q_0           -> <conc>(q_0,q_0)
    q_0           -> <cons>(Typedid,r_0)
    t_0           -> s_0
    t_0           -> <nil>()
    t_0           -> <conc>(t_0,t_0)
    s_0           -> <conc>(t_0,s_0)
    s_0           -> <conc>(s_0,t_0)
    s_0           -> <conc>(s_0,s_0)
    s_0           -> <cons>(Type,t_0)
    v_0           -> u_0
    v_0           -> <nil>()
    v_0           -> <conc>(v_0,v_0)
    u_0           -> <conc>(v_0,u_0)
    u_0           -> <conc>(u_0,v_0)
    u_0           -> <conc>(u_0,u_0)
    u_0           -> <cons>(Sort,v_0)
    x_0           -> w_0
    x_0           -> <nil>()
    x_0           -> <conc>(x_0,x_0)
    w_0           -> <conc>(x_0,w_0)
    w_0           -> <conc>(w_0,x_0)
    w_0           -> <conc>(w_0,w_0)
    w_0           -> <cons>(Opdecl,x_0)
    z_0           -> y_0
    z_0           -> <nil>()
    z_0           -> <conc>(z_0,z_0)
    y_0           -> <conc>(z_0,y_0)
    y_0           -> <conc>(y_0,z_0)
    y_0           -> <conc>(y_0,y_0)
    y_0           -> <cons>(Sort,z_0)
    a_1           -> <string>
    b_1           -> <string>
    c_1           -> <string>
    d_1           -> <string>
    e_1           -> <string>
    f_1           -> <string>
    Decl          -> Signature(c_0)
    Decl          -> Strategies(f_0)
    Decl          -> Imports(h_0)
    Module        -> Specification(j_0)
    Module        -> Module(ModName,j_0)
    Strategy      -> Thread(Strategy)
    Strategy      -> All(Strategy)
    Strategy      -> One(Strategy)
    Strategy      -> Some(Strategy)
    Strategy      -> Path(Int,Strategy)
    Strategy      -> PrimT(String,n_0,l_0)
    Strategy      -> Bagof(Strategy)
    StrategyMid   -> Strategy
    Strategy      -> GuardedLChoice(Strategy,StrategyMid,Strategy)
    Strategy      -> LGChoice(Strategy,Strategy)
    Strategy      -> Seq(Strategy,Strategy)
    Strategy      -> Scope(p_0,Strategy)
    Strategy      -> Build(Term)
    Strategy      -> Match(Term)
    Strategy      -> Id()
    Strategy      -> Fail()
    StrategyParen -> ParenStrat(Strategy)
    Typedid       -> VarDec(ID,Type)
    StrategyDef   -> ExtSDef(Id,r_0,r_0)
    StrategyDef   -> ExtSDefInl(Id,r_0,r_0,Strategy)
    StrategyDef   -> SDefT(Id,r_0,r_0,Strategy)
    Strategy      -> CallT(SVar,n_0,l_0)
    Strategy      -> Let(f_0,Strategy)
    SVar          -> SVar(Id)
    Def           -> StrategyDef
    Term          -> OpA(Constructor,l_0,l_0)
    Term          -> StrA(String,l_0)
    Term          -> RealA(Real,l_0)
    Term          -> IntA(Int,l_0)
    Term          -> As(Var,Term)
    Term          -> Var
    Constructor   -> Expl(Term)
    Constructor   -> StrC(String)
    Constructor   -> Con(Id)
    Var           -> SeqVar(Var)
    ID            -> Id
    Var           -> WldA(l_0)
    Var           -> VarA(Id,l_0)
    Var           -> Wld()
    Var           -> Var(Id)
    Type          -> FunType(s_0,Type)
    Type          -> ConstType(Sort)
    Opdecl        -> OpDeclInj(Type)
    Opdecl        -> OpDeclQ(String,Type)
    Opdecl        -> OpDecl(Id,Type)
    Sort          -> Sort(Id,v_0)
    Sort          -> SortNoArgs(UCID)
    Sort          -> SortVar(LCID)
    Sdecl         -> Constructors(x_0)
    Sdecl         -> Sorts(z_0)
    Asterisk2     -> <string>
    Asterisk1     -> <string>
    CommChar2     -> <string>
    CommChar1     -> <string>
    Eof           -> <string>
    LongCom       -> <string>
    ShortCom      -> <string>
    Ws            -> <string>
    UCID          -> <string>
    LCID          -> <string>
    LId           -> <string>
    Id            -> <string>
    ModName       -> <string>
    StrChar       -> <string>
    String        -> <string>
    Real          -> <string>
    Int           -> <string>
