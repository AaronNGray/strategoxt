regular tree grammar
  start Ws ShortCom LongCom CommChar1 CommChar2 Asterisk1 Asterisk2 VeryLongCom Eof VLCchar Backslash ModName Id LId LCID UCID Int Real String StrChar Char CharChar RuleDef Rule StratRule Sdecl Sort Kind Opdecl Type StrategyDef Typedid StrategyParen Strategy SVar StrategyMid StrategyCurly StrategyAngle Mod ID LID Var Term Overlay Module Decl Def DynRuleDef DynRuleId DynRuleScopeId RuleDec
  productions
    c_0            -> a_0
    c_0            -> <nil>()
    c_0            -> <conc>(c_0,c_0)
    a_0            -> <conc>(c_0,a_0)
    a_0            -> <conc>(a_0,c_0)
    a_0            -> <conc>(a_0,a_0)
    a_0            -> <cons>(RuleDef,c_0)
    f_0            -> d_0
    f_0            -> <nil>()
    f_0            -> <conc>(f_0,f_0)
    d_0            -> <conc>(f_0,d_0)
    d_0            -> <conc>(d_0,f_0)
    d_0            -> <conc>(d_0,d_0)
    d_0            -> <cons>(Id,f_0)
    h_0            -> g_0
    h_0            -> <nil>()
    h_0            -> <conc>(h_0,h_0)
    g_0            -> <conc>(h_0,g_0)
    g_0            -> <conc>(g_0,h_0)
    g_0            -> <conc>(g_0,g_0)
    g_0            -> <cons>(Typedid,h_0)
    j_0            -> i_0
    j_0            -> <nil>()
    j_0            -> <conc>(j_0,j_0)
    i_0            -> <conc>(j_0,i_0)
    i_0            -> <conc>(i_0,j_0)
    i_0            -> <conc>(i_0,i_0)
    i_0            -> <cons>(DynRuleDef,j_0)
    l_0            -> k_0
    l_0            -> <nil>()
    l_0            -> <conc>(l_0,l_0)
    k_0            -> <conc>(l_0,k_0)
    k_0            -> <conc>(k_0,l_0)
    k_0            -> <conc>(k_0,k_0)
    k_0            -> <cons>(DynRuleScopeId,l_0)
    n_0            -> m_0
    n_0            -> <nil>()
    n_0            -> <conc>(n_0,n_0)
    m_0            -> <conc>(n_0,m_0)
    m_0            -> <conc>(m_0,n_0)
    m_0            -> <conc>(m_0,m_0)
    m_0            -> <cons>(Overlay,n_0)
    p_0            -> o_0
    p_0            -> <nil>()
    p_0            -> <conc>(p_0,p_0)
    o_0            -> <conc>(p_0,o_0)
    o_0            -> <conc>(o_0,p_0)
    o_0            -> <conc>(o_0,o_0)
    o_0            -> <cons>(Sdecl,p_0)
    r_0            -> q_0
    r_0            -> <nil>()
    r_0            -> <conc>(r_0,r_0)
    q_0            -> <conc>(r_0,q_0)
    q_0            -> <conc>(q_0,r_0)
    q_0            -> <conc>(q_0,q_0)
    q_0            -> <cons>(Def,r_0)
    t_0            -> s_0
    t_0            -> <nil>()
    t_0            -> <conc>(t_0,t_0)
    s_0            -> <conc>(t_0,s_0)
    s_0            -> <conc>(s_0,t_0)
    s_0            -> <conc>(s_0,s_0)
    s_0            -> <cons>(ModName,t_0)
    v_0            -> u_0
    v_0            -> <nil>()
    v_0            -> <conc>(v_0,v_0)
    u_0            -> <conc>(v_0,u_0)
    u_0            -> <conc>(u_0,v_0)
    u_0            -> <conc>(u_0,u_0)
    u_0            -> <cons>(Decl,v_0)
    x_0            -> w_0
    x_0            -> <nil>()
    x_0            -> <conc>(x_0,x_0)
    w_0            -> <conc>(x_0,w_0)
    w_0            -> <conc>(w_0,x_0)
    w_0            -> <conc>(w_0,w_0)
    w_0            -> <cons>(Term,x_0)
    y_0            -> <(2)>(Strategy,Strategy)
    a_1            -> z_0
    a_1            -> <nil>()
    a_1            -> <conc>(a_1,a_1)
    z_0            -> <conc>(a_1,z_0)
    z_0            -> <conc>(z_0,a_1)
    z_0            -> <conc>(z_0,z_0)
    z_0            -> <cons>(y_0,a_1)
    c_1            -> b_1
    c_1            -> <nil>()
    c_1            -> <conc>(c_1,c_1)
    b_1            -> <conc>(c_1,b_1)
    b_1            -> <conc>(b_1,c_1)
    b_1            -> <conc>(b_1,b_1)
    b_1            -> <cons>(Strategy,c_1)
    e_1            -> d_1
    e_1            -> <nil>()
    e_1            -> <conc>(e_1,e_1)
    d_1            -> <conc>(e_1,d_1)
    d_1            -> <conc>(d_1,e_1)
    d_1            -> <conc>(d_1,d_1)
    d_1            -> <cons>(ID,e_1)
    g_1            -> f_1
    g_1            -> <nil>()
    g_1            -> <conc>(g_1,g_1)
    f_1            -> <conc>(g_1,f_1)
    f_1            -> <conc>(f_1,g_1)
    f_1            -> <conc>(f_1,f_1)
    f_1            -> <cons>(Type,g_1)
    i_1            -> h_1
    i_1            -> <nil>()
    i_1            -> <conc>(i_1,i_1)
    h_1            -> <conc>(i_1,h_1)
    h_1            -> <conc>(h_1,i_1)
    h_1            -> <conc>(h_1,h_1)
    h_1            -> <cons>(Sort,i_1)
    k_1            -> j_1
    k_1            -> <nil>()
    k_1            -> <conc>(k_1,k_1)
    j_1            -> <conc>(k_1,j_1)
    j_1            -> <conc>(j_1,k_1)
    j_1            -> <conc>(j_1,j_1)
    j_1            -> <cons>(Opdecl,k_1)
    m_1            -> l_1
    m_1            -> <nil>()
    m_1            -> <conc>(m_1,m_1)
    l_1            -> <conc>(m_1,l_1)
    l_1            -> <conc>(l_1,m_1)
    l_1            -> <conc>(l_1,l_1)
    l_1            -> <cons>(Sort,m_1)
    n_1            -> <string>
    o_1            -> <string>
    p_1            -> <string>
    q_1            -> <string>
    r_1            -> <string>
    s_1            -> <string>
    t_1            -> <string>
    u_1            -> <string>
    Strategy       -> ExtendOverrideDynamicRules(c_0)
    Strategy       -> ExtendDynamicRules(c_0)
    Strategy       -> OverrideDynamicRules(c_0)
    Strategy       -> DynRuleUnion(Strategy,f_0,Strategy)
    Strategy       -> DynRuleIntersect(Strategy,f_0,Strategy)
    Strategy       -> DynRuleUnionFix(f_0,Strategy)
    Strategy       -> DynRuleIntersectFix(f_0,Strategy)
    RuleDec        -> RDecT(Id,h_0,h_0)
    RuleDec        -> RDec(Id,h_0)
    RuleDec        -> RDecNoArgs(Id)
    DynRuleScopeId -> DynRuleScopeId(Id)
    DynRuleScopeId -> LabeledDynRuleScopeId(Id,Term)
    DynRuleId      -> DynRuleId(RuleDec)
    DynRuleId      -> AddLabelDynRuleId(RuleDec,Term)
    DynRuleId      -> LabeledDynRuleId(RuleDec,Term)
    DynRuleDef     -> SetDynRuleMatch(DynRuleId,Term)
    DynRuleDef     -> AddDynRule(DynRuleId,Rule)
    DynRuleDef     -> SetDynRule(DynRuleId,Rule)
    DynRuleDef     -> UndefineDynRule(DynRuleId,Term)
    DynRuleDef     -> AddScopeLabel(Id,Term)
    Strategy       -> GenDynRules(j_0)
    Strategy       -> DynRuleScope(l_0,Strategy)
    Def            -> RuleDef
    Def            -> StrategyDef
    Decl           -> Overlays(n_0)
    Decl           -> Signature(p_0)
    Decl           -> Strategies(r_0)
    Decl           -> Rules(r_0)
    Decl           -> Imports(t_0)
    Module         -> Specification(v_0)
    Module         -> Module(ModName,v_0)
    Overlay        -> Overlay(Id,f_0,Term)
    Overlay        -> OverlayNoArgs(Id,Term)
    Term           -> Con4(Var,Term,Strategy,Id)
    Term           -> Con3(Var,Term,Strategy)
    Term           -> Con(Var,Term,Id)
    Term           -> Con1(Var,Term)
    Term           -> BuildDefault(Term)
    Term           -> ListTail(x_0,Term)
    Term           -> List(x_0)
    Term           -> Tuple(x_0)
    Term           -> As(Var,Term)
    Term           -> RootApp(StrategyAngle)
    Term           -> App(Strategy,Term)
    Term           -> Anno(Term,x_0)
    Term           -> Explode(Term,Term)
    Term           -> OpQ(String,x_0)
    Term           -> Op(Id,x_0)
    Term           -> Var
    Term           -> Wld()
    Term           -> Char(Char)
    Term           -> Str(String)
    Term           -> Real(Real)
    Term           -> Int(Int)
    Var            -> SeqVar(Var)
    ID             -> LId
    ID             -> Id
    Var            -> Var(LID)
    LID            -> ListVar(LId)
    Var            -> Var(Id)
    Strategy       -> AM(Strategy,Term)
    Strategy       -> SwitchChoice(Strategy,a_1,Strategy)
    Strategy       -> SwitchChoiceNoOtherwise(Strategy,a_1)
    Strategy       -> CondChoice(Strategy,Strategy,Strategy)
    Strategy       -> RGChoice(Strategy,Strategy)
    Strategy       -> GChoice(Strategy,Strategy)
    Strategy       -> RChoice(Strategy,Strategy)
    Strategy       -> Choice(Strategy,Strategy)
    Strategy       -> SRule(Rule)
    Strategy       -> LRule(Rule)
    Strategy       -> CallNoArgs(SVar)
    Strategy       -> ExplodeCong(Strategy,StrategyParen)
    Strategy       -> ListCong(c_1,Strategy)
    Strategy       -> ListCongNoTail(c_1)
    Mod            -> Mod(Id,Id)
    Strategy       -> ModCong(Mod,c_1)
    Strategy       -> ModCongNoArgs(Mod)
    Strategy       -> TupleCong(Strategy,b_1)
    Strategy       -> EmptyTupleCong()
    StrategyCurly  -> StrategyCurly(Strategy)
    Strategy       -> AnnoCong(Strategy,StrategyCurly)
    Strategy       -> CongQ(String,c_1)
    Strategy       -> CharCong(Char)
    Strategy       -> RealCong(Real)
    Strategy       -> IntCong(Int)
    Strategy       -> StrCong(String)
    Strategy       -> Thread(Strategy)
    Strategy       -> All(Strategy)
    Strategy       -> One(Strategy)
    Strategy       -> Some(Strategy)
    Strategy       -> Path(Int,Strategy)
    Strategy       -> PrimT(String,c_1,x_0)
    Strategy       -> Prim(String,x_0)
    Strategy       -> PrimNoArgs(String)
    Strategy       -> Bagof(Strategy)
    Strategy       -> Test(Strategy)
    Strategy       -> Where(Strategy)
    Strategy       -> Not(Strategy)
    Strategy       -> Rec(Id,Strategy)
    StrategyMid    -> Strategy
    Strategy       -> GuardedLChoice(Strategy,StrategyMid,Strategy)
    Strategy       -> LGChoice(Strategy,Strategy)
    Strategy       -> LChoice(Strategy,Strategy)
    Strategy       -> Seq(Strategy,Strategy)
    StrategyAngle  -> Strategy
    Strategy       -> BA(StrategyAngle,Term)
    Strategy       -> Scope(e_1,Strategy)
    Strategy       -> ScopeDefault(Strategy)
    Strategy       -> Build(Term)
    Strategy       -> Match(Term)
    Strategy       -> CallT(SVar,c_1,x_0)
    Strategy       -> Call(SVar,c_1)
    Strategy       -> Let(r_0,Strategy)
    SVar           -> SVar(Id)
    Strategy       -> Id()
    Strategy       -> Fail()
    StrategyParen  -> ParenStrat(Strategy)
    Typedid        -> VarDec(ID,Type)
    Typedid        -> DefaultVarDec(ID)
    StrategyDef    -> ExtSDef(Id,h_0,h_0)
    StrategyDef    -> ExtSDefInl(Id,h_0,h_0,Strategy)
    StrategyDef    -> SDefT(Id,h_0,h_0,Strategy)
    StrategyDef    -> SDef(Id,h_0,Strategy)
    StrategyDef    -> SDefNoArgs(Id,Strategy)
    Type           -> FunType(f_1,Type)
    Type           -> ConstType(Sort)
    Opdecl         -> OpDeclInj(Type)
    Opdecl         -> OpDeclQ(String,Type)
    Opdecl         -> OpDecl(Id,Type)
    Kind           -> StarStar()
    Kind           -> Star()
    Sort           -> SortTuple(i_1)
    Sort           -> SortListTl(i_1,Sort)
    Sort           -> SortList(i_1)
    Sort           -> Sort(Id,i_1)
    Sort           -> SortNoArgs(UCID)
    Sort           -> SortVar(LCID)
    Sdecl          -> Constructors(k_1)
    Sdecl          -> Sorts(m_1)
    StratRule      -> StratRule(Strategy,Strategy,Strategy)
    StratRule      -> StratRuleNoCond(Strategy,Strategy)
    Rule           -> Rule(Term,Term,Strategy)
    Rule           -> RuleNoCond(Term,Term)
    RuleDef        -> SRDefT(Id,h_0,h_0,StratRule)
    RuleDef        -> SRDef(Id,h_0,StratRule)
    RuleDef        -> SRDefNoArgs(Id,StratRule)
    RuleDef        -> RDefT(Id,h_0,h_0,Rule)
    RuleDef        -> RDef(Id,h_0,Rule)
    RuleDef        -> RDefNoArgs(Id,Rule)
    CharChar       -> <string>
    Char           -> <string>
    StrChar        -> <string>
    String         -> <string>
    Real           -> <string>
    Int            -> <string>
    UCID           -> <string>
    LCID           -> <string>
    LId            -> <string>
    Id             -> <string>
    ModName        -> <string>
    Backslash      -> <string>
    VLCchar        -> <string>
    Eof            -> <string>
    VeryLongCom    -> <string>
    Asterisk2      -> <string>
    Asterisk1      -> <string>
    CommChar2      -> <string>
    CommChar1      -> <string>
    LongCom        -> <string>
    ShortCom       -> <string>
    Ws             -> <string>
