regular tree grammar
  start Ws ShortCom LongCom CommChar1 CommChar2 Asterisk1 Asterisk2 Eof VeryLongCom Eof VLCchar Backslash ModName Id LId LCID UCID Int Real String StrChar Char CharChar ID LID Var Constructor Term Sdecl Sort Opdecl Type Def StrategyDef Typedid Strategy SVar StrategyParen StrategyMid Module Decl ID LID Var Sort Kind StrategyParen StrategyCurly StrategyAngle Mod Overlay RuleDef Rule StratRule Decl Def
  productions
    c_0           -> a_0
    c_0           -> <nil>()
    c_0           -> <conc>(c_0,c_0)
    a_0           -> <conc>(c_0,a_0)
    a_0           -> <conc>(a_0,c_0)
    a_0           -> <conc>(a_0,a_0)
    a_0           -> <cons>(Overlay,c_0)
    f_0           -> d_0
    f_0           -> <nil>()
    f_0           -> <conc>(f_0,f_0)
    d_0           -> <conc>(f_0,d_0)
    d_0           -> <conc>(d_0,f_0)
    d_0           -> <conc>(d_0,d_0)
    d_0           -> <cons>(Def,f_0)
    h_0           -> g_0
    h_0           -> <nil>()
    h_0           -> <conc>(h_0,h_0)
    g_0           -> <conc>(h_0,g_0)
    g_0           -> <conc>(g_0,h_0)
    g_0           -> <conc>(g_0,g_0)
    g_0           -> <cons>(Typedid,h_0)
    j_0           -> i_0
    j_0           -> <nil>()
    j_0           -> <conc>(j_0,j_0)
    i_0           -> <conc>(j_0,i_0)
    i_0           -> <conc>(i_0,j_0)
    i_0           -> <conc>(i_0,i_0)
    i_0           -> <cons>(Id,j_0)
    k_0           -> <(2)>(Strategy,Strategy)
    m_0           -> l_0
    m_0           -> <nil>()
    m_0           -> <conc>(m_0,m_0)
    l_0           -> <conc>(m_0,l_0)
    l_0           -> <conc>(l_0,m_0)
    l_0           -> <conc>(l_0,l_0)
    l_0           -> <cons>(k_0,m_0)
    o_0           -> n_0
    o_0           -> <nil>()
    o_0           -> <conc>(o_0,o_0)
    n_0           -> <conc>(o_0,n_0)
    n_0           -> <conc>(n_0,o_0)
    n_0           -> <conc>(n_0,n_0)
    n_0           -> <cons>(Strategy,o_0)
    q_0           -> p_0
    q_0           -> <nil>()
    q_0           -> <conc>(q_0,q_0)
    p_0           -> <conc>(q_0,p_0)
    p_0           -> <conc>(p_0,q_0)
    p_0           -> <conc>(p_0,p_0)
    p_0           -> <cons>(Term,q_0)
    s_0           -> r_0
    s_0           -> <nil>()
    s_0           -> <conc>(s_0,s_0)
    r_0           -> <conc>(s_0,r_0)
    r_0           -> <conc>(r_0,s_0)
    r_0           -> <conc>(r_0,r_0)
    r_0           -> <cons>(Sort,s_0)
    u_0           -> t_0
    u_0           -> <nil>()
    u_0           -> <conc>(u_0,u_0)
    t_0           -> <conc>(u_0,t_0)
    t_0           -> <conc>(t_0,u_0)
    t_0           -> <conc>(t_0,t_0)
    t_0           -> <cons>(Sdecl,u_0)
    w_0           -> v_0
    w_0           -> <nil>()
    w_0           -> <conc>(w_0,w_0)
    v_0           -> <conc>(w_0,v_0)
    v_0           -> <conc>(v_0,w_0)
    v_0           -> <conc>(v_0,v_0)
    v_0           -> <cons>(ModName,w_0)
    y_0           -> x_0
    y_0           -> <nil>()
    y_0           -> <conc>(y_0,y_0)
    x_0           -> <conc>(y_0,x_0)
    x_0           -> <conc>(x_0,y_0)
    x_0           -> <conc>(x_0,x_0)
    x_0           -> <cons>(Decl,y_0)
    a_1           -> z_0
    a_1           -> <nil>()
    a_1           -> <conc>(a_1,a_1)
    z_0           -> <conc>(a_1,z_0)
    z_0           -> <conc>(z_0,a_1)
    z_0           -> <conc>(z_0,z_0)
    z_0           -> <cons>(ID,a_1)
    c_1           -> b_1
    c_1           -> <nil>()
    c_1           -> <conc>(c_1,c_1)
    b_1           -> <conc>(c_1,b_1)
    b_1           -> <conc>(b_1,c_1)
    b_1           -> <conc>(b_1,b_1)
    b_1           -> <cons>(Type,c_1)
    e_1           -> d_1
    e_1           -> <nil>()
    e_1           -> <conc>(e_1,e_1)
    d_1           -> <conc>(e_1,d_1)
    d_1           -> <conc>(d_1,e_1)
    d_1           -> <conc>(d_1,d_1)
    d_1           -> <cons>(Opdecl,e_1)
    g_1           -> f_1
    g_1           -> <nil>()
    g_1           -> <conc>(g_1,g_1)
    f_1           -> <conc>(g_1,f_1)
    f_1           -> <conc>(f_1,g_1)
    f_1           -> <conc>(f_1,f_1)
    f_1           -> <cons>(Sort,g_1)
    h_1           -> <string>
    i_1           -> <string>
    j_1           -> <string>
    k_1           -> <string>
    l_1           -> <string>
    m_1           -> <string>
    n_1           -> <string>
    o_1           -> <string>
    Def           -> RuleDef
    Decl          -> Overlays(c_0)
    Decl          -> Rules(f_0)
    StratRule     -> StratRule(Strategy,Strategy,Strategy)
    StratRule     -> StratRuleNoCond(Strategy,Strategy)
    Rule          -> Rule(Term,Term,Strategy)
    Rule          -> RuleNoCond(Term,Term)
    RuleDef       -> SRDefT(Id,h_0,h_0,StratRule)
    RuleDef       -> SRDef(Id,h_0,StratRule)
    RuleDef       -> SRDefNoArgs(Id,StratRule)
    RuleDef       -> RDefT(Id,h_0,h_0,Rule)
    RuleDef       -> RDef(Id,h_0,Rule)
    RuleDef       -> RDefNoArgs(Id,Rule)
    Overlay       -> Overlay(Id,j_0,Term)
    Overlay       -> OverlayNoArgs(Id,Term)
    Strategy      -> AM(Strategy,Term)
    Strategy      -> SwitchChoice(Strategy,m_0,Strategy)
    Strategy      -> SwitchChoiceNoOtherwise(Strategy,m_0)
    Strategy      -> CondChoice(Strategy,Strategy,Strategy)
    Strategy      -> RGChoice(Strategy,Strategy)
    Strategy      -> GChoice(Strategy,Strategy)
    Strategy      -> RChoice(Strategy,Strategy)
    Strategy      -> Choice(Strategy,Strategy)
    Strategy      -> SRule(Rule)
    Strategy      -> LRule(Rule)
    Strategy      -> CallNoArgs(SVar)
    Strategy      -> ExplodeCong(Strategy,StrategyParen)
    Strategy      -> ListCong(o_0,Strategy)
    Strategy      -> ListCongNoTail(o_0)
    Mod           -> Mod(Id,Id)
    Strategy      -> ModCong(Mod,o_0)
    Strategy      -> ModCongNoArgs(Mod)
    Strategy      -> TupleCong(Strategy,n_0)
    Strategy      -> EmptyTupleCong()
    StrategyCurly -> StrategyCurly(Strategy)
    Strategy      -> AnnoCong(Strategy,StrategyCurly)
    Strategy      -> CongQ(String,o_0)
    Strategy      -> CharCong(Char)
    Strategy      -> RealCong(Real)
    Strategy      -> IntCong(Int)
    Strategy      -> StrCong(String)
    Strategy      -> Prim(String,q_0)
    Strategy      -> PrimNoArgs(String)
    Strategy      -> Test(Strategy)
    Strategy      -> Where(Strategy)
    Strategy      -> Not(Strategy)
    Strategy      -> Rec(Id,Strategy)
    Strategy      -> LChoice(Strategy,Strategy)
    StrategyAngle -> Strategy
    Strategy      -> BA(StrategyAngle,Term)
    Strategy      -> ScopeDefault(Strategy)
    Strategy      -> Call(SVar,o_0)
    Typedid       -> DefaultVarDec(ID)
    StrategyDef   -> SDef(Id,h_0,Strategy)
    StrategyDef   -> SDefNoArgs(Id,Strategy)
    Kind          -> StarStar()
    Kind          -> Star()
    Sort          -> SortTuple(s_0)
    Sort          -> SortListTl(s_0,Sort)
    Sort          -> SortList(s_0)
    Term          -> Con4(Var,Term,Strategy,Id)
    Term          -> Con3(Var,Term,Strategy)
    Term          -> Con(Var,Term,Id)
    Term          -> Con1(Var,Term)
    Term          -> BuildDefault(Term)
    Term          -> ListTail(q_0,Term)
    Term          -> List(q_0)
    Term          -> Tuple(q_0)
    Term          -> RootApp(StrategyAngle)
    Term          -> App(Strategy,Term)
    Term          -> Explode(Term,Term)
    Term          -> OpQ(String,q_0)
    Term          -> Op(Id,q_0)
    Term          -> Char(Char)
    Term          -> Str(String)
    Term          -> Real(Real)
    Term          -> Int(Int)
    ID            -> LId
    Var           -> Var(LID)
    LID           -> ListVar(LId)
    Decl          -> Signature(u_0)
    Decl          -> Strategies(f_0)
    Decl          -> Imports(w_0)
    Module        -> Specification(y_0)
    Module        -> Module(ModName,y_0)
    Strategy      -> Thread(Strategy)
    Strategy      -> All(Strategy)
    Strategy      -> One(Strategy)
    Strategy      -> Some(Strategy)
    Strategy      -> Path(Int,Strategy)
    Strategy      -> PrimT(String,o_0,q_0)
    Strategy      -> Bagof(Strategy)
    StrategyMid   -> Strategy
    Strategy      -> GuardedLChoice(Strategy,StrategyMid,Strategy)
    Strategy      -> LGChoice(Strategy,Strategy)
    Strategy      -> Seq(Strategy,Strategy)
    Strategy      -> Scope(a_1,Strategy)
    Strategy      -> Build(Term)
    Strategy      -> Match(Term)
    Strategy      -> Id()
    Strategy      -> Fail()
    StrategyParen -> ParenStrat(Strategy)
    Typedid       -> VarDec(ID,Type)
    StrategyDef   -> ExtSDef(Id,h_0,h_0)
    StrategyDef   -> ExtSDefInl(Id,h_0,h_0,Strategy)
    StrategyDef   -> SDefT(Id,h_0,h_0,Strategy)
    Strategy      -> CallT(SVar,o_0,q_0)
    Strategy      -> Let(f_0,Strategy)
    SVar          -> SVar(Id)
    Def           -> StrategyDef
    Type          -> FunType(b_1,Type)
    Type          -> ConstType(Sort)
    Opdecl        -> OpDeclInj(Type)
    Opdecl        -> OpDeclQ(String,Type)
    Opdecl        -> OpDecl(Id,Type)
    Sort          -> Sort(Id,s_0)
    Sort          -> SortNoArgs(UCID)
    Sort          -> SortVar(LCID)
    Sdecl         -> Constructors(e_1)
    Sdecl         -> Sorts(g_1)
    Term          -> OpA(Constructor,q_0,q_0)
    Term          -> StrA(String,q_0)
    Term          -> RealA(Real,q_0)
    Term          -> IntA(Int,q_0)
    Term          -> As(Var,Term)
    Term          -> Var
    Constructor   -> Expl(Term)
    Constructor   -> StrC(String)
    Constructor   -> Con(Id)
    Var           -> SeqVar(Var)
    ID            -> Id
    Var           -> WldA(q_0)
    Var           -> VarA(Id,q_0)
    Var           -> Wld()
    Var           -> Var(Id)
    CharChar      -> <string>
    Char          -> <string>
    StrChar       -> <string>
    String        -> <string>
    Real          -> <string>
    Int           -> <string>
    UCID          -> <string>
    LCID          -> <string>
    LId           -> <string>
    Id            -> <string>
    ModName       -> <string>
    Backslash     -> <string>
    VLCchar       -> <string>
    VeryLongCom   -> <string>
    Asterisk2     -> <string>
    Asterisk1     -> <string>
    CommChar2     -> <string>
    CommChar1     -> <string>
    Eof           -> <string>
    LongCom       -> <string>
    ShortCom      -> <string>
    Ws            -> <string>
