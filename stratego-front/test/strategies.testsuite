testsuite Stratego Strategies
topsort Strategy

test Strategy variable
  "s" -> CallNoArgs(SVar("s"))

test Strategy variable
  "<s> t" -> BA(_, Var("t"))

test Choice and sequence priority
  "s; s + s; s" -> Choice(Seq(_,_), Seq(_,_))

test If then else 
  "if s then s else s end" -> CondChoice(_, _, _)

test If then else in seq
  "s; if s then s else s end" -> Seq(_, CondChoice(_, _, _))

test Seq in then branche of if then else
  "if s
     then s; s
     else s
   end"
  -> CondChoice(_, Seq(_, _), _)

test Seq in else branche of if then else
  "if s
     then s
     else s; s
   end"
    -> CondChoice(_, _, Seq(_, _))

test Seq of s and seq in else branche of if then else
  "s; if s
        then s
        else s; s
      end"
    -> Seq(_, CondChoice(_, _, Seq(_, _)))

test Seq of s and choice in else branche of if then else
  "s; if s
        then s
        else (s + s)
      end"
    -> Seq(_, CondChoice(_, _, Choice(_, _)))

test If then else in else branche of if then else
  "if s
     then s
     else if s
            then s
            else s
          end
   end"
    -> CondChoice(_, _, CondChoice(_, _, _))

test If then else in then branche of if then else
  "if s
     then if s
            then s
            else s
          end
     else s
   end"
    -> CondChoice(_, CondChoice(_, _, _), _)

test If then else in else branche of if then else
  "if s
     then s
     else if s
            then s
            else s; s
          end
   end"
    -> CondChoice(_, _, CondChoice(_, _, Seq(_, _)))

test If then else in else branche of if then else
  "if s
     then s
     else s; if s
               then s
               else s; s
             end
   end"
    -> CondChoice(_, _, Seq(_, CondChoice(_, _, Seq(_, _))))

test Switch case no otherwise
  "switch s0 case s1:s1' case s2:s2' end"
  -> SwitchChoiceNoOtherwise(
       CallNoArgs(SVar("s0"))
     , [ SwitchCase(CallNoArgs(SVar("s1")), CallNoArgs(SVar("s1'")))
       , SwitchCase(CallNoArgs(SVar("s2")),CallNoArgs(SVar("s2'")))
       ])

test Switch case with otherwise
  "switch s0 case s1:s1' otherwise:s' end"
  -> SwitchChoice(
       CallNoArgs(SVar("s0"))
     , [ SwitchCase(CallNoArgs(SVar("s1")),CallNoArgs(SVar("s1'")))]
     , CallNoArgs(SVar("s'"))
     )

test Switch case no otherwise, no branches
  "switch s0 end"
  -> SwitchChoiceNoOtherwise(CallNoArgs(SVar("s0")), [])

test Switch case no branches
  "switch s0 otherwise:s' end"
  -> SwitchChoice(CallNoArgs(SVar("s0")), [], CallNoArgs(SVar("s'")))

test Switch case as selector
  "switch switch sA case sB:sB' end case s1:s1' end"
  -> SwitchChoiceNoOtherwise(
       SwitchChoiceNoOtherwise(
         CallNoArgs(SVar("sA"))
       , [ SwitchCase(CallNoArgs(SVar("sB")),CallNoArgs(SVar("sB'"))) ]
       )
     , [ SwitchCase(CallNoArgs(SVar("s1")),CallNoArgs(SVar("s1'"))) ]
     )

test Switch case as branch condition
  "switch s0 case switch sA case sB:sB' end:s1' end"
  -> SwitchChoiceNoOtherwise(
       CallNoArgs(SVar("s0"))
     , [ SwitchCase(
           SwitchChoiceNoOtherwise(
             CallNoArgs(SVar("sA"))
           , [ SwitchCase(CallNoArgs(SVar("sB")),CallNoArgs(SVar("sB'")))]
           )
         , CallNoArgs(SVar("s1'")))
       ])

test Switch case as branch body
  "switch s0 case s1:switch sA case sB:sB' end end"
  -> SwitchChoiceNoOtherwise(
       CallNoArgs(SVar("s0"))
     , [ SwitchCase(
           CallNoArgs(SVar("s1"))
         , SwitchChoiceNoOtherwise(
             CallNoArgs(SVar("sA"))
           , [ SwitchCase(CallNoArgs(SVar("sB")),CallNoArgs(SVar("sB'"))) ]
           )
         )
       ])

test fixed-point intersection union
  "/R1\R2/* While(s,s)" 
  -> DynRuleIntersectUnionFix(["R1"],["R2"],
       Call(SVar("While"), [CallNoArgs(SVar("s")), CallNoArgs(SVar("s"))]))
