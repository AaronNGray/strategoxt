module StrategoStratego
imports Stratego StrategoRenamed

exports

  context-free syntax

    		"|[" Module      "]|" 	-> StrategoTerm {cons("ToTerm"),prefer}
    		"|[" Decl        "]|" 	-> StrategoTerm {cons("ToTerm")}
    		"|[" Sdecl       "]|" 	-> StrategoTerm {cons("ToTerm")}

    		"|[" Opdecl      "]|" 	-> StrategoTerm {cons("ToTerm")}
    		"|[" Type        "]|" 	-> StrategoTerm {cons("ToTerm")}

    		"|[" Term        "]|"  	-> StrategoTerm {cons("ToTerm")}
    "Term"	"|[" Term   	 "]|" 	-> StrategoTerm {cons("ToTerm")}

    		"|[" StratRule   "]|" 	-> StrategoTerm {cons("ToTerm")}
    		"|[" Rule        "]|" 	-> StrategoTerm {cons("ToTerm")}
    		"|[" RuleDef     "]|" 	-> StrategoTerm {cons("ToTerm")}

    		"|[" Strategy    "]|"  	-> StrategoTerm {cons("ToTerm")}
    "Strategy" 	"|[" Strategy    "]|" 	-> StrategoTerm {cons("ToTerm")}
    		"|[" StrategyDef "]|"  	-> StrategoTerm {cons("ToTerm")}

    "O" 	"|[" Overlay     "]|" 	-> StrategoTerm {cons("ToTerm")}
    "Overlay" 	"|[" Overlay     "]|" 	-> StrategoTerm {cons("ToTerm")}

  context-free syntax

    %% From Term

    "~" StrategoTerm      		-> Strategy {cons("FromTerm")}
    "~str:" StrategoTerm      		-> String {cons("FromTerm")}
    "~" StrategoTerm      		-> {ID ","}+ {cons("FromTerm")}

  context-free syntax

    %% Hacks

    "<" StrategoStrategy ">" -> StrategoStrategyAngle {bracket}
    "(" StrategoStrategy ")" -> StrategoStrategy {bracket,prefer}

  variables
    [xyzfglc][0-9\']*    	-> Id       {prefer}
    [xyzfgl][0-9\']*	"*" 	-> {Id ","}* {prefer}
    "xs"[0-9\']*       		-> {Id ","}* {prefer}

    [xyzfgl][0-9\']*	"*" 	-> {ID ","}* {prefer}

    [t][0-9\']* 	  	-> Term     {prefer}
    [t][0-9\']*   	"*"  	-> {Term ","}*     {prefer}
    "ts"[0-9\']*    		-> {Term ","}*     {prefer}  

    [s][0-9\']* 	  	-> Strategy {prefer}
    "ss"[0-9\']*	  	-> {Strategy ","}* {prefer}
    "s"[0-9\']*	 	"*"  	-> {Strategy ","}* {prefer}

    [r][0-9\']* 	  	-> Rule {prefer}

    "rd"[0-9\']* 	  	-> RuleDef {prefer}
    "rd"[0-9\']* 	"*"  	-> RuleDef* {prefer}

    "a"[0-9\']*   		-> Typedid        {prefer}
    "a"[0-9\']* 	"*"   	-> {Typedid ","}+ {prefer}
    "as"[0-9\']*  		-> {Typedid ","}+ {prefer} 

    "tp"[0-9\']*		-> Type	
    "tp"[0-9\']*	"*"	-> Type	{Type "*"}+	

  lexical syntax
    "xs"[0-9\']*       		-> Id  {reject}

    [t][0-9\']* 	  	-> Id  {reject}
    "ts"[0-9\']*    		-> Id  {reject}  

    [s][0-9\']* 	  	-> Id  {reject}
    "ss"[0-9\']*	  	-> Id  {reject}

    [r][0-9\']* 	  	-> Id  {reject}
 
    "a"[0-9\']*   		-> Id  {reject}
    "as"[0-9\']*  		-> Id  {reject} 

  context-free syntax

    %% Obsolete; use |[ ... ]| syntax

    "[[" Module      "]]" -> StrategoTerm {cons("ToTerm"),prefer}
    "[[" Decl        "]]" -> StrategoTerm {cons("ToTerm")}
    "[[" Sdecl       "]]" -> StrategoTerm {cons("ToTerm")}

    "[[" Opdecl      "]]" -> StrategoTerm {cons("ToTerm")}
    "[[" Type        "]]" -> StrategoTerm {cons("ToTerm")}


    "[[" Term        "]]"  -> StrategoTerm {cons("ToTerm")}
    "[[" Term        ":" "T" "]]" -> StrategoTerm {cons("ToTerm")}

    "[[" StratRule   "]]" -> StrategoTerm {cons("ToTerm")}
    "[[" Rule        "]]" -> StrategoTerm {cons("ToTerm")}
    "[[" RuleDef     "]]" -> StrategoTerm {cons("ToTerm")}

    "[[" Strategy    "]]"  -> StrategoTerm {cons("ToTerm")}
    "[[" Strategy    ":" "S" "]]" -> StrategoTerm {cons("ToTerm")}
    "[[" StrategyDef "]]"  -> StrategoTerm {cons("ToTerm")}

    "[[" Overlay     ":" "O" "]]" -> StrategoTerm {cons("ToTerm")}
