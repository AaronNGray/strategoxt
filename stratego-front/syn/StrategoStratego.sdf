module StrategoStratego
imports Stratego StrategoRenamed
hiddens
  context-free start-symbols StrategoModule

exports

  context-free syntax

              "|[" Module "]|" -> StrategoPreTerm {cons("ToTerm"),prefer}
    "Module"  "|[" Module "]|" -> StrategoPreTerm {cons("ToTerm")}

              "|[" Decl   "]|" -> StrategoPreTerm {cons("ToTerm")}
              "|[" Sdecl  "]|" -> StrategoPreTerm {cons("ToTerm")}

              "|[" Opdecl "]|" -> StrategoPreTerm {cons("ToTerm")}
    "Constr"  "|[" Opdecl "]|" -> StrategoPreTerm {cons("ToTerm")}

              "|[" Type   "]|" -> StrategoPreTerm {cons("ToTerm")}
    "Type"    "|[" Type   "]|" -> StrategoPreTerm {cons("ToTerm")}

    "Sort"    "|[" Sort   "]|" -> StrategoPreTerm {cons("ToTerm")}

              "|[" Term   "]|" -> StrategoPreTerm {cons("ToTerm")}
    "Term"    "|[" Term   "]|" -> StrategoPreTerm {cons("ToTerm")}

              "|[" Def    "]|" -> StrategoPreTerm {cons("ToTerm")}
    "Def"     "|[" Def    "]|" -> StrategoPreTerm {cons("ToTerm")}

             "|[" Rule      "]|" -> StrategoPreTerm {cons("ToTerm")}
    "Rule"   "|[" Rule      "]|" -> StrategoPreTerm {cons("ToTerm")}
             "|[" StratRule "]|" -> StrategoPreTerm {cons("ToTerm")}

               "|[" Strategy "]|" -> StrategoPreTerm {cons("ToTerm")}
    "Strat"    "|[" Strategy "]|" -> StrategoPreTerm {cons("ToTerm")}
    "Strategy" "|[" Strategy "]|" -> StrategoPreTerm {cons("ToTerm")}

    "O"        "|[" Overlay  "]|" -> StrategoPreTerm {cons("ToTerm")}
    "Overlay"  "|[" Overlay  "]|" -> StrategoPreTerm {cons("ToTerm")}

    "Typedid" "|[" Typedid   "]|" -> StrategoPreTerm {cons("ToTerm")}
%%                 "|[" DynRuleDef   "]|" -> StrategoPreTerm {cons("ToTerm")}
    "DynRuleDef" "|[" DynRuleDef   "]|" -> StrategoPreTerm {cons("ToTerm")}

  context-free syntax

    %% From Term

    "~"         StrategoTerm -> ModName          {cons("FromTerm")}

    "~"         StrategoTerm -> Term             {cons("FromTerm")}
    "~term:"    StrategoTerm -> Term             {cons("FromTerm")}
    %%"~term*:"   StrategoTerm -> {Term ","}*      {cons("FromTerm")}
    "~term*:"   StrategoTerm -> {Term ","}+      {cons("FromTerm")}
    "~"         StrategoTerm -> {ID   ","}+      {cons("FromTerm")}

    "~"         StrategoTerm -> Strategy         {cons("FromTerm")}
    "~strat:"   StrategoTerm -> Strategy         {cons("FromTerm")}
    "~*"        StrategoTerm -> {Strategy ","}+  {cons("FromTerm")}
    "~strat*:"  StrategoTerm -> {Strategy ","}+  {cons("FromTerm")}

    "~srt:"     StrategoTerm -> Sort {cons("FromTerm")}
    "~srtvar:"  StrategoTerm -> LCID {cons("FromTerm")}
    "~srtid:"   StrategoTerm -> UCID {cons("FromTerm")}

    "~id:"    StrategoTerm -> Id        {cons("FromTerm")}
    "~int:"   StrategoTerm -> Int       {cons("FromTerm")}
    "~str:"   StrategoTerm -> String    {cons("FromTerm")}

    Id "/" Id -> Id {cons("ManglePrefix")}
    Id "\\" Id -> Id {cons("MangleSuffix")}

    "~"   StrategoTerm -> Def       {cons("FromTerm")}
    "~*"  StrategoTerm -> Def+      {cons("FromTerm")}

    "~*"  StrategoTerm -> Opdecl+      {cons("FromTerm")}
    "~*"  StrategoTerm -> {Type "*"}+  {cons("FromTerm")}

    "~*"          StrategoTerm -> {Typedid ","}+   {cons("FromTerm")}
    "~typed-id*:" StrategoTerm -> {Typedid ","}+   {cons("FromTerm")}

  context-free syntax 

    %% Hacks

    "<" StrategoStrategy ">" -> StrategoStrategyAngle {bracket}
    "(" StrategoStrategy ")" -> StrategoStrategy {bracket,prefer}

  variables
    [xyzfglc][0-9\']*       -> Id       {prefer}
    [xyzfgl][0-9\']*  "*"   -> {Id ","}+ {prefer}
    "xs"[0-9\']*            -> {Id ","}+ {prefer,obsolete}

    [xyzfgl][0-9\']*  "*"   -> {ID ","}+ {prefer}

    [t][0-9\']*           -> Term     {prefer}
    [t][0-9\']*   "*"     -> {Term ","}+     {prefer}
    "ts"[0-9\']*          -> {Term ","}+     {prefer,obsolete}

    "t:"Id                -> Term     {prefer}

  variables
    "str"[0-9\']* -> String

  lexical syntax
    "str"[0-9\']* -> Id {reject}

  variables
    "s"[0-9\']*           -> Strategy {prefer}
    "ss"[0-9\']*          -> {Strategy ","}+ {prefer,obsolete}
    "s"[0-9\']*   "*"     -> {Strategy ","}+ {prefer}

    [r][0-9\']*           -> Rule {prefer}

    "rd"[0-9\']*          -> RuleDef {prefer}
    "rd"[0-9\']*  "*"     -> RuleDef* {prefer}

    "a"[0-9\']*           -> Typedid        {prefer}
    "a"[0-9\']*   "*"     -> {Typedid ","}+ {prefer}
    "as"[0-9\']*          -> {Typedid ","}+ {prefer,obsolete}

    "tp"[0-9\']*          -> Type 
    "tp"[0-9\']*  "*"     -> {Type "*"}+  

    "srt" [0-9\']*        -> Sort         {prefer}
    "srt" [0-9\']* "*"    -> {Sort ","}*  {prefer}
    "srt" [xyz] [0-9\']*  -> UCID         {prefer}

    "M"   [0-9\']*        -> ModName {prefer}

    "sc" [0-9\']*         -> SwitchCase {prefer}
    "sc" [0-9\']* "*"     -> SwitchCase* {prefer}

  variables
    "sc" [0-9\']*         -> DynRuleScopeId        {prefer}
    "sc" [0-9\']* "*"     -> {DynRuleScopeId ","}+ {prefer}

    "dr" [0-9\']*         -> DynRuleId {prefer}

    "drd"[0-9\']*         -> DynRuleDef {prefer}
    "drd"[0-9\']*  "*"    -> DynRuleDef+ {prefer}

  lexical syntax
    "xs"[0-9\']*          -> Id  {reject}

    [t][0-9\']*           -> Id  {reject}
    "ts"[0-9\']*          -> Id  {reject}  

    [s][0-9\']*           -> Id  {reject}
    "ss"[0-9\']*          -> Id  {reject}

    [r][0-9\']*           -> Id  {reject}
 
    "a"[0-9\']*           -> Id  {reject}
    "as"[0-9\']*          -> Id  {reject} 

  lexical syntax
    StrategoShortCom 	-> LAYOUT {prefer}
    StrategoLongCom 	-> LAYOUT {prefer}
    StrategoVeryLongCom -> LAYOUT {prefer}
    StrategoWs 		-> LAYOUT {prefer}
