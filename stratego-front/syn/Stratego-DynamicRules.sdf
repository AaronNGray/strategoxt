module Stratego-DynamicRules
exports

  context-free syntax

    "{|" {DynRuleScopeId ","}* ":" Strategy "|}" -> Strategy {cons("DynRuleScope"), prefer}
    "{|" Id ":+" Term "|}"                       -> Strategy {cons("AddScopeLabel")}

  context-free syntax

    "rules" "(" DynRuleDef+ ")" -> Strategy {cons("GenDynRules"), prefer}

    DynRuleId ":-"  Term -> DynRuleDef {cons("UndefineDynRule")}
    DynRuleId ":"   Rule -> DynRuleDef {cons("SetDynRule")}
    DynRuleId ":+"  Rule -> DynRuleDef {cons("AddDynRule")}

    RuleDec "." Term -> DynRuleId {cons("LabeledDynRuleId")}
    RuleDec          -> DynRuleId {cons("DynRuleId")}

    Id "." Term  -> DynRuleScopeId {cons("LabeledDynRuleScopeId")}
    Id           -> DynRuleScopeId {cons("DynRuleScopeId")}

  context-free syntax

    Id                         -> RuleDec {cons("RDecNoArgs")}
    Id "(" {Typedid ","}* ")"  -> RuleDec {cons("RDec")}
    Id "(" {Typedid ","}* 
       "|" {Typedid ","}* ")"  -> RuleDec {cons("RDecT")}

  context-free syntax %% legacy Dynamic rules

    "override" "rules" "(" RuleDef* ")"		 -> Strategy {cons("OverrideDynamicRules")}
    "extend"   "rules" "(" RuleDef* ")"		 -> Strategy {cons("ExtendDynamicRules")}
    "extend" "override" "rules" "(" RuleDef* ")" -> Strategy {cons("ExtendOverrideDynamicRules")}








  %% context-free syntax

    %% "commit" "(" DynRuleSet ")" -> Strategy {cons("CommitDynRules")}
    %% DynRuleSet                  -> Strategy {cons("IgnoreDynRules")}

    %% "branch"    "(" RuleDec ":" Strategy  ")" -> DynRuleSet {cons("BranchDynRules")}
    %% "union"     "(" {DynRuleSet ","}+ ")" -> DynRuleSet {cons("UnionDynRules")}
    %% "intersect" "(" {DynRuleSet ","}+ ")" -> DynRuleSet {cons("IntersectDynRules")}

    %% "rules" Id "=" DynRuleSet           -> Strategy {cons("AsDynRules")}
