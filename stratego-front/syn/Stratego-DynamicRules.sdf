module Stratego-DynamicRules
exports

  context-free syntax

    "{|" {DynRuleScopeId ","}* ":" Strategy "|}" -> Strategy {cons("DynRuleScope")}
    "{|" Id ":+" Term "|}"                       -> Strategy {cons("AddScopeLabel")}

  context-free syntax

    "rules" "(" DynRuleDef+ ")" -> Strategy {cons("GenDynRules")}

    DynRuleId ":-"  Term                  -> DynRuleDef {cons("UndefineDynRuleNoCond")}
    DynRuleId ":-"  Term "where" Strategy -> DynRuleDef {cons("UndefineDynRule")}
    DynRuleId ":"   Rule                  -> DynRuleDef {cons("SetDynRule")}
    DynRuleId ":+"  Rule                  -> DynRuleDef {cons("AddDynRule")}

    RuleDec "." Term -> DynRuleId {cons("LabeledDynRuleId")}
    RuleDec          -> DynRuleId {cons("DynRuleId")}

    Id "." Term  -> DynRuleScopeId {cons("LabeledDynRuleScopeId")}
    Id           -> DynRuleScopeId {cons("DynRuleScopeId")}

  context-free syntax

    Id                         -> RuleDec {cons("RDecNoArgs")}
    Id "(" {Typedid ","}* ")"  -> RuleDec {cons("RDec")}
    Id "(" {Typedid ","}* 
       "|" {Typedid ","}* ")"  -> RuleDec {cons("RDecT")}

  context-free syntax %% legacy Dynamic rules

    "override" "rules" "(" RuleDef* ")"		 -> Strategy {cons("OverrideDynamicRules")}
    "extend"   "rules" "(" RuleDef* ")"		 -> Strategy {cons("ExtendDynamicRules")}
    "extend" "override" "rules" "(" RuleDef* ")" -> Strategy {cons("ExtendOverrideDynamicRules")}
