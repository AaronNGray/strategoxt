definition
module Stratego-Core-Modules
imports Stratego-Identifiers
exports 
  sorts Module
  context-free syntax
    "module" ModName Decl* 	-> Module {cons("Module")}
    "specification" Decl*	-> Module {cons("Specification")}

  context-free syntax
    "imports" ModName* 		-> Decl {cons("Imports")}
    "strategies" Def* 		-> Decl {cons("Strategies")}
    "signature" Sdecl*  	-> Decl {cons("Signature")}

    StrategyDef 		-> Def 

module Stratego-Core-Strategies
imports Stratego-Core-Terms
exports
  context-free syntax

  %% Definitions

    "let" Def* "in" Strategy "end"	   -> Strategy {cons("Let")}

    Id "(" {Typedid ","}* 
       "|" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("SDefT")}

    ID ":" Type 			   -> Typedid {cons("VarDec")}

  %% Calls

    Id					  -> SVar {cons("SVar")}
    SVar "(" {Strategy ","}* 
         "|" {Term ","}* ")" 	          -> Strategy {cons("CallT")}
    "prim" "(" String "," {Strategy ","}* 
                      "|" {Term ","}*")"  -> Strategy {cons("PrimT")}

  %% Match and build

    "?" Term 				  -> Strategy {cons("Match")}
    "!" Term 				  -> Strategy {cons("Build")}
    "{" {ID ","}* ":" Strategy "}" 	  -> Strategy {cons("Scope")}

  %% Combinators

    "(" Strategy ")"			  -> StrategyParen {cons("ParenStrat")}
    "fail" 				  -> Strategy {cons("Fail")}
    "id" 				  -> Strategy {cons("Id")}
    Strategy ";" Strategy 		  -> Strategy {cons("Seq"),right}
    Strategy "<+" Strategy 		  -> Strategy {cons("LChoice"),right}
    Strategy "<" StrategyMid 
             "+" Strategy 		  -> Strategy {cons("GuardedLChoice"),right}
    Strategy 				  -> StrategyMid
    "rec" Id "(" Strategy ")" 		  -> Strategy {cons("Rec")}
    "not"   "(" Strategy ")" 		  -> Strategy {cons("Not")}

  %% Global choice

    Strategy "<++" Strategy 		  -> Strategy {cons("LGChoice"),right}
    "bagof" "(" Strategy ")" 		  -> Strategy {cons("Bagof")}

  %% Traversal

    Int Strategy 			  -> Strategy {cons("Path")}
    "some" "(" Strategy ")" 		  -> Strategy {cons("Some")}
    "one" "(" Strategy ")" 		  -> Strategy {cons("One")}
    "all" "(" Strategy ")" 		  -> Strategy {cons("All")}
    "thread" "(" Strategy ")" 		  -> Strategy {cons("Thread")}

  %% Congruence operators

    Int    "{" Strategy "}" 		       -> Strategy {cons("IntCong")}
    Real   "{" Strategy "}"		       -> Strategy {cons("RealCong")}
    String "{" Strategy "}"  		       -> Strategy {cons("StrCong")}
    Const "(" {Term ","}* ")" "{" Strategy "}" -> Strategy {cons("OpCong")}

  context-free priorities
    {"!" Term 				  -> Strategy {cons("Build")}
     "?" Term 				  -> Strategy {cons("Match")}
    }
  > Strategy ";" Strategy 		  -> Strategy {cons("Seq"),right}
  > {right: 
     Strategy "<+" Strategy 		  -> Strategy {cons("LChoice"),right}
     Strategy "<++" Strategy 		  -> Strategy {cons("LGChoice"),right}
     Strategy "<" StrategyMid 
              "+" Strategy 		  -> Strategy {cons("GuardedLChoice"),right}
    }

module Stratego-Core-Terms
exports
  context-free syntax

    %% Constructors

    Id 				    -> Constructor {cons("Con")}
    String 			    -> Constructor {cons("StrC")}
    Term "#"			    -> Constructor {cons("Expl")}

    %% Annotated Terms

    Int         "{" {Term ","}* "}" -> Term {cons("Int")}
    Real        "{" {Term ","}* "}" -> Term {cons("Real")}
    String      "{" {Term ","}* "}" -> Term {cons("Str")}
    Constructor "(" {Term ","}* ")" 
                "{" {Term ","}* "}" -> Term {cons("Op")}

    %% Variables

    Id 				    -> Var  
    Var	Annos		    	    -> Term {cons("VarA")}
    Var				    -> Term {cons("Var")}
    "_" 		 	    -> Term {cons("Wld")}

module Stratego-Core-Signatures
exports

  context-free syntax
    "sorts" Sort* 		-> Sdecl {cons("Sorts")}
    "constructors" Opdecl* 	-> Sdecl {cons("Constructors")}

  context-free syntax
    LCID 			 -> Sort {cons("SortVar")}
    UCID 			 -> Sort {cons("SortNoArgs")}
    Id "(" {Sort ","}* ")" 	 -> Sort {cons("Sort")}

  context-free syntax
    Id     ":" Type 		-> Opdecl {cons("OpDecl")}
    String ":" Type 		-> Opdecl {cons("OpDeclQ")}
           ":" Type 		-> Opdecl {cons("OpDeclInj")}

  context-free syntax
    Sort			-> Type {cons("ConstType")}
    {Type "*"}+ "->" Type 	-> Type {cons("FunType")}
    "(" Type ")" 		-> Type {bracket}

module Stratego-Core-Layout
exports

  lexical syntax
    [\t\ \n] 		-> Ws
    "//" ~[\n]* [\n]	-> ShortCom
    "/*" CommChar* "*/" -> LongCom
    "*" 		-> Asterisk
    ~[\*] 		-> CommChar
    Asterisk 		-> CommChar
  lexical restrictions
    Asterisk -/- [\/\)]

  lexical syntax
    ShortCom 	-> LAYOUT
    LongCom 	-> LAYOUT
    Ws 		-> LAYOUT
  context-free restrictions
    LAYOUT? -/- [\ \t\n]

module Stratego-Identifiers
exports
  lexical syntax
    [a-zA-Z\'\.\-\_] [a-zA-Z0-9\'\.\-\_]* -> ModName
  lexical restrictions
    ModName -/- [a-zA-Z0-9\'\.\-\_]
  lexical syntax
    "imports" 		-> ModName {reject}
    "overlays" 		-> ModName {reject}
    "rules" 		-> ModName {reject}
    "signature" 	-> ModName {reject}
    "strategies" 	-> ModName {reject}
  lexical syntax
    [a-zA-Z\'\-\_] [a-zA-Z0-9\'\-\_]*     -> Id
    [a-zA-Z\'\-\_] [a-zA-Z0-9\'\-\_]* "*" -> LId

    [a-z] [a-zA-Z0-9\'\-\_]*  -> LCID
    [A-Z] [a-zA-Z0-9\'\-\_]*  -> UCID
  lexical restrictions
    Id   -/- [a-zA-Z0-9\'\-\_\*]
    LId  -/- [a-zA-Z0-9\'\-\_]
    LCID -/- [a-zA-Z0-9\'\-\_]
    UCID -/- [a-zA-Z0-9\'\-\_]
  lexical syntax
    "all" 		-> Id {reject}
    "constructors" 	-> Id {reject}
    "fail" 		-> Id {reject}
    "id" 		-> Id {reject}
    "in" 		-> Id {reject}
    "let" 		-> Id {reject}
    "module" 		-> Id {reject}
    "not" 		-> Id {reject}
    "one" 		-> Id {reject}
    "overlays" 		-> Id {reject}
    "override" 		-> Id {reject}
    "prim" 		-> Id {reject}
    "rules" 		-> Id {reject}
    "script" 		-> Id {reject}
    "signature" 	-> Id {reject}
    "some" 		-> Id {reject}
    "sorts" 		-> Id {reject}
    "strategies" 	-> Id {reject}
    "stratego" 		-> Id {reject}
    "test" 		-> Id {reject}
    "thread" 		-> Id {reject}
    "where" 		-> Id {reject}
  lexical restrictions
    "all" "constructors" "fail" "id" "in" "let" "module" "not" "one"
    "overlays" "override" "prim" "rules" "script" "signature" "some"
    "sorts" "strategies" "stratego" "test" "thread" "where" 
    -/- [a-zA-Z0-9\'\-\_]

module Stratego-Core-Constants
exports
  lexical syntax
    [\-]? [0-9]+ 		-> Int
    [\-]? [0-9]+ [\.] [0-9]+ 	-> Real
    "\"" StrChar* "\"" 		-> String
    ~[\"\\] 			-> StrChar
    [\\] [\"tn\\] 		-> StrChar

module Stratego-Core
imports Stratego-Core-Constants 
	Stratego-Identifiers 
	Stratego-Core-Layout
	Stratego-Core-Signatures 
	Stratego-Core-Terms
	Stratego-Core-Strategies 
	Stratego-Core-Modules