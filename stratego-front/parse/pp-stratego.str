module pp-stratego
imports liblib stratego-parenthesize
strategies

  pp-stratego =
    option-wrap(pp-stratego-options <+ io-options,
      xtc-io(
        (where(<get-config> "--abstract")
	 <+ xtc-transform(!"parse-stratego",pass-includes))
        ; xtc-transform(!"stratego-ensugar")
	//; try(where(<get-config> "--annotations")
        //      ; xtc-transform(!"annos-to-term"))
        ; xtc-io-transform(
            parenthesize-Stratego
          ; topdown(try(\ Parenthetical(s) -> ParenStrat(s) \ ))
	  ; try(where(<get-config> "--annotations")
                ; annos-as-comment)
          )
        ; xtc-transform(!"ast2abox", !["-p", <(get-config <+ !"Stratego-pretty.pp"); xtc-find> "-p" | <pass-verbose>])
        ; xtc-transform(!"abox2text", !<pass-verbose>)
      )
    )

  pp-stratego-options =
    Option("-a" + "--abstract", where(<set-config>("--abstract", ())),
              !"-a | --abstract  source is abstract syntax")

  + Option("--annotations", where(<set-config>("--annotations", ())),
              !"--annotations    print annotations on abstract syntax")

  + ArgOption("-I" + "--Include", where(<extend-config>("-I", [<id>])),
	      !"-I p|--Include p   include modules from directory p") 

  + ArgOption("-p" , where(<set-config>("-p", <id>)),
	      !"-p file   use pptable in file instead of Stratego-pretty.pp")

  pass-includes =
    <get-config<+![]> "-I" ; foldr(id, conc, !["-I", <id>])

signature
  constructors
    Comment : a * List(String) -> a

strategies

  annos-as-comment =
    bottomup(try(anno-as-comment))

  anno-as-comment :
    x{t,t*} -> Comment(x, [t,t*])
