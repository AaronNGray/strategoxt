module parse-stratego
imports xtc-lib lib Stratego
signature
  constructors
    Meta    : List(MetaProperty) -> MetaData
    Syntax  : String -> MetaProperty
    TopSort : String -> MetaProperty

strategies

  parse-stratego-options =
    ArgOption("-I" + "--Include", where(<extend-config>("-I", [<id>])),
	      !"-I p|--Include p   include modules from directory p") 

  + ArgOption("--syntax", where(<set-config>("--syntax", <id>)),
	      !"--syntax syn        use syntax syn")

  + Option("-silent", where(<set-config>("--verbose", 0)),
	      !"-silent ")

  + Option("--asfix", where(<set-config>("--asfix", 1)), !"--asfix")

  parse-stratego =
    xtc-iowrap(parse-stratego-options, 
      where(<extend-config> ("-I", ["./", <xtc-find-path> "StrategoRenamed.sdf"]))
      ; parse-module
    )

  find-in-includes(msg) =
    <find-in-path; if-verbose2(debug(msg))> (<id>, <get-config> "-I")

  parse-module =
    if-verbose6(debug(!"parse-module: "))
    ; where( FILE(basename => base) )
    ; where( get-syntax ; get-parse-table => FILE(tbl) )
    ; where( pass-sort => sort )
    ; xtc-transform(!"sglr", !["-2", "-p", tbl | <conc> (<if-verbose3(!["-v"])> [], sort)])
    ; xtc-transform(!"implode-asfix",
        !["-b" | <concat> [<pass-verbose>, <get-config < !["--concrete"] + ![]> "--asfix"]])
    ; if-keep1(copy-to(<guarantee-extension(!"atree")> base))
    ; xtc-transform(!"meta-explode",     <concat> [<pass-verbose>,
                         <get-config < !["--asfix"] + ![]> "--asfix"])
    ; where( read-from ; check-module-name(|base) )
    ; xtc-transform(!"stratego-desugar", pass-verbose)

  check-module-name(|base) =
    ?Module(n,_) 
  ; ( <eq>(n,base) <+ say(<concat-strings>[" ** Warning: Mismatch between basename of input file (",base,") and module name (",n,") specified"]) )

  check-module-name(|base) =
    ?Specification(_)

  pass-sort =
      get-meta => Meta(<fetch-elem(?TopSort(<id>))>)
    ; !["-s", <is-string>]
    <+ ![]

  get-syntax = 
    if-verbose6(debug(!"get-syntax: "))
    ; ?FILE(file)
    ; (<get-config> "--syntax"
     <+ get-meta 
      ; (?Meta(<fetch-elem(?Syntax(<id>))>)
         <+ <error> ["Meta data ", <id>, " for module ", file, " not valid: "]; fail)
     <+ !"Stratego"
      )
    ; if-verbose2(debug(!"using syntax: "))

  get-meta = 
   if-verbose6(debug(!"get-meta: "))
   ; ( FILE(guarantee-extension(!"meta"))
     ; read-from
    <+ FILE(guarantee-extension(!"syn"))
     ; read-from => syntax#(_)
     ; !Meta([Syntax(syntax)])
     )
   ; if-verbose6(debug(!"get-meta: "))

  get-parse-table =
    if-verbose6(debug(!"get-parse-table: "))
    ; ?syntax
    ; guarantee-extension(!"tbl") => tbl
    ; (find-in-includes(!"using parse table: ")
      ; !FILE(<id>)
     <+ if-verbose2(say(!"creating parse table"))
      ; <get-syntax-definition> syntax
      ; xtc-transform(!"sdf2table", !["-m", syntax])
      ; rename-to(!tbl)
      )
    ; if-verbose6(debug(!"using parse table: "))

  get-syntax-definition =
    if-verbose6(debug(!"get-syntax-definition: "))
    ; where(guarantee-extension(!"def") => def)
    ; ( <find-in-includes(!"using syntax definition: ")> def
      ; !FILE(<id>)
     <+ if-verbose2(say(!"creating syntax definition"))
      ; !FILE(<guarantee-extension(!"sdf")>)
      ; xtc-transform(!"pack-sdf", <get-config; map(!["-I", <id>]); concat> "-I")
      ; rename-to(!def)
      )
