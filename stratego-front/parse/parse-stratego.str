module parse-stratego
imports
  liblib
  Stratego

/**
 * Structure of meta files.
 */
signature
  constructors
    Meta    : List(MetaProperty) -> MetaData
    Syntax  : String -> MetaProperty
    TopSort : String -> MetaProperty
    HeuristicFilters : Switch -> MetaProperty
    On  : Switch
    Off : Switch

strategies

  parse-stratego-options =
    ArgOption("-I" + "--Include", where(<extend-config>("-I", [<id>])),
	      !"-I p|--Include p   include modules from directory p") 

  + ArgOption("--syntax", where(<set-config>("--syntax", <id>)),
	      !"--syntax syn        use syntax syn")

  + ArgOption("--default-syntax", where(<set-config>("--default-syntax", <id>)),
	      !"--default-syntax syn        use syntax syn as default")

  + Option("-silent", where(<set-config>("--verbose", 0)),
	      !"-silent ")

  + Option("--asfix", where(<set-config>("--asfix", 1)), !"--asfix")

  + ArgOption("--desugaring", where(<set-config>("--desugaring", <id>)),
	      !"--desugaring on/off : turn desugaring on or off (default: on)")

  parse-stratego =
    xtc-io-wrap(parse-stratego-options, 
      where(<extend-config> ("-I", ["./", <xtc-find-path> "StrategoRenamed.sdf"]))
      ; parse-module
      <+ <xtc-exit> 1
    )

  find-in-includes(msg) =
    <find-in-path; if-verbose2(debug(msg))> (<id>, <get-config> "-I")

strategies

  /**
   * Parses a Stratego module.
   *
   * @type FILE -> FILE
   */
  parse-module =
    if-verbose6(debug(!"parse-module: "))

    ; ?file
    ; where( ?FILE(filename) )
    ; where( FILE(basename => base) )
    ; where( get-meta => meta )
    ; where( <get-syntax ; get-parse-table> meta => FILE(tbl) )

    ; xtc-transform(!"sglri",
        !["-b", "-p", tbl | <concat>
           [ <pass-verbose> ()
           , <pass-filters> meta
           , <pass-sort> meta
           , <if <get-config> "--asfix" then !["--impl", "--concrete"] else ![] end>
           ]
         ]
       ; if-verbose6(debug(!"sglri arguments: "))
       )

    ; if-keep1(copy-to(<guarantee-extension(!"atree")> base))

    ; xtc-transform(!"meta-explode",
        !["-b" | <concat>
           [ <pass-verbose>
           , <if <get-config> "--asfix" then !["--asfix"] else ![] end>
           ]
         ])

    ; where(if-not-silent(read-from ; check-module-name(|base)))

    ; if <get-config> "--desugaring" => off then
	id 
      else 
        xtc-transform(!"stratego-desugar", !["-b" | <pass-verbose>])
      end

strategies

  check-module-name(|base) =
    ?Module(n,_)
    ; if not( !(<get-filename> base,<get-filename>n) => (x,x) ) then
        say(<concat-strings>
          [" ** Warning: Mismatch between basename of input file ("
          , base
          , ") and module name (", n,") specified"
          ]
        )
      end

  check-module-name(|base) =
    ?Specification(_)

strategies

  /**
   * @type MetaData -> List(String)
   */  
  pass-sort =
    if ?Meta(<fetch-elem(?TopSort(s))>) then
      !["--start", <!s; is-string>]
    else
      ![]
    end

  /**
   * @type MetaData -> List(String)
   */  
  pass-filters =
    if ?Meta(<fetch-elem(?HeuristicFilters(Off()))>) then
      !["--no-heuristic-filters"]
    else
      ![]
    end

strategies

  /**
   * Determines the syntax to be used.
   *
   * @type MetaData -> String
   */
  get-syntax = 
    if-verbose6(debug(!"get-syntax: "))
    ; ( /* first option: --syntax argument
        <get-config> "--syntax"

     <+ /* second option: meta file */
        ?Meta(<fetch-elem(?Syntax(<id>))>)

     <+ /* third option: --default syntax */
        <get-config> "--default-syntax"

     <+ /* final option: plain Stratego */
        !"Stratego"
      )
    ; if-verbose2(debug(!"using syntax: "))

  /**
   * Returns the MetaData for a file.
   *
   * @type FILE -> MetaData
   */
  get-meta = 
   if-verbose6(debug(!"get-meta: "))
   ; ( /* first option: meta file */
       ?FILE(file)
     ; FILE(guarantee-extension(!"meta"))
     ; read-from
     ; if not(Meta(is-list)) then
         <error> ["** Warning: Meta data ", <id>, " for module ", file, " not valid."]; fail
       end

    <+ /* second option: legacy syn file */
       FILE(guarantee-extension(!"syn"))
     ; read-from => syntax#(_)
     ; !Meta([Syntax(syntax)])

    <+ /* final option: no metadata */
       !Meta([])
     )
   ; if-verbose6(debug(!"get-meta: "))

  /**
   * @type String -> FILE
   */
  get-parse-table =
    if-verbose6(debug(!"get-parse-table: "))
    ; ?syntax
    ; guarantee-extension(!"tbl") => tbl
    ; (find-in-includes(!"using parse table: ")
      ; !FILE(<id>)

     <+ if-verbose2(say(!"creating parse table"))
      ; <get-syntax-definition> syntax
      ; xtc-transform(!"sdf2table", !["-m", syntax])
      ; rename-to(!tbl)
      )
    ; if-verbose6(debug(!"using parse table: "))

  /**
   * @type String -> FILE
   */
  get-syntax-definition =
    if-verbose6(debug(!"get-syntax-definition: "))
    ; where(guarantee-extension(!"def") => def)
    ; ( <find-in-includes(!"using syntax definition: ")> def
      ; !FILE(<id>)

     <+ if-verbose2(say(!"creating syntax definition"))
      ; !FILE(<guarantee-extension(!"sdf")>)
      ; xtc-transform(!"pack-sdf", <get-config; map(!["-I", <id>]); concat> "-I")
      ; rename-to(!def)
      )
