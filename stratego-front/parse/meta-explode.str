module meta-explode
imports liblib Stratego-Amb Stratego-MetaTransition
signature
  constructors
    AsFix        : Option
    appl         : Term * List(Term)        -> Term
    prod         : List(Term) * Term * Term -> Term
    cf           : Term                     -> Term
    opt          : Term                     -> Term
    layout       : Term

rules

  // There is no Wld/0 in asfix so this not buggy.
  Clean : Op("Wld",[]) -> Wld

  Clean : Op(i,[]) -> Int(<int-to-string> i)
          where <is-int> i

strategies

  // It replaces layouts by the right variable.
  ImplodeLayout(build) = rec x(alltd(
    BA(ImplodeLayout(fail), ImplodeLayout(id))
    <+ Build(ImplodeLayout(id))
    <+ ToBuild(ImplodeLayout(id))
    <+ AM(x, ImplodeLayout(id))
    <+ RuleNoCond(x, ImplodeLayout(id))
    <+ Rule(x, ImplodeLayout(id), x)
    <+ (appl(prod(id, cf(opt(layout)), id), id)
       ; {layout_var:
           appl(prod([cf(layout)], cf(opt(layout)), id),
               oncetd(?meta-var(layout_var)))
         < !meta-var(layout_var) + try(not(build); !Wld)})))
                                                                               
  asfix-option =
    Option( "--asfix",
       <set-config> ("--asfix", ()); !AsFix,
       !"--asfix          treat concrete syntax parts as AsFix trees")

  io-meta-explode =
    io-wrap(
      asfix-option
    , if <get-config>"--asfix" then
        ImplodeLayout(fail) ; MetaExplode ; topdown(try(Clean))
      else
        MetaExplode
      end
    )
    
  MetaExplode =
    alltd( ?ToTerm(<trm-explode>) 
         + ?ToMetaExpr(<trm-explode>)
         + ?ToMetaListExpr(<trm-explode>)
	 + ?ToBuild(<!Build(<trm-explode>)>)
         + ?ToStrategy(<str-explode>)
         )

  trm-explode =
    TrmMetaVar <+ TrmLMetaVar <+ TrmInt <+ TrmStr <+ TrmFromTerm <+ TrmFromApp
    <+ TrmFromStr <+ TrmAnno <+ TrmConc 
    <+ TrmNil <+ TrmCons <+ TrmOp

  TrmOp       :	op#(ts) -> Op(op, <map(trm-explode)> ts)

  TrmMetaVar  :	meta-var(x) -> Var(x) 

  LstMetaVar  :	meta-listvar(x) -> Var(ListVar(x))

  TrmLMetaVar :	meta-listvar(x) -> 
		Op("Cons", [Var(ListVar(x)), Op("Nil", [])])

  TrmInt      = !Int(<is-int>)

  TrmStr      =	is-string; !Str(<id>)

  TrmFromTerm = ?FromTerm(<MetaExplode>)
  TrmFromTerm = ?FromMetaExpr(<MetaExplode>)
  TrmFromTerm = ?FromMetaListExpr(<MetaExplode>)

  TrmFromStr  =	?FromStrategy(<MetaExplode>)

  TrmFromApp  =	?FromApp(<!RootApp(<MetaExplode>)>)

  //TrmAnno     =	Anno(trm-explode, MetaExplode)

  TrmAnno     : WithAnno(t1, t2) -> Anno(<trm-explode> t1, <MetaExplode> t3)
    where 
      ( <is-list>t2 <+ ![t2] ) => t3 

  TrmNil      :	[] -> Op("Nil", [])

  TrmCons     :	[x | xs] -> 
		Op("Cons",[<trm-explode>x, <trm-explode> xs])
  TrmConc     :	Conc(ts1,ts2) -> 
		<try(![<LstMetaVar>])
		 ; foldr(!<TrmLMetaVar <+ trm-explode> ts2, 
			 !Op("Cons", [<Fst>, <Snd>]), 
			 trm-explode)> ts1

  str-explode =
    \ meta-var(x) -> Match(Var(x)) \
    <+ TrmFromTerm
    <+ TrmFromStr
    <+ ?FromApp(<MetaExplode>)
    <+ \ [] -> Cong("Nil", []) \
    <+ \ [t | ts] -> Cong("Cons", [<str-explode>t,<str-explode>ts]) \
    <+ is-string; !Match(Str(<id>))
    <+ \ op#(ts) -> Cong(op, <map(str-explode)> ts) \

signature
  constructors
    ToMetaExpr       : a -> b
    ToMetaListExpr   : a -> b
    FromMetaExpr     : a -> StrategoTerm
    FromMetaListExpr : a -> StrategoTerm
