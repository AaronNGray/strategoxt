/**
 * Generates a Stratego that puts Bracket constructors at the right place.
 *
 * @author  Martin Bravenboer <martin@cs.uu.nl>
 * @since   0.11
 */
module sdf2parenthesize
imports Stratego Sdf2 options xtc-lib stratego-xt-xtc-tools collect sdf-options
imports sdf-spread-cons

strategies

  io-sdf2parenthesize =
    xtc-io-wrap(parenthesize-options,
      xtc-transform(!"sdf2table", !["-n", "-m", <get-sdf-main-module> | <pass-v-verbose>])
    ; xtc-transform(!"implodePT")
    ; xtc-transform(!"sdf-desugar")
    ; sdf-spread-cons
    ; xtc-io-transform(
        innermost-module

      )
    ; xtc-transform(!"pp-stratego", !["--abstract" | <pass-verbose>])
    )

/**
 * Transformation
 */
strategies
  
  innermost-module :
    rs ->
      |[ module M1
         imports options M2
         strategies

           f =
             io-wrap(g)

           g =
             innermost(l)

         rules
           l : 
             Div(e1, Mul(e2, e3)) -> Div(e1, Bracket(Mul(e2, e3)))
      ]|
    where ModuleName => M1
        ; LanguageName => M2
        ; <conc-strings> ("io-", M1) => f
        ; <conc-strings> (M2, "-parenthesize") => g
        ; <conc-strings> (M2, "-Bracket") => l

/*
  AssocBracketRule :
    assoc(simple-group(prod1), left(), simple-group(prod2)) ->

  Prod2Pattern(f, ts) :
    ?prod(syms, _, _)

 -> |[ x(t* ) ]|
      where < filter(not(is-empt-sym))
            ; map(!|[ _ ]|)
            > syms => t*

  Prod2Pattern :
    prod(syms, _, _) -> |[ x(t* ) ]|
      where < filter(not(is-empt-sym))
            ; map(!|[ _ ]|)
            > syms => t*

  ApplyAssoc(|t') ;
     (left(), |[ x(t, t* ) ]|) -> |[ x(t', t* ) ]|
*/

/**
 * Helper copied from sdf2rtg.
 *
 * @todo  Put in some SDF lib or whatever
 */
strategies

  /**
   * @type  Symbol -> Symbol
   */
  is-empty-sym = ?lit(_)
  is-empty-sym = ?layout()
  is-empty-sym = opt(is-empty-sym)
  is-empty-sym = cf(is-empty-sym)
  is-empty-sym = lex(is-empty-sym)
  is-empty-sym = label(id, is-empty-sym)

/**
 * Options
 */
strategies

  parenthesize-options =
    sdf-main-module-option
  + stratego-module-option
  + language-option

  stratego-module-option =
    ArgOption("--omod"
    , ?s; rules(ModuleName : _ -> s)
    , <concat-strings>   ["--omod mod       ", "Name of the resulting Stratego module (required)"]
    )

  language-option =
    ArgOption("--lang"
    , ?s; rules(LanguageName : _ -> s)
    , <concat-strings>   ["--lang name      ", "Name of the language (required)"]
    )


signature
  constructors
    StrategoModuleFlag : Flag
