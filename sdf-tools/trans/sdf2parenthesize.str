/**
 * Generates a Stratego that puts Parenthetical constructors at the right place.
 *
 * @author  Martin Bravenboer <martin@cs.uu.nl>
 * @since   0.11
 */
module sdf2parenthesize
imports
  Stratego
  liblib
  strategoxt-xtc-tools
  ast-conflicts
  sdf-options

strategies

  io-sdf2parenthesize =
    xtc-io-wrap(parenthesize-options,
      xtc-transform(!"sdf2ast-conflicts", <conc> (<pass-verbose>, <pass-sdf-main-module>))
    ; xtc-io-transform(core-sdf2parenthesize)
    ; xtc-transform(!"pp-stratego", !["--abstract" | <pass-verbose>])
    )

  core-sdf2parenthesize =
      where(new-hashtable => tbl)
    ; where(RuleName => l)

    ; map({sym1, sym2, pos:
        ?SubtermConflict(sym1, pos, sym2)
      ; <hashtable-push(|(sym1, pos), sym2)> tbl
      })

    ; <hashtable-keys> tbl
    ; map(generate-rule(|l, tbl))

    ; innermost-module

  generate-rule(|l, tbl) :
    (sym1, pos) -> |[ l : t1 -> t2 where <s> x ]|
        where <Symbol2Term> sym1 => t1
            ; <Symbol2ParenTerm(|pos)> sym1 => t2
            ; <index-to-subterm-id> pos => x

            ; <hashtable-get(|(sym1, pos))> tbl
            ; map(Symbol2Wld)
            ; <foldl( \ (s1, s2) -> |[ s1 + s2 ]| \ )> (<id>, |[ fail ]|)
            ; ?s

strategies

  /**
   * @type  Int -> String
   */
  index-to-subterm-id =
    <strcat> ("t_", <int-to-string>)

  /**
   * @type  Symbol -> StrategoStrategy
   */
  Symbol2Wld :
    Symbol(x, arity) -> Strat |[ ?x(t* ) ]|
      where <range> (0, arity); map(!Term |[ _ ]|) => t*

  Symbol2Term :
    Symbol(x, arity) -> Term |[ x(t* ) ]|
      where <range> (0, arity)
          ; map(
              index-to-subterm-id
            ; \ x -> Term |[ x ]| \
            )
          ; ?t*

  Symbol2ParenTerm(|pos) :
    Symbol(x, arity) -> Term |[ x(t* ) ]|
      where <range> (0, arity)
          ; map(
              if ?pos then
                index-to-subterm-id
                ; \ x -> Term |[ Parenthetical(x) ]| \
              else 
                index-to-subterm-id
                ; \ x -> Term |[ x ]| \
              end
            )
          ; ?t*

/**
 * Produce a module
 */
strategies
  
  innermost-module :
    rs ->
      |[ module M1
         imports liblib M2
         strategies

           f =
             io-wrap(g)

           g =
             innermost(l)

         rules
           ~*rs

         signature
           constructors
             Parenthetical : Unknown -> Unknown
      ]|
    where module-name => M1
        ; language-name => M2
        ; <conc-strings> ("io-", M1) => f
        ; <conc-strings> ("parenthesize-", M2) => g
        ; RuleName => l

/**
 * Options
 */
strategies

  parenthesize-options =
    sdf-main-module-option
  + stratego-module-option
  + language-option

  stratego-module-option =
    ArgOption("--omod"
    , ?s; rules(ModuleName : _ -> s)
    , <concat-strings>   ["--omod mod       ", "Name of the resulting Stratego module (required)"]
    )

  language-option =
    ArgOption("--lang"
    , ?s; rules(LanguageName : _ -> s)
    , <concat-strings>   ["--lang name      ", "Name of the language (required)"]
    )

  RuleName =
    <conc-strings> (<language-name>, "Parenthesize") => l

  module-name =
    ModuleName <+ <fatal-error> ["sdf2parenthesize: error: you must specify name of the resulting Stratego module with --omod"]

  language-name =
    LanguageName <+ <fatal-error> ["sdf2parenthesize: error: you must specify the name of the language with --lang"]

signature
  constructors
    StrategoModuleFlag : Flag
