module parse-unit
imports xtc-lib io list-filter string list-cons options config
imports oldskool-parse-testsuite parse-testsuite test-results testsuite-upgrade

strategies

  main-parse-unit =
    xtc-io-wrap(parse-unit-options, parse-unit)

  parse-unit-options =
       io-options
    <+ parse-table-option

  parse-table-option =
    ArgOption("-p"
    , where(<set-config> ("--parse-table", <id>))
    , !"-p FILE   Use parse table FILE (required)"
    )

  get-parse-table =
    <get-config> "--parse-table" <+ <fatal-error> ["** ERROR: no parse table specified"]

  abs-test-file =
    <conc-strings> (<get-config; get-path> "-i", <id>)

strategies

  parse-unit = 
    xtc-io-transform(
      try(upgrade-oldskool-testsuite)
    ; echo-start
    ; ?parse-testsuite(name(name), topsort(sort), <id>)
    ; map-with-index(execute-test(!sort, get-parse-table))
    ; !TestResults(<id>)
    ; where(<echo-results> (name, <id>))
    ; parse-unit-exit-on-failure
    )

  parse-unit-exit-on-failure =
    ?TestResults(<id>)
    ; map(?Success())
    <+ <exit> 1

  execute-test(sort, table) = 
      ?(i, <id>); ?t
    ; ?parse-test(description(n), input, expected)
    ; <parse> (<sort>, <table>, input)
    ; ?result
    ; <create-test-result> (<id>, expected)
    ; where(<echo-report> (i, t, result, <id>))

strategies

  echo-start =
    if-verbose1(
      where(
        ?parse-testsuite(name(name), _, tests)
      ; <echo> "-----------------------------------------------------------------------"
      ; <concat-strings; echo> ["executing testsuite ", name, " with ", <length; int-to-string> tests, " tests"]
      ; <echo> "-----------------------------------------------------------------------"
      )
    )

  echo-results =
    if-verbose1(
      where(	
        ?(name, TestResults(results))
      ; <echo> "-----------------------------------------------------------------------"
      ; <conc-strings; echo> ("results testsuite ", name)
      ; <conc-strings; echo> ("successes : ", <count-in-string(?Success())> results)
      ; <conc-strings; echo> ("failures  : ", <count-in-string(?Failure())> results)
      ; <echo> "-----------------------------------------------------------------------"
      )
    )

  echo-report =
    if-verbose1(
      ?(i, parse-test(description(n), _, expected), result, <id>)
    ; where(
        try(
          ?Success()
        ; <concat-strings; echo> ["* OK   : test ", <int-to-string> i, " (", n, ")"]
        )
      )
    ; where(
        try(
          ?Failure()
        ; <concat-strings; echo> ["* ERROR: test ", <int-to-string> i, " (", n, ")"]
        ; <try(ParseResult(Success, read-from)); debug(!"** Result:   ")> result
        ; <debug(!"** Expected: ")> expected
        )
      )
    )

strategies

  create-test-result =
       create-test-result-simple
    <+ create-test-compare
    <+ !Failure()

  /**
   * failure & success -> failure
   */
  create-test-result-simple:
    (ParseResult(Failure(), _), success()) -> Failure()

  /**
   * failure & pattern -> failure
   */
  create-test-result-simple:
    (ParseResult(Failure(), _), pattern(_)) -> Failure()

  /**
   * success & success -> success
   */
  create-test-result-simple:
    (ParseResult(Success(), _), success()) -> Success()

  /**
   * failure & failure -> success
   */
  create-test-result-simple:
    (ParseResult(Failure(), _), failure()) -> Success()

  /**
   * success & pattern -> compare
   */
  create-test-compare:
    (ParseResult(Success(), f@FILE(_)), pattern(p)) -> Success()
      where <eq> (<read-from> f, <implode-aterm> p)

strategies

  count-in-string(s) = 
    filter(s); length; int-to-string

  parse = 
      ?(sort, table, input)
    ; <parse-helper> (["-2A", "-p", table, "-s", sort], input)

  parse-helper = 
      ?(options, string(s))
    ; <print-to-tmp-file> s
    ; ?file
    ; finally(
        <parse-sglr> (options, file(<id>))
      , <rm-files> [file]
      )

  parse-helper :
    (opts, file(s)) -> <parse-sglr> (opts, file(<abs-test-file> s))
    
  parse-sglr =
      ?(options, file(pathname))
    ; !FILE(pathname)
    ; xtc-transform(!"sglr", !options)
    ; (   xtc-transform(!"implode-asfix", !["-b"])
        ; !ParseResult(Success(), <id>)
      <+  !ParseResult(Failure(), <id>)
      )
    <+ !ParseResult(Failure(), None())
  
  print-to-tmp-file =
      where(
        new-file => result-file
      ; <open-file> (result-file, "w") => stream
      )
    ; <print> (stream, [<id>])
    ; <close-file> result-file
    ; !result-file

