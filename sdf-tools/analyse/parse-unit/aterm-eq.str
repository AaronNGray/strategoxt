/**
 * Tests explodes ATerms for equivalence with wildcards.
 *
 * @author  Martin Bravenboer <martin@cs.uu.nl>
 */
module aterm-eq
imports
  ATerms
  ATerms-obsolete

strategies

  aterm-eq =
    rec x(
        list-term-eq(x)
    +    int-term-eq(x)
    +    fun-term-eq(x)
    +   appl-term-eq(x)
    +        afun-eq(x)
    +    wildcard-eq(x)
    + wildcardvar-eq(x)
    )

rules

  /**
   * Wildcard
   */
  wildcard-eq(x) =
    (id, wildcard())

  wildcard-eq(x) =
    (wildcard(), id)

rules

  wildcardvar-eq(x) =
    ?(list(not-empty(wildcardvar())), list(not-empty(_)))

  wildcardvar-eq(x) =
    ?(list(not-empty(_)), list(not-empty(wildcardvar())))

  wildcardvar-eq(x) =
    ?(appl(s1, wildcardvar()), appl(s2, _))
    ; where(<x> (s1, s2))

  wildcardvar-eq(x) =
    ?(appl(s1, _), appl(s2, wildcardvar()))
    ; where(<x> (s1, s2))

rules

  /**
   * list
   */
  list-term-eq(x) =
    ?(list(not-empty(xs1)), list(not-empty(xs2)))
    ; where(<zip(x)> (xs1, xs2))
 
  /**
   * integer
   */
  int-term-eq(x) =
    ?(constant(int(natural(s))), constant(int(natural(s))))

  /**
   * just fun
   */
  fun-term-eq(x) =
    ?(fun(a1), fun(a2))
    ; where(<x> (a1, a2))

  /**
   * appl
   */
  appl-term-eq(x) =
    ?(appl(s1, x1*), appl(s2, x2*))
    ; where(<x> (s1, s2))
    ; where(<zip(x)> (x1*, x2*))

rules

  /**
   * afun
   *
   * FIXME SDF: bootstrap problem, remove
   */
  afun-eq(x) = 
    ?(uqlit(s), uqlit(s))

  afun-eq(x) = 
    ?(unquoted(s), unquoted(s))

  /**
   * FIXME SDF: bootstrap problem, remove
   */
  afun-eq(x) = 
    ?(qlit(s), qlit(s))

  afun-eq(x) = 
    ?(quoted(s), quoted(s))

