module parse-testsuite
imports languages/aterm/syntax/ATerms
hiddens
  context-free start-symbols TestSuite

exports
  sorts TestSuite Test Result 
  context-free syntax
    "testsuite" Name TopSort Test+ -> TestSuite {cons("parse-testsuite")}
    "topsort" Sort -> TopSort {cons("topsort")}

    "test" Description Input Result -> Test {cons("parse-test")}
    "test"             Input Result -> Test {cons("parse-test")}

    "->" "file" PathName -> Result {cons("file")}
    "->" ATerm           -> Result {cons("pattern")}
    "_"                  -> ATerm  {cons("wildcard")}

    "fails"    -> Result {cons("failure")}
    "succeeds" -> Result {cons("success")}

    "file" PathName -> Input {cons("file")}

  %% allow unquoted upper case AFuns
  lexical syntax
    ""                             -> UQLiteral {cons("no-chars")}
    [A-Z][A-Za-z0-9\-]*[A-Za-z0-9] -> UQLiteral {cons("more-chars")}

  %% allow function applications without arguments
  context-free syntax
    fun:AFun "(" ")" -> ATerm {cons("fun")}

  syntax
    "\""       <InputChars1-LEX> "\""       -> <Input-CF> {cons("string")}
    "\"\""     <InputChars2-LEX> "\"\""     -> <Input-CF> {cons("string")}
    "\"\"\""   <InputChars3-LEX> "\"\"\""   -> <Input-CF> {cons("string")}
    "\"\"\"\"" <InputChars4-LEX> "\"\"\"\"" -> <Input-CF> {cons("string")}

    "["    <InputChars21-LEX> "]"    -> <Input-CF> {cons("string")}
    "[["   <InputChars22-LEX> "]]"   -> <Input-CF> {cons("string")}
    "[[["  <InputChars23-LEX> "]]]"  -> <Input-CF> {cons("string")}
    "[[[[" <InputChars24-LEX> "]]]]" -> <Input-CF> {cons("string")}

  context-free syntax
    EOLString -> Name {cons("name")}
    EOLString -> Description {cons("description")}

  lexical syntax
    [A-Z]                          -> Sort
    [A-Z][A-Za-z0-9\-]*[A-Za-z0-9] -> Sort

    ~[\n]+ -> EOLString

    ~[\"]* -> InputChars1
    (~[\"]  | DQuote1)*                      -> InputChars2
    (~[\"]  | DQuote1 | DQuote2)*            -> InputChars3
    (~[\"]  | DQuote1 | DQuote2 | DQuote3 )* -> InputChars4

    "\""     -> DQuote1
    "\"\""   -> DQuote2
    "\"\"\"" -> DQuote3

    ~[\[]* -> InputChars21
    (~[\[]  | Bracket1)*                        -> InputChars22
    (~[\[]  | Bracket1 | Bracket2)*             -> InputChars23
    (~[\[]  | Bracket1 | Bracket2 | Bracket3 )* -> InputChars24

    "["   -> Bracket1
    "[["  -> Bracket2
    "[[[" -> Barcket3

    [A-Za-z0-9\-\_\.\\\/]+ -> PathName

  lexical restrictions
    Sort      -/- [A-Za-z0-9\-]
    EOLString -/- ~[\n]
    DQuote1   -/- [\"]
    DQuote2   -/- [\"]
    DQuote3   -/- [\"]

    "\""      -/- [\"]
    "\"\""    -/- [\"]
    "\"\"\""  -/- [\"]

    Bracket1   -/- [\[]
    Bracket2   -/- [\[]
    Bracket3   -/- [\[]

    "["    -/- [\[]
    "[["   -/- [\[]
    "[[["  -/- [\[]

  lexical syntax
    "//" ~[\n]* ([\n] | Eof) -> ShortCom
    "/*" CommChar* "*/"      -> LongCom

    ~[\*]      -> CommChar

    "*"        -> Asterisk
    Asterisk   -> CommChar

  lexical restrictions
    Asterisk -/- [\/]

  lexical syntax
    ShortCom 	-> LAYOUT
    LongCom 	-> LAYOUT
