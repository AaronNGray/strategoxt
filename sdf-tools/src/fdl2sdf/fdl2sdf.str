module fdl2sdf
imports Sdf2 fdl AsFix liblib
strategies

  fdl2sdf =
    io-wrap(fail, fdl2sdf-usage, system-about, bottomup(try(Fdl2Sdf)))

  fdl2sdf-usage =
    default-system-usage(
      !["Usage: fdl2sdf [options]"]
    , !["This program generates an SDF syntax definition from a Feature Description\n",
        "written in the Feature Description Language (FDL). Feature constraints\n",
        "are discarded.\n\n",
        "The program takes as input a parsed and imploded feature description. It\n",
        "produces an AST of an SDF module as output."]
    )

  Fdl2Sdf :
    one-of(xs) -> <foldr1(\[x] -> x\, \(x,y) -> alt(x,y)\ )>xs

  Fdl2Sdf : 'all( x ) -> x

  Fdl2Sdf : more-of(xs) -> iter(xs')
   where <foldr1(\[x] -> x\, \(x,y) -> alt(x,y)\ )>xs => xs'

  Fdl2Sdf :
    default(x) -> "default"

  Fdl2Sdf :
    dots -> "..."

  Fdl2Sdf :
    FeatureName(x) -> sort(x)

  Fdl2Sdf :
    AtomicFeature(s) -> <double-quote> s

  Fdl2Sdf :
    optional(x) -> opt(x)

  Fdl2Sdf:
    FeatureDefinition(x,y) -> prod(syms, sort(x),attrs([term(cons(x))]))
      where (<is-list> y <+ ![y]) => syms

  Fdl2Sdf: 
    FeatureDiagram(d,c) -> 'module("fdl-module", 'imports, ['sorts, cfs] )
      where !imports(["Layout"])   => 'imports
          ; <collect(sort(id));uniq> d => s
          ; !exports('sorts(s)) => 'sorts
          ; !exports(context-free-syntax(d)) => cfs
