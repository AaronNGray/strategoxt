module sdf-wf
imports lib sdf-analysis
strategies

  sdf-wf =
    io-wrap(sdf-wf-options, sdf-wf-main)

  short-description(p) =
    ![<p>(), " -- check the well-formedness of an SDF grammar"]

  long-description(p)  =
    !["Input is an SDF grammar (in AST form).\n",
      "Output is an SDF grammar (in AST form).\n",
      "The well-formedness report is writen to stderr.\n",
      "If both -e and -S are supplied, no report is emitted."]

  sdf-wf-main
    = where (
        obtain-wf-analyses
      ; where(sdf-wf-main-short <+ sdf-wf-main-long)
      ; maybe-exit-with-error
    )

  sdf-wf-main-short
    = where(<get-config> ShortForm())
    ; ?(alldecs,decs,defs,uses,tops,doubledecs,srts,nondecs,bots,nd-tops,uk-decs)
    ; try-debug(!"Well-formedness report (short form)")
    ; ![" Top sorts:               ",tops]   ;print-report-line
    ; ![" Bottom sorts:            ",bots]   ;print-report-line
    ; ![" Non-declared top sorts:  ",nd-tops];print-report-line
    ; ![" Unknown declared sorts:  ",uk-decs];print-report-line

  sdf-wf-main-long
    = ?(alldecs,decs,defs,uses,tops,doubledecs,srts,nondecs,bots,nd-tops,uk-decs)
    ; !["ANALYSES:"]                              ;print-report-line
    ; ![" Declared sorts:          ",decs]        ;print-report-line
    ; ![" Defined sorts:           ",defs]        ;print-report-line
    ; ![" Used sorts:              ",uses]        ;print-report-line
    ; ![" Top sorts:               ",tops]        ;print-report-line
    ; ![" Multiply declared sorts: ",doubledecs]  ;print-report-line
    ; ![" Non-declared sorts:      ",nondecs]     ;print-report-line
    ; !["NUMBERS:"]                               ;print-report-line
    ; ![" Sorts:                   ",<length>srts];print-report-line
    ; !["WARNINGS:"]                              ;print-report-line
    ; ![" Bottom sorts:            ",bots]        ;print-report-line
    ; ![" Non-declared top sorts:  ",nd-tops]     ;print-report-line
    ; ![" Unknown declared sorts:  ",uk-decs]     ;print-report-line

  maybe-exit-with-error
    = try(
        where(<get-config> WarningsAreErrors())
      ; ?(alldecs,decs,defs,uses,tops,doubledecs,srts,nondecs,bots,nd-tops,uk-decs)
      ; try( !bots;    not(?[]); <fatal-error>["Error: Grammar contains bottom sorts"] )
      ; try( !nd-tops; not(?[]); <fatal-error>["Error: Grammar contains non-declared top sorts"] )
      ; try( !uk-decs; not(?[]); <fatal-error>["Error: Grammar contains unknown declared sorts"] )
      )

  print-report-line =
    <printnl> (stderr(), <id>)

  obtain-wf-analyses =
      where( declared-sorts        => alldecs )
    ; where( <uniq>alldecs         => decs )
    ; where( defined-sorts         => defs )
    ; where( used-sorts            => uses )
    ; where( !(defs,uses);diff     => tops )
    ; where( !alldecs; doubles     => doubledecs )
    ; where( !(defs,uses);union    => srts )
    ; where( !(srts,decs);diff     => nondecs )
    ; where( !srts;length          => srts-count )
    ; where( !(uses,defs);diff     => bots )
    ; where( !(tops,decs);diff     => nd-tops )
    ; where( !(decs,srts);diff     => uk-decs )
    ; !(alldecs,decs,defs,uses,tops,doubledecs,srts,nondecs,bots,nd-tops,uk-decs)
  
  sdf-wf-options=
      Option("--short"
      , <set-config> (ShortForm(), ())
      , !"--short     print short form of well-formedness report"
      )
    + Option("-e"
      , <set-config> (WarningsAreErrors(), ())
      , !"-e          exit with error if grammar is ill-formed"
      )

  try-debug(s) =
    if-verbose1(where(s; debug))

signature
  constructors
    ShortForm		: Option
    WarningsAreErrors	: Option

strategies

  doubles =
      ?xs
    ; filter(not(once(!xs)))
    ; uniq

  once(xs) = 
      ?x
    ; where(xs; filter(?x) => [_])
    ; !x

