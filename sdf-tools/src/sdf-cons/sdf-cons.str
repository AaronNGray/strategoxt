/**
 * Add cons(...) attributes to Sdf productions.
 *
 * @author Original: Joost Visser <Joost.Visser@cwi.nl>
 * @author Changes: Merijn de Jonge, Eelco Visser, Hedzer Westra, and Martin Bravenboer
 * 
 * Changes:
 *
 * 2001-4-19 Eelco Visser
 *   - injections not named
 *
 * 2001-5-18 Eelco Visser
 *   - injections named by default
 *   - option --injections added to turn off
 *
 * 2004-04-22 Martin Bravenboer
 *   - Use io-wrap
 *   - Upgrade to SDF2 syntax of PGEN 2.0
 */
module sdf-cons
imports lib Sdf2 prodcons
strategies

  io-sdf-cons =
    io-wrap(sdf-cons-options,
      if ?"\"sdf-2.1\""#([trm]) then
        !"\"sdf-2.1\""#([<sdf-cons> trm])
      else
        sdf-cons
      end
    )

  sdf-cons-options =
      Option("--modular"
      , <set-config> ("--modular",  "yes")
      , !"--modular      unique names per module"
      )
    + Option("--injections"
      , <set-config> ("--injections",  "yes")
      , !"--injections   do not generate constructors for injections"
      )

  short-description(p) =
    ![<p>(), " -- usage:"]

  long-description(p)  =
    !["This program adds constructor names to productions of an SDF grammar." ]

strategies

  sdf-cons =
    alltd(lexical-syntax(id) <+ (is-prod; prodcons))
  ; alltd(cons(try(de-quote)))
  ; if <get-config> "--modular" then
      uniquify-modular
    else
      uniquify
    end

  uniquify-modular =
    Definition(map(uniquify-module))

  uniquify-modular =
    definition(map(uniquify-module))

  uniquify =
    uniquify-module

/**
 * Uniquifying using tables to implement a bucket sort
 */
strategies

  uniquify-module =
    where(uniquify-prods)
  ; alltd(replace-prod)

  uniquify-prods =
    collect(prod(id,id,id))
  ; where(<table-create> "prods")
  ; map(try(add-prod))
  ; <table-getlist> "prods"
  ; map(uniquify-constr)

  add-prod =
    where(
      ?p
    ; get-constr => c
    ; <table-push>("prods", c, p)
    )

  replace-prod =
    ?prod(srts, res, _)
  ; prod(id, id, at-cons(<table-get>("prods", prod(srts,res, no-attrs()))))

  uniquify-constr =
    (id, reverse; [id | \ps -> <thread-map(prime-prod); Fst> (ps, 1) \ ])

rules

  prime-prod :
    Pair(p@prod(ss,res,as), n) -> Pair(prod(ss, res, <at-cons(!c)> as), <add> (n, 1))
      where <prime-constr> (<get-constr> p, n) => c
          ; <table-put>("prods", prod(ss, res, no-attrs()), c)

  prime-constr :
    (c, n) -> <conc-strings> (c, <int-to-string> n)

strategies

  is-prod
    = prod(id,id,id)
   <+ prod-fun(id,id,id,id)