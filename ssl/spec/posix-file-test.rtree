Specification([Imports(["sunit","posix-file"]),Strategies([SDef("main",[],Call(SVar("test-suite"),[Build(Str("posix-file-test")),Seq(Call(SVar("fileno-tests"),[]),Seq(Call(SVar("aterm-io-tests"),[]),Seq(Call(SVar("char-output-tests"),[]),Seq(Call(SVar("strcat-tests"),[]),Seq(Call(SVar("strlen-tests"),[]),Call(SVar("new-concat-strings-tests"),[]))))))])),SDef("fileno-tests",[],Seq(Call(SVar("apply-test"),[Build(Str("fileno on stdin  -- 1")),Call(SVar("fileno"),[]),Call(SVar("stdin-stream"),[]),Build(Int(0))]),Seq(Call(SVar("apply-test"),[Build(Str("fileno on stdin  -- 2")),Call(SVar("fileno"),[]),Call(SVar("stdin-stream"),[]),Call(SVar("STDIN_FILENO"),[])]),Seq(Call(SVar("apply-test"),[Build(Str("fileno on stdout -- 1")),Call(SVar("fileno"),[]),Call(SVar("stdout-stream"),[]),Build(Int(1))]),Seq(Call(SVar("apply-test"),[Build(Str("fileno on stdout -- 2")),Call(SVar("fileno"),[]),Call(SVar("stdout-stream"),[]),Call(SVar("STDOUT_FILENO"),[])]),Seq(Call(SVar("apply-test"),[Build(Str("fileno on stderr -- 1")),Call(SVar("fileno"),[]),Call(SVar("stderr-stream"),[]),Build(Int(2))]),Seq(Call(SVar("apply-test"),[Build(Str("fileno on stderr -- 2")),Call(SVar("fileno"),[]),Call(SVar("stderr-stream"),[]),Call(SVar("STDERR_FILENO"),[])]),Seq(Where(AM(Call(SVar("new-temp-file"),[]),Op("",[Var("tmp-name"),Var("tmp-fd")]))),Seq(Call(SVar("apply-test"),[Build(Str("fileno on temp file")),Seq(BA(Call(SVar("fdopen"),[]),Op("",[Var("tmp-fd"),Str("w")])),Seq(Match(Var("stream")),Seq(BA(Call(SVar("fileno"),[]),Var("stream")),Where(BA(Call(SVar("fclose"),[]),Var("stream")))))),Build(Var("tmp-fd"))]),Where(BA(Call(SVar("remove-file"),[]),Var("tmp-name")))))))))))),SDef("aterm-io-tests",[],Seq(Call(SVar("aterm-io-tests"),[Call(SVar("write-in-baf-to-stream"),[])]),Seq(Call(SVar("aterm-io-tests"),[Call(SVar("write-in-taf-to-stream"),[])]),Call(SVar("aterm-io-tests"),[Call(SVar("write-in-text-to-stream"),[])])))),SDef("aterm-io-tests",[DefaultVarDec("writer")],Seq(Call(SVar("apply-test"),[Build(Str("ATerm IO -- 1")),Call(SVar("write-read-term"),[Call(SVar("writer"),[])]),Build(Str("Bla Bla Bla")),Build(Str("Bla Bla Bla"))]),Seq(Call(SVar("apply-test"),[Build(Str("ATerm IO -- 3")),Call(SVar("write-read-term"),[Call(SVar("writer"),[])]),Build(Int(1)),Build(Int(1))]),Call(SVar("apply-test"),[Build(Str("ATerm IO -- 4")),Call(SVar("write-read-term"),[Call(SVar("writer"),[])]),Build(Op("None",[])),Build(Op("None",[]))])))),SDef("write-read-term",[DefaultVarDec("writer")],Seq(Match(Var("t")),Seq(BA(Call(SVar("fopen"),[]),Op("",[Str("test.aterm"),Str("w")])),Seq(BA(Call(SVar("writer"),[]),Op("",[RootApp(Id),Var("t")])),Seq(Call(SVar("fclose"),[]),Seq(BA(Call(SVar("fopen"),[]),Op("",[Str("test.aterm"),Str("r")])),Seq(Where(AM(Call(SVar("read-from-stream"),[]),Var("t"))),Seq(Call(SVar("fclose"),[]),Seq(BA(Call(SVar("remove-file"),[]),Str("test.aterm")),Build(Var("t"))))))))))),SDef("char-output-tests",[],Call(SVar("apply-test"),[Build(Str("stdout char output test -- 1")),Seq(BA(Call(SVar("write-to-stream"),[]),Op("",[RootApp(Id),Str("This is stdout (1)")])),Seq(BA(Call(SVar("fputs"),[]),Op("",[Str("This is stdout (2)\n"),RootApp(Id)])),BA(Call(SVar("puts"),[]),Str("This is stdout (3)")))),Call(SVar("stdout-stream"),[]),Call(SVar("stdout-stream"),[])])),SDef("strcat-tests",[],Seq(Call(SVar("apply-test"),[Build(Str("strcat-1")),Call(SVar("strcat"),[]),Build(Op("",[Str(""),Str("")])),Build(Str(""))]),Seq(Call(SVar("apply-test"),[Build(Str("strcat-2")),Call(SVar("strcat"),[]),Build(Op("",[Str("a"),Str("")])),Build(Str("a"))]),Seq(Call(SVar("apply-test"),[Build(Str("strcat-3")),Call(SVar("strcat"),[]),Build(Op("",[Str(""),Str("a")])),Build(Str("a"))]),Call(SVar("apply-test"),[Build(Str("strcat-4")),Call(SVar("strcat"),[]),Build(Op("",[Str("hello "),Str("world")])),Build(Str("hello world"))]))))),SDef("strlen-tests",[],Seq(Call(SVar("apply-test"),[Build(Str("strlen-1")),Call(SVar("strlen"),[]),Build(Str("")),Build(Int(0))]),Seq(Call(SVar("apply-test"),[Build(Str("strlen-2")),Call(SVar("strlen"),[]),Build(Str("a")),Build(Int(1))]),Call(SVar("apply-test"),[Build(Str("strlen-3")),Call(SVar("strlen"),[]),Build(Str("hello world")),Build(Int(11))])))),SDef("new-concat-strings-tests",[],Seq(Call(SVar("apply-test"),[Build(Str("new-concat-strings-1")),Call(SVar("new-concat-strings"),[]),Build(Op("Nil",[])),Build(Str(""))]),Seq(Call(SVar("apply-test"),[Build(Str("new-concat-strings-2")),Call(SVar("new-concat-strings"),[]),Build(Op("Cons",[Str("a"),Op("Cons",[Str(""),Op("Nil",[])])])),Build(Str("a"))]),Seq(Call(SVar("apply-test"),[Build(Str("new-concat-strings-3")),Call(SVar("new-concat-strings"),[]),Build(Op("Cons",[Str(""),Op("Cons",[Str("a"),Op("Nil",[])])])),Build(Str("a"))]),Call(SVar("apply-test"),[Build(Str("new-concat-strings-4")),Call(SVar("new-concat-strings"),[]),Build(Op("Cons",[Str("hello "),Op("Cons",[Str("world"),Op("Nil",[])])])),Build(Str("hello world"))])))))])])
