/**
 * sunit: Unit Testing Framework.
 */
module sunit
imports io

strategies
	
  init-record = !(0,0)

  record-success = (\x -> <add>(x,1)\ , id)

  record-failure = (id, \x -> <add>(x,1)\ )

//  check-for-failures = (id, 0); <exit> 0 <+ <exit> 1

  check-for-failures = (id, 0)

  report-test = (debug(!"successes: "), debug(!"failures: "))

  test-suite(name, tests) =
    name
    ; debug(!"test suite: ")
    ; init-record
    ; tests
    ; report-test
    ; check-for-failures

  do-test(nr, s) =
    where(nr; debug)
    ; (where(s); record-success 
       <+ record-failure)

  testing(nr, s) =
    do-test(nr, s; debug(!"  succeeded: ") 
	   	<+ debug(!"  failed: "); fail)

  apply-test(name, s, 'in, out) =
    do-test(name,
            ('in; s <+ <debug> "  failed"; fail) => tmp;
  	    out => tmp'; 
	    ((!tmp' => tmp)
               <+ (<debug(!"  result not equal: ")> tmp;
                   <debug(!"  expected: ")> tmp'); fail))

  apply-test(name, s, 'in) =
    do-test(name,
      ('in; s <+ <debug> "  failed"; fail)
    )

  apply-and-check(name, s, 'in, check) =
    do-test(name,
      ('in; s  <+ <debug> "  application failed"; fail)
      ; (check <+ (debug(!"  check failed: "); fail))
    )

  apply-and-fail(name, s, 'in) =
    apply-and-fail(name, s, 'in, !())

  apply-and-fail(name, s, 'in, out) =
    do-test(name,
	    (('in; not(s))
             <+ <debug> "  succeeded (should fail)"; fail))

  apply-and-show(name, s, 'in) =
    do-test(name
	   ,('in; s <+ <debug> "  failed"; fail)
            ; <debug> ["  succeeded; result: ", <id>]
           )

