Specification([Strategies([SDef("is-int",[],Seq(Match(Var("i")),Prim("SSL_is_int",[Var("i")]))),SDef("minus",[],Seq(Call(SVar("obsolete"),[Build(Str("minus; use subt"))]),Call(SVar("subt"),[]))),SDef("plus",[],Seq(Call(SVar("obsolete"),[Build(Str("plus; use add"))]),Call(SVar("add"),[]))),SDef("add",[],Seq(Match(Op("",[Var("x"),Var("y")])),LChoice(Prim("SSL_addi",[Var("x"),Var("y")]),Prim("SSL_addr",[Var("x"),Var("y")])))),SDef("addi",[],Seq(Match(Op("",[Var("x"),Var("y")])),Prim("SSL_addi",[Var("x"),Var("y")]))),SDef("addr",[],Seq(Match(Op("",[Var("x"),Var("y")])),Prim("SSL_addr",[Var("x"),Var("y")]))),SDef("subt",[],Seq(Match(Op("",[Var("x"),Var("y")])),LChoice(Prim("SSL_subti",[Var("x"),Var("y")]),Prim("SSL_subtr",[Var("x"),Var("y")])))),SDef("subti",[],Seq(Match(Op("",[Var("x"),Var("y")])),Prim("SSL_subti",[Var("x"),Var("y")]))),SDef("subtr",[],Seq(Match(Op("",[Var("x"),Var("y")])),Prim("SSL_subtr",[Var("x"),Var("y")]))),SDef("mul",[],Seq(Match(Op("",[Var("x"),Var("y")])),LChoice(Prim("SSL_muli",[Var("x"),Var("y")]),Prim("SSL_mulr",[Var("x"),Var("y")])))),SDef("muli",[],Seq(Match(Op("",[Var("x"),Var("y")])),Prim("SSL_muli",[Var("x"),Var("y")]))),SDef("mulr",[],Seq(Match(Op("",[Var("x"),Var("y")])),Prim("SSL_mulr",[Var("x"),Var("y")]))),SDef("div",[],Seq(Match(Op("",[Var("x"),Var("y")])),LChoice(Prim("SSL_divi",[Var("x"),Var("y")]),Prim("SSL_divr",[Var("x"),Var("y")])))),SDef("divi",[],Seq(Match(Op("",[Var("x"),Var("y")])),Prim("SSL_divi",[Var("x"),Var("y")]))),SDef("divr",[],Seq(Match(Op("",[Var("x"),Var("y")])),Prim("SSL_divr",[Var("x"),Var("y")]))),SDef("mod",[],Seq(Match(Op("",[Var("x"),Var("y")])),Prim("SSL_mod",[Var("x"),Var("y")]))),SDef("gt",[],Seq(Match(Op("",[Var("x"),Var("y")])),Test(LChoice(Prim("SSL_gti",[Var("x"),Var("y")]),Prim("SSL_gtr",[Var("x"),Var("y")]))))),SDef("gti",[],Seq(Match(Op("",[Var("x"),Var("y")])),Test(Prim("SSL_gti",[Var("x"),Var("y")])))),SDef("gtr",[],Seq(Match(Op("",[Var("x"),Var("y")])),Test(Prim("SSL_gtr",[Var("x"),Var("y")])))),SDef("geq",[],LChoice(Match(Op("",[Var("x"),Var("x")])),Call(SVar("gt"),[]))),SDef("lt",[],Not(Call(SVar("geq"),[]))),SDef("leq",[],Not(Call(SVar("gt"),[])))]),Strategies([SDef("leq-leq",[],Call(SVar("comp-comp"),[Call(SVar("leq"),[]),Call(SVar("leq"),[])])),SDef("leq-lt",[],Call(SVar("comp-comp"),[Call(SVar("leq"),[]),Call(SVar("lt"),[])])),SDef("lt-leq",[],Call(SVar("comp-comp"),[Call(SVar("lt"),[]),Call(SVar("leq"),[])])),SDef("lt-lt",[],Call(SVar("comp-comp"),[Call(SVar("lt"),[]),Call(SVar("lt"),[])])),SDef("comp-comp",[DefaultVarDec("s1"),DefaultVarDec("s2")],Seq(Match(Op("",[Var("x"),Var("y"),Var("z")])),Where(Seq(BA(Call(SVar("s1"),[]),Op("",[Var("x"),Var("y")])),BA(Call(SVar("s2"),[]),Op("",[Var("y"),Var("z")]))))))]),Strategies([SDef("even",[],Where(AM(BA(Call(SVar("mod"),[]),Op("",[RootApp(Id),Int(2)])),Int(0)))),SDef("max",[],GuardedLChoice(Call(SVar("gt"),[]),Call(SVar("Fst"),[]),Call(SVar("Snd"),[]))),SDef("min",[],GuardedLChoice(Call(SVar("gt"),[]),Call(SVar("Snd"),[]),Call(SVar("Fst"),[]))),SDef("pos",[],Where(BA(Call(SVar("geq"),[]),Op("",[RootApp(Id),Int(0)])))),SDef("neg",[],Where(BA(Call(SVar("lt"),[]),Op("",[RootApp(Id),Int(0)])))),SDef("int",[],Seq(Match(Var("x")),Prim("SSL_int",[Var("x")]))),SDef("int-to-string",[],Seq(Match(Var("x")),Prim("SSL_int_to_string",[Var("x")]))),SDef("string-to-int",[],Seq(Match(Var("x")),Prim("SSL_string_to_int",[Var("x")])))]),Strategies([SDef("hex-string-to-int",[],BA(Call(SVar("generic-string-to-int"),[]),Op("",[RootApp(Id),Int(16)]))),SDef("dec-string-to-int",[],BA(Call(SVar("generic-string-to-int"),[]),Op("",[RootApp(Id),Int(10)]))),SDef("oct-string-to-int",[],BA(Call(SVar("generic-string-to-int"),[]),Op("",[RootApp(Id),Int(8)]))),SDef("bin-string-to-int",[],BA(Call(SVar("generic-string-to-int"),[]),Op("",[RootApp(Id),Int(2)]))),SDef("hex-chars-to-int",[],BA(Call(SVar("generic-chars-to-int"),[]),Op("",[RootApp(Id),Int(16)]))),SDef("dec-chars-to-int",[],BA(Call(SVar("generic-chars-to-int"),[]),Op("",[RootApp(Id),Int(10)]))),SDef("oct-chars-to-int",[],BA(Call(SVar("generic-chars-to-int"),[]),Op("",[RootApp(Id),Int(8)]))),SDef("bin-chars-to-int",[],BA(Call(SVar("generic-chars-to-int"),[]),Op("",[RootApp(Id),Int(2)]))),SDef("generic-string-to-int",[],Seq(Call(SVar(""),[Call(SVar("explode-string"),[]),Id]),Call(SVar("generic-chars-to-int"),[]))),SDef("generic-chars-to-int",[],LChoice(Call(SVar("neg-chars-to-int"),[]),Call(SVar("pos-chars-to-int"),[]))),RDef("neg-chars-to-int",[],Rule(Op("",[Op("Cons",[Int(45),Var("chars")]),Var("radix")]),App(Call(SVar("mul"),[]),Op("",[Int(-1),App(Call(SVar("pos-chars-to-int"),[]),Op("",[Var("chars"),Var("radix")]))])),BA(Call(SVar("gt"),[]),Op("",[App(Call(SVar("length"),[]),Var("chars")),Int(0)])))),SDef("pos-chars-to-int",[],Seq(Match(Op("",[Op("Cons",[Var("char"),Var("chars")]),Var("r")])),BA(Call(SVar("foldl"),[BA(Call(SVar("add"),[]),Op("",[App(Call(SVar("char-to-digit"),[]),Op("",[RootApp(Call(SVar("Fst"),[])),Var("r")])),App(Call(SVar("mul"),[]),Op("",[RootApp(Call(SVar("Snd"),[])),Var("r")]))]))]),Op("",[Var("chars"),App(Call(SVar("char-to-digit"),[]),Op("",[Var("char"),Var("r")]))])))),RDef("char-to-digit",[],Rule(Op("",[Var("x"),Var("radix")]),Var("result"),Seq(BA(Call(SVar("is-num"),[]),Var("x")),Seq(AM(BA(Call(SVar("subt"),[]),Op("",[Var("x"),Int(48)])),Var("result")),BA(Call(SVar("lt"),[]),Op("",[Var("result"),Var("radix")])))))),RDef("char-to-digit",[],Rule(Op("",[Var("x"),Int(16)]),App(Call(SVar("add"),[]),Op("",[Int(10),App(Call(SVar("subt"),[]),Op("",[Var("x"),Int(97)]))])),BA(Call(SVar("leq-leq"),[]),Op("",[Int(97),Var("x"),Int(102)])))),RDef("char-to-digit",[],Rule(Op("",[Var("x"),Int(16)]),App(Call(SVar("add"),[]),Op("",[Int(10),App(Call(SVar("subt"),[]),Op("",[Var("x"),Int(65)]))])),BA(Call(SVar("leq-leq"),[]),Op("",[Int(65),Var("x"),Int(70)]))))]),Strategies([SDef("addS",[],Seq(Call(SVar(""),[Call(SVar("string-to-int"),[]),Call(SVar("string-to-int"),[])]),Seq(Call(SVar("add"),[]),Call(SVar("int-to-string"),[])))),SDef("subtS",[],Seq(Call(SVar(""),[Call(SVar("string-to-int"),[]),Call(SVar("string-to-int"),[])]),Seq(Call(SVar("subt"),[]),Call(SVar("int-to-string"),[])))),SDef("mulS",[],Seq(Call(SVar(""),[Call(SVar("string-to-int"),[]),Call(SVar("string-to-int"),[])]),Seq(Call(SVar("mul"),[]),Call(SVar("int-to-string"),[])))),SDef("divS",[],Seq(Call(SVar(""),[Call(SVar("string-to-int"),[]),Call(SVar("string-to-int"),[])]),Seq(Call(SVar("div"),[]),Call(SVar("int-to-string"),[])))),SDef("modS",[],Seq(Call(SVar(""),[Call(SVar("string-to-int"),[]),Call(SVar("string-to-int"),[])]),Seq(Call(SVar("mod"),[]),Call(SVar("int-to-string"),[])))),SDef("gtS",[],Where(Seq(Call(SVar(""),[Call(SVar("string-to-int"),[]),Call(SVar("string-to-int"),[])]),Call(SVar("gt"),[])))),SDef("geqS",[],Where(Seq(Call(SVar(""),[Call(SVar("string-to-int"),[]),Call(SVar("string-to-int"),[])]),Call(SVar("geq"),[])))),SDef("ltS",[],Where(Seq(Call(SVar(""),[Call(SVar("string-to-int"),[]),Call(SVar("string-to-int"),[])]),Call(SVar("lt"),[])))),SDef("leqS",[],Where(Seq(Call(SVar(""),[Call(SVar("string-to-int"),[]),Call(SVar("string-to-int"),[])]),Call(SVar("leq"),[])))),SDef("maxS",[],Where(Seq(Call(SVar(""),[Call(SVar("string-to-int"),[]),Call(SVar("string-to-int"),[])]),Call(SVar("max"),[])))),SDef("minS",[],Where(Seq(Call(SVar(""),[Call(SVar("string-to-int"),[]),Call(SVar("string-to-int"),[])]),Call(SVar("min"),[])))),SDef("inc",[],BA(Call(SVar("add"),[]),Op("",[RootApp(Id),Int(1)]))),SDef("dec",[],BA(Call(SVar("subt"),[]),Op("",[RootApp(Id),Int(1)]))),SDef("log2",[],Seq(Build(Op("",[RootApp(Id),Int(0)])),Seq(Call(SVar("repeat"),[Call(SVar(""),[Seq(Build(Op("",[App(Call(SVar("divi"),[]),Op("",[RootApp(Id),Int(2)])),App(Seq(Call(SVar("mod"),[]),Match(Int(0))),Op("",[RootApp(Id),Int(2)]))])),Call(SVar("Fst"),[])),Call(SVar("inc"),[])])]),Match(Op("",[Int(1),RootApp(Id)])))))]),Signature([Sorts([Sort("IntI",[])]),Constructors([OpDecl("Infinite",ConstType(Var("IntI")))])]),Rules([RDef("add-inf1",[],Rule(Op("",[Var("Infinite"),Wld]),Var("Infinite"),Id)),RDef("add-inf2",[],Rule(Op("",[Wld,Var("Infinite")]),Var("Infinite"),Id)),SDef("add-inf",[],LChoice(Choice(Call(SVar("add-inf1"),[]),Call(SVar("add-inf2"),[])),Call(SVar("add"),[]))),SDef("lt-inf",[],LChoice(Match(Op("",[RootApp(Call(SVar("is-int"),[])),Var("Infinite")])),Seq(Call(SVar(""),[Call(SVar("is-int"),[]),Call(SVar("is-int"),[])]),Call(SVar("lt"),[]))))]),Imports(["dynamic-rules"]),Strategies([SDef("new-counter",[],Seq(Call(SVar("new"),[]),Call(SVar("reset-counter"),[]))),SDef("reset-counter",[],Seq(Match(Var("c")),Where(BA(Call(SVar("set-counter"),[]),Op("",[Var("c"),Int(0)]))))),SDef("set-counter",[],Seq(Match(Op("",[Var("c"),Var("n")])),DynamicRules([RDef("Counter",[],Rule(Var("c"),Var("n"),Id))]))),SDef("get-counter",[],LChoice(Call(SVar("Counter"),[]),BA(Call(SVar("set-counter"),[]),Op("",[RootApp(Id),Int(0)])))),SDef("next-counter",[],Seq(Match(Var("c")),Seq(Call(SVar("get-counter"),[]),Seq(Call(SVar("inc"),[]),Where(BA(Call(SVar("set-counter"),[]),Op("",[Var("c"),RootApp(Id)])))))))])])
