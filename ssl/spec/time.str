\literate[time]

	\begin{abstract}
	The primitive \verb|dtime| returns the CPU time in seconds
	since the last call to \verb|dtime|. Can be used to time
	strategies.
	\end{abstract}

\begin{code}
module time

signature
  constructors
    EpochTime     : Int -> EpochTime

    ComponentTime : Date * DayTime * ComponentTimeDupl -> ComponentTime
    DayTime       : Int * Int * Int -> DayTime // Hours, Minutes, Seconds
    Date          : Int * Month * Int -> Date    // Year, DayOfMonth
    Dupl          : Int * Int -> ComponentTimeDupl // DayOfWeek, DayOfYear
   
  constructors
    January   : Month
    February  : Month
    March     : Month
    April     : Month
    May       : Month
    June      : Month
    July      : Month
    August    : Month
    September : Month
    October   : Month
    November  : Month
    December  : Month

  constructors
    Sunday    : DayOfWeek
    Monday    : DayOfWeek
    Tuesday   : DayOfWeek
    Wednesday : DayOfWeek
    Thursday  : DayOfWeek
    Friday    : DayOfWeek
    Saturday  : DayOfWeek
  
strategies

  /*   time  returns the time since the Epoch (00:00:00 UTC, JanÂ­
       uary 1, 1970), measured in seconds. */
  time = 
    prim("SSL_time")

  // :: _ -> EpochTime
  now-epoch-time =
    prim("SSL_now_epoch_time"); !EpochTime(<id>)

  // :: _ -> ComponentTime
  now-local-time =
      now-epoch-time; epoch2local-time

  // :: _ -> ComponentTime
  now-UTC =
      now-epoch-time; epoch2UTC

  // :: EpochTime -> ComponentTime
  epoch2local-time =
    ?EpochTime(t); prim("SSL_epoch2localtime", t); prim-tuple-to-ComponentTime

  // :: EpochTime -> ComponentTime
  epoch2UTC =
    ?EpochTime(t); prim("SSL_epoch2UTC", t); prim-tuple-to-ComponentTime

  // :: ComponentTime -> DayTime
  just-day-time =
    ?ComponentTime(_, <id>, _)

  // :: ComponentTime -> Date
  just-date =
    ?ComponentTime(<id>, _, _)

  prim-tuple-to-ComponentTime:
    (s, mi, h, dm, mo, y, dw, dy)
      ->
    ComponentTime(Date(y, <index2month> mo, dm), DayTime(h, mi, s) , Dupl(<index2day-of-week> dw, dy))

rules

  // :: Int -> DayOfWeek
  index2day-of-week : 0 -> Sunday()
  index2day-of-week : 1 -> Monday()   
  index2day-of-week : 2 -> Tuesday() 
  index2day-of-week : 3 -> Wednesday()
  index2day-of-week : 4 -> Thursday()
  index2day-of-week : 5 -> Friday()
  index2day-of-week : 6 -> Saturday()

  // :: DayOfWeek -> Int
  day-of-week2index : Sunday()    -> 0
  day-of-week2index : Monday()    -> 1
  day-of-week2index : Tuesday()   -> 2
  day-of-week2index : Wednesday() -> 3
  day-of-week2index : Thursday()  -> 4
  day-of-week2index : Friday()    -> 5
  day-of-week2index : Saturday()  -> 6

rules

  // :: Month -> Int
  month2index : January()     ->  0
  month2index : February()    ->  1
  month2index : March()       ->  2
  month2index : April()       ->  3
  month2index : May()         ->  4
  month2index : June()        ->  5
  month2index : July()        ->  6
  month2index : August()      ->  7
  month2index : September()   ->  8
  month2index : October()     ->  9
  month2index : November()    -> 10
  month2index : December()    -> 11

  // :: Int -> Month
  index2month : 0  -> January() 
  index2month : 1  -> February()
  index2month : 2  -> March()   
  index2month : 3  -> April()   
  index2month : 4  -> May()     
  index2month : 5  -> June()    
  index2month : 6  -> July()    
  index2month : 7  -> August()  
  index2month : 8  -> September() 
  index2month : 9  -> October()   
  index2month : 10 -> November()  
  index2month : 11 -> December()

strategies

  // RELATIVE TIME ; TIME OF PROCESS

  dtime = 
    prim("SSL_dtime")

  clock-to-seconds = 
    ?c; prim("SSL_ClockToSeconds", c)

  clock = 
    prim("SSL_clock")

  /* The times() function stores the current process times in a quadruple 
     (user time, system time, user time of children, system time of children)
     See man 2 times for more information */

  times = 
    prim("SSL_times")

  ticks-to-seconds = 
    ?t; prim("SSL_TicksToSeconds", t)

  diff-times :
    ((a1, b1, c1, d1), (a2, b2, c2, d2)) -> 
    (<subt>(a1, a2), <subt>(b1, b2), <subt>(c1, c2), <subt>(d1, d2))

  add-times :
    ((a1, b1, c1, d1), (a2, b2, c2, d2)) -> 
    (<add>(a1, a2), <add>(b1, b2), <add>(c1, c2), <add>(d1, d2))

  times-to-seconds :
    (a, b, c, d) -> 
    (<ticks-to-seconds> a, <ticks-to-seconds> b, <ticks-to-seconds> c, <ticks-to-seconds> d)

  user-time :
    (a, b, c, d) -> a

  system-time :
    (a, b, c, d) -> b

  cuser-time :
    (a, b, c, d) -> c

  csystem-time :
    (a, b, c, d) -> d

  self-children-user-time :
    (a, b, c, d) -> <add>(a, c)

  self-children-sys-time :
    (a, b, c, d) -> <add>(b, d)

  // total run-time so far
  run-time =
    times; crush(!0, add); ticks-to-seconds

  profile(msg, s) =
    where(times => start)
    ; s
    ; where(
        <diff-times
         ; <print> (stderr, [<msg>
                             , " user ", <self-children-user-time; ticks-to-seconds>
                             , " system ", <self-children-sys-time; ticks-to-seconds>
			     , "\n"])> (<times>, start)
      )

  profile'(msg, s) =
    where(times => start)
    ; s
    ; where(
	!(<times>, start)
        ; diff-times
        ; ![" user ",    <self-children-user-time; ticks-to-seconds>
           , " system ", <self-children-sys-time;  ticks-to-seconds>]
        ; msg
      )
\end{code}

% Copyright (C) 1998-2002 Eelco Visser <visser@acm.org>
% 
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2, or (at your option)
% any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
% 02111-1307, USA.
