/**
 * Handling command line options.
 */
module options
imports io parse-options config time verbose keep

strategies

 /**
  * Wraps a strategy into a strategy handling options and io of terms.
  *
  * @param  strategy to apply on the input term
  */
  io-wrap(s) = 
    io-wrap(fail, s)

 /**
  * Wraps a strategy into a strategy handling options and io of terms.
  *
  * @param  extra options besides the default io-options
  * @param  strategy to apply on the input term
  */
  io-wrap(extra-opts, s) =
    option-wrap(extra-opts <+ io-options,  io(s))

  output-wrap(s) =
    output-wrap(fail, s)

  output-wrap(extra-opts, s) =
    option-wrap(extra-opts <+ output-options,  output(s))

  input-wrap(s) =
    input-wrap(fail, s)

  input-wrap(extra-opts, s) =
    option-wrap(extra-opts <+ input-options,  input(s))

strategies

 /**
  * Wraps a strategy into a strategy that handles io options.
  *
  * Reads a term from the file specified by the -i option (or stdin).
  * Writes to a file specified by the -o option (or stdout).
  *
  * @param   strategy to apply on the input term
  */
  io(s) =
    input(output(s))

 /**
  * Wraps a strategy into a strategy that handles output options.
  *
  * Writes to a file specified by the -o option (or stdout).
  */ 
  output(s) =
      s
    ; !(<<get-config> "-o" <+ !stdout()>, <id>)
    ; ( where(<get-config> "-b") < WriteToBinaryFile + WriteToTextFile )

 /**
  * Wraps a strategy into a strategy that handles inputput options.
  *
  * Reads a term from the file specified by the -i option (or stdin).
  */ 
  input(s) =
      ( <get-config> "-i" <+ !stdin() )
    ; ReadFromFile
    ; s

strategies

  /**
   * Read options, display help, report success or failure, call strategy
   *
   * @todo parse-options already invokes need-help. Remove it from parse-options or remove it here.
   */
  option-wrap(opts, usage, announce, s) =
    parse-options(opts)
    ; store-options
    ; announce
    ; (  need-help(usage)
      <+ s; report-success
      <+ report-failure)

  option-wrap(opts, s) =
    option-wrap(opts, default-usage, id, s)

strategies

  /**
   * Handles all common options for a transformation tool.
   */
  io-options =
      input-option
    + aterm-output-option
    + general-options

  input-options =
      input-option
    + general-options

  output-options =
      aterm-output-option
    + general-options

  general-options =
      verbose-option
    + keep-option

  keep-option =
    ArgOption("-k" + "--keep"
    , where(<set-config> ("--keep", <string-to-int>))
    , !"--keep i | -k i  Keep intermediates (default 0)"
    )

  version-option =
      obsolete(!"version-option/0: is a standard option")
    ; fail

  input-option =
    ArgOption("-i" + "--input"
    , where(<set-config> ("-i",<id>)); !Input(<id>)
    , !"-i f|--input f   Read input from f"
    )

  output-option =
    ArgOption("-o" + "--output"
    , where(<set-config> ("-o",<id>)); !Output(<id>)
    , !"-o f|--output f  Write output to f" 
    )

  aterm-output-option =
      output-option
    + Option("-b"
      , where(<set-config> ("-b",())); !Binary()
      , !"-b               Write binary output"
      )

  verbose-option =
      Option("-S"+"--silent"
      , where(<set-config> ("--verbose",0)); !Verbose(0)
      , !"-S|--silent      Silent execution (same as --verbose 0)"
      )
    + ArgOption("--verbose"
      , where(<set-config> ("--verbose",<string-to-int>)); !Verbose(<id>)
      , !"--verbose i      Verbosity level i (default 1)"
      )
    + Option("-s"
      , where(<set-config> ("-s",())); !Statistics()
      , !"-s               Turn on statistics"
      )

strategies

  default-usage =
    where(
      <printnl> (stderr, 
        ["usage : ", <whoami> (), " [-S] [-i file] [-o file] [-b] [-s] [--help|-h|-?]" ]
      )
    ; <exit> 1
    )

  need-help(u) =
    (  <get-config> "--help"
    <+ option-defined(
         Help()
       + Undefined(id)
       + Version()
       )
    ); u

  need-help =
    need-help(default-usage)

  if-not-silent(s) =
    test(verbosity => 0) <+ s

  report-success =
      report-run-time
    ; <exit> 0

  report-failure =
      report-run-time
    ; <printnl> (stderr, [<whoami> (), ": rewriting failed"])
    ; <exit> 1

  report-run-time = 
    if-verbose1(
      <printnl> (stderr,
        [<whoami> (), " (", <run-time>, " secs)"]
      )
    )

  whoami =
    <get-config> "program"

/**
* @obsolete new option handling uses config table.
*/ 
signature

  constructors
    Silent      : Option
    Verbose     : Int -> Option
    Version     : Option
    Input       : String -> Option
    Output      : String -> Option
    Binary      : Option
    Statistics  : Option
    Help        : Option
    Runtime     : Real   -> Option
    DeclVersion : String -> Option

strategies

  /**
   * Handles options, reads term from input file, transform, write result 
   * to output file
   *
   * @obsolete use io-wrap.
   */
  iowrap(strat) = 
    iowrap((id, strat), fail)

  /**
   * @obsolete use io-wrap.
   */
  iowrapO(strat, extra-options) =
    obsolete(!"iowrapO/2: use iowrap/2");
    iowrap(strat, extra-options)

  /**
   * @obsolete use io-wrap.
   */
  iowrap(strat, extra-options) = 
    iowrap(strat, extra-options, default-usage)

  /**
   * @obsolete use io-wrap.
   */
  iowrap(strat, extra-options, usage) = 
    iowrap(strat, extra-options, usage, 
	   if-verbose2(where(<printnl>(stderr, [<get-config> "program"]))))

  /**
   * @obsolete use io-wrap.
   */
  iowrapO(strat, extra-options, usage) =
    obsolete(!"iowrapO/3: use iowrap/3");
    iowrap(strat, extra-options, usage)

  /**
   * @obsolete use io-wrap.
   */
  iowrap(strat, extra-options, usage, announce) =
    option-wrap(extra-options <+ io-options, usage, announce, 
      input-file;
      apply-strategy(strat);
      output-file
    )

  /**
   * @obsolete use input-wrap.
   */
  iowrapNoOutput(strat, extra-options) = 
    iowrapNoOutput(strat, extra-options, default-usage)

  /**
   * @obsolete use input-wrap.
   */
  iowrapNoOutput(strat, extra-options, usage) =
    option-wrap(extra-options <+ io-options, usage, id, 
      input-file;
      apply-strategy(strat)
    )

strategies

  /**
   * @obsolete use config for this purpose.
   */
  store-options = ?options;
    where( 
      <table-create>"option-table";
      <table-put>("option-table", "options", options)
    )

  /**
   * @obsolete use config for this purpose.
   */
  get-options =
    <table-get>("option-table", "options")

  /**
   * @obsolete use config for this purpose.
   */
  has-option(s) =
    test(<s; check-option>())

  /**
   * @obsolete use config for this purpose.
   */
  option-value(s,default) =
    get-options; fetch-elem(s) <+ default

  /**
   * @obsolete use config for this purpose.
   */
  check-option: option -> ()
    where get-options => ops
        ; <is-subterm>(option,ops)

  /**
   * @obsolete use default-usage.
   */
  usage' = 
    obsolete(!"usage': use default-usage")

strategies

  /**
   * @obsolete use input(s).
   */
  input-file' =
	obsolete(!"input-file'; use input-file");
	input-file

  /**
   * @obsolete use input(s).
   */
  input-file =
	 where((option-defined(?Input(infile)) <+ !stdin => infile));
  	 split(id, <ReadFromFile> infile)

  apply-strategy(strat) =
   	 where(dtime);
   	 strat;
   	 where(dtime => runtime);
	 \(options, trm) -> ([Runtime(runtime) | options], trm)\

  /**
   * @obsolete use output(s).
   */
  output-file' =
	obsolete(!"output-file'; use output-file");
	output-file

  /**
   * @obsolete use output(s).
   */
  output-file =
	 where((option-defined(?Output(outfile)) <+ !stdout => outfile, id)); 
	 (id, split(!outfile, id));
   	 ((option-defined(?Binary()), WriteToBinaryFile)
	  <+ (id, WriteToTextFile))

/*
module option-demo
imports options

strategies

main =
   iowrap(id, 
          Option("--option1",
                 id, 
                 !"--option1        This is a an example option")
         +ArgOption("--arg1", 
                 id, 
                 !"--arg1           This is an example arg option"))

// Optional short description
short-description(p) = !["Usage: ", <p>(), " [options]"]   

// Optional long description
long-description(p) = !["This is a test program to demonstrate use of ",
                        "parse-options and  generation of usage ",
                        "info from option and switch specificatios. ",
                        "These now contain usage info as additional ",
                        "third argument."]
*/