Specification([Imports(["dynamic-rules","string","list-basic","tables"]),Signature([Sorts([Sort("Option",[])]),Constructors([OpDecl("OptArg",ConstType(Sort("Option",[]))),OpDecl("OptMultiArg",ConstType(Sort("Option",[]))),OpDecl("OptOptArg",ConstType(Sort("Option",[]))),OpDecl("OptNoDoc",ConstType(Sort("Option",[]))),OpDecl("OptArgName",FunType([ConstType(Sort("String",[]))],ConstType(Sort("Option",[])))),OpDecl("OptRest",FunType([ConstType(Sort("String",[]))],ConstType(Sort("Option",[]))))])]),Strategies([SDef("getopt-demo",[],Seq(Call(SVar("getopt-parse"),[Call(SVar("getopt-my-options"),[]),Build(Op("Cons",[Str("getopt [options] file ..."),Op("Cons",[Str("getopt -h"),Op("Nil",[])])])),Build(Str("getopt v1.0")),Build(Str("<bugs@codeboost.org>"))]),Seq(Call(SVar("debug"),[Build(Str("Arguments: "))]),Seq(LChoice(BA(Call(SVar("getopt"),[]),Str("q")),Build(Str(""))),Seq(Call(SVar("debug"),[Build(Str("-q: "))]),Seq(LChoice(BA(Call(SVar("getopt"),[]),Str("o")),Build(Str(""))),Seq(Call(SVar("debug"),[Build(Str("-o: "))]),Seq(LChoice(BA(Call(SVar("getopt"),[]),Str("i")),Build(Str(""))),Seq(Call(SVar("debug"),[Build(Str("-i: "))]),Seq(LChoice(BA(Call(SVar("getopt"),[]),Str("f")),Build(Str(""))),Seq(Call(SVar("debug"),[Build(Str("-f: "))]),Seq(LChoice(BA(Call(SVar("getopt"),[]),Str("b")),Build(Str(""))),Seq(Call(SVar("debug"),[Build(Str("-b: "))]),BA(Call(SVar("exit"),[]),Int(0))))))))))))))),SDef("getopt-my-options",[],Build(Op("Cons",[Op("",[Str("help"),Str("h"),Str("display help message and exit")]),Op("Cons",[Op("",[Str("version"),Str("V"),Str("display version and exit")]),Op("Cons",[Op("",[Op("Cons",[Str("quiet"),Op("Cons",[Str("silent"),Op("Nil",[])])]),Str("q"),Str("be quiet")]),Op("Cons",[Op("",[Str("output"),Str("o"),Str("output to FILE"),Op("Cons",[Var("OptArg"),Op("Cons",[Op("OptArgName",[Str("FILE")]),Op("Nil",[])])])]),Op("Cons",[Op("",[Str("include"),Str("i"),Str("include FILE"),Op("Cons",[Var("OptMultiArg"),Op("Cons",[Op("OptArgName",[Str("FILE")]),Op("Nil",[])])])]),Op("Cons",[Str(""),Op("Cons",[Str("Special options:"),Op("Cons",[Op("",[Str("bar"),Str("b"),Str("enable bar")]),Op("Cons",[Op("",[Str("foo"),Str("f"),Str("enable foo (with VAL)"),Op("Cons",[Var("OptOptArg"),Op("Cons",[Op("OptArgName",[Str("VAL")]),Op("Nil",[])])])]),Op("Nil",[])])])])])])])])])]))),SDef("getopt-parse",[DefaultVarDec("spec"),DefaultVarDec("usage"),DefaultVarDec("progver"),DefaultVarDec("progbug")],Call(SVar("getopt-parse"),[Call(SVar("spec"),[]),Call(SVar("usage"),[]),Call(SVar("progver"),[]),Call(SVar("progbug"),[]),LChoice(Call(SVar("getopt-help"),[]),Call(SVar("setopt"),[])),Call(SVar("getopt"),[]),Call(SVar("getopt-fail"),[])])),SDef("getopt-parse",[DefaultVarDec("spec"),DefaultVarDec("usage"),DefaultVarDec("progver"),DefaultVarDec("progbug"),DefaultVarDec("s"),DefaultVarDec("g"),DefaultVarDec("f")],DynRuleScope(["parse-opt-rule"],Seq(Where(Seq(BA(Call(SVar("table-create"),[]),Str("getopt")),Seq(BA(Call(SVar("setopt"),[]),Op("",[Str("getopt-version-string"),App(Seq(Call(SVar("progver"),[]),Call(SVar("string-or-list"),[])),Op("",[]))])),Seq(Call(SVar("usage"),[]),Seq(Call(SVar("add-doc-usage"),[]),Seq(BA(Call(SVar("add-doc-string"),[]),Op("Nil",[])),Seq(BA(Call(SVar("add-doc-string"),[]),Op("Cons",[Str("Options:"),Op("Nil",[])])),Seq(Call(SVar("spec"),[]),Seq(Call(SVar("map"),[Call(SVar("parse-opt-spec"),[])]),Seq(Call(SVar("progbug"),[]),Call(SVar("add-doc-bugs"),[]))))))))))),Seq(Match(Op("Cons",[Var("n"),Var("as")])),Seq(BA(Call(SVar("setopt"),[]),Op("",[Str("program-name"),Var("n")])),Seq(Build(Op("",[Op("Nil",[]),Var("as")])),Seq(Call(SVar("repeat"),[Call(SVar("parse-option"),[Call(SVar("s"),[]),Call(SVar("g"),[]),Call(SVar("f"),[])])]),LRule(Rule(Op("",[Var("a"),Var("o")]),App(Call(SVar("conc"),[]),Op("",[App(Call(SVar("reverse"),[]),Var("a")),Var("o")])),Id))))))))),SDef("parse-opt-spec",[],Seq(Match(Op("",[Var("long"),Var("short"),Var("doc"),Var("opts"),Var("key")])),Seq(BA(Seq(Call(SVar("string-or-list"),[]),Call(SVar("map"),[Call(SVar("make-opt-rule"),[Build(Var("key")),Build(Var("opts"))])])),Var("long")),Seq(BA(Seq(Call(SVar("string-or-list"),[]),Call(SVar("map"),[Call(SVar("make-opt-rule"),[Build(Var("key")),Build(Var("opts"))])])),Var("short")),BA(Call(SVar("add-doc-option"),[]),Op("",[Var("long"),Var("short"),Var("opts"),Var("doc")])))))),SDef("parse-opt-spec",[],Seq(Match(Op("",[Var("long"),Var("short"),Var("doc"),Var("opts")])),Seq(AM(LChoice(AM(BA(Call(SVar("string-or-list"),[]),Var("short")),Op("Cons",[Wld,Wld])),AM(BA(Call(SVar("string-or-list"),[]),Var("long")),Op("Cons",[Wld,Wld]))),Op("Cons",[Var("k"),Wld])),BA(Call(SVar("parse-opt-spec"),[]),Op("",[Var("long"),Var("short"),Var("doc"),Var("opts"),Var("k")]))))),SDef("parse-opt-spec",[],Seq(Match(Op("",[Var("long"),Var("short"),Var("doc")])),BA(Call(SVar("parse-opt-spec"),[]),Op("",[Var("long"),Var("short"),Var("doc"),Op("Nil",[])])))),SDef("parse-opt-spec",[],Seq(Match(Op("",[Var("long"),Var("short")])),BA(Call(SVar("parse-opt-spec"),[]),Op("",[Var("long"),Var("short"),Str(""),Op("Cons",[Var("OptNoDoc"),Op("Nil",[])])])))),SDef("parse-opt-spec",[],Seq(Call(SVar("is-string"),[]),Call(SVar("add-doc-string"),[]))),SDef("make-opt-rule",[DefaultVarDec("key"),DefaultVarDec("opts")],Seq(Match(Var("o")),Seq(Call(SVar("opts"),[]),Seq(Not(Call(SVar("fetch"),[Choice(Call(SVar("OptArg"),[]),Choice(Call(SVar("OptMultiArg"),[]),Call(SVar("OptOptArg"),[])))])),Seq(AM(Call(SVar("key"),[]),Var("k")),DynamicRules([RDef("parse-opt-rule",[DefaultVarDec("s"),DefaultVarDec("g")],Rule(Op("Cons",[Op("",[Var("o"),Var("a")]),Var("xs")]),Var("xs'"),Seq(AM(BA(Call(SVar("option-get-no-arg"),[]),Op("",[Var("a"),Var("xs")])),Var("xs'")),BA(Call(SVar("s"),[]),Op("",[Var("k"),Op("Nil",[])])))))])))))),SDef("make-opt-rule",[DefaultVarDec("key"),DefaultVarDec("opts")],Seq(Match(Var("o")),Seq(Call(SVar("opts"),[]),Seq(Call(SVar("fetch"),[Call(SVar("OptArg"),[])]),Seq(AM(Call(SVar("key"),[]),Var("k")),DynamicRules([RDef("parse-opt-rule",[DefaultVarDec("s"),DefaultVarDec("g")],Rule(Op("Cons",[Op("",[Var("o"),Var("a")]),Var("xs")]),Var("xs'"),Seq(AM(BA(Call(SVar("option-get-arg"),[]),Op("",[Var("a"),Var("xs")])),Op("",[Var("a'"),Var("xs'")])),BA(Call(SVar("s"),[]),Op("",[Var("k"),Var("a'")])))))])))))),SDef("make-opt-rule",[DefaultVarDec("key"),DefaultVarDec("opts")],Seq(Match(Var("o")),Seq(Call(SVar("opts"),[]),Seq(Call(SVar("fetch"),[Call(SVar("OptMultiArg"),[])]),Seq(AM(Call(SVar("key"),[]),Var("k")),DynamicRules([RDef("parse-opt-rule",[DefaultVarDec("s"),DefaultVarDec("g")],Rule(Op("Cons",[Op("",[Var("o"),Var("a")]),Var("xs")]),Var("xs'"),Seq(AM(BA(LChoice(Call(SVar("g"),[]),Build(Op("Nil",[]))),Var("k")),Var("as")),Seq(AM(BA(Call(SVar("option-get-arg"),[]),Op("",[Var("a"),Var("xs")])),Op("",[Var("a'"),Var("xs'")])),BA(Call(SVar("s"),[]),Op("",[Var("k"),App(Call(SVar("conc"),[]),Op("",[Var("as"),Op("Cons",[Var("a'"),Op("Nil",[])])]))]))))))])))))),SDef("make-opt-rule",[DefaultVarDec("key"),DefaultVarDec("opts")],Seq(Match(Var("o")),Seq(Call(SVar("opts"),[]),Seq(Call(SVar("fetch"),[Call(SVar("OptOptArg"),[])]),Seq(AM(Call(SVar("key"),[]),Var("k")),DynamicRules([RDef("parse-opt-rule",[DefaultVarDec("s"),DefaultVarDec("g")],Rule(Op("Cons",[Op("",[Var("o"),Var("a")]),Var("xs")]),Var("xs'"),Seq(AM(BA(Call(SVar("option-get-opt-arg"),[]),Op("",[Var("a"),Var("xs")])),Op("",[Var("a'"),Var("xs'")])),LChoice(Seq(BA(Match(Int(1)),Var("a'")),BA(Call(SVar("s"),[]),Op("",[Var("k"),Op("Nil",[])]))),BA(Call(SVar("s"),[]),Op("",[Var("k"),Var("a'")]))))))])))))),SDef("option-get-arg",[],LChoice(Call(SVar("option-get-arg1"),[]),Call(SVar("option-get-arg2"),[]))),RDef("option-get-arg1",[],Rule(Op("",[Int(1),Op("Cons",[Var("x"),Var("xs")])]),Op("",[Var("x"),Var("xs")]),Id)),RDef("option-get-arg1",[],Rule(Op("",[Op("OptRest",[Var("a")]),Var("xs")]),Op("",[Var("a"),Var("xs")]),Id)),RDef("option-get-arg2",[],Rule(Op("",[Var("a"),Var("xs")]),Op("",[Var("a"),Var("xs")]),BA(Not(Match(Int(1))),Var("a")))),SDef("option-get-opt-arg",[],LChoice(Call(SVar("option-get-opt-arg1"),[]),Call(SVar("option-get-opt-arg2"),[]))),RDef("option-get-opt-arg1",[],Rule(Op("",[Int(1),Var("xs")]),Op("",[Int(1),Var("xs")]),Id)),RDef("option-get-opt-arg1",[],Rule(Op("",[Op("OptRest",[Var("a")]),Var("xs")]),Op("",[Var("a"),Var("xs")]),Id)),RDef("option-get-opt-arg2",[],Rule(Op("",[Var("a"),Var("xs")]),Op("",[Var("a"),Var("xs")]),Id)),RDef("option-get-no-arg",[],Rule(Op("",[Int(1),Var("xs")]),Var("xs"),Id)),RDef("option-get-no-arg",[],Rule(Op("",[Op("OptRest",[Var("a")]),Var("xs")]),Op("Cons",[Op("OptRest",[Var("a")]),Var("xs")]),Id)),SDef("parse-option",[DefaultVarDec("s"),DefaultVarDec("g"),DefaultVarDec("f")],LChoice(Call(SVar("parse-option0"),[]),LChoice(Call(SVar("parse-option1"),[Call(SVar("s"),[]),Call(SVar("g"),[]),Call(SVar("f"),[])]),Call(SVar("parse-option2"),[])))),RDef("parse-option0",[],Rule(Op("",[Var("as"),Op("Cons",[Str("-"),Var("os")])]),Op("",[Op("Cons",[Str("-"),Var("as")]),Var("os")]),Id)),RDef("parse-option0",[],Rule(Op("",[Var("as"),Op("Cons",[Str("--"),Var("os")])]),Op("",[App(Call(SVar("conc"),[]),Op("",[App(Call(SVar("reverse"),[]),Var("os")),Var("as")])),Op("Nil",[])]),Id)),RDef("parse-option1",[DefaultVarDec("s"),DefaultVarDec("g"),DefaultVarDec("f")],Rule(Op("",[Var("as"),Op("Cons",[Var("o"),Var("os")])]),Op("",[Var("as"),Var("os'")]),Seq(AM(BA(Call(SVar("explode-string"),[]),Var("o")),Op("Cons",[Int(45),Var("o'")])),AM(BA(LChoice(Call(SVar("p-opt1l"),[Call(SVar("s"),[]),Call(SVar("g"),[])]),LChoice(Call(SVar("p-opt1s"),[Call(SVar("s"),[]),Call(SVar("g"),[])]),Call(SVar("p-opt1e"),[Call(SVar("f"),[])]))),Op("",[Var("o'"),Var("os")])),Var("os'"))))),RDef("p-opt1l",[DefaultVarDec("s"),DefaultVarDec("g")],Rule(Op("",[Op("Cons",[Int(45),Var("o")]),Var("os")]),Var("os'"),LChoice(Seq(AM(BA(Seq(Call(SVar("split-fetch"),[Match(Int(61))]),Call(SVar(""),[Call(SVar("implode-string"),[]),Call(SVar("implode-string"),[])])),Var("o")),Var("o'")),AM(BA(Call(SVar("parse-opt-rule"),[Call(SVar("s"),[]),Call(SVar("g"),[])]),Op("Cons",[Var("o'"),Var("os")])),Var("os'"))),AM(BA(Call(SVar("parse-opt-rule"),[Call(SVar("s"),[]),Call(SVar("g"),[])]),Op("Cons",[Op("",[App(Call(SVar("implode-string"),[]),Var("o")),Int(1)]),Var("os")])),Var("os'"))))),RDef("p-opt1s",[DefaultVarDec("s"),DefaultVarDec("g")],Rule(Op("",[Var("o"),Var("os")]),Var("os'"),AM(BA(Call(SVar("repeat"),[Call(SVar("p-opt1s'"),[Call(SVar("s"),[]),Call(SVar("g"),[])])]),Op("",[Var("o"),Var("os")])),Op("",[Op("Nil",[]),Var("os'")])))),RDef("p-opt1s'",[DefaultVarDec("s"),DefaultVarDec("g")],Rule(Op("",[Op("Cons",[Var("l"),Var("ls")]),Var("os")]),Op("",[Var("ls'"),Var("os'")]),Seq(AM(BA(Call(SVar("implode-string"),[]),Op("Cons",[Var("l"),Op("Nil",[])])),Var("sl")),Seq(AM(BA(Call(SVar("implode-string"),[]),Var("ls")),Var("sls")),Seq(AM(BA(LChoice(Seq(Not(Call(SVar("Nil"),[])),Build(Op("OptRest",[Var("sls")]))),Build(Int(1))),Var("ls")),Var("rest")),Seq(AM(BA(Call(SVar("parse-opt-rule"),[Call(SVar("s"),[]),Call(SVar("g"),[])]),Op("Cons",[Op("",[Var("sl"),Var("rest")]),Var("os")])),Var("os1")),AM(BA(LChoice(Seq(Call(SVar("Cons"),[Call(SVar("OptRest"),[Id]),Match(Var("r"))]),Build(Op("",[Var("ls"),Var("r")]))),Build(Op("",[Op("Nil",[]),Var("os1")]))),Var("os1")),Op("",[Var("ls'"),Var("os'")])))))))),SDef("p-opt1e",[DefaultVarDec("f")],Seq(Match(Op("",[Var("o"),Var("os")])),Seq(AM(BA(Call(SVar("implode-string"),[]),Op("Cons",[Int(45),Var("o")])),Var("s")),BA(Call(SVar("f"),[]),Op("",[Var("s"),Var("os")]))))),RDef("parse-option2",[],Rule(Op("",[Var("as"),Op("Cons",[Var("o"),Var("os")])]),Op("",[Op("Cons",[Var("o"),Var("as")]),Var("os")]),Id)),SDef("getopt",[],Seq(Match(Var("o")),BA(Call(SVar("table-get"),[]),Op("",[Str("getopt"),Var("o")])))),SDef("getopt-arg",[],Seq(Match(Var("o")),Seq(BA(Call(SVar("table-get"),[]),Op("",[Str("getopt"),Var("o")])),Not(Call(SVar("is-int"),[]))))),SDef("setopt",[],LChoice(Seq(Match(Op("",[Var("o"),Op("Nil",[])])),Seq(AM(BA(LChoice(Seq(Call(SVar("table-get"),[]),Call(SVar("is-int"),[])),Build(Int(0))),Op("",[Str("getopt"),Var("o")])),Var("i")),BA(Call(SVar("table-put"),[]),Op("",[Str("getopt"),Var("o"),App(Call(SVar("add"),[]),Op("",[Var("i"),Int(1)]))])))),Seq(Match(Op("",[Var("o"),Var("v")])),BA(Call(SVar("table-put"),[]),Op("",[Str("getopt"),Var("o"),Var("v")]))))),SDef("add-doc-usage",[],Seq(Call(SVar("string-or-list"),[]),Seq(Match(Op("Cons",[Var("u"),Var("alt")])),Seq(BA(Call(SVar("add-doc-string"),[]),Op("Cons",[Str("Usage: "),Op("Cons",[Var("u"),Op("Nil",[])])])),Seq(BA(Call(SVar("table-push"),[]),Op("",[Str("getopt"),Str("getopt-usage-string"),Op("Cons",[Str("Usage: "),Op("Cons",[Var("u"),Op("Nil",[])])])])),BA(Call(SVar("map"),[Call(SVar("add-doc-usage'"),[])]),Var("alt"))))))),SDef("add-doc-usage'",[],Seq(Match(Var("u")),Seq(BA(Call(SVar("add-doc-string"),[]),Op("Cons",[Str("   or: "),Op("Cons",[Var("u"),Op("Nil",[])])])),BA(Call(SVar("table-push"),[]),Op("",[Str("getopt"),Str("getopt-usage-string"),Op("Cons",[Str("   or: "),Op("Cons",[Var("u"),Op("Nil",[])])])]))))),SDef("add-doc-string",[],Seq(Match(Var("s")),Seq(AM(BA(Call(SVar("try"),[Seq(Call(SVar("is-string"),[]),LRule(Rule(Var("x"),Op("Cons",[Var("x"),Op("Nil",[])]),Id)))]),Var("s")),Var("s'")),BA(Call(SVar("table-push"),[]),Op("",[Str("getopt"),Str("getopt-doc-string"),Var("s'")]))))),SDef("add-doc-option",[],LChoice(Call(SVar("add-doc-option1"),[]),Call(SVar("add-doc-option2"),[]))),SDef("add-doc-option1",[],Seq(Match(Op("",[Var("long"),Var("short"),Var("opts"),Var("doc")])),BA(Call(SVar("fetch"),[Call(SVar("OptNoDoc"),[])]),Var("opts")))),SDef("add-doc-option2",[],Seq(Match(Op("",[Var("long"),Var("short"),Var("opts"),Var("doc")])),Seq(AM(BA(Call(SVar("get-arg-name-help"),[]),Var("opts")),Op("",[Var("larg"),Var("sarg")])),Seq(AM(BA(Call(SVar("string-or-list"),[]),Var("long")),Var("l1")),Seq(AM(BA(Call(SVar("map"),[BA(Call(SVar("concat-strings"),[]),Op("Cons",[Str("--"),Op("Cons",[RootApp(Id),Op("Cons",[Var("larg"),Op("Nil",[])])])]))]),Var("l1")),Var("l2")),Seq(AM(BA(Seq(Call(SVar("separate-by"),[Build(Str(", "))]),Call(SVar("concat-strings"),[])),Var("l2")),Var("l")),Seq(AM(BA(Call(SVar("string-or-list"),[]),Var("short")),Var("s1")),Seq(AM(BA(Call(SVar("map"),[BA(Call(SVar("conc-strings"),[]),Op("",[Str("-"),RootApp(Id)]))]),Var("s1")),Var("s2")),Seq(AM(BA(Seq(Call(SVar("separate-by"),[Build(Str(", "))]),Call(SVar("concat-strings"),[])),Var("s2")),Var("s3")),Seq(AM(BA(Call(SVar("conc-strings"),[]),Op("",[Var("s3"),Var("sarg")])),Var("s")),Seq(AM(BA(Call(SVar("pad-after"),[Build(Int(32))]),Op("",[Var("s"),Int(7)])),Var("s'")),Seq(AM(BA(Seq(Call(SVar("filter"),[Not(Match(Str("")))]),Seq(Call(SVar("separate-by"),[Build(Str("  "))]),Call(SVar("concat-strings"),[]))),Op("Cons",[Var("s'"),Op("Cons",[Var("l"),Op("Nil",[])])])),Var("o")),Seq(AM(BA(Call(SVar("concat-strings"),[]),Op("Cons",[Str("  "),Op("Cons",[Var("o"),Op("Cons",[Str("  "),Op("Nil",[])])])])),Var("o1")),Seq(AM(BA(Call(SVar("pad-after"),[Build(Int(32))]),Op("",[Var("o1"),Int(40)])),Var("o'")),BA(Call(SVar("add-doc-string"),[]),Op("Cons",[Var("o'"),Op("Cons",[Var("doc"),Op("Nil",[])])])))))))))))))))),SDef("get-arg-name-help",[],LChoice(Seq(Call(SVar("fetch"),[Call(SVar("OptArgName"),[Match(Var("n"))])]),LChoice(Seq(Call(SVar("fetch"),[Call(SVar("OptOptArg"),[])]),Build(Op("",[App(Call(SVar("concat-strings"),[]),Op("Cons",[Str("[="),Op("Cons",[Var("n"),Op("Cons",[Str("]"),Op("Nil",[])])])])),App(Call(SVar("concat-strings"),[]),Op("Cons",[Str(" ["),Op("Cons",[Var("n"),Op("Cons",[Str("]"),Op("Nil",[])])])]))]))),Build(Op("",[App(Call(SVar("conc-strings"),[]),Op("",[Str("="),Var("n")])),App(Call(SVar("conc-strings"),[]),Op("",[Str(" "),Var("n")]))])))),LChoice(Seq(Call(SVar("fetch"),[Choice(Call(SVar("OptArg"),[]),Call(SVar("OptMultiArg"),[]))]),Build(Op("",[Str("=ARG"),Str(" ARG")]))),LChoice(Seq(Call(SVar("fetch"),[Call(SVar("OptOptArg"),[])]),Build(Op("",[Str("=[ARG]"),Str(" [ARG]")]))),Build(Op("",[Str(""),Str("")])))))),SDef("pad-after",[DefaultVarDec("s")],Seq(Match(Op("",[Var("str"),Var("n")])),Seq(Build(Var("str")),Seq(AM(Call(SVar("explode-string"),[]),Var("str'")),Seq(AM(Call(SVar("length"),[]),Var("l")),LChoice(Seq(BA(Call(SVar("geq"),[]),Op("",[Var("l"),Var("n")])),Build(Var("str"))),Seq(BA(Call(SVar("subt"),[]),Op("",[Var("n"),Var("l")])),Seq(Rec("r",LChoice(LRule(Rule(Int(0),Op("Nil",[]),Id)),LRule(Rule(Var("n"),Op("Cons",[App(Call(SVar("s"),[]),Op("",[])),App(Seq(Call(SVar("subt"),[]),Call(SVar("r"),[])),Op("",[Var("n"),Int(1)]))]),Id)))),Seq(LRule(Rule(Var("p"),Op("",[Var("str'"),Var("p")]),Id)),Seq(Call(SVar("conc"),[]),Call(SVar("implode-string"),[]))))))))))),SDef("add-doc-bugs",[],Seq(Match(Var("s")),Call(SVar("try"),[Seq(BA(Seq(Call(SVar("is-string"),[]),Not(Match(Str("")))),Var("s")),Seq(BA(Call(SVar("add-doc-string"),[]),Op("Nil",[])),BA(Call(SVar("add-doc-string"),[]),Op("Cons",[Str("Report bugs to "),Op("Cons",[Var("s"),Op("Cons",[Str("."),Op("Nil",[])])])]))))]))),SDef("string-or-list",[],LChoice(Call(SVar("is-list"),[]),Seq(Call(SVar("is-string"),[]),Call(SVar("MkSingleton"),[])))),SDef("getopt-fail",[],Seq(Match(Op("",[Var("s"),Wld])),Seq(BA(Call(SVar("error"),[]),Op("Cons",[Str("syntax error in argument: "),Op("Cons",[Var("s"),Op("Nil",[])])])),BA(Call(SVar("exit"),[]),Int(1))))),SDef("getopt-help",[],Seq(Match(Op("",[Str("h"),Op("Nil",[])])),Seq(BA(Call(SVar("getopt-display"),[]),Str("help")),BA(Call(SVar("exit"),[]),Int(0))))),SDef("getopt-help",[],Seq(Match(Op("",[Str("V"),Op("Nil",[])])),Seq(BA(Call(SVar("getopt-display"),[]),Str("version")),BA(Call(SVar("exit"),[]),Int(0))))),SDef("getopt-display",[],Seq(Match(Str("help")),Seq(AM(BA(Seq(Call(SVar("getopt"),[]),Call(SVar("reverse"),[])),Str("getopt-doc-string")),Var("ss")),BA(Call(SVar("map"),[Call(SVar("error"),[])]),Var("ss"))))),SDef("getopt-display",[],Seq(Match(Str("usage")),Seq(AM(BA(Seq(Call(SVar("getopt"),[]),Call(SVar("reverse"),[])),Str("getopt-usage-string")),Var("ss")),BA(Call(SVar("map"),[Call(SVar("error"),[])]),Var("ss"))))),SDef("getopt-display",[],Seq(Match(Str("version")),BA(Seq(Call(SVar("getopt"),[]),Call(SVar("error"),[])),Str("getopt-version-string"))))])])
