Specification([Imports(["parse-options","options","sunit"]),Signature([Constructors([OpDecl("Test",ConstType(Var("Option"))),OpDecl("TestValue",FunType([ConstType(Var("String"))],ConstType(Var("Option")))),OpDecl("NoTestValue",FunType([ConstType(Var("String"))],ConstType(Var("Option")))),OpDecl("A",ConstType(Var("Term"))),OpDecl("B",ConstType(Var("Term"))),OpDecl("C",ConstType(Var("Term"))),OpDecl("D",ConstType(Var("Term")))])]),Strategies([SDef("main",[],Call(SVar("test-suite"),[Build(Str("options-test")),Seq(Call(SVar("has-option-test"),[]),Seq(Call(SVar("option-value-test1"),[]),Call(SVar("option-value-test2"),[])))])),SDef("has-option-test",[],Call(SVar("apply-test"),[Build(Str("has-option-test")),Seq(Call(SVar("fake-options"),[]),Call(SVar("has-option"),[Build(Var("Test"))])),Build(Op("",[])),Id])),SDef("option-value-test1",[],Call(SVar("apply-test"),[Build(Str("option-value-test1")),Seq(Call(SVar("fake-options"),[]),Call(SVar("option-value"),[LRule(Rule(Op("TestValue",[Var("v")]),Var("v"),Id)),Fail])),Build(Op("",[])),Build(Str("foo"))])),SDef("option-value-test2",[],Call(SVar("apply-test"),[Build(Str("option-value-test1")),Seq(Call(SVar("fake-options"),[]),Call(SVar("option-value"),[LRule(Rule(Op("NoTestValue",[Var("v")]),Var("v"),Id)),Build(Str("bar"))])),Build(Op("",[])),Build(Str("bar"))])),SDef("fake-options",[],Seq(Build(Op("Cons",[Str("options-test"),Op("Cons",[Int(2),Op("Cons",[Op("Test",[]),Op("Cons",[Op("TestValue",[Str("foo")]),Op("Nil",[])])])])])),Call(SVar("store-options"),[]))),SDef("Main",[],Seq(Call(SVar("parse-options"),[LChoice(Fail,Call(SVar("io-options"),[]))]),Seq(Call(SVar("debug"),[Build(Str("a"))]),LChoice(Call(SVar("need-help"),[]),LChoice(Seq(Call(SVar("input-file'"),[]),Seq(Call(SVar("debug"),[Build(Str("b"))]),Seq(Call(SVar("apply-strategy"),[Call(SVar(""),[Id,Id])]),Seq(Call(SVar("debug"),[Build(Str("c"))]),Seq(Call(SVar("output-file'"),[]),Seq(Call(SVar("debug"),[Build(Str("d"))]),Call(SVar("report-success"),[]))))))),Call(SVar("report-failure"),[])))))),SDef("blabla",[],Seq(Build(Op("",[Op("Cons",[Op("Runtime",[Int(0)]),Op("Cons",[Op("Program",[Str("./options-test")]),Op("Nil",[])])]),Op("A",[])])),Seq(Call(SVar("debug"),[Build(Str("init"))]),Seq(Call(SVar(""),[LChoice(Rec("x",LChoice(Call(SVar("Cons"),[Match(Op("Output",[Var("outfile")])),Id]),Call(SVar("Cons"),[Id,Call(SVar("x"),[])]))),AM(Build(Var("stdout")),Var("outfile"))),Id]),Call(SVar("debug"),[Build(Str("exit"))]))))),SDef("blabla'",[],Seq(Build(Op("",[Op("Cons",[Op("C",[]),Op("Nil",[])]),Op("D",[])])),Call(SVar(""),[LChoice(Match(Op("A",[])),Build(Op("B",[]))),Id]))),SDef("blablabla",[],LChoice(Seq(Build(Op("Cons",[Op("Runtime",[Int(0)]),Op("Cons",[Op("Program",[Str("./options-test")]),Op("Nil",[])])])),Seq(Call(SVar("debug"),[Build(Str("init"))]),Rec("x",LChoice(Call(SVar("Cons"),[Match(Op("Output",[Var("outfile")])),Id]),Call(SVar("Cons"),[Id,Call(SVar("x"),[])]))))),Seq(AM(Build(Var("stdout")),Var("outfile")),Call(SVar("debug"),[Build(Str("exit"))])))),SDef("output-file-test",[],Seq(Call(SVar("debug"),[Build(Str("a"))]),Seq(Call(SVar(""),[LChoice(Call(SVar("option-defined"),[Match(Op("Output",[Var("outfile")]))]),AM(Build(Var("stdout")),Var("outfile"))),Id]),Call(SVar("debug"),[Build(Str("b"))]))))])])