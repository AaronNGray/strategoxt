module conditional
imports option

strategies

  try(s) = s <+ id

  // a -> b :: a -> Option(b)
  maybe(s) = !Some(<s>) <+ !None()

  // a -> b, () -> b :: Option(a) -> b
  maybe(s1, s2) : Some(a) -> <s1> a
  maybe(s1, s2) : None()  -> <s2> ()

  if(c, b)      = c < b  + id
  if(c, b1, b2) = c < b1 + b2

  ior(a, b) = (a; try(b)) <+ b

  eq = ?(x, x)

  FAIL = 
    obsolete(!"FAIL: use fail"); 
    fail

  restore(s, rest) = 
    s <+ (rest; fail)

  restore-always(s, rest) = 
    (s; rest) <+ (rest; fail)

  /**
   * Applies s followed by f whether s failed or not.
   *
   * result : <s> input
   * fail   : s or f failed (consider try(f))
   * type   : a -> b, (a or b) -> _ :: a -> b
   */
  finally(s, f) = 
    s < where(f) + (where(f); fail)

\end{code}

% Copyright (C) 1998-2003 Eelco Visser <visser@acm.org>
% 
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2, or (at your option)
% any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
% 02111-1307, USA.
