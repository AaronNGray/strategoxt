Specification([Imports(["list-zip","sunit"]),Strategies([SDef("main",[],Call(SVar("test-suite"),[Build(Str("list-zip-test")),Seq(Call(SVar("nzip0-test"),[]),Call(SVar("zip-test"),[]))])),SDef("nzip0-test",[],Call(SVar("apply-test"),[Build(Str("nzip0-test")),Call(SVar("nzip0"),[Id]),Build(Op("Cons",[Str("a"),Op("Cons",[Str("b"),Op("Cons",[Str("c"),Op("Nil",[])])])])),Build(Op("Cons",[Op("",[Int(0),Str("a")]),Op("Cons",[Op("",[Int(1),Str("b")]),Op("Cons",[Op("",[Int(2),Str("c")]),Op("Nil",[])])])]))])),SDef("zip-test",[],Seq(Call(SVar("apply-test"),[Build(Str("zip-test1")),Call(SVar("zip"),[Call(SVar("Merge"),[])]),Build(Op("",[Op("Cons",[Op("",[Str("foo"),Int(1)]),Op("Cons",[Op("",[Str("bar"),Int(2)]),Op("Nil",[])])]),Op("Cons",[Op("",[Str("foo"),Int(11)]),Op("Cons",[Op("",[Str("bar"),Int(12)]),Op("Nil",[])])])])),Build(Op("Cons",[Op("",[Str("foo"),Int(1),Int(11)]),Op("Cons",[Op("",[Str("bar"),Int(2),Int(12)]),Op("Nil",[])])]))]),Call(SVar("apply-test"),[Build(Str("zip-test2")),Call(SVar("zipPad"),[Call(SVar("Merge"),[]),Build(Op("",[Str("Unknown"),Str("Unknown")]))]),Build(Op("",[Op("Cons",[Op("",[Str("foo"),Int(1)]),Op("Cons",[Op("",[Str("bar"),Int(2)]),Op("Nil",[])])]),Op("Cons",[Op("",[Str("foo"),Int(11)]),Op("Cons",[Op("",[Str("bar"),Int(12)]),Op("Cons",[Op("",[Str("baz"),Int(13)]),Op("Nil",[])])])])])),Build(Op("Cons",[Op("",[Str("foo"),Int(1),Int(11)]),Op("Cons",[Op("",[Str("bar"),Int(2),Int(12)]),Op("Cons",[Op("",[Str("baz"),Str("Unknown"),Int(13)]),Op("Nil",[])])])]))]))),RDef("Merge",[],Rule(Op("",[Op("",[Str("Unknown"),Var("b")]),Op("",[Var("c"),Var("d")])]),Op("",[Var("c"),Var("b"),Var("d")]),Id)),RDef("Merge",[],Rule(Op("",[Op("",[Var("a"),Var("b")]),Op("",[Str("Unknown"),Var("d")])]),Op("",[Var("a"),Var("b"),Var("d")]),Id)),RDef("Merge",[],Rule(Op("",[Op("",[Var("a"),Var("b")]),Op("",[Var("c"),Var("d")])]),Op("",[Var("a"),Var("b"),Var("d")]),BA(Not(Match(Str("Unknown"))),Var("a")))),SDef("combinatory-test",[],Call(SVar("apply-test"),[Build(Str("zip-test3")),Call(SVar("join'"),[Call(SVar("Merge2"),[])]),Build(Op("",[Op("Cons",[Op("",[Str("foo"),Int(1)]),Op("Cons",[Op("",[Str("bar"),Int(2)]),Op("Nil",[])])]),Op("Cons",[Op("",[Str("foo"),Int(11)]),Op("Cons",[Op("",[Str("bar"),Int(12)]),Op("Cons",[Op("",[Str("baz"),Int(13)]),Op("Nil",[])])])])])),Build(Op("Cons",[Op("",[Str("foo"),Int(1),Int(11)]),Op("Cons",[Op("",[Str("baz"),Str("Unknown"),Int(13)]),Op("Cons",[Op("",[Str("bar"),Int(2),Int(12)]),Op("Nil",[])])])]))])),RDef("join'",[VarDec("merge1",FunType([ConstType(Op("",[Var("a"),Var("b")]))],ConstType(Var("c")))),VarDec("merge2",FunType([ConstType(Var("a"))],ConstType(Var("c")))),VarDec("merge3",FunType([ConstType(Var("b"))],ConstType(Var("c"))))],Rule(Op("",[Var("xs"),Var("ys")]),App(Call(SVar("filter"),[LRule(Rule(Var("x"),App(Seq(Call(SVar("filter"),[BA(Call(SVar("merge1"),[]),Op("",[Var("x"),RootApp(Id)]))]),Call(SVar("try"),[Seq(Call(SVar("Nil"),[]),BA(Call(SVar("merge2"),[]),Var("x")))])),Var("ys")),Id))]),Var("xs")),Id)),RDef("Merge2",[],Rule(Op("",[Op("",[Var("a"),Var("b")]),Op("",[Var("a"),Var("d")])]),Op("",[Var("a"),Var("b"),Var("d")]),Id)),RDef("Merge2",[],Rule(Op("",[Op("",[Var("a"),Var("b")]),Op("",[Var("c"),Var("d")])]),Op("",[Var("c"),Var("b"),Str("Unknown")]),BA(Not(Call(SVar("eq"),[])),Op("",[Var("a"),Var("c")]))))])])