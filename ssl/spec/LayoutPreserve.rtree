Specification([Imports(["LList"]),Signature([Constructors([OpDecl("NL",ConstType(Var("Layout"))),OpDecl("L",FunType([ConstType(Var("String"))],ConstType(Var("Layout")))),OpDecl("UL",ConstType(Var("Layout"))),OpDecl("US",ConstType(Var("Layout"))),OpDecl("Label",FunType([ConstType(Var("String")),ConstType(Var("s"))],ConstType(Var("Label")))),OpDecl("Bracket",FunType([ConstType(Var("String")),ConstType(Var("Layout")),ConstType(Var("s")),ConstType(Var("Layout")),ConstType(Var("String"))],ConstType(Var("Bracket")))),OpDecl("amb",FunType([ConstType(Op("Amb",[Var("a")])),ConstType(Op("Amb",[Var("a")]))],ConstType(Op("Diff",[Var("a")])))),OpDecl("amb1",FunType([ConstType(Var("a"))],ConstType(Op("Amb",[Var("a")])))),OpDecl("amb2",FunType([ConstType(Var("a"))],ConstType(Op("Amb",[Var("a")]))))])]),Overlays([Overlay("Bracket",["s"],Op("Bracket",[BuildDefault(Str("(")),BuildDefault(Var("UL")),Var("s"),BuildDefault(Var("UL")),BuildDefault(Str(")"))]))]),Rules([RDef("layconc",[],Rule(Op("",[Var("NL"),Var("NL")]),Var("NL"),Id)),RDef("layconc",[],Rule(Op("",[As(Var("l"),Op("L",[Wld])),Var("NL")]),Var("l"),Id)),RDef("layconc",[],Rule(Op("",[Var("NL"),As(Var("l"),Op("L",[Wld]))]),Var("l"),Id)),RDef("layconc",[],Rule(Op("",[Op("L",[Var("l1")]),Op("L",[Var("l2")])]),Op("L",[App(Call(SVar("concat-strings"),[]),Op("Cons",[Var("l1"),Op("Cons",[Var("l2"),Op("Nil",[])])]))]),Id)),RDef("layconc",[],Rule(Op("",[Var("UL"),Var("NL")]),Var("UL"),Id)),RDef("layconc",[],Rule(Op("",[Var("NL"),Var("UL")]),Var("UL"),Id)),RDef("layconc",[],Rule(Op("",[Var("UL"),Var("UL")]),Var("UL"),Id)),RDef("layconc",[],Rule(Op("",[As(Var("l"),Op("L",[Wld])),Var("UL")]),Var("l"),Id)),RDef("layconc",[],Rule(Op("",[Var("UL"),As(Var("l"),Op("L",[Wld]))]),Var("l"),Id))]),Strategies([SDef("ensure-bracket",[],LChoice(Call(SVar("Bracket"),[Id]),LRule(Rule(Var("t"),Op("Bracket",[Var("t")]),Id)))),SDef("layeq",[],Call(SVar("layeq"),[Fail,Fail])),SDef("layeq",[DefaultVarDec("s")],Call(SVar("layeq"),[Call(SVar("s"),[]),Fail])),SDef("layeq",[DefaultVarDec("s"),DefaultVarDec("l")],Rec("r",Scope(["f","g","fs","gs","a"],LChoice(Call(SVar("eq"),[]),LChoice(Call(SVar(""),[Call(SVar("is-layout"),[]),Call(SVar("is-layout"),[])]),LChoice(LRule(Rule(As(Var("a"),Op("",[Explode(Var("f"),Var("fs")),Explode(Var("f"),Var("gs"))])),Var("a"),Seq(BA(Call(SVar("eq"),[]),Op("",[App(Call(SVar("length"),[]),Var("fs")),App(Call(SVar("length"),[]),Var("gs"))])),BA(Call(SVar("zip"),[Call(SVar("r"),[])]),Op("",[Var("fs"),Var("gs")]))))),LChoice(Seq(Call(SVar("l"),[]),LRule(Rule(Op("",[Op("Label",[Wld,Var("f")]),Var("g")]),App(Call(SVar("r"),[]),Op("",[Var("f"),Var("g")])),Id))),LChoice(Seq(Call(SVar("l"),[]),LRule(Rule(Op("",[Var("f"),Op("Label",[Wld,Var("g")])]),App(Call(SVar("r"),[]),Op("",[Var("f"),Var("g")])),Id))),Call(SVar("s"),[]))))))))),SDef("laydiff",[DefaultVarDec("s")],Call(SVar("laydiff"),[Call(SVar("s"),[]),Fail])),SDef("laydiff",[DefaultVarDec("s"),DefaultVarDec("l")],Rec("r",Scope(["f","g","fs","gs","a","b"],LChoice(Seq(Call(SVar("eq"),[]),Call(SVar("Fst"),[])),LChoice(Seq(Call(SVar(""),[Call(SVar("is-layout"),[]),Call(SVar("is-layout"),[])]),Call(SVar("Fst"),[])),LChoice(LRule(Rule(Op("",[Explode(Var("f"),Var("fs")),Explode(Var("f"),Var("gs"))]),Explode(Var("f"),Var("a")),Seq(BA(Call(SVar("eq"),[]),Op("",[App(Call(SVar("length"),[]),Var("fs")),App(Call(SVar("length"),[]),Var("gs"))])),AM(BA(Call(SVar("zip"),[Call(SVar("r"),[])]),Op("",[Var("fs"),Var("gs")])),Var("a"))))),LChoice(Seq(Call(SVar("l"),[]),LRule(Rule(Op("",[Op("Label",[Wld,Var("f")]),Var("g")]),App(Call(SVar("r"),[]),Op("",[Var("f"),Var("g")])),Id))),LChoice(Seq(Call(SVar("l"),[]),LRule(Rule(Op("",[Var("f"),Op("Label",[Wld,Var("g")])]),App(Call(SVar("r"),[]),Op("",[Var("f"),Var("g")])),Id))),LChoice(LRule(Rule(Op("",[Var("a"),Var("b")]),Op("amb",[Op("amb1",[Var("a")]),Op("amb2",[Var("b")])]),Call(SVar("s"),[]))),LRule(Rule(Op("",[Var("a"),Var("b")]),Op("amb",[Var("a"),Var("b")]),Id))))))))))),SDef("laydiff-squash",[DefaultVarDec("s")],Call(SVar("laydiff-squash"),[Call(SVar("s"),[]),Fail])),SDef("laydiff-squash",[DefaultVarDec("s"),DefaultVarDec("l")],Rec("r",Scope(["f","g","fs","gs","a","hs","b","fhs"],Seq(Call(SVar("try"),[Call(SVar(""),[Call(SVar("LConstoCons"),[]),Call(SVar("LConstoCons"),[])])]),LChoice(Seq(Call(SVar("eq"),[]),Seq(Call(SVar("Fst"),[]),Call(SVar("try"),[Seq(Not(Call(SVar("Nil"),[])),Build(Str("..")))]))),LChoice(Seq(Call(SVar(""),[Call(SVar("is-layout"),[]),Call(SVar("is-layout"),[])]),Build(Str(".."))),LChoice(LRule(Rule(Op("",[Explode(Var("f"),Var("fs")),Explode(Var("f"),Var("gs"))]),Var("fhs"),Seq(BA(Call(SVar("eq"),[]),Op("",[App(Call(SVar("length"),[]),Var("fs")),App(Call(SVar("length"),[]),Var("gs"))])),Seq(BA(Call(SVar("zip"),[Call(SVar("r"),[])]),Op("",[Var("fs"),Var("gs")])),Seq(AM(LChoice(Seq(BA(Call(SVar("eq"),[]),Op("",[Var("f"),Str("Cons")])),Call(SVar("Cons"),[Id,Call(SVar("Nil"),[])])),Call(SVar("foldr"),[Id,LChoice(Scope(["xs"],Seq(Call(SVar(""),[Call(SVar("is-diff"),[]),Call(SVar("Cons"),[Call(SVar("is-diff"),[]),Match(Var("xs"))])]),Build(Op("Cons",[Str(".."),Var("xs")])))),LChoice(LRule(Rule(Op("",[Var("a"),Op("Nil",[])]),Var("a"),BA(Call(SVar("is-list"),[]),Var("a")))),LRule(Rule(Op("",[Var("a"),Var("b")]),Op("Cons",[Var("a"),Var("b")]),Id))))])),Var("hs")),AM(LChoice(Seq(BA(Call(SVar("eq"),[]),Op("",[Var("f"),Str("Cons")])),BA(Call(SVar("Cons"),[Id,Call(SVar("try"),[Seq(Not(Call(SVar("is-list"),[])),LRule(Rule(Var("a"),Op("Cons",[Var("a"),Op("Nil",[])]),Id)))])]),Var("hs"))),LChoice(Seq(Call(SVar("Cons"),[Call(SVar("is-diff"),[]),Call(SVar("Nil"),[])]),Build(Str(".."))),Build(Explode(Var("f"),Var("hs"))))),Var("fhs"))))))),LChoice(Seq(Call(SVar("l"),[]),LRule(Rule(Op("",[Op("Label",[Wld,Var("f")]),Var("g")]),App(Call(SVar("r"),[]),Op("",[Var("f"),Var("g")])),Id))),LChoice(Seq(Call(SVar("l"),[]),LRule(Rule(Op("",[Var("f"),Op("Label",[Wld,Var("g")])]),App(Call(SVar("r"),[]),Op("",[Var("f"),Var("g")])),Id))),LChoice(LRule(Rule(Op("",[Var("a"),Var("b")]),Op("amb",[Op("amb1",[Var("a")]),Op("amb2",[Var("b")])]),Call(SVar("s"),[]))),LRule(Rule(Op("",[Var("a"),Var("b")]),Op("amb",[Var("a"),Var("b")]),Id)))))))))))),SDef("is-diff",[],Match(Str(".."))),SDef("is-layout",[],Choice(Call(SVar("NL"),[]),Choice(Call(SVar("UL"),[]),Call(SVar("L"),[Id]))))])])
