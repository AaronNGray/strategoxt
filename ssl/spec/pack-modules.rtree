Specification([Imports(["options","pack-graph","dynamic-rules"]),Signature([Constructors([OpDecl("Include",FunType([ConstType(Var("File"))],ConstType(Var("Include")))),OpDecl("Prefix",FunType([ConstType(Var("String"))],ConstType(Var("Option"))))])]),Strategies([SDef("pack-module-options",[],Call(SVar("parse-options"),[Choice(Call(SVar("io-options"),[]),Choice(Call(SVar("ArgOption"),[Match(Str("-I")),LRule(Rule(Var("x"),Op("Include",[Var("x")]),Id))]),Choice(Call(SVar("Option"),[Match(Str("-nodep")),Build(Var("NoDependency"))]),Choice(Call(SVar("ArgOption"),[Match(Str("-dep")),LRule(Rule(Var("x"),Op("Dependency",[Var("x")]),Id))]),Call(SVar("ArgOption"),[Match(Str("--prefix")),LRule(Rule(Var("x"),Op("Prefix",[Var("x")]),DynamicRules([RDef("Prefix",[],Rule(Op("",[]),Var("x"),Id))])))])))))])),SDef("pack-modules",[VarDec("pack",FunType([ConstType(Var("term")),FunType([ConstType(Var("term"))],ConstType(Var("term")))],ConstType(Var("term"))))],LChoice(Call(SVar("pack-modules"),[Call(SVar("pack"),[]),Fail]),BA(Call(SVar("fatal-error"),[]),Op("Cons",[Str("  packing failed"),Op("Nil",[])])))),SDef("pack-modules",[VarDec("pack",FunType([ConstType(Var("term")),FunType([ConstType(Var("term"))],ConstType(Var("term")))],ConstType(Var("term")))),DefaultVarDec("dep-base")],Seq(AM(Call(SVar("pack-module-options"),[]),Var("options")),Seq(Call(SVar("try"),[Call(SVar("need-help"),[Call(SVar("pack-modules-usage"),[])])]),Seq(Call(SVar("list"),[Call(SVar("try"),[Choice(Match(Op("Program",[Var("prog")])),Choice(Match(Op("Input",[Var("in")])),Choice(Match(Op("Output",[Var("out")])),Match(Op("Dependency",[Var("dep")])))))])]),Seq(AM(Call(SVar("filter"),[LRule(Rule(Op("Include",[Var("p")]),Var("p"),Id))]),Var("path")),Seq(AM(LChoice(Build(Var("in")),Build(Var("stdin"))),Var("infile")),Seq(AM(LChoice(Build(Var("out")),Build(Var("stdout"))),Var("outfile")),Seq(AM(BA(Call(SVar("pack"),[Build(Var("path"))]),Var("infile")),Op("",[Var("files"),Var("spec")])),Seq(Build(Var("options")),Seq(LChoice(Seq(Call(SVar("option-defined"),[Match(Var("Binary"))]),BA(Call(SVar("WriteToBinaryFile"),[]),Op("",[Var("outfile"),Var("spec")]))),BA(Call(SVar("WriteToTextFile"),[]),Op("",[Var("outfile"),Var("spec")]))),Seq(Call(SVar("try"),[Seq(AM(LChoice(Build(Var("dep")),Seq(Not(BA(Call(SVar("option-defined"),[Match(Op("NoDependency",[]))]),Var("options"))),Call(SVar("dep-base"),[]))),Var("depfile")),BA(Call(SVar("create-dep-file"),[Build(Var("depfile"))]),Op("",[Var("outfile"),Var("files")])))]),Seq(AM(Call(SVar("dtime"),[]),Var("time")),Seq(BA(Call(SVar("printnl"),[]),Op("",[Var("stderr"),Op("Cons",[Var("prog"),Op("Cons",[Str(" ("),Op("Cons",[Var("time"),Op("Cons",[Str(" secs)"),Op("Nil",[])])])])])])),BA(Call(SVar("exit"),[]),Int(0))))))))))))))),SDef("pack-modules-usage",[],Seq(Call(SVar("option-defined"),[Match(Op("Program",[Var("prog")]))]),Seq(BA(Call(SVar("printnl"),[]),Op("",[Var("stderr"),Op("Cons",[Str("usage : "),Op("Cons",[Var("prog"),Op("Cons",[Str(" [-S] [-I dir] [-i file]"),Op("Cons",[Str(" [-o file] [-b] [-s] [--help|-h|-?]"),Op("Cons",[Str(" [-dep target | -nodep]"),Op("Nil",[])])])])])])])),BA(Call(SVar("exit"),[]),Int(1)))))]),Rules([RDef("create-dep-file",[DefaultVarDec("dep-base")],Rule(Op("",[Var("outfile"),Var("files")]),Op("",[Var("outfile"),Var("files")]),Seq(AM(BA(Call(SVar("dep-base"),[]),Var("outfile")),Var("out")),Seq(AM(BA(Call(SVar("open-file"),[]),Op("",[App(Call(SVar("add-extension"),[]),Op("",[Var("out"),Str("dep")])),Str("w")])),Var("dep")),Seq(BA(Call(SVar("printnl"),[]),Op("",[Var("dep"),Op("Cons",[Var("out"),App(Call(SVar("separate-by"),[Build(Str(" \\\n\t"))]),Op("Cons",[Str(" :"),Var("files")]))])])),BA(Call(SVar("close-file"),[]),Var("dep")))))))]),Signature([Constructors([OpDecl("NoDependency",ConstType(Var("Option"))),OpDecl("Dependency",FunType([ConstType(Var("String"))],ConstType(Var("Option"))))])])])