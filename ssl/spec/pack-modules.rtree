Specification([Imports(["options","pack-graph","dynamic-rules","config","verbose"]),Strategies([SDef("pack-options",[],Choice(Call(SVar("ArgOption"),[Choice(Match(Str("-I")),Match(Str("--Include"))),Seq(Where(BA(Call(SVar("extend-config"),[]),Op("",[Str("-I"),Op("Cons",[Str("-I"),Op("Cons",[RootApp(Id),Op("Nil",[])])])]))),Build(Op("",[]))),Build(Str("-I d | --Include d   Include modules from directory d"))]),Choice(Call(SVar("Option"),[Choice(Match(Str("--nodep")),Match(Str("-nodep"))),Seq(Where(BA(Call(SVar("set-config"),[]),Op("",[Str("-nodep"),Str("")]))),Build(Op("",[]))),Build(Str("--nodep              Don't create dependency file"))]),Call(SVar("ArgOption"),[Choice(Match(Str("--dep")),Choice(Match(Str("-d")),Match(Str("-dep")))),Seq(Where(BA(Call(SVar("set-config"),[]),Op("",[Str("-dep"),RootApp(Id)]))),Build(Op("",[]))),Build(Str("--dep f | -d f       Write dependency to file f"))])))),SDef("pack-modules",[VarDec("pack",FunType([ConstType(SortVar("term")),FunType([ConstType(SortVar("term"))],ConstType(SortVar("term")))],ConstType(SortVar("term"))))],LChoice(Call(SVar("pack-modules"),[Call(SVar("pack"),[]),Fail]),BA(Call(SVar("fatal-error"),[]),Op("Cons",[Str("Packing modules failed"),Op("Nil",[])])))),SDef("pack-modules",[VarDec("pack",FunType([ConstType(SortVar("term")),FunType([ConstType(SortVar("term"))],ConstType(SortVar("term")))],ConstType(SortVar("term")))),DefaultVarDec("dep-base")],Call(SVar("option-wrap"),[LChoice(Call(SVar("pack-options"),[]),Call(SVar("io-options"),[])),Seq(AM(LChoice(BA(Seq(Call(SVar("get-config"),[]),Call(SVar("filter"),[Not(Match(Str("-I")))])),Str("-I")),Build(Op("Nil",[]))),Var("path")),Seq(AM(LChoice(BA(Call(SVar("get-config"),[]),Str("-i")),Build(Var("stdin"))),Var("infile")),Seq(AM(LChoice(BA(Call(SVar("get-config"),[]),Str("-o")),Build(Var("stdout"))),Var("outfile")),Seq(AM(BA(Call(SVar("pack"),[Build(Var("path"))]),Var("infile")),Op("",[Var("files"),Var("spec")])),Seq(LChoice(Seq(BA(Call(SVar("get-config"),[]),Str("-b")),BA(Call(SVar("WriteToBinaryFile"),[]),Op("",[Var("outfile"),Var("spec")]))),BA(Call(SVar("WriteToTextFile"),[]),Op("",[Var("outfile"),Var("spec")]))),Call(SVar("try"),[Seq(AM(LChoice(BA(Call(SVar("get-config"),[]),Str("-dep")),Seq(Not(BA(Call(SVar("get-config"),[]),Str("-nodep"))),Call(SVar("dep-base"),[]))),Var("depfile")),BA(Call(SVar("create-dep-file"),[Build(Var("depfile"))]),Op("",[Var("outfile"),Var("files")])))]))))))])),RDef("create-dep-file",[DefaultVarDec("dep-base")],Rule(Op("",[Var("outfile"),Var("files")]),Op("",[Var("outfile"),Var("files")]),Seq(AM(BA(Call(SVar("dep-base"),[]),Var("outfile")),Var("out")),Seq(AM(BA(Call(SVar("open-file"),[]),Op("",[App(Call(SVar("add-extension"),[]),Op("",[Var("out"),Str("dep")])),Str("w")])),Var("dep")),Seq(BA(Call(SVar("printnl"),[]),Op("",[Var("dep"),Op("Cons",[Var("out"),App(Call(SVar("separate-by"),[Build(Str(" \\\n\t"))]),Op("Cons",[Str(" :"),Var("files")]))])])),BA(Call(SVar("close-file"),[]),Var("dep")))))))])])
