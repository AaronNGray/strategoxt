/**
 * Every element of a list is associated with in an integer index.
 * The first element of a list has index 1.
 */
module list-index
imports list-cons simple-traversal

strategies

 /**
  * Get the n-th element of a list.
  *
  * @type Int * List(a) -> a
  */
  index =
    repeat(Ind2) ; Ind1

      Ind1   : (1, [x | xs]) -> x
      Ind2   : (n, [x | xs]) -> (<subt> (n, 1), xs) where <geq> (n, 2)

strategies

 /**
  * Get index of element in list.
  *
  * @type a * List(a) -> Int
  */
  get-index =
    Gind0 ; rec x(Gind1 <+ Gind2 ; x)

      Gind0  : (x, ys) -> (1, x, ys)
      Gind1  : (n, x, [x | xs]) -> n
      Gind2  : (n, y, [x | xs]) -> (<add> (n, 1), y, xs)

 /**
  * @obsolete use get-index
  */
  get_index = 
    obsolete(!"get_index/0; use get-index/0");
    get-index

  get-index0(s) = at-suffix([s | id]; ![]); length

strategies

 /**
  * Change element in list.
  *
  * @type Int * a * List(a) -> List(a)
  */
  set-index =
    Sind0; rec x(Sind1 <+ Sind2(x))

      Sind0    : (i, x, ys) -> (0, i, x, ys)
      Sind1    : (i, i, x, [y | ys]) -> [x | ys]
      Sind2(r) : (n, i, x, [y | ys]) -> [y | <r>(<add> (n, 1), i, x, ys)]

strategies

 /**
  * Insert element in list.
  *
  * @type Int * a * List(a) -> List(a)
  */
  insert =
    Ins0; rec x(Ins1 <+ Ins2(x))

        Ins0:    (i, x, ys) -> (0, i, x, ys)
        Ins1:    (i, i, x, xs) -> [x | xs]
        Ins2(r): (n, i, x, [y | ys]) -> [y | <r>(<add> (n, 1), i, x, ys)]

 /**
  * Apply strategies that require some knowledge of the index of an element 
  * to the elements of the list.
  *
  * @type Int * a -> b :: List(a) -> List(b)
  */
  map-with-index(s) = 
      !(1, <id>)
    ; rec x(
        \ (_, [])       -> [] \
      + \ (i, [e | es]) -> [<s> (i, e) | <x> (<inc> i, es)] \
      )

  // :: List(a) -> List(Int * a)
  add-indices = 
    map-with-index(id)
