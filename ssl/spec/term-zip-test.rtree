Specification([Imports(["term-zip","sunit"]),Signature([Constructors([OpDecl("Node",FunType([ConstType(Var("a")),ConstType(Op("List",[Op("RoseTree",[Var("a")])]))],ConstType(Op("RoseTree",[Var("a")])))),OpDecl("Var",FunType([ConstType(Var("String"))],ConstType(Op("RoseTree",[Var("a")]))))])]),Strategies([SDef("main",[],Call(SVar("test-suite"),[Build(Str("term-zip-test")),Seq(Call(SVar("test1"),[]),Seq(Call(SVar("test2"),[]),Seq(Call(SVar("test3"),[]),Seq(Call(SVar("test4"),[]),Seq(Call(SVar("test5"),[]),Seq(Call(SVar("test6"),[]),Call(SVar("test7"),[])))))))])),SDef("test1",[],Seq(Call(SVar("apply-test"),[Build(Str("test1a")),Call(SVar("term-zip"),[Call(SVar(""),[Call(SVar("is-int"),[]),Call(SVar("is-int"),[])]),Id]),Build(Op("",[Op("Cons",[Int(1),Op("Cons",[Int(2),Op("Cons",[Int(3),Op("Nil",[])])])]),Op("Cons",[Int(4),Op("Cons",[Int(5),Op("Cons",[Int(6),Op("Nil",[])])])])])),Build(Op("Cons",[Op("",[Int(1),Int(4)]),Op("Cons",[Op("",[Int(2),Int(5)]),Op("Cons",[Op("",[Int(3),Int(6)]),Op("Nil",[])])])]))]),Call(SVar("apply-test"),[Build(Str("test1b")),Call(SVar("term-zip"),[Call(SVar(""),[Call(SVar("is-int"),[]),Call(SVar("is-int"),[])]),Id]),Build(Op("",[Op("Cons",[Op("Cons",[Int(1),Op("Nil",[])]),Op("Cons",[Op("Cons",[Int(2),Op("Nil",[])]),Op("Cons",[Op("Cons",[Int(3),Op("Nil",[])]),Op("Nil",[])])])]),Op("Cons",[Op("Cons",[Int(4),Op("Nil",[])]),Op("Cons",[Op("Cons",[Int(5),Op("Nil",[])]),Op("Cons",[Op("Cons",[Int(6),Op("Nil",[])]),Op("Nil",[])])])])])),Build(Op("Cons",[Op("Cons",[Op("",[Int(1),Int(4)]),Op("Nil",[])]),Op("Cons",[Op("Cons",[Op("",[Int(2),Int(5)]),Op("Nil",[])]),Op("Cons",[Op("Cons",[Op("",[Int(3),Int(6)]),Op("Nil",[])]),Op("Nil",[])])])]))]))),SDef("test2",[],Call(SVar("apply-test"),[Build(Str("test2")),Call(SVar("term-zip"),[Call(SVar(""),[Call(SVar("is-int"),[]),Call(SVar("is-int"),[])]),Id]),Build(Op("",[Op("Node",[Int(1),Op("Cons",[Op("Node",[Int(2),Op("Nil",[])]),Op("Cons",[Op("Node",[Int(3),Op("Nil",[])]),Op("Nil",[])])])]),Op("Node",[Int(4),Op("Cons",[Op("Node",[Int(5),Op("Nil",[])]),Op("Cons",[Op("Node",[Int(6),Op("Nil",[])]),Op("Nil",[])])])])])),Build(Op("Node",[Op("",[Int(1),Int(4)]),Op("Cons",[Op("Node",[Op("",[Int(2),Int(5)]),Op("Nil",[])]),Op("Cons",[Op("Node",[Op("",[Int(3),Int(6)]),Op("Nil",[])]),Op("Nil",[])])])]))])),SDef("test3",[],Call(SVar("apply-test"),[Build(Str("test3")),Call(SVar("term-zip"),[Call(SVar(""),[Call(SVar("is-int"),[]),Call(SVar("is-int"),[])]),Id]),Build(Op("",[Op("Node",[Int(1),Op("Cons",[Op("Node",[Int(2),Op("Nil",[])]),Op("Cons",[Op("Node",[Int(3),Op("Nil",[])]),Op("Nil",[])])])]),Op("Node",[Int(1),Op("Cons",[Op("Node",[Int(5),Op("Nil",[])]),Op("Cons",[Op("Node",[Int(6),Op("Nil",[])]),Op("Nil",[])])])])])),Build(Op("Node",[Op("",[Int(1),Int(1)]),Op("Cons",[Op("Node",[Op("",[Int(2),Int(5)]),Op("Nil",[])]),Op("Cons",[Op("Node",[Op("",[Int(3),Int(6)]),Op("Nil",[])]),Op("Nil",[])])])]))])),SDef("test4",[],Call(SVar("apply-test"),[Build(Str("test4")),Call(SVar("term-zip"),[Call(SVar("add"),[]),Id]),Build(Op("",[Op("Node",[Int(1),Op("Cons",[Op("Node",[Int(2),Op("Nil",[])]),Op("Cons",[Op("Node",[Int(3),Op("Nil",[])]),Op("Nil",[])])])]),Op("Node",[Int(4),Op("Cons",[Op("Node",[Int(5),Op("Nil",[])]),Op("Cons",[Op("Node",[Int(6),Op("Nil",[])]),Op("Nil",[])])])])])),Build(Op("Node",[Int(5),Op("Cons",[Op("Node",[Int(7),Op("Nil",[])]),Op("Cons",[Op("Node",[Int(9),Op("Nil",[])]),Op("Nil",[])])])]))])),SDef("test5",[],Call(SVar("apply-test"),[Build(Str("test5")),Call(SVar("term-zip"),[Call(SVar("tmap"),[Call(SVar("is-int"),[])]),Id]),Build(Op("",[Op("Node",[Int(1),Op("Cons",[Op("Node",[Int(2),Op("Nil",[])]),Op("Cons",[Op("Node",[Int(3),Op("Nil",[])]),Op("Nil",[])])])]),Op("Node",[Int(4),Op("Cons",[Op("Node",[Int(5),Op("Nil",[])]),Op("Cons",[Op("Node",[Int(6),Op("Nil",[])]),Op("Nil",[])])])]),Op("Node",[Int(7),Op("Cons",[Op("Node",[Int(8),Op("Nil",[])]),Op("Cons",[Op("Node",[Int(9),Op("Nil",[])]),Op("Nil",[])])])])])),Build(Op("Node",[Op("",[Int(1),Int(4),Int(7)]),Op("Cons",[Op("Node",[Op("",[Int(2),Int(5),Int(8)]),Op("Nil",[])]),Op("Cons",[Op("Node",[Op("",[Int(3),Int(6),Int(9)]),Op("Nil",[])]),Op("Nil",[])])])]))])),SDef("test6",[],Call(SVar("apply-and-fail"),[Build(Str("test6")),Call(SVar("term-zip"),[Call(SVar("tmap"),[Call(SVar("is-int"),[])]),Id]),Build(Op("",[Op("Node",[Int(1),Op("Cons",[Op("Node",[Int(2),Op("Nil",[])]),Op("Cons",[Op("Node",[Int(3),Op("Nil",[])]),Op("Nil",[])])])]),Op("Node",[Int(4),Op("Cons",[Op("Node",[Int(5),Op("Nil",[])]),Op("Cons",[Op("Node",[Int(6),Op("Nil",[])]),Op("Nil",[])])])]),Op("Node",[Int(7),Op("Cons",[Op("Node",[Int(8),Op("Nil",[])]),Op("Nil",[])])])]))])),SDef("pattern-match",[],Call(SVar("term-zip"),[Choice(Seq(Call(SVar("eq"),[]),Build(Op("Nil",[]))),LRule(Rule(Op("",[Op("Var",[Var("x")]),Var("y")]),Op("Cons",[Op("",[Var("x"),Var("y")]),Op("Nil",[])]),Id))),Call(SVar("crush"),[Build(Op("Nil",[])),Call(SVar("union"),[])])])),SDef("test7",[],Call(SVar("apply-test"),[Build(Str("test7")),Call(SVar("pattern-match"),[]),Build(Op("",[Op("Node",[Int(1),Op("Cons",[Op("Var",[Str("x")]),Op("Cons",[Op("Node",[Int(3),Op("Nil",[])]),Op("Nil",[])])])]),Op("Node",[Int(1),Op("Cons",[Op("Node",[Int(2),Op("Nil",[])]),Op("Cons",[Op("Node",[Int(3),Op("Nil",[])]),Op("Nil",[])])])])])),Build(Op("Cons",[Op("",[Str("x"),Op("Node",[Int(2),Op("Nil",[])])]),Op("Nil",[])]))]))])])
