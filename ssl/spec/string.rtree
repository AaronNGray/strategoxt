Specification([Imports(["list","conditional","iteration","char"]),Strategies([SDef("new",[],Prim("SSL_new",[])),SDef("is-string",[],Seq(Match(Var("x")),Prim("\"SSL_is_string\"",[Var("x")]))),SDef("implode-string",[],Seq(Match(Var("x")),Prim("\"SSL_implode_string\"",[Var("x")]))),SDef("explode-string",[],Seq(Match(Var("x")),Prim("\"SSL_explode_string\"",[Var("x")])))]),Strategies([SDef("conc-strings",[],Seq(Call(SVar(""),[Call(SVar("explode-string"),[]),Call(SVar("explode-string"),[])]),Seq(Call(SVar("conc"),[]),Call(SVar("implode-string"),[])))),SDef("concat-strings",[],Seq(Call(SVar("map"),[Call(SVar("explode-string"),[])]),Seq(Call(SVar("concat"),[]),Call(SVar("implode-string"),[]))))]),Strategies([SDef("string-length",[],Seq(Call(SVar("explode-string"),[]),Call(SVar("length"),[]))),SDef("string-as-chars",[DefaultVarDec("s")],Seq(Call(SVar("explode-string"),[]),Seq(Call(SVar("s"),[]),Call(SVar("implode-string"),[]))))]),Strategies([SDef("escape",[],Call(SVar("string-as-chars"),[Call(SVar("escape-chars"),[])])),SDef("escape-chars",[],Rec("x",LChoice(Seq(Call(SVar("Escape"),[]),Call(SVar("Cons"),[Id,Call(SVar("Cons"),[Id,Call(SVar("x"),[])])])),LChoice(Call(SVar("Cons"),[Id,Call(SVar("x"),[])]),Call(SVar("Nil"),[]))))),SDef("unescape",[],Call(SVar("string-as-chars"),[Call(SVar("unescape-chars"),[])])),SDef("unescape-chars",[],Rec("x",Seq(Call(SVar("try"),[Call(SVar("UnEscape"),[])]),LChoice(Call(SVar("Cons"),[Id,Call(SVar("x"),[])]),Call(SVar("Nil"),[]))))),SDef("Escape",[],Choice(Call(SVar("Escape-double-quote"),[]),Choice(Call(SVar("Escape-backslash"),[]),Call(SVar("Escape-linefeed"),[])))),RDef("Escape-double-quote",[],Rule(Op("Cons",[Int(34),Var("cs")]),Op("Cons",[Int(92),Op("Cons",[Int(34),Var("cs")])]),Id)),RDef("Escape-single-quote",[],Rule(Op("Cons",[Int(39),Var("cs")]),Op("Cons",[Int(92),Op("Cons",[Int(39),Var("cs")])]),Id)),RDef("Escape-backslash",[],Rule(Op("Cons",[Int(92),Var("cs")]),Op("Cons",[Int(92),Op("Cons",[Int(92),Var("cs")])]),Id)),RDef("Escape-linefeed",[],Rule(Op("Cons",[Int(10),Var("cs")]),Op("Cons",[Int(92),Op("Cons",[Int(110),Var("cs")])]),Id)),RDef("Escape-carriage-return",[],Rule(Op("Cons",[Int(13),Var("cs")]),Op("Cons",[Int(92),Op("Cons",[Int(114),Var("cs")])]),Id)),SDef("UnEscape",[],Choice(Call(SVar("UnEscape-double-quote"),[]),Choice(Call(SVar("UnEscape-backslash"),[]),Choice(Call(SVar("UnEscape-linefeed"),[]),Call(SVar("UnEscape-tab"),[]))))),RDef("UnEscape-double-quote",[],Rule(Op("Cons",[Int(92),Op("Cons",[Int(34),Var("cs")])]),Op("Cons",[Int(34),Var("cs")]),Id)),RDef("UnEscape-single-quote",[],Rule(Op("Cons",[Int(92),Op("Cons",[Int(39),Var("cs")])]),Op("Cons",[Int(39),Var("cs")]),Id)),RDef("UnEscape-backslash",[],Rule(Op("Cons",[Int(92),Op("Cons",[Int(92),Var("cs")])]),Op("Cons",[Int(92),Var("cs")]),Id)),RDef("UnEscape-carriage-return",[],Rule(Op("Cons",[Int(92),Op("Cons",[Int(114),Var("cs")])]),Op("Cons",[Int(13),Var("cs")]),Id)),RDef("UnEscape-linefeed",[],Rule(Op("Cons",[Int(92),Op("Cons",[Int(110),Var("cs")])]),Op("Cons",[Int(10),Var("cs")]),Id)),RDef("UnEscape-tab",[],Rule(Op("Cons",[Int(92),Op("Cons",[Int(116),Var("cs")])]),Op("Cons",[Int(9),Var("cs")]),Id))]),Strategies([SDef("escape",[VarDec("esc",FunType([ConstType(Op("List",[Var("String")])),FunType([ConstType(Op("List",[Var("String")]))],ConstType(Op("List",[Var("String")])))],ConstType(Op("List",[Var("String")]))))],Seq(Call(SVar("explode-string"),[]),Seq(Rec("x",LChoice(Call(SVar("esc"),[Call(SVar("x"),[])]),LChoice(Call(SVar("Cons"),[Id,Call(SVar("x"),[])]),Call(SVar("Nil"),[])))),Call(SVar("implode-string"),[])))),SDef("cify",[],Call(SVar("escape"),[Call(SVar("Cify"),[])]))]),Rules([RDef("Cify",[DefaultVarDec("x")],Rule(Op("Cons",[Int(39),Var("cs")]),Op("Cons",[Int(95),Op("Cons",[Int(112),Op("Cons",[Int(95),App(Call(SVar("x"),[]),Var("cs"))])])]),Id)),RDef("Cify",[DefaultVarDec("x")],Rule(Op("Cons",[Int(45),Var("cs")]),Op("Cons",[Int(95),App(Call(SVar("x"),[]),Var("cs"))]),Id)),RDef("Cify",[DefaultVarDec("x")],Rule(Op("Cons",[Int(95),Var("cs")]),Op("Cons",[Int(95),Op("Cons",[Int(95),App(Call(SVar("x"),[]),Var("cs"))])]),Id))]),Strategies([SDef("quote",[DefaultVarDec("c")],Call(SVar("string-as-chars"),[Call(SVar("quote-chars"),[Call(SVar("c"),[])])])),SDef("quote-chars",[DefaultVarDec("c")],BA(Call(SVar("quote-chars"),[]),Op("",[App(Call(SVar("c"),[]),Op("",[])),RootApp(Id)]))),RDef("quote-chars",[],Rule(Op("",[Var("c"),Var("chars")]),App(Call(SVar("conc"),[]),Op("",[Op("Cons",[Var("c"),Var("chars")]),Op("Cons",[Var("c"),Op("Nil",[])])])),Id)),SDef("single-quote-chars",[],BA(Call(SVar("quote-chars"),[]),Op("",[Int(39),RootApp(Id)]))),SDef("double-quote-chars",[],BA(Call(SVar("quote-chars"),[]),Op("",[Int(34),RootApp(Id)]))),SDef("single-quote",[],Call(SVar("string-as-chars"),[Call(SVar("single-quote-chars"),[])])),SDef("double-quote",[],Call(SVar("string-as-chars"),[Call(SVar("double-quote-chars"),[])]))]),Strategies([SDef("unquote-chars",[DefaultVarDec("s")],Seq(Where(Seq(Call(SVar("Hd"),[]),Call(SVar("s"),[]))),Seq(Where(Seq(Call(SVar("last"),[]),Call(SVar("s"),[]))),Seq(Call(SVar("Tl"),[]),Call(SVar("init"),[]))))),SDef("unquote",[DefaultVarDec("s")],Call(SVar("string-as-chars"),[Call(SVar("unquote-chars"),[Call(SVar("s"),[])])])),SDef("un-single-quote-chars",[],Call(SVar("unquote-chars"),[Match(Int(39))])),SDef("un-double-quote-chars",[],Call(SVar("unquote-chars"),[Match(Int(34))])),SDef("un-single-quote",[],Call(SVar("string-as-chars"),[Call(SVar("un-single-quote-chars"),[])])),SDef("un-double-quote",[],Call(SVar("string-as-chars"),[Call(SVar("un-double-quote-chars"),[])]))]),Strategies([SDef("is-double-quoted",[],Where(BA(Call(SVar("is-quoted"),[]),Op("",[Int(34),RootApp(Id)])))),SDef("is-single-quoted",[],Where(BA(Call(SVar("is-quoted"),[]),Op("",[Int(39),RootApp(Id)])))),SDef("is-double-quoted-chars",[],Where(BA(Call(SVar("is-quoted-chars"),[]),Op("",[Int(34),RootApp(Id)])))),SDef("is-single-quoted-chars",[],Where(BA(Call(SVar("is-quoted-chars"),[]),Op("",[Int(39),RootApp(Id)])))),SDef("is-quoted",[],Seq(Call(SVar(""),[Id,Call(SVar("explode-string"),[])]),Call(SVar("is-quoted-chars"),[]))),SDef("is-quoted-chars",[],Where(Seq(Match(Op("",[Var("c"),RootApp(Id)])),Seq(Match(Op("Cons",[Var("c"),RootApp(Call(SVar("last"),[]))])),Match(Var("c"))))))]),Strategies([SDef("string-to-num",[],Seq(Call(SVar("explode-string"),[]),Seq(Call(SVar("split"),[Build(Int(0)),Id]),Seq(Call(SVar("repeat"),[Call(SVar("S2I2"),[])]),Choice(Call(SVar("S2I1"),[]),Seq(Call(SVar("S2D0"),[]),Seq(Call(SVar("repeat"),[Call(SVar("S2D2"),[])]),Call(SVar("S2D1"),[]))))))))]),Rules([RDef("S2I1",[],Rule(Op("",[Var("n"),Op("Nil",[])]),Var("n"),Id)),RDef("S2I2",[],Rule(Op("",[Var("n"),Op("Cons",[Var("m"),Var("ms")])]),Op("",[App(Call(SVar("add"),[]),Op("",[App(Call(SVar("mul"),[]),Op("",[Int(10),Var("n")])),App(Call(SVar("subt"),[]),Op("",[Var("m"),Int(48)]))])),Var("ms")]),Seq(BA(Call(SVar("geq"),[]),Op("",[Var("m"),Int(48)])),BA(Call(SVar("leq"),[]),Op("",[Var("m"),Int(57)]))))),RDef("S2D0",[],Rule(Op("",[Var("n"),Op("Cons",[Int(46),Var("ys")])]),Op("",[Var("n"),Int(10),Var("ys")]),Id)),RDef("S2D1",[],Rule(Op("",[Var("n"),Var("f"),Op("Nil",[])]),Var("n"),Id)),RDef("S2D2",[],Rule(Op("",[Var("n"),Var("f"),Op("Cons",[Var("m"),Var("ms")])]),Op("",[App(Call(SVar("add"),[]),Op("",[Var("n"),App(Call(SVar("div"),[]),Op("",[App(Call(SVar("subt"),[]),Op("",[Var("m"),Int(48)])),Var("f")]))])),App(Call(SVar("mul"),[]),Op("",[Var("f"),Int(10)])),Var("ms")]),Seq(BA(Call(SVar("geq"),[]),Op("",[Var("m"),Int(48)])),BA(Call(SVar("leq"),[]),Op("",[Var("m"),Int(57)])))))]),Strategies([SDef("lower-case",[],Call(SVar("string-as-chars"),[Call(SVar("lower-case-chars"),[])])),SDef("upper-case",[],Call(SVar("string-as-chars"),[Call(SVar("upper-case-chars"),[])])),SDef("lower-case-chars",[],Call(SVar("map"),[Call(SVar("to-lower"),[])])),SDef("upper-case-chars",[],Call(SVar("map"),[Call(SVar("to-upper"),[])]))]),Strategies([SDef("lc",[],Seq(Call(SVar("obsolete"),[Build(Str("lc/0; use to-lower/0"))]),Call(SVar("to-lower"),[]))),SDef("uc",[],Seq(Call(SVar("obsolete"),[Build(Str("uc/0; use to-upper/0"))]),Call(SVar("to-upper"),[])))]),Strategies([SDef("basename",[],Call(SVar("basename"),[Id])),SDef("basename",[DefaultVarDec("ext")],Seq(Call(SVar("explode-string"),[]),Seq(Call(SVar("try"),[Rec("x",LChoice(Call(SVar("Cons"),[Id,Call(SVar("x"),[])]),LChoice(Call(SVar("Cons"),[Match(Int(47)),Id]),Seq(Call(SVar("Cons"),[Match(Int(46)),Call(SVar("ext"),[])]),Build(Op("Nil",[]))))))]),Call(SVar("implode-string"),[])))),SDef("guarantee-extension",[DefaultVarDec("ext")],Seq(Call(SVar("basename"),[]),Seq(Call(SVar("split"),[Id,BA(Call(SVar("ext"),[]),Op("",[]))]),Call(SVar("add-extension"),[])))),SDef("has-extension",[DefaultVarDec("ext")],Seq(Where(Seq(Call(SVar("ext"),[]),AM(Call(SVar("explode-string"),[]),Var("echars")))),Where(Seq(Call(SVar("explode-string"),[]),Call(SVar("at-suffix"),[Match(Var("echars"))]))))),SDef("get-path",[],Seq(Call(SVar("explode-string"),[]),Seq(LChoice(Rec("x",LChoice(Call(SVar("Cons"),[Id,Call(SVar("x"),[])]),Call(SVar("Cons"),[Match(Int(47)),Build(Op("Nil",[]))]))),Build(Op("Nil",[]))),Call(SVar("implode-string"),[])))),SDef("get-filename",[],Seq(Call(SVar("explode-string"),[]),Seq(Call(SVar("try"),[Seq(Call(SVar("at-suffix-rev"),[Match(Op("Cons",[Int(47),Var("name")]))]),Build(Var("name")))]),Call(SVar("implode-string"),[])))),RDef("add-extension",[],Rule(Op("",[Var("name"),Var("ext")]),App(Call(SVar("concat-strings"),[]),Op("Cons",[Var("name"),Op("Cons",[Str("."),Op("Cons",[Var("ext"),Op("Nil",[])])])])),Id)),SDef("remove-extension",[],Seq(BA(Call(SVar("string-tokenize"),[]),Op("",[Op("Cons",[Int(46),Op("Nil",[])]),RootApp(Id)])),Seq(Call(SVar("init"),[]),Seq(BA(Call(SVar("separate-by"),[]),Op("",[Str("."),RootApp(Id)])),Call(SVar("concat-strings"),[])))))]),Strategies([SDef("string-tokenize",[],Seq(Call(SVar(""),[Id,Call(SVar("explode-string"),[])]),Seq(Match(Op("",[Var("ws"),RootApp(Id)])),Seq(Call(SVar("list-tokenize"),[BA(Call(SVar("elem"),[]),Op("",[RootApp(Id),Var("ws")]))]),Call(SVar("map"),[Call(SVar("implode-string"),[])]))))),SDef("list-tokenize",[DefaultVarDec("s")],Seq(LChoice(Call(SVar("split-fetch"),[Call(SVar("s"),[])]),Build(Op("",[RootApp(Id),Op("Nil",[])]))),Choice(LRule(Rule(Op("",[Op("Nil",[]),Op("Nil",[])]),Op("Nil",[]),Id)),Choice(LRule(Rule(Op("",[As(Var("l"),Op("Cons",[Wld,Wld])),Op("Nil",[])]),Op("Cons",[Var("l"),Op("Nil",[])]),Id)),Choice(LRule(Rule(Op("",[Op("Nil",[]),As(Var("l"),Op("Cons",[Wld,Wld]))]),App(Call(SVar("list-tokenize"),[Call(SVar("s"),[])]),Var("l")),Id)),LRule(Rule(Op("",[As(Var("t"),Op("Cons",[Wld,Wld])),As(Var("l"),Op("Cons",[Wld,Wld]))]),Op("Cons",[Var("t"),App(Call(SVar("list-tokenize"),[Call(SVar("s"),[])]),Var("l"))]),Id)))))))]),Strategies([SDef("padd-with",[DefaultVarDec("s")],BA(Call(SVar("align-right"),[]),Op("",[App(Call(SVar("s"),[]),Op("",[])),RootApp(Call(SVar("Fst"),[])),RootApp(Call(SVar("Snd"),[]))]))),RDef("align-right",[],Rule(Op("",[Var("c"),Var("s"),Var("n")]),App(Call(SVar("conc-strings"),[]),Op("",[Var("add"),Var("s")])),AM(BA(Call(SVar("align-helper"),[]),Op("",[Var("c"),Var("s"),Var("n")])),Var("add")))),RDef("align-left",[],Rule(Op("",[Var("c"),Var("s"),Var("n")]),App(Call(SVar("conc-strings"),[]),Op("",[Var("s"),Var("add")])),AM(BA(Call(SVar("align-helper"),[]),Op("",[Var("c"),Var("s"),Var("n")])),Var("add")))),RDef("align-center",[],Rule(Op("",[Var("c"),Var("s"),Var("n")]),App(Call(SVar("concat-strings"),[]),Op("Cons",[Var("add-before"),Op("Cons",[Var("s"),Op("Cons",[Var("add-after"),Op("Nil",[])])])])),Seq(AM(BA(Call(SVar("string-length"),[]),Var("s")),Var("l")),Seq(AM(BA(Call(SVar("subt"),[]),Op("",[Var("n"),Var("l")])),Var("whitespace")),Seq(AM(BA(GuardedLChoice(Call(SVar("even"),[]),Seq(Call(SVar("div2"),[]),Call(SVar("Dupl"),[])),Seq(Call(SVar("dec"),[]),Seq(Call(SVar("div2"),[]),Seq(Call(SVar("Dupl"),[]),Call(SVar(""),[Call(SVar("inc"),[]),Id]))))),Var("whitespace")),Op("",[Var("before"),Var("after")])),Seq(AM(BA(Call(SVar("align-helper"),[]),Op("",[Var("c"),Var("s"),App(Call(SVar("add"),[]),Op("",[Var("l"),Var("before")]))])),Var("add-before")),AM(BA(Call(SVar("align-helper"),[]),Op("",[Var("c"),Var("s"),App(Call(SVar("add"),[]),Op("",[Var("l"),Var("after")]))])),Var("add-after")))))))),RDef("align-helper",[],Rule(Op("",[Var("c"),Var("s"),Var("n")]),Var("add"),AM(BA(Seq(Call(SVar("string-length"),[]),Seq(BA(Call(SVar("subt"),[]),Op("",[Var("n"),RootApp(Id)])),GuardedLChoice(Call(SVar("pos"),[]),BA(Call(SVar("copy-char"),[]),Op("",[RootApp(Id),Var("c")])),Build(Str(""))))),Var("s")),Var("add")))),SDef("div2",[],BA(Call(SVar("div"),[]),Op("",[RootApp(Id),Int(2)])))]),Rules([RDef("SplitInit",[],Rule(Var("x"),Op("",[Op("Nil",[]),Op("Nil",[]),Var("x")]),Id)),RDef("SplitExit",[],Rule(Op("",[Var("xs"),Var("cs"),Op("Nil",[])]),App(Call(SVar("reverse"),[]),Op("Cons",[App(Seq(Call(SVar("reverse"),[]),Call(SVar("implode-string"),[])),Var("cs")),Var("xs")])),Id)),RDef("SplitNext",[],Rule(Op("",[Var("xs"),Var("cs"),Op("Cons",[Int(32),Var("ys")])]),Op("",[Op("Cons",[App(Seq(Call(SVar("reverse"),[]),Call(SVar("implode-string"),[])),Var("cs")),Var("xs")]),Op("Nil",[]),Var("ys")]),Id)),RDef("SplitNext",[],Rule(Op("",[Var("xs"),Var("cs"),Op("Cons",[Var("y"),Var("ys")])]),Op("",[Var("xs"),Op("Cons",[Var("y"),Var("cs")]),Var("ys")]),BA(Not(Call(SVar("eq"),[])),Op("",[Var("y"),Int(32)]))))]),Strategies([SDef("split-at-space",[],Seq(Call(SVar("explode-string"),[]),Seq(Call(SVar("SplitInit"),[]),Rec("x",LChoice(Call(SVar("SplitExit"),[]),Seq(Call(SVar("SplitNext"),[]),Call(SVar("x"),[]))))))),SDef("split-at-dot",[],Seq(Call(SVar("split"),[Build(Op("Nil",[])),Call(SVar("explode-string"),[])]),Seq(Rec("r",LChoice(LRule(Rule(Op("",[Var("int"),Op("Cons",[Int(46),Var("frac")])]),Op("",[Var("int"),Var("frac")]),Id)),LChoice(LRule(Rule(Op("",[Var("int"),Op("Cons",[Var("i"),Var("rest")])]),App(Call(SVar("r"),[]),Op("",[App(Call(SVar("at-end"),[Build(Op("Cons",[Var("i"),Op("Nil",[])]))]),Var("int")),Var("rest")])),Id)),Call(SVar(""),[Id,Call(SVar("Nil"),[])])))),Call(SVar(""),[Call(SVar("implode-string"),[]),Call(SVar("implode-string"),[])])))),SDef("split-before",[],Seq(Match(Op("",[Var("l"),Var("sub")])),Seq(AM(BA(Call(SVar("explode-string"),[]),Var("sub")),Var("sub'")),Seq(BA(Call(SVar("explode-string"),[]),Var("l")),Seq(LRule(Rule(Var("x"),Op("",[Op("Nil",[]),Var("x")]),Id)),Seq(Rec("r",LChoice(LRule(Rule(As(Var("x"),Op("",[Wld,Var("x'")])),Var("x"),BA(Call(SVar("left-match"),[]),Op("",[Var("x'"),Var("sub'")])))),LRule(Rule(Op("",[Var("x'"),Op("Cons",[Var("x"),Var("xs")])]),App(Call(SVar("r"),[]),Op("",[App(Call(SVar("at-end"),[Build(Op("Cons",[Var("x"),Op("Nil",[])]))]),Var("x'")),Var("xs")])),Id)))),Call(SVar(""),[Call(SVar("implode-string"),[]),Call(SVar("implode-string"),[])]))))))),SDef("split-after",[],Seq(Match(Op("",[Var("l"),Var("sub")])),Seq(AM(BA(Call(SVar("explode-string"),[]),Var("sub")),Var("sub'")),Seq(BA(Call(SVar("explode-string"),[]),Var("l")),Seq(LRule(Rule(Var("x"),Op("",[Op("Nil",[]),Var("x")]),Id)),Seq(Rec("r",LChoice(Call(SVar(""),[Id,Call(SVar("Nil"),[])]),LChoice(LRule(Rule(Op("",[Var("x"),Var("x'")]),Op("",[App(Call(SVar("conc"),[]),Op("",[Var("x"),Var("sub'")])),App(Call(SVar("left-match"),[]),Op("",[Var("x'"),Var("sub'")]))]),Id)),LRule(Rule(Op("",[Var("x'"),Op("Cons",[Var("x"),Var("xs")])]),App(Call(SVar("r"),[]),Op("",[App(Call(SVar("at-end"),[Build(Op("Cons",[Var("x"),Op("Nil",[])]))]),Var("x'")),Var("xs")])),Id))))),Call(SVar(""),[Call(SVar("implode-string"),[]),Call(SVar("implode-string"),[])]))))))),SDef("left-match",[],Seq(Rec("r",LChoice(Scope(["l","ls","rs"],Seq(Match(Op("",[Op("Cons",[Var("l"),Var("ls")]),Op("Cons",[Var("l"),Var("rs")])])),BA(Call(SVar("r"),[]),Op("",[Var("ls"),Var("rs")])))),Call(SVar(""),[Id,Call(SVar("Nil"),[])]))),Call(SVar("Fst"),[]))),SDef("is-substring",[DefaultVarDec("s")],Seq(Call(SVar("explode-string"),[]),Seq(Match(Var("long")),Seq(Call(SVar("s"),[]),Seq(AM(Call(SVar("explode-string"),[]),Var("sub")),LChoice(BA(Call(SVar("eq"),[]),Op("",[Var("sub"),Var("long")])),BA(Rec("r",Scope(["a","xs"],Seq(Match(As(Var("a"),Op("Cons",[Wld,Var("xs")]))),LChoice(BA(Call(SVar("left-match"),[]),Op("",[Var("a"),Var("sub")])),BA(Call(SVar("r"),[]),Var("xs")))))),Var("long")))))))),SDef("copy-char",[],Seq(Call(SVar("copy"),[]),Call(SVar("implode-string"),[]))),SDef("string-sort",[],Seq(Call(SVar("map"),[Call(SVar("explode-string"),[])]),Seq(Call(SVar("sort-list"),[Call(SVar("SortL"),[Call(SVar("string-gt"),[])])]),Call(SVar("map"),[Call(SVar("implode-string"),[])])))),SDef("string-sort-desc",[],Seq(Call(SVar("map"),[Call(SVar("explode-string"),[])]),Seq(Call(SVar("sort-list"),[Call(SVar("SortL"),[Call(SVar("string-lt"),[])])]),Call(SVar("map"),[Call(SVar("implode-string"),[])])))),SDef("string-gt",[],Seq(Call(SVar("try"),[Call(SVar(""),[Call(SVar("explode-string"),[]),Call(SVar("explode-string"),[])])]),Seq(Call(SVar("strcasecmp"),[]),Match(Int(1))))),SDef("string-lt",[],Seq(Call(SVar("try"),[Call(SVar(""),[Call(SVar("explode-string"),[]),Call(SVar("explode-string"),[])])]),Seq(Call(SVar("strcasecmp"),[]),Match(Int(-1))))),SDef("strcmp",[],Rec("r",LChoice(LRule(Rule(Op("",[Op("Cons",[Var("x"),Var("xs")]),Op("Cons",[Var("x"),Var("ys")])]),App(Call(SVar("r"),[]),Op("",[Var("xs"),Var("ys")])),Id)),LChoice(LRule(Rule(Op("",[Op("Nil",[]),Op("Nil",[])]),Int(0),Id)),LChoice(LRule(Rule(Op("",[Op("Cons",[Var("x"),Wld]),Op("Cons",[Var("y"),Wld])]),Int(-1),BA(Call(SVar("lt"),[]),Op("",[Var("x"),Var("y")])))),LChoice(LRule(Rule(Op("",[Op("Nil",[]),Op("Cons",[Wld,Wld])]),Int(-1),Id)),Build(Int(1)))))))),SDef("strncmp",[],Rec("r",LChoice(LRule(Rule(Op("",[Wld,Wld,Int(0)]),Int(0),Id)),LChoice(LRule(Rule(Op("",[Op("Cons",[Var("x"),Var("xs")]),Op("Cons",[Var("x"),Var("ys")]),Var("i")]),App(Call(SVar("r"),[]),Op("",[Var("xs"),Var("ys"),App(Call(SVar("subt"),[]),Op("",[Var("i"),Int(1)]))])),Id)),LChoice(LRule(Rule(Op("",[Op("Nil",[]),Op("Nil",[]),Wld]),Int(0),Id)),LChoice(LRule(Rule(Op("",[Op("Cons",[Var("x"),Wld]),Op("Cons",[Var("y"),Wld]),Wld]),Int(-1),BA(Call(SVar("lt"),[]),Op("",[Var("x"),Var("y")])))),LChoice(LRule(Rule(Op("",[Op("Nil",[]),Op("Cons",[Wld,Wld]),Wld]),Int(-1),Id)),Build(Int(1))))))))),SDef("strcasecmp",[],Rec("r",LChoice(LRule(Rule(Op("",[Op("Cons",[Var("x"),Var("xs")]),Op("Cons",[Var("y"),Var("ys")])]),App(Call(SVar("r"),[]),Op("",[Var("xs"),Var("ys")])),BA(Call(SVar("case-char"),[Call(SVar("eq"),[])]),Op("",[Var("x"),Var("y")])))),LChoice(LRule(Rule(Op("",[Op("Nil",[]),Op("Nil",[])]),Int(0),Id)),LChoice(LRule(Rule(Op("",[Op("Cons",[Var("x"),Wld]),Op("Cons",[Var("y"),Wld])]),Int(-1),BA(Call(SVar("case-char"),[Call(SVar("lt"),[])]),Op("",[Var("x"),Var("y")])))),LChoice(LRule(Rule(Op("",[Op("Nil",[]),Op("Cons",[Wld,Wld])]),Int(-1),Id)),Build(Int(1))))))))]),Strategies([SDef("sect",[DefaultVarDec("op"),DefaultVarDec("arg")],Seq(Call(SVar("obsolete"),[Build(Str("sect/2; use term wrap patterns"))]),BA(Call(SVar("op"),[]),Op("",[RootApp(Id),App(Call(SVar("arg"),[]),Op("",[]))]))))])])
