Specification([Imports(["sunit","annotations"]),Signature([Sorts([Sort("Exp",[]),Sort("Type",[])]),Constructors([OpDecl("Var",FunType([ConstType(Var("String"))],ConstType(Var("Exp")))),OpDecl("Plus",FunType([ConstType(Var("Exp")),ConstType(Var("Exp"))],ConstType(Var("Exp")))),OpDecl("Int",ConstType(Var("Type"))),OpDecl("Float",ConstType(Var("Type")))])]),Strategies([SDef("test-success",[DefaultVarDec("s")],GuardedLChoice(Call(SVar("s"),[]),Build(Var("Success")),Build(Var("Failure"))))]),Signature([Sorts([Sort("Result",[])]),Constructors([OpDecl("Failure",ConstType(Var("Result"))),OpDecl("Success",ConstType(Var("Result")))])]),Strategies([SDef("main",[],Call(SVar("test-suite"),[Build(Str("Annotations test suite")),Seq(Call(SVar("do-test"),[Build(Str("")),Call(SVar("test-match-suite"),[])]),Seq(Call(SVar("do-test"),[Build(Str("")),Call(SVar("test-set-suite"),[])]),Seq(Call(SVar("do-test"),[Build(Str("")),Call(SVar("test-catch-suite"),[])]),Seq(Call(SVar("do-test"),[Build(Str("")),Call(SVar("test-get-suite"),[])]),Seq(Call(SVar("do-test"),[Build(Str("")),Call(SVar("test-all-some-one-suite"),[])]),Seq(Call(SVar("do-test"),[Build(Str("")),Call(SVar("test-has-annos-suite"),[])]),Seq(Call(SVar("do-test"),[Build(Str("")),Call(SVar("test-overlays-suite"),[])]),Seq(Call(SVar("do-test"),[Build(Str("")),Call(SVar("test-rules-suite"),[])]),Seq(Call(SVar("do-test"),[Build(Str("")),Call(SVar("test-congruences-suite"),[])]),Call(SVar("do-test"),[Build(Str("")),Call(SVar("test-traversals-suite"),[])]))))))))))])),SDef("test-match-suite",[],Call(SVar("test-suite"),[Build(Str("Matching on terms with annotations")),Seq(Call(SVar("test-match-1"),[]),Seq(Call(SVar("test-match-2"),[]),Seq(Call(SVar("test-match-3"),[]),Seq(Call(SVar("test-match-4"),[]),Seq(Call(SVar("test-match-5"),[]),Seq(Call(SVar("test-match-6"),[]),Seq(Call(SVar("test-match-7"),[]),Seq(Call(SVar("test-match-8"),[]),Seq(Call(SVar("test-match-9"),[]),Seq(Call(SVar("test-match-10"),[]),Call(SVar("test-match-11"),[])))))))))))])),SDef("test-match-1",[],Call(SVar("apply-test"),[Build(Str("test-match-1")),Call(SVar("test-success"),[Match(Anno(Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]),Op("Nil",[])))]),Build(Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])])),Build(Var("Success"))])),SDef("test-match-2",[],Call(SVar("apply-test"),[Build(Str("test-match-2")),Call(SVar("test-success"),[Match(Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]))]),Build(Anno(Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]),Op("Nil",[]))),Build(Var("Success"))])),SDef("test-match-3",[],Call(SVar("apply-test"),[Build(Str("test-match-3")),Call(SVar("test-success"),[Match(Anno(Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]),Op("Cons",[Var("Int"),Op("Nil",[])])))]),Build(Anno(Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]),Op("Cons",[Var("Int"),Op("Nil",[])]))),Build(Var("Success"))])),SDef("test-match-4",[],Call(SVar("apply-test"),[Build(Str("test-match-4")),Call(SVar("test-success"),[Match(Anno(Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]),Op("Cons",[Var("Int"),Op("Cons",[Var("Float"),Op("Nil",[])])])))]),Build(Anno(Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]),Op("Cons",[Var("Int"),Op("Cons",[Var("Float"),Op("Nil",[])])]))),Build(Var("Success"))])),SDef("test-match-5",[],Call(SVar("apply-test"),[Build(Str("test-match-5")),Call(SVar("test-success"),[Match(Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]))]),Build(Anno(Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]),Op("Cons",[Var("Int"),Op("Cons",[Var("Float"),Op("Nil",[])])]))),Build(Var("Success"))])),SDef("test-match-6",[],Call(SVar("apply-test"),[Build(Str("test-match-6")),Call(SVar("test-success"),[Match(Anno(Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]),Op("Cons",[Var("Int"),Op("Nil",[])])))]),Build(Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])])),Build(Var("Failure"))])),SDef("test-match-7",[],Call(SVar("apply-test"),[Build(Str("test-match-7")),Call(SVar("test-success"),[Match(Anno(Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]),Op("Nil",[])))]),Build(Anno(Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]),Op("Cons",[Var("Int"),Op("Nil",[])]))),Build(Var("Failure"))])),SDef("test-match-8",[],Call(SVar("apply-test"),[Build(Str("test-match-8")),Call(SVar("test-success"),[Match(Anno(Wld,Op("Cons",[Wld,Op("Nil",[])])))]),Build(Op("Var",[Str("a")])),Build(Var("Failure"))])),SDef("test-match-9",[],Call(SVar("apply-test"),[Build(Str("test-match-9")),Call(SVar("test-success"),[Match(Anno(Wld,Op("Cons",[Wld,Op("Nil",[])])))]),Build(Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Int"),Op("Nil",[])]))),Build(Var("Success"))])),SDef("test-match-10",[],Call(SVar("apply-test"),[Build(Str("test-match-10")),Call(SVar("test-success"),[Match(Anno(Wld,Op("Cons",[Wld,Op("Nil",[])])))]),Build(Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Int"),Op("Cons",[Var("Float"),Op("Nil",[])])]))),Build(Var("Failure"))])),SDef("test-match-11",[],Call(SVar("apply-test"),[Build(Str("test-match-11")),Call(SVar("test-success"),[Match(Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Int"),Op("Nil",[])])))]),Build(Op("Var",[Str("a")])),Build(Var("Failure"))])),SDef("test-set-suite",[],Call(SVar("test-suite"),[Build(Str("Attach annotations to terms with set strategies")),Seq(Call(SVar("test-set-1"),[]),Seq(Call(SVar("test-set-2"),[]),Seq(Call(SVar("test-set-3"),[]),Call(SVar("test-set-4"),[]))))])),SDef("test-set-1",[],Call(SVar("apply-test"),[Build(Str("test-set-1")),Call(SVar("set-annos"),[]),Build(Op("",[Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]),Op("Nil",[])])),Build(Anno(Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]),Op("Nil",[])))])),SDef("test-set-2",[],Call(SVar("apply-test"),[Build(Str("test-set-2")),Call(SVar("set-annos"),[]),Build(Op("",[Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]),Op("Cons",[Var("Int"),Op("Nil",[])])])),Build(Anno(Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]),Op("Cons",[Var("Int"),Op("Nil",[])])))])),SDef("test-set-3",[],Call(SVar("apply-test"),[Build(Str("test-set-3")),Call(SVar("set-annos"),[]),Build(Op("",[Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]),Op("Cons",[Var("Int"),Op("Cons",[Var("Float"),Op("Nil",[])])])])),Build(Anno(Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]),Op("Cons",[Var("Int"),Op("Cons",[Var("Float"),Op("Nil",[])])])))])),SDef("test-set-4",[],Call(SVar("apply-test"),[Build(Str("test-set-4")),Call(SVar("set-anno"),[]),Build(Op("",[Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]),Var("Int")])),Build(Anno(Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]),Op("Cons",[Var("Int"),Op("Nil",[])])))])),SDef("test-catch-suite",[],Call(SVar("test-suite"),[Build(Str("Split a term with annotations")),Seq(Call(SVar("test-catch-1"),[]),Seq(Call(SVar("test-catch-2"),[]),Seq(Call(SVar("test-catch-3"),[]),Call(SVar("test-catch-4"),[]))))])),SDef("test-catch-1",[],Call(SVar("apply-test"),[Build(Str("test-catch-1")),Call(SVar("catch-annos"),[]),Build(Anno(Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]),Op("Nil",[]))),Build(Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]))])),SDef("test-catch-2",[],Call(SVar("apply-test"),[Build(Str("test-catch-2")),Call(SVar("catch-annos"),[]),Build(Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])])),Build(Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]))])),SDef("test-catch-3",[],Call(SVar("apply-test"),[Build(Str("test-catch-3")),Call(SVar("catch-annos"),[]),Build(Anno(Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]),Op("Cons",[Var("Int"),Op("Nil",[])]))),Build(Op("Anno",[Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]),Op("Cons",[Var("Int"),Op("Nil",[])])]))])),SDef("test-catch-4",[],Call(SVar("apply-test"),[Build(Str("test-catch-4")),Call(SVar("catch-annos"),[]),Build(Anno(Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]),Op("Cons",[Var("Int"),Op("Cons",[Var("Float"),Op("Nil",[])])]))),Build(Op("Anno",[Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]),Op("Cons",[Var("Int"),Op("Cons",[Var("Float"),Op("Nil",[])])])]))])),SDef("test-get-suite",[],Call(SVar("test-suite"),[Build(Str("Get the annotations of a term")),Seq(Call(SVar("test-get-1"),[]),Seq(Call(SVar("test-get-2"),[]),Seq(Call(SVar("test-get-3"),[]),Call(SVar("test-get-4"),[]))))])),SDef("test-get-1",[],Call(SVar("apply-test"),[Build(Str("test-get-1")),Call(SVar("get-annos"),[]),Build(Op("Var",[Str("a")])),Build(Op("Nil",[]))])),SDef("test-get-2",[],Call(SVar("apply-test"),[Build(Str("test-get-2")),Call(SVar("get-annos"),[]),Build(Anno(Op("Var",[Str("a")]),Op("Nil",[]))),Build(Op("Nil",[]))])),SDef("test-get-3",[],Call(SVar("apply-test"),[Build(Str("test-get-3")),Call(SVar("get-annos"),[]),Build(Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Int"),Op("Nil",[])]))),Build(Op("Cons",[Var("Int"),Op("Nil",[])]))])),SDef("test-get-4",[],Call(SVar("apply-test"),[Build(Str("test-get-4")),Call(SVar("get-annos"),[]),Build(Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Int"),Op("Cons",[Var("Float"),Op("Nil",[])])]))),Build(Op("Cons",[Var("Int"),Op("Cons",[Var("Float"),Op("Nil",[])])]))])),SDef("test-all-some-one-suite",[],Call(SVar("test-suite"),[Build(Str("All, some and one primitives")),Seq(Call(SVar("test-all"),[]),Seq(Call(SVar("test-some"),[]),Call(SVar("test-one"),[])))])),SDef("test-all",[],Call(SVar("apply-test"),[Build(Str("test-all(s)")),All(Id),Build(Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Int"),Op("Nil",[])]))),Build(Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Int"),Op("Nil",[])])))])),SDef("test-some",[],Call(SVar("apply-test"),[Build(Str("test-some(s)")),Some(Id),Build(Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Int"),Op("Nil",[])]))),Build(Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Int"),Op("Nil",[])])))])),SDef("test-one",[],Call(SVar("apply-test"),[Build(Str("test-one(s)")),One(Id),Build(Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Int"),Op("Nil",[])]))),Build(Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Int"),Op("Nil",[])])))])),SDef("test-has-annos-suite",[],Call(SVar("test-suite"),[Build(Str("has-annos strategy")),Seq(Call(SVar("test-has-annos-1"),[]),Seq(Call(SVar("test-has-annos-2"),[]),Call(SVar("test-has-annos-3"),[])))])),SDef("test-has-annos-1",[],Call(SVar("apply-test"),[Build(Str("test-has-annos-1")),Call(SVar("test-success"),[Call(SVar("has-annos"),[])]),Build(Op("Var",[Str("a")])),Build(Var("Failure"))])),SDef("test-has-annos-2",[],Call(SVar("apply-test"),[Build(Str("test-has-annos-1")),Call(SVar("test-success"),[Call(SVar("has-annos"),[])]),Build(Anno(Op("Var",[Str("a")]),Op("Nil",[]))),Build(Var("Failure"))])),SDef("test-has-annos-3",[],Call(SVar("apply-test"),[Build(Str("test-has-annos-3")),Call(SVar("test-success"),[Call(SVar("has-annos"),[])]),Build(Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Int"),Op("Nil",[])]))),Build(Var("Success"))])),SDef("test-overlays-suite",[],Call(SVar("test-suite"),[Build(Str("Overlays and annotations")),Seq(Call(SVar("test-overlays-1"),[]),Seq(Call(SVar("test-overlays-2"),[]),Call(SVar("test-overlays-3"),[])))]))]),Overlays([Overlay("VarA",[],Op("Var",[Str("a")])),Overlay("VarAInt",[],Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Int"),Op("Nil",[])]))),Overlay("VarAFloat",[],Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Float"),Op("Nil",[])])))]),Strategies([SDef("test-overlays-1",[],Call(SVar("apply-test"),[Build(Str("test-overlays-1")),Id,Build(Anno(Var("VarA"),Op("Cons",[Var("Int"),Op("Nil",[])]))),Build(Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Int"),Op("Nil",[])])))])),SDef("test-overlays-2",[],Call(SVar("apply-test"),[Build(Str("test-overlays-2")),Id,Build(Var("VarAInt")),Build(Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Int"),Op("Nil",[])])))])),SDef("test-overlays-3",[],Call(SVar("apply-test"),[Build(Str("test-overlays-3")),Id,Build(Anno(Var("VarAFloat"),Op("Cons",[Var("Int"),Op("Nil",[])]))),Build(Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Int"),Op("Nil",[])])))])),SDef("test-rules-suite",[],Call(SVar("test-suite"),[Build(Str("Rules and annotations")),Seq(Call(SVar("test-rules-1"),[]),Seq(Call(SVar("test-rules-2"),[]),Seq(Call(SVar("test-rules-3"),[]),Seq(Call(SVar("test-rules-4"),[]),Seq(Call(SVar("test-rules-5"),[]),Seq(Call(SVar("test-rules-6"),[]),Call(SVar("test-rules-7"),[])))))))]))]),Rules([RDef("TypeCheck",[],Rule(Op("Plus",[Anno(Var("e1"),Op("Cons",[Var("Int"),Op("Nil",[])])),Anno(Var("e2"),Op("Cons",[Var("Int"),Op("Nil",[])]))]),Anno(Op("Plus",[Var("e1"),Var("e2")]),Op("Cons",[Var("Int"),Op("Nil",[])])),Id)),RDef("TypeCheck",[],Rule(Op("Var",[Var("x")]),Anno(Op("Var",[Var("x")]),Op("Cons",[Var("Int"),Op("Nil",[])])),Id)),RDef("CommPlus",[],Rule(Op("Plus",[Var("x"),Var("y")]),Op("Plus",[Var("y"),Var("x")]),Id)),RDef("Rename",[],Rule(Op("Var",[Wld]),Op("Var",[Str("r")]),Id)),RDef("Any-to-Float",[],Rule(Anno(Op("Var",[Var("s")]),Op("Cons",[Wld,Op("Nil",[])])),Anno(Op("Var",[Var("s")]),Op("Cons",[Var("Float"),Op("Nil",[])])),Id))]),Strategies([SDef("test-rules-1",[],Call(SVar("apply-test"),[Build(Str("test-rules-1")),Call(SVar("TypeCheck"),[]),Build(Op("Plus",[Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Int"),Op("Nil",[])])),Anno(Op("Var",[Str("b")]),Op("Cons",[Var("Int"),Op("Nil",[])]))])),Build(Anno(Op("Plus",[Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Int"),Op("Nil",[])])),Anno(Op("Var",[Str("b")]),Op("Cons",[Var("Int"),Op("Nil",[])]))]),Op("Cons",[Var("Int"),Op("Nil",[])])))])),SDef("test-rules-2",[],Call(SVar("apply-test"),[Build(Str("test-rules-2")),Call(SVar("CommPlus"),[]),Build(Op("Plus",[Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Int"),Op("Nil",[])])),Anno(Op("Var",[Str("b")]),Op("Cons",[Var("Int"),Op("Nil",[])]))])),Build(Op("Plus",[Anno(Op("Var",[Str("b")]),Op("Cons",[Var("Int"),Op("Nil",[])])),Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Int"),Op("Nil",[])]))]))])),SDef("test-rules-3",[],Call(SVar("apply-test"),[Build(Str("test-rules-3")),Call(SVar("Any-to-Float"),[]),Build(Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Int"),Op("Nil",[])]))),Build(Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Float"),Op("Nil",[])])))])),SDef("test-rules-4",[],Call(SVar("apply-test"),[Build(Str("test-rules-4")),LRule(Rule(Anno(Wld,Op("Cons",[Wld,Op("Nil",[])])),Op("Var",[Str("a")]),Id)),Build(Anno(Var("Float"),Op("Cons",[Var("Int"),Op("Nil",[])]))),Build(Op("Var",[Str("a")]))])),SDef("test-rules-5",[],Call(SVar("apply-test"),[Build(Str("test-rules-5")),Call(SVar("try"),[Call(SVar("Any-to-Float"),[])]),Build(Op("Var",[Str("a")])),Build(Op("Var",[Str("a")]))])),SDef("test-rules-6",[],Call(SVar("apply-test"),[Build(Str("test-rules-6")),Call(SVar("try"),[LRule(Rule(Anno(Op("Var",[Var("s")]),Op("Cons",[Var(ListVar("ts*")),Op("Nil",[])])),Anno(Op("Var",[Var("s")]),Op("Cons",[App(Call(SVar("length"),[]),Op("Cons",[Var(ListVar("ts*")),Op("Nil",[])])),Op("Nil",[])])),Id))]),Build(Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Int"),Op("Cons",[Var("Float"),Op("Nil",[])])]))),Build(Anno(Op("Var",[Str("a")]),Op("Cons",[Int(2),Op("Nil",[])])))])),SDef("test-rules-7",[],Call(SVar("apply-test"),[Build(Str("test-rules-7")),LRule(Rule(Anno(Op("Var",[Var("s")]),Op("Cons",[Var(ListVar("ts*")),Op("Nil",[])])),Anno(Op("Var",[Var("s")]),Op("Cons",[App(Call(SVar("length"),[]),Op("Cons",[Var(ListVar("ts*")),Op("Nil",[])])),Op("Nil",[])])),Id)),Build(Op("Var",[Str("a")])),Build(Anno(Op("Var",[Str("a")]),Op("Cons",[Int(0),Op("Nil",[])])))])),SDef("test-congruences-suite",[],Call(SVar("test-suite"),[Build(Str("Congruences and annotations")),Seq(Call(SVar("test-congruences-1"),[]),Seq(Call(SVar("test-congruences-2"),[]),Seq(Call(SVar("test-congruences-3"),[]),Call(SVar("test-congruences-4"),[]))))])),SDef("test-congruences-1",[],Call(SVar("apply-test"),[Build(Str("test-congruences-1")),Call(SVar("Anno_Cong__"),[Id,[Call(SVar("Cons"),[Call(SVar("CommPlus"),[]),Call(SVar("Nil"),[])])]]),Build(Anno(Op("Var",[Str("c")]),Op("Cons",[Op("Plus",[Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Int"),Op("Nil",[])])),Anno(Op("Var",[Str("b")]),Op("Cons",[Var("Int"),Op("Nil",[])]))]),Op("Nil",[])]))),Build(Anno(Op("Var",[Str("c")]),Op("Cons",[Op("Plus",[Anno(Op("Var",[Str("b")]),Op("Cons",[Var("Int"),Op("Nil",[])])),Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Int"),Op("Nil",[])]))]),Op("Nil",[])])))])),SDef("test-congruences-2",[],Call(SVar("apply-test"),[Build(Str("test-congruences-2")),Call(SVar("Anno_Cong__"),[Id,[Call(SVar("Cons"),[Call(SVar("Rename"),[]),Call(SVar("Nil"),[])])]]),Build(Anno(Op("Var",[Str("c")]),Op("Cons",[Op("Var",[Str("a")]),Op("Nil",[])]))),Build(Anno(Op("Var",[Str("c")]),Op("Cons",[Op("Var",[Str("r")]),Op("Nil",[])])))])),SDef("test-congruences-3",[],Call(SVar("apply-test"),[Build(Str("test-congruences-3")),Call(SVar("Plus"),[Call(SVar("Rename"),[]),Call(SVar("Rename"),[])]),Build(Anno(Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]),Op("Cons",[Var("Int"),Op("Nil",[])]))),Build(Anno(Op("Plus",[Op("Var",[Str("r")]),Op("Var",[Str("r")])]),Op("Cons",[Var("Int"),Op("Nil",[])])))])),SDef("test-congruences-4",[],Call(SVar("apply-test"),[Build(Str("test-congruences-4")),Seq(Call(SVar("Plus"),[Call(SVar("Rename"),[]),Call(SVar("Rename"),[])]),Call(SVar("test-success"),[Match(Anno(Op("Plus",[Op("Var",[Str("r")]),Op("Var",[Str("r")])]),Op("Nil",[])))])),Build(Anno(Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])]),Op("Cons",[Var("Int"),Op("Nil",[])]))),Build(Var("Failure"))])),SDef("test-traversals-suite",[],Call(SVar("test-suite"),[Build(Str("Traversals and annotations")),Seq(Call(SVar("test-traversals-1"),[]),Call(SVar("test-traversals-2"),[]))])),SDef("test-traversals-1",[],Call(SVar("apply-test"),[Build(Str("test-traversals-1")),Call(SVar("bottomup"),[Call(SVar("try"),[Call(SVar("TypeCheck"),[])])]),Build(Op("Plus",[Op("Var",[Str("c")]),Op("Plus",[Op("Var",[Str("a")]),Op("Var",[Str("b")])])])),Build(Anno(Op("Plus",[Anno(Op("Var",[Str("c")]),Op("Cons",[Var("Int"),Op("Nil",[])])),Anno(Op("Plus",[Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Int"),Op("Nil",[])])),Anno(Op("Var",[Str("b")]),Op("Cons",[Var("Int"),Op("Nil",[])]))]),Op("Cons",[Var("Int"),Op("Nil",[])]))]),Op("Cons",[Var("Int"),Op("Nil",[])])))])),SDef("test-traversals-2",[],Call(SVar("apply-test"),[Build(Str("test-traversals-2")),Call(SVar("topdown"),[Id]),Build(Anno(Op("Plus",[Anno(Op("Var",[Str("c")]),Op("Cons",[Var("Int"),Op("Nil",[])])),Anno(Op("Plus",[Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Int"),Op("Nil",[])])),Anno(Op("Var",[Str("b")]),Op("Cons",[Var("Int"),Op("Nil",[])]))]),Op("Cons",[Var("Int"),Op("Nil",[])]))]),Op("Cons",[Var("Int"),Op("Nil",[])]))),Build(Anno(Op("Plus",[Anno(Op("Var",[Str("c")]),Op("Cons",[Var("Int"),Op("Nil",[])])),Anno(Op("Plus",[Anno(Op("Var",[Str("a")]),Op("Cons",[Var("Int"),Op("Nil",[])])),Anno(Op("Var",[Str("b")]),Op("Cons",[Var("Int"),Op("Nil",[])]))]),Op("Cons",[Var("Int"),Op("Nil",[])]))]),Op("Cons",[Var("Int"),Op("Nil",[])])))]))])])