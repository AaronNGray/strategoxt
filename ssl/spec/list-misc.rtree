Specification([Imports(["list-cons","list-basic"]),Strategies([SDef("member",[],Call(SVar(""),[Match(Var("x")),Call(SVar("fetch"),[Match(Var("x"))])]))]),Rules([RDef("FoldR1",[],Rule(Op("Cons",[Var("x"),Op("Cons",[Var("y"),Op("Nil",[])])]),Op("",[Var("x"),Var("y")]),Id)),RDef("FoldR",[],Rule(Op("Cons",[Var("x"),Var("xs")]),Op("",[Var("x"),Var("xs")]),Id)),RDef("FoldL",[DefaultVarDec("s")],Rule(Op("",[Op("Cons",[Var("x"),Var("xs")]),Var("y")]),Op("",[Var("xs"),App(Call(SVar("s"),[]),Op("",[Var("x"),Var("y")]))]),Id)),RDef("lsplit",[DefaultVarDec("f"),DefaultVarDec("g")],Rule(Var("x"),Op("Cons",[App(Call(SVar("f"),[]),Var("x")),Op("Cons",[App(Call(SVar("g"),[]),Var("x")),Op("Nil",[])])]),Id))]),Strategies([SDef("foldr1",[DefaultVarDec("s1"),DefaultVarDec("s2")],Rec("x",LChoice(Seq(Call(SVar("Cons"),[Id,Call(SVar("Nil"),[])]),Call(SVar("s1"),[])),Seq(Call(SVar("FoldR"),[]),Seq(Call(SVar(""),[Id,Call(SVar("x"),[])]),Call(SVar("s2"),[])))))),SDef("foldr1",[DefaultVarDec("s")],Rec("x",Seq(LChoice(Call(SVar("FoldR1"),[]),Seq(Call(SVar("FoldR"),[]),Call(SVar(""),[Id,Call(SVar("x"),[])]))),Call(SVar("s"),[])))),SDef("foldr",[DefaultVarDec("s1"),DefaultVarDec("s2")],Choice(Seq(Call(SVar("Nil"),[]),Call(SVar("s1"),[])),LRule(Rule(Op("Cons",[Var("y"),Var("ys")]),App(Call(SVar("s2"),[]),Op("",[Var("y"),App(Call(SVar("foldr"),[Call(SVar("s1"),[]),Call(SVar("s2"),[])]),Var("ys"))])),Id)))),SDef("foldr",[DefaultVarDec("s1"),DefaultVarDec("s2"),DefaultVarDec("f")],Choice(Seq(Call(SVar("Nil"),[]),Call(SVar("s1"),[])),LRule(Rule(Op("Cons",[Var("y"),Var("ys")]),App(Call(SVar("s2"),[]),Op("",[App(Call(SVar("f"),[]),Var("y")),App(Call(SVar("foldr"),[Call(SVar("s1"),[]),Call(SVar("s2"),[]),Call(SVar("f"),[])]),Var("ys"))])),Id)))),SDef("foldl",[DefaultVarDec("s")],Rec("x",Choice(LRule(Rule(Op("",[Op("Nil",[]),Var("y")]),Var("y"),Id)),Seq(Call(SVar("FoldL"),[Call(SVar("s"),[])]),Call(SVar("x"),[]))))),SDef("mapfoldr",[DefaultVarDec("s1"),DefaultVarDec("s2"),DefaultVarDec("s3")],Seq(Call(SVar("obsolete"),[Build(Str("mapfoldr; use foldr/3"))]),Call(SVar("foldr"),[Call(SVar("s1"),[]),Call(SVar("s3"),[]),Call(SVar("s2"),[])]))),SDef("mapfoldr1",[DefaultVarDec("s1"),DefaultVarDec("s2"),DefaultVarDec("s3")],Rec("x",LChoice(Seq(Call(SVar("Cons"),[Id,Call(SVar("Nil"),[])]),Call(SVar("s1"),[])),Seq(Call(SVar("Cons"),[Call(SVar("s2"),[]),Call(SVar("x"),[])]),Seq(LRule(Rule(Op("Cons",[Var("a"),Var("b")]),Op("",[Var("a"),Var("b")]),Id)),Call(SVar("s3"),[])))))),SDef("last",[],Rec("x",LChoice(Call(SVar("Last"),[]),Seq(Call(SVar("Tl"),[]),Call(SVar("x"),[]))))),SDef("init",[],Call(SVar("at-last"),[Call(SVar("Tl"),[])])),SDef("copy",[],Call(SVar("for"),[LRule(Rule(Op("",[Var("n"),Var("t")]),Op("",[Var("n"),Var("t"),Op("Nil",[])]),Id)),LRule(Rule(Op("",[Int(0),Var("t"),Var("ts")]),Var("ts"),Id)),LRule(Rule(Op("",[Var("n"),Var("t"),Var("ts")]),Op("",[App(Call(SVar("subt"),[]),Op("",[Var("n"),Int(1)])),Var("t"),Op("Cons",[Var("t"),Var("ts")])]),BA(Call(SVar("geq"),[]),Op("",[Var("n"),Int(1)]))))])),SDef("copy",[DefaultVarDec("s")],Call(SVar("for"),[LRule(Rule(Op("",[Var("n"),Var("t")]),Op("",[Var("n"),Var("t"),Op("Nil",[])]),Id)),LRule(Rule(Op("",[Int(0),Var("t"),Var("ts")]),Var("ts"),Id)),LRule(Rule(Op("",[Var("n"),Var("t"),Var("ts")]),Op("",[App(Call(SVar("subt"),[]),Op("",[Var("n"),Int(1)])),Var("t"),Op("Cons",[App(Call(SVar("s"),[]),Var("t")),Var("ts")])]),BA(Call(SVar("geq"),[]),Op("",[Var("n"),Int(1)]))))])),SDef("thread-map",[DefaultVarDec("s")],Rec("x",Choice(Call(SVar(Mod("Cons","T")),[Call(SVar("s"),[]),Call(SVar("x"),[])]),Call(SVar(Mod("Nil","T")),[])))),SDef("number",[DefaultVarDec("s")],Seq(Build(Op("",[RootApp(Id),Int(0)])),Seq(Call(SVar("thread-map"),[Build(Op("",[RootApp(Call(SVar("s"),[])),RootApp(Seq(Call(SVar("Snd"),[]),Call(SVar("inc"),[])))]))]),Match(Op("",[RootApp(Id),Wld]))))),SDef("take-while",[DefaultVarDec("s")],Call(SVar("at-suffix"),[Choice(Call(SVar("Nil"),[]),Seq(Call(SVar("Cons"),[Not(Call(SVar("s"),[])),Id]),Build(Op("Nil",[]))))])),SDef("take-until",[DefaultVarDec("s")],Call(SVar("at-suffix"),[Choice(Call(SVar("Nil"),[]),Seq(Call(SVar("Cons"),[Call(SVar("s"),[]),Id]),Build(Op("Nil",[]))))])),SDef("take",[DefaultVarDec("isn")],Seq(Call(SVar("nzip0"),[Id]),Seq(Call(SVar("take-until"),[Call(SVar(""),[Call(SVar("isn"),[]),Id])]),Call(SVar("map"),[Call(SVar("Snd"),[])])))),SDef("drop-while",[DefaultVarDec("s")],Seq(Call(SVar("at-suffix"),[Seq(Choice(Call(SVar("Nil"),[]),Call(SVar("Cons"),[Not(Call(SVar("s"),[])),Id])),Match(Var("xs")))]),Build(Var("xs")))),SDef("drop-until",[DefaultVarDec("s")],Seq(Call(SVar("at-suffix"),[Seq(Choice(Call(SVar("Nil"),[]),Call(SVar("Cons"),[Call(SVar("s"),[]),Id])),Match(Var("xs")))]),Build(Var("xs")))),SDef("split-at",[DefaultVarDec("s")],Seq(Call(SVar("at-suffix"),[Seq(Call(SVar("Cons"),[Call(SVar("s"),[]),Id]),Seq(Call(SVar("Cons"),[Id,Match(Var("tl"))]),Build(Op("Nil",[]))))]),Build(Op("",[RootApp(Id),Var("tl")])))),SDef("drop",[DefaultVarDec("isn")],Seq(Call(SVar("nzip0"),[Id]),Seq(Call(SVar("drop-until"),[Call(SVar(""),[Call(SVar("isn"),[]),Id])]),Call(SVar("map"),[Call(SVar("Snd"),[])]))))])])