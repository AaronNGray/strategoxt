module posix-process
imports posix-signal verbose

/**
 * Run-time process information
 */
strategies

  // get-pid :: a -> Int
  // return process identifier of current process

  get-pid = 
    prim("SSL_get_pid")

/**
 * Process creation
 *
 * fork() exec() 
 */
strategies   

  /**
   * fork creates a child process that differs from the parent process
   * only in its PID and PPID, and in the fact that resource  
   * utilizations  are  set  to  0. File locks and pending signals are not
   * inherited. 
   *
   * Fails if forking fails, in which case no child process is created.
   * On success, the PID of the child process is returned  in  the  parent’s
   * thread  of execution, and a 0 is returned in the child’s thread of exe‐
   * cution.
   */

  // fork :: a -> Int
  fork =
    prim("SSL_fork")

  /**
   * Executes "child" in the child process and returns a tuple
   * of the pid of the child process and the current term in the
   * parent process.
   */
  fork(child) =
    fork(child, id)

  fork(child, parent) =
    ?t; fork; ?pid; (?0; <child> t <+ <parent> (pid, t))

  fork-and-wait(child) =
    fork(child, ?(<waitpid>, t); warn-ifsignaled; ?WaitStatus(0,_,_); !t)
    
  /*   The  execv  and  execvp functions provide an array of pointers to
       null-terminated strings that represent the argument  list  avail�
       able  to  the  new  program.   The first argument, by convention,
       should point to the file name associated with the file being exe�
       cuted.   The  array  of  pointers  must  be  terminated by a NULL
       pointer. */

  execvp = 
    ?(file, argv); prim("SSL_execvp", file, argv)

/**
 * Process termination 
 *
 * wait() and waitpid()
 */
strategies 

  // waitpid :: Int -> WaitStatus
  waitpid =
    ?pid; prim("SSL_waitpid", pid)
    
  // examine wait status
  exited =
    ?WaitStatus(s,_,_)
    ; where(<not(eq)> (s, -1))
    ; if-verbose3(debug(!"the process exited: "))
      
  signaled =
    ?WaitStatus(_,s,_)
    ; where(<not(eq)> (s, -1))
    ; if-verbose2(debug(!"the process was signaled"))
       
  stopped = 
    ?WaitStatus(_,_,s)
    ; where(<not(eq)> (s, -1))
    ; if-verbose3(debug(!"the process stopped"))
    
  warn-ifsignaled =
    where(try(
      ?WaitStatus(_, <id>, _)
    ; not(?-1)
    ; signal-from-number
    ; signal-to-descr
    ; <printnl> (stderr, ["** WARNING -- process signaled: ", <id>])
    ))
    
signature
  constructors
    WaitStatus : Int * Int * Int -> WaitStatus
    
  // (1) Exit status or -1 if process did not terminate properly
  // (2) Signal number or -1 if the process wasn't terminated because of a signal
  // (3) Signal number or -1 if the process wasn't stopped

/**
 * Terminating the Current Process
 *
 * exit() _exit() abort() 
 */
strategies 
 
  // exit :: Int
  // abort execution with exit value n
  
  exit = 
    ?n; prim("SSL_exit", n)
  
/**
 * Terminating Another Process 
 */