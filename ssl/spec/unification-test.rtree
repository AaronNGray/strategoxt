Specification([Imports(["sunit","unification"]),Strategies([SDef("main",[],Call(SVar("test-suite"),[Build(Str("unification-test")),Seq(Call(SVar("test0"),[]),Call(SVar("test1"),[]))]))]),Signature([Constructors([OpDecl("Typed",FunType([ConstType(Var("Exp")),ConstType(Var("Type"))],ConstType(Var("Exp")))),OpDecl("Var",FunType([ConstType(Var("String"))],ConstType(Var("Exp")))),OpDecl("Forall",FunType([ConstType(Var("String")),ConstType(Var("Type"))],ConstType(Var("Type")))),OpDecl("TVar",FunType([ConstType(Var("String"))],ConstType(Var("Type"))))])]),Strategies([SDef("test0",[],Call(SVar("apply-test"),[Build(Str("test0")),Call(SVar("equal"),[]),Build(Op("Cons",[Op("",[Op("Typed",[Op("Var",[Str("a")]),Op("Forall",[Str("b"),Op("TVar",[Str("b")])])]),Op("Typed",[Op("Var",[Str("a")]),Op("Forall",[Str("b"),Op("TVar",[Str("b")])])])]),Op("Nil",[])])),Build(Op("Nil",[]))])),SDef("test1",[],Call(SVar("apply-test"),[Build(Str("test1")),Call(SVar("equal"),[LRule(Rule(Op("Typed",[Var("x"),Var("y")]),Var("x"),Id))]),Build(Op("Cons",[Op("",[Op("Typed",[Op("Var",[Str("a")]),Op("Forall",[Str("b"),Op("TVar",[Str("b")])])]),Op("Typed",[Op("Var",[Str("a")]),Op("Forall",[Str("c"),Op("TVar",[Str("c")])])])]),Op("Nil",[])])),Build(Op("Nil",[]))]))])])