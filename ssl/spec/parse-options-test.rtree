Specification([Imports(["sunit","parse-options"]),Signature([Sorts([Sort("Option",[])]),Constructors([OpDecl("Dir",FunType([ConstType(Var("String"))],ConstType(Var("Option")))),OpDecl("ExecDir",FunType([ConstType(Var("String"))],ConstType(Var("Option")))),OpDecl("InclDir",FunType([ConstType(Var("String"))],ConstType(Var("Option")))),OpDecl("CInclDir",FunType([ConstType(Var("String"))],ConstType(Var("Option")))),OpDecl("CLibDir",FunType([ConstType(Var("String"))],ConstType(Var("Option")))),OpDecl("Input",FunType([ConstType(Var("String"))],ConstType(Var("Option")))),OpDecl("Main",FunType([ConstType(Var("String"))],ConstType(Var("Option")))),OpDecl("AST",ConstType(Var("Option"))),OpDecl("Ignore",ConstType(Var("Option"))),OpDecl("CC",ConstType(Var("Option"))),OpDecl("NORM",ConstType(Var("Option"))),OpDecl("FUSION",ConstType(Var("Option"))),OpDecl("FRONTEND",ConstType(Var("Option"))),OpDecl("CSYNTAX",ConstType(Var("Option"))),OpDecl("TraceAll",ConstType(Var("Option"))),OpDecl("Trace",FunType([ConstType(Var("String"))],ConstType(Var("Option"))))])]),Strategies([SDef("main",[],Call(SVar("test-suite"),[Build(Str("parse-options-test")),Seq(Call(SVar("test1"),[]),Call(SVar("test2"),[]))])),SDef("sc-options",[],Choice(Call(SVar("ArgOption"),[Match(Str("-e")),LRule(Rule(Var("x"),Op("ExecDir",[Var("x")]),Id))]),Choice(Call(SVar("ArgOption"),[Match(Str("-I")),Build(Var("Ignore"))]),Choice(Call(SVar("ArgOption"),[Match(Str("--Include")),Build(Var("Ignore"))]),Choice(Call(SVar("ArgOption"),[Match(Str("-CI")),Build(Var("Ignore"))]),Choice(Call(SVar("ArgOption"),[Match(Str("-CL")),Build(Var("Ignore"))]),Choice(Call(SVar("Option"),[Match(Str("-CC")),Build(Var("CC"))]),Choice(Call(SVar("Option"),[Match(Str("--norm")),Build(Var("NORM"))]),Choice(Call(SVar("ArgOption"),[Match(Str("-i")),LRule(Rule(Var("x"),Op("Input",[App(Call(SVar("basename"),[]),Var("x"))]),Id))]),Choice(Call(SVar("ArgOption"),[Match(Str("--main")),LRule(Rule(Var("x"),Op("Main",[Var("x")]),Id))]),Choice(Call(SVar("ArgOption"),[Match(Str("-m")),LRule(Rule(Var("x"),Op("Main",[Var("x")]),Id))]),Choice(Call(SVar("Option"),[Match(Str("--ast")),Build(Var("AST"))]),Choice(Call(SVar("Option"),[Match(Str("-F")),Build(Var("FRONTEND"))]),Choice(Call(SVar("Option"),[Match(Str("--fusion")),Build(Var("FUSION"))]),Choice(Call(SVar("Option"),[Match(Str("--csyntax")),Build(Var("CSYNTAX"))]),Choice(Call(SVar("Option"),[Match(Str("--trace-all")),Seq(Build(Var("TraceAll")),DynamicRules([RDef("TraceAllFuns",[],Rule(Op("",[]),Op("",[]),Id))]))]),Call(SVar("ArgOption"),[Match(Str("-t")),LRule(Rule(Var("x"),Op("Trace",[Var("x")]),DynamicRules([RDef("TraceFun",[],Rule(Var("x"),Op("",[]),Id))])))]))))))))))))))))),SDef("io-options",[],Choice(Call(SVar("Option"),[Choice(Match(Str("-S")),Match(Str("--silent"))),Build(Op("Silent",[])),Build(Str("-S|--silent      Silent execution"))]),Choice(Call(SVar("ArgOption"),[Match(Str("--verbose")),Build(Op("Verbose",[RootApp(Id)])),Build(Str("--verbose        Verbose execution"))]),Choice(Call(SVar("Option"),[Choice(Match(Str("-v")),Match(Str("--version"))),Build(Op("Version",[])),Build(Str("-v|--version     Display prgram's version"))]),Choice(Call(SVar("ArgOption"),[Match(Str("@version")),Build(Op("DeclVersion",[RootApp(Id)])),Build(Str("@version         Unknown"))]),Choice(Call(SVar("ArgOption"),[Choice(Match(Str("-i")),Match(Str("--input"))),Build(Op("Input",[RootApp(Id)])),Build(Str("-i f|--input f   Read input from f"))]),Choice(Call(SVar("ArgOption"),[Choice(Match(Str("-o")),Match(Str("--output"))),Build(Op("Output",[RootApp(Id)])),Build(Str("-o f|--output f  Write output to f"))]),Choice(Call(SVar("Option"),[Match(Str("-b")),Build(Op("Binary",[])),Build(Str("-b               Write binary output"))]),Call(SVar("Option"),[Match(Str("-s")),Build(Op("Statistics",[])),Build(Str("-s               Turn on statisctics"))]))))))))),SDef("test1",[],Call(SVar("apply-test"),[Build(Str("test1")),Seq(Where(BA(Call(SVar("table-put"),[]),Op("",[Str("usage-table"),Str("usage"),Op("Nil",[])]))),Call(SVar("parse-options'"),[LChoice(Call(SVar("sc-options"),[]),Choice(Call(SVar("io-options"),[]),Call(SVar("system-usage-switch"),[])))])),Build(Op("Cons",[Str("pack-stratego"),Op("Cons",[Str("-I"),Op("Cons",[Str("."),Op("Cons",[Str("-I"),Op("Cons",[Str(".."),Op("Cons",[Str("-CI"),Op("Cons",[Str("-I/tmp/include"),Op("Nil",[])])])])])])])])),Build(Op("Cons",[Op("Program",[Str("pack-stratego")]),Op("Cons",[Var("Ignore"),Op("Cons",[Var("Ignore"),Op("Cons",[Var("Ignore"),Op("Nil",[])])])])]))])),SDef("test2",[],Call(SVar("apply-test"),[Build(Str("test2")),Call(SVar("parse-options"),[LChoice(Call(SVar("sc-options"),[]),Call(SVar("io-options"),[]))]),Build(Op("Cons",[Str("pack-stratego"),Op("Cons",[Str("-I"),Op("Cons",[Str("."),Op("Cons",[Str("-I"),Op("Cons",[Str(".."),Op("Cons",[Str("-CI"),Op("Cons",[Str("-I/tmp/include"),Op("Nil",[])])])])])])])])),Build(Op("Cons",[Op("Program",[Str("pack-stratego")]),Op("Cons",[Var("Ignore"),Op("Cons",[Var("Ignore"),Op("Cons",[Var("Ignore"),Op("Nil",[])])])])]))]))])])
