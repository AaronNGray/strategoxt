/**
 * The file module provides abstractions over the basic file system
 * operations in the module posix-file.
 */
module file
imports posix-file io

/**
 * Abstractions for streams
 */
strategies

  /**
   * opens a Stream associated to a FileLoc
   *
   * :: FileLoc * String -> Stream
   */
  open-stream = ?(_, _);
    (  Fst; stdio-stream
    <+ (?Path(<id>), id); fopen
    <+ (is-string,   id); fopen
    )

  /**
   * :: FileLoc -> Stream
   */
  stdio-stream = ?stdin() ; stdin-stream
  stdio-stream = ?stdout(); stdout-stream
  stdio-stream = ?stderr(); stderr-stream

strategies

  // :: String -> String
  file-exists =
    <access> (<id>, [F_OK()])

  // :: String -> String
  can-read-file =
    <access> (<id>, [R_OK()])

  // :: String -> String
  can-write-file =
    <access> (<id>, [W_OK()])

strategies

  find-in-path =
    ?(file, <id>) 
    ; fetch-elem(<concat-strings; file-exists> [<id>,"/",file])

  find-in-path(mkpath) =
    file-exists 
    <+ split(id, mkpath); find-in-path
    <+ <fatal-error> ["no such file: ", <id>]

  find-file(mkpath, ext) =
    guarantee-extension(ext)
    ; find-in-path(mkpath)

  find-file(ext) =
    (guarantee-extension(ext), id)
    ; find-in-path

/**
 * Copyright (C) 1998-2003 Eelco Visser <visser@acm.org>
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 */