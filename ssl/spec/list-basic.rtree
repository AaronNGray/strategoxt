Specification([Imports(["list-cons"]),Rules([RDef("Hd",[],Rule(Op("Cons",[Var("x"),Var("l")]),Var("x"),Id)),RDef("Tl",[],Rule(Op("Cons",[Var("x"),Var("l")]),Var("l"),Id)),RDef("Last",[],Rule(Op("Cons",[Var("x"),Op("Nil",[])]),Var("x"),Id)),RDef("MkCons",[],Rule(Op("",[Var("x"),Var("xs")]),Op("Cons",[Var("x"),Var("xs")]),Id)),SDef("MkSingleton",[],Build(Op("Cons",[RootApp(Id),Op("Nil",[])])))]),Strategies([SDef("is-list",[],Choice(Match(Op("Nil",[])),Match(Op("Cons",[Wld,Wld])))),SDef("map",[DefaultVarDec("s")],Rec("x",Choice(Call(SVar("Nil"),[]),Call(SVar("Cons"),[Call(SVar("s"),[]),Call(SVar("x"),[])])))),SDef("list",[DefaultVarDec("s")],Rec("x",Choice(Call(SVar("Nil"),[]),Call(SVar("Cons"),[Call(SVar("s"),[]),Call(SVar("x"),[])])))),SDef("list-some",[DefaultVarDec("s")],Rec("x",GuardedLChoice(Call(SVar("Cons"),[Call(SVar("s"),[]),Id]),Call(SVar("Cons"),[Id,Call(SVar("list"),[Call(SVar("try"),[Call(SVar("s"),[])])])]),Call(SVar("Cons"),[Id,Call(SVar("x"),[])])))),SDef("list-some-filter",[DefaultVarDec("s")],Rec("x",LChoice(Seq(Call(SVar("Cons"),[Call(SVar("s"),[]),Id]),Call(SVar("Cons"),[Id,Call(SVar("filter"),[Call(SVar("s"),[])])])),Seq(Call(SVar("Cons"),[Id,Call(SVar("x"),[])]),Call(SVar("Tl"),[]))))),SDef("length",[],Call(SVar("foldr"),[Build(Int(0)),Call(SVar("add"),[]),Build(Int(1))])),SDef("elem",[],Call(SVar("elem"),[Call(SVar("eq"),[])])),SDef("elem",[DefaultVarDec("eq")],Seq(Match(Op("",[Var("x"),RootApp(Id)])),One(Where(BA(Call(SVar("eq"),[]),Op("",[Var("x"),RootApp(Id)])))))),SDef("fetch",[DefaultVarDec("s")],Rec("x",LChoice(Call(SVar("Cons"),[Call(SVar("s"),[]),Id]),Call(SVar("Cons"),[Id,Call(SVar("x"),[])])))),SDef("fetch-elem",[DefaultVarDec("s")],Seq(Call(SVar("fetch"),[Seq(Call(SVar("s"),[]),Match(Var("x")))]),Build(Var("x")))),SDef("split-fetch",[DefaultVarDec("s")],Seq(Call(SVar("at-suffix"),[Seq(Call(SVar("Cons"),[Call(SVar("s"),[]),Id]),Seq(Call(SVar("Cons"),[Id,Match(Var("tl"))]),Build(Op("Nil",[]))))]),Build(Op("",[RootApp(Id),Var("tl")])))),SDef("at-tail",[DefaultVarDec("s")],Call(SVar("Cons"),[Id,Call(SVar("s"),[])])),SDef("at_tail",[DefaultVarDec("s")],Seq(Call(SVar("obsolete"),[Build(Str("at_tail -> at-tail"))]),Call(SVar("at-tail"),[Call(SVar("s"),[])]))),SDef("at-end",[DefaultVarDec("s")],Rec("x",Choice(Call(SVar("Cons"),[Id,Call(SVar("x"),[])]),Seq(Call(SVar("Nil"),[]),Call(SVar("s"),[]))))),SDef("at_end",[DefaultVarDec("s")],Seq(Call(SVar("obsolete"),[Build(Str("at_end -> at-end"))]),Rec("x",Choice(Call(SVar("Cons"),[Id,Call(SVar("x"),[])]),Seq(Call(SVar("Nil"),[]),Call(SVar("s"),[])))))),SDef("at-suffix",[DefaultVarDec("s")],Rec("x",LChoice(Call(SVar("s"),[]),Call(SVar("Cons"),[Id,Call(SVar("x"),[])])))),SDef("at_suffix",[DefaultVarDec("s")],Seq(Call(SVar("obsolete"),[Build(Str("at_suffix -> at-suffix"))]),Rec("x",LChoice(Call(SVar("s"),[]),Call(SVar("Cons"),[Id,Call(SVar("x"),[])]))))),SDef("at_last",[DefaultVarDec("s")],Seq(Call(SVar("obsolete"),[Build(Str("at_last -> at-last"))]),Call(SVar("at-last"),[Call(SVar("s"),[])]))),SDef("at-last",[DefaultVarDec("s")],Rec("x",LChoice(Seq(Call(SVar("Cons"),[Id,Call(SVar("Nil"),[])]),Call(SVar("s"),[])),Call(SVar("Cons"),[Id,Call(SVar("x"),[])])))),SDef("split-init-last",[],Seq(Call(SVar("at-last"),[Seq(Match(Op("Cons",[Var("x"),Op("Nil",[])])),Build(Op("Nil",[])))]),Build(Op("",[RootApp(Id),Var("x")])))),SDef("at-init",[DefaultVarDec("s1"),DefaultVarDec("s2")],Rec("x",LChoice(Call(SVar("Cons"),[Call(SVar("s2"),[]),Call(SVar("Nil"),[])]),Call(SVar("Cons"),[Call(SVar("s1"),[]),Call(SVar("x"),[])])))),SDef("listbu",[DefaultVarDec("s")],Rec("x",Seq(Choice(Call(SVar("Nil"),[]),Call(SVar("Cons"),[Id,Call(SVar("x"),[])])),Call(SVar("s"),[])))),SDef("listtd",[DefaultVarDec("s")],Rec("x",Seq(Call(SVar("s"),[]),Choice(Call(SVar("Nil"),[]),Call(SVar("Cons"),[Id,Call(SVar("x"),[])]))))),SDef("listdu",[DefaultVarDec("s")],Rec("x",Seq(Call(SVar("s"),[]),Seq(Choice(Call(SVar("Nil"),[]),Call(SVar("Cons"),[Id,Call(SVar("x"),[])])),Call(SVar("s"),[]))))),SDef("listdu2",[DefaultVarDec("s1"),DefaultVarDec("s2")],Rec("x",Seq(Call(SVar("s1"),[]),Seq(Choice(Call(SVar("Nil"),[]),Call(SVar("Cons"),[Id,Call(SVar("x"),[])])),Call(SVar("s2"),[]))))),RDef("RevInit",[],Rule(Var("xs"),Op("",[Var("xs"),Op("Nil",[])]),Id)),RDef("Rev",[],Rule(Op("",[Op("Cons",[Var("x"),Var("xs")]),Var("ys")]),Op("",[Var("xs"),Op("Cons",[Var("x"),Var("ys")])]),Id)),RDef("RevExit",[],Rule(Op("",[Op("Nil",[]),Var("ys")]),Var("ys"),Id)),SDef("reverse",[],Call(SVar("reverse-acc"),[Id,Build(Op("Nil",[]))])),SDef("reverse",[DefaultVarDec("s")],Call(SVar("reverse-acc"),[Call(SVar("s"),[]),Build(Op("Nil",[]))])),RDef("reverse-acc",[DefaultVarDec("s"),DefaultVarDec("acc")],Rule(Op("Nil",[]),App(Call(SVar("acc"),[]),Op("",[])),Id)),RDef("reverse-acc",[DefaultVarDec("s"),DefaultVarDec("acc")],Rule(Op("Cons",[Var("x"),Var("xs")]),App(Scope(["ys"],Seq(Where(AM(Build(Op("Cons",[App(Call(SVar("s"),[]),Var("x")),RootApp(Call(SVar("acc"),[]))])),Var("ys"))),Call(SVar("reverse-acc"),[Call(SVar("s"),[]),Build(Var("ys"))]))),Var("xs")),Id))]),Rules([RDef("UptoInit",[],Rule(Var("i"),Op("",[Var("i"),Op("Nil",[])]),Id)),RDef("UptoExit",[],Rule(Op("",[Var("i"),Var("xs")]),Var("xs"),BA(Call(SVar("lt"),[]),Op("",[Var("i"),Int(0)])))),RDef("UptoStep",[],Rule(Op("",[Var("i"),Var("xs")]),Op("",[App(Call(SVar("subt"),[]),Op("",[Var("i"),Int(1)])),Op("Cons",[Var("i"),Var("xs")])]),Id))]),Strategies([SDef("upto",[],Seq(Call(SVar("UptoInit"),[]),Rec("x",LChoice(Call(SVar("UptoExit"),[]),Seq(Call(SVar("UptoStep"),[]),Call(SVar("x"),[]))))))]),Rules([RDef("conc",[],Rule(Op("",[Var("l1"),Var("l2")]),App(Call(SVar("at-end"),[Build(Var("l2"))]),Var("l1")),Id))]),Strategies([SDef("concat",[],Rec("x",Choice(Call(SVar("Nil"),[]),LRule(Rule(Op("Cons",[Var("l"),Var("ls")]),App(Call(SVar("at-end"),[BA(Call(SVar("x"),[]),Var("ls"))]),Var("l")),Id)))))]),Rules([RDef("Sep",[DefaultVarDec("s")],Rule(Op("Cons",[Var("x"),Var("xs")]),Op("Cons",[App(Call(SVar("s"),[]),Op("",[])),Op("Cons",[Var("x"),Var("xs")])]),Id))]),Strategies([SDef("separate-by",[DefaultVarDec("s")],Choice(Call(SVar("Nil"),[]),Call(SVar("Cons"),[Id,Rec("x",Choice(Call(SVar("Nil"),[]),Seq(Call(SVar("Cons"),[Id,Call(SVar("x"),[])]),Call(SVar("Sep"),[Call(SVar("s"),[])]))))])))])])