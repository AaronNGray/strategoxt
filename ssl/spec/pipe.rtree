Specification([Imports(["exec","io"]),Strategies([SDef("exited",[],Seq(Match(Op("WaitStatus",[Var("s"),Wld,Wld])),Seq(Where(BA(Not(Call(SVar("eq"),[])),Op("",[Var("s"),Int(-1)]))),Call(SVar("debug"),[Build(Str("the process exited: "))])))),SDef("signaled",[],Seq(Match(Op("WaitStatus",[Wld,Var("s"),Wld])),Seq(Where(BA(Not(Call(SVar("eq"),[])),Op("",[Var("s"),Int(-1)]))),Call(SVar("debug"),[Build(Str("the process was signaled"))])))),SDef("stopped",[],Seq(Match(Op("WaitStatus",[Wld,Wld,Var("s")])),Seq(Where(BA(Not(Call(SVar("eq"),[])),Op("",[Var("s"),Int(-1)]))),Call(SVar("debug"),[Build(Str("the process stopped"))]))))]),Strategies([SDef("close-pipe",[],Where(Seq(Match(Op("Pipe",[Var("fd1"),Var("fd2")])),Seq(BA(Call(SVar("close"),[]),Var("fd1")),BA(Call(SVar("close"),[]),Var("fd2")))))),SDef("stdin-from-pipe",[],Where(Seq(Match(Op("Pipe",[Var("fd1"),Var("fd2")])),Seq(Call(SVar("STDIN_FILENO"),[]),Seq(Call(SVar("close"),[]),Seq(BA(Call(SVar("dup"),[]),Var("fd1")),Seq(BA(Call(SVar("close"),[]),Var("fd1")),BA(Call(SVar("close"),[]),Var("fd2"))))))))),RDef("file-from-pipe",[],Rule(Op("Pipe",[Var("fd1"),Var("fd2")]),Var("file"),Seq(AM(BA(Call(SVar("fdopen"),[]),Op("",[Var("fd1"),Str("r")])),Var("file")),BA(Call(SVar("close"),[]),Var("fd2"))))),SDef("stdout-to-pipe",[],Where(Seq(Match(Op("Pipe",[Var("fd1"),Var("fd2")])),Seq(Call(SVar("STDOUT_FILENO"),[]),Seq(Call(SVar("close"),[]),Seq(BA(Call(SVar("dup"),[]),Var("fd2")),Seq(BA(Call(SVar("close"),[]),Var("fd1")),BA(Call(SVar("close"),[]),Var("fd2"))))))))),RDef("file-to-pipe",[],Rule(Op("Pipe",[Var("fd1"),Var("fd2")]),Var("file"),Seq(AM(BA(Call(SVar("fdopen"),[]),Op("",[Var("fd2"),Str("w")])),Var("file")),BA(Call(SVar("close"),[]),Var("fd1"))))),SDef("write-term-to-text-pipe",[],Where(Seq(Match(Op("",[Var("p"),Var("t")])),Seq(AM(BA(Call(SVar("file-to-pipe"),[]),Var("p")),Var("outfile")),Seq(BA(Call(SVar("WriteToTextFile"),[]),Op("",[Var("outfile"),Var("t")])),BA(Call(SVar("fclose"),[]),Var("outfile"))))))),RDef("read-term-from-pipe",[],Rule(Var("p"),Var("t"),Seq(AM(BA(Call(SVar("file-from-pipe"),[]),Var("p")),Var("file")),Seq(AM(BA(Call(SVar("ReadFromFile"),[]),Var("file")),Var("t")),BA(Call(SVar("fclose"),[]),Var("file"))))))]),Strategies([SDef("write-to-prog",[DefaultVarDec("prog"),DefaultVarDec("args")],Where(Seq(Where(AM(Call(SVar("pipe"),[]),Var("p"))),Seq(Call(SVar("fork"),[Seq(BA(Call(SVar("stdin-from-pipe"),[]),Var("p")),BA(Call(SVar("execvp"),[]),Op("",[RootApp(Call(SVar("prog"),[])),RootApp(Call(SVar("args"),[]))])))]),Seq(Match(Op("",[Var("pid"),Var("t")])),Seq(BA(Call(SVar("write-term-to-text-pipe"),[]),Op("",[Var("p"),Var("t")])),Seq(BA(Call(SVar("waitpid"),[]),Var("pid")),Choice(Call(SVar("exited"),[]),Choice(Call(SVar("signaled"),[]),Call(SVar("stopped"),[])))))))))),SDef("write-to-prog'",[DefaultVarDec("prog"),DefaultVarDec("args")],Where(Seq(Match(Var("t")),Seq(AM(Call(SVar("pipe"),[]),Var("p")),Seq(Call(SVar("fork"),[]),LChoice(Seq(Match(Int(0)),Seq(BA(Call(SVar("stdin-from-pipe"),[]),Var("p")),BA(Call(SVar("execvp"),[]),Op("",[RootApp(Call(SVar("prog"),[])),RootApp(Call(SVar("args"),[]))])))),Seq(Match(Var("pid")),Seq(BA(Call(SVar("write-term-to-text-pipe"),[]),Op("",[Var("p"),Var("t")])),Seq(BA(Call(SVar("waitpid"),[]),Var("pid")),Choice(Call(SVar("exited"),[]),Choice(Call(SVar("signaled"),[]),Call(SVar("stopped"),[])))))))))))),SDef("read-from-prog",[DefaultVarDec("prog"),DefaultVarDec("args")],Seq(Where(AM(Call(SVar("pipe"),[]),Var("p"))),Seq(Call(SVar("fork"),[Seq(BA(Call(SVar("stdout-to-pipe"),[]),Var("p")),BA(Call(SVar("execvp"),[]),Op("",[RootApp(Call(SVar("prog"),[])),RootApp(Call(SVar("args"),[]))])))]),Seq(Match(Op("",[Var("pid"),Wld])),Seq(AM(BA(Call(SVar("read-term-from-pipe"),[]),Var("p")),Var("t")),Where(Seq(BA(Call(SVar("waitpid"),[]),Var("pid")),Choice(Call(SVar("exited"),[]),Choice(Call(SVar("signaled"),[]),Call(SVar("stopped"),[])))))))))),SDef("read-from-prog'",[DefaultVarDec("prog"),DefaultVarDec("args")],Seq(Where(Seq(AM(Call(SVar("pipe"),[]),Var("p")),Seq(Call(SVar("fork"),[]),LChoice(Seq(Match(Int(0)),Seq(BA(Call(SVar("stdout-to-pipe"),[]),Var("p")),BA(Call(SVar("execvp"),[]),Op("",[RootApp(Call(SVar("prog"),[])),RootApp(Call(SVar("args"),[]))])))),Seq(Match(Var("pid")),Seq(AM(BA(Call(SVar("read-term-from-pipe"),[]),Var("p")),Var("t")),Seq(BA(Call(SVar("waitpid"),[]),Var("pid")),Choice(Call(SVar("exited"),[]),Choice(Call(SVar("signaled"),[]),Call(SVar("stopped"),[])))))))))),Build(Var("t"))))]),Strategies([SDef("setup-filter-pipe",[],Seq(AM(Call(SVar("pipe"),[]),Var("p")),Build(Op("",[Var("p"),Op("Nil",[]),Var("p")])))),RDef("pipe-source",[DefaultVarDec("prog"),DefaultVarDec("args")],Rule(Op("",[Var("p"),Var("pids")]),Var("pids"),Seq(Call(SVar("fork"),[]),LChoice(Seq(Match(Int(0)),Seq(BA(Call(SVar("stdout-to-pipe"),[]),Var("p")),BA(Call(SVar("execvp"),[]),Op("",[RootApp(Call(SVar("prog"),[])),RootApp(Call(SVar("args"),[]))])))),Match(Var("pid")))))),RDef("pipe-sink",[DefaultVarDec("prog"),DefaultVarDec("args")],Rule(Op("",[Var("p0"),Var("pids"),Var("p1")]),Op("",[Var("p0"),Op("Cons",[Var("pid"),Var("pids")])]),AM(Call(SVar("fork"),[Seq(BA(Call(SVar("stdin-from-pipe"),[]),Var("p1")),BA(Call(SVar("execvp"),[]),Op("",[RootApp(Call(SVar("prog"),[])),RootApp(Call(SVar("args"),[]))])))]),Op("",[Var("pid"),Wld])))),RDef("close-filter-pipe",[DefaultVarDec("s")],Rule(Op("",[Var("p-in"),Var("pids"),Var("p-out")]),Op("",[Var("p-in"),Op("Cons",[Var("pid"),Var("pids")])]),AM(BA(Call(SVar("s"),[]),Var("p-out")),Var("pid")))),RDef("exec-filter-pipe",[DefaultVarDec("s")],Rule(Op("",[Var("p-in"),Var("pids")]),Op("",[]),Seq(AM(BA(Call(SVar("s"),[]),Var("p-in")),Var("pid")),BA(Call(SVar("map"),[Seq(Call(SVar("waitpid"),[]),Choice(Call(SVar("exited"),[]),Choice(Call(SVar("signaled"),[]),Call(SVar("stopped"),[]))))]),Op("Cons",[Var("pid"),Var("pids")]))))),RDef("spawn-filter-with-prog",[DefaultVarDec("prog"),DefaultVarDec("args")],Rule(Op("",[Var("p0"),Var("pids"),Var("p-in")]),Op("",[Var("p0"),Op("Cons",[Var("pid"),Var("pids")]),Var("p-out")]),Seq(Call(SVar("debug"),[BA(Call(SVar("concat-strings"),[]),Op("Cons",[Str("spawn-filter-with "),Op("Cons",[RootApp(Call(SVar("prog"),[])),Op("Cons",[Str(": "),Op("Nil",[])])])]))]),Seq(AM(Call(SVar("pipe"),[]),Var("p-out")),AM(Call(SVar("fork"),[Seq(BA(Call(SVar("stdin-from-pipe"),[]),Var("p-in")),Seq(BA(Call(SVar("stdout-to-pipe"),[]),Var("p-out")),BA(Call(SVar("execvp"),[]),Op("",[RootApp(Call(SVar("prog"),[])),RootApp(Call(SVar("args"),[]))]))))]),Op("",[Var("pid"),Wld]))))))])])