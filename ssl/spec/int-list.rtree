Specification([Imports(["list","integers"]),Strategies([SDef("sum",[],Call(SVar("foldr"),[Build(Int(0)),Call(SVar("add"),[])])),SDef("average",[],Seq(Call(SVar("split"),[Call(SVar("sum"),[]),Call(SVar("length"),[])]),Call(SVar("div"),[]))),SDef("list-min",[],Call(SVar("list-accum"),[Call(SVar("min"),[])])),SDef("list-max",[],Call(SVar("list-accum"),[Call(SVar("max"),[])])),SDef("list-accum",[DefaultVarDec("s")],Seq(Build(Op("",[RootApp(Call(SVar("Tl"),[])),RootApp(Call(SVar("Hd"),[]))])),Call(SVar("foldl"),[Call(SVar("s"),[])]))),SDef("add-lists",[],Call(SVar("list-accum"),[Call(SVar("zip"),[LChoice(Call(SVar("add"),[]),Build(Str("")))])])),SDef("averages",[],Scope(["len"],Seq(Where(AM(Call(SVar("length"),[]),Var("len"))),Seq(Call(SVar("add-lists"),[]),Call(SVar("map"),[Call(SVar("try"),[Call(SVar("sect"),[Call(SVar("div"),[]),Build(Var("len"))])])]))))),SDef("round-list",[],Call(SVar("map"),[LChoice(Test(Call(SVar("sect"),[Call(SVar("leq"),[]),Build(Int(100))])),Call(SVar("int"),[]))])),SDef("int-sort",[],Call(SVar("sort-list"),[Call(SVar("SortL"),[Call(SVar("gt"),[])])])),SDef("is-interval-from",[],Rec("r",LChoice(LRule(Rule(Op("",[Var("low"),Op("Nil",[])]),Var("low"),Id)),Scope(["l"],LRule(Rule(Op("",[Var("low"),Op("Cons",[Var("x"),Var("xs")])]),App(Call(SVar("r"),[]),Op("",[Var("x"),Var("xs")])),Seq(AM(BA(Call(SVar("add"),[]),Op("",[Var("low"),Int(1)])),Var("l")),BA(Call(SVar("eq"),[]),Op("",[Var("x"),Var("l")])))))))))]),Strategies([SDef("range",[],Seq(Call(SVar("is-int"),[]),BA(Call(SVar("range"),[]),Op("",[Int(0),RootApp(Id)])))),SDef("range",[],Seq(Call(SVar(""),[Call(SVar("is-int"),[]),Call(SVar("is-int"),[])]),CallT(SVar("range"),[],[Int(1)])))]),Strategies([SDefT("range",[],[DefaultVarDec("step")],Seq(Call(SVar("is-int"),[]),BA(CallT(SVar("range"),[],[Var("step")]),Op("",[Int(0),RootApp(Id)])))),SDefT("range",[],[DefaultVarDec("step")],Seq(Call(SVar(""),[Call(SVar("is-int"),[]),Call(SVar("is-int"),[])]),Call(SVar("range"),[BA(Call(SVar("add"),[]),Op("",[RootApp(Id),Var("step")]))])))]),Strategies([SDef("range",[DefaultVarDec("next")],Seq(Call(SVar("is-int"),[]),BA(Call(SVar("range"),[Call(SVar("next"),[])]),Op("",[Int(0),RootApp(Id)])))),SDef("range",[DefaultVarDec("next")],LChoice(Seq(Call(SVar(""),[Call(SVar("is-int"),[]),Call(SVar("is-int"),[])]),Call(SVar("range-next"),[Call(SVar("next"),[])])),Build(Op("Nil",[])))),RDef("range-next",[DefaultVarDec("inc")],Rule(Op("",[Var("start"),Var("end")]),Op("Cons",[Var("start"),Var("tail")]),Seq(AM(BA(Call(SVar("inc"),[]),Var("start")),Var("next")),AM(LChoice(Seq(Choice(BA(Call(SVar("lt-lt"),[]),Op("",[Var("start"),Var("next"),Var("end")])),BA(Call(SVar("lt-lt"),[]),Op("",[Var("end"),Var("next"),Var("start")]))),BA(Call(SVar("range"),[Call(SVar("inc"),[])]),Op("",[Var("next"),Var("end")]))),Seq(Choice(BA(Call(SVar("lt-leq"),[]),Op("",[Var("start"),Var("end"),Var("next")])),BA(Call(SVar("leq-lt"),[]),Op("",[Var("next"),Var("end"),Var("start")]))),Build(Op("Nil",[])))),Var("tail")))))]),Rules([RDef("is-interval",[],Rule(Op("Cons",[Var("x"),Var("xs")]),Op("",[Var("x"),App(Call(SVar("is-interval-from"),[]),Op("",[Var("x"),Var("xs")]))]),Id))])])
