module posix-file-test
imports sunit posix-file

strategies

  main = 
    test-suite(!"posix-file-test",
      fileno-tests
//    ; access-tests
    ; aterm-io-tests
    ; char-output-tests 
    ; strcat-tests
    ; strlen-tests
    ; new-concat-strings-tests
    )

  fileno-tests =
      apply-test(!"fileno on stdin  -- 1", fileno, stdin-stream, !0)
    ; apply-test(!"fileno on stdin  -- 2", fileno, stdin-stream, STDIN_FILENO)
    ; apply-test(!"fileno on stdout -- 1", fileno, stdout-stream, !1)
    ; apply-test(!"fileno on stdout -- 2", fileno, stdout-stream, STDOUT_FILENO)
    ; apply-test(!"fileno on stderr -- 1", fileno, stderr-stream, !2)
    ; apply-test(!"fileno on stderr -- 2", fileno, stderr-stream, STDERR_FILENO)

    ; where(new-temp-file => (tmp-name, tmp-fd))

    ; apply-test(!"fileno on temp file"
      ,   <fdopen> (tmp-fd, "w")
        ; ?stream
        ; <fileno> stream
        ; where(<fclose> stream)
      ,   !tmp-fd
      )

    ; where(<remove-file> tmp-name)

  access-tests = 
      apply-and-fail(!"access --  1", <access> (<id>, [Write]), !"/proc/uptime")
    ; apply-test(    !"access --  2", <access> (<id>, [Existence]), !"/proc/uptime", !"/proc/uptime")
    ; apply-test(    !"access --  3", <access> (<id>, [Read]),  !"/proc/uptime", !"/proc/uptime")
    ; apply-and-fail(!"access --  4", <access> (<id>, [Read, Write]),  !"/proc/uptime", !"/proc/uptime")
    ; apply-and-fail(!"access --  5", <access> (<id>, []), !"/proc/uptime")
    ; apply-and-fail(!"access --  6", <access> (<id>, 1), !"/proc/uptime")
    ; apply-and-fail(!"access --  7", <access> (<id>, [Read]), !"/root")
    ; apply-test(    !"access --  8", <access> (<id>, [Existence]), !"/root", !"/root")
    ; apply-and-fail(!"access --  9", <access> (<id>, [Existence]), !"blablabla.blabla")
    ; apply-test(    !"access -- 10", <access> (<id>, [Execute, Read, Write]), !"posix-file-test", !"posix-file-test")
    ; apply-test(    !"access -- 11", <access> (<id>, [Existence]), !"posix-file-test", !"posix-file-test")

  aterm-io-tests =
      aterm-io-tests(write-in-baf-to-stream)
    ; aterm-io-tests(write-in-taf-to-stream)
    ; aterm-io-tests(write-in-text-to-stream)

  aterm-io-tests(writer) =
      apply-test(!"ATerm IO -- 1", write-read-term(writer), !"Bla Bla Bla", !"Bla Bla Bla")
    // ; apply-test(!"ATerm IO -- 2", write-read-term(writer), !(), !()) TODO: fails ON TAF!
    ; apply-test(!"ATerm IO -- 3", write-read-term(writer), !1, !1)
    ; apply-test(!"ATerm IO -- 4", write-read-term(writer), !None(), !None())

      write-read-term(writer) =
        ?t
       ; <fopen> ("test.aterm", "w")
       ; <writer> (<id>, t)
       ; fclose
       ; <fopen> ("test.aterm", "r")
       ; where(read-from-stream => t)
       ; fclose
       ; <remove-file> "test.aterm"
       ; !t

  char-output-tests =
      apply-test(!"stdout char output test -- 1",
        <write-to-stream> (<id>, "This is stdout (1)")
      ; <fputs> ("This is stdout (2)\n", <id>)
      ; <puts> "This is stdout (3)"
      , stdout-stream
      , stdout-stream
      )

  strcat-tests =
      apply-test(!"strcat-1", strcat, !("",  ""), !"")
    ; apply-test(!"strcat-2", strcat, !("a", ""), !"a")
    ; apply-test(!"strcat-3", strcat, !("",  "a"), !"a")
    ; apply-test(!"strcat-4", strcat, !("hello ",  "world"), !"hello world")

  strlen-tests =
      apply-test(!"strlen-1", strlen, !"", !0)
    ; apply-test(!"strlen-2", strlen, !"a", !1)
    ; apply-test(!"strlen-3", strlen, !"hello world", !11)

  new-concat-strings-tests =
      apply-test(!"new-concat-strings-1", new-concat-strings, ![], !"")
    ; apply-test(!"new-concat-strings-2", new-concat-strings, !["a", ""], !"a")
    ; apply-test(!"new-concat-strings-3", new-concat-strings, !["",  "a"], !"a")
    ; apply-test(!"new-concat-strings-4", new-concat-strings, !["hello ",  "world"], !"hello world")

/**
 * Copyright (C) 2003 Eelco Visser <visser@acm.org>
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 */