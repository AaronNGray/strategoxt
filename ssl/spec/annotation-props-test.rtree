Specification([Imports(["sunit","annotation-props"]),Signature([Sorts([Sort("Exp",[]),Sort("Type",[])]),Constructors([OpDecl("Var",FunType([ConstType(Var("String"))],ConstType(Var("Exp")))),OpDecl("Plus",FunType([ConstType(Var("Exp")),ConstType(Var("Exp"))],ConstType(Var("Exp")))),OpDecl("Int",ConstType(Var("Type"))),OpDecl("Float",ConstType(Var("Type"))),OpDecl("Failure",ConstType(Var("Result"))),OpDecl("Success",ConstType(Var("Result")))])]),Strategies([SDef("test-success",[DefaultVarDec("s")],GuardedLChoice(Call(SVar("s"),[]),Build(Var("Success")),Build(Var("Failure")))),SDef("main",[],Call(SVar("test-suite"),[Build(Str("annotation-properties-test")),Seq(Call(SVar("test1"),[]),Seq(Call(SVar("test2"),[]),Seq(Call(SVar("test3"),[]),Seq(Call(SVar("test4"),[]),Seq(Call(SVar("test5"),[]),Seq(Call(SVar("test6"),[]),Seq(Call(SVar("test7"),[]),Seq(Call(SVar("test8"),[]),Seq(Call(SVar("test9"),[]),Seq(Call(SVar("test10"),[]),Seq(Call(SVar("test11"),[]),Seq(Call(SVar("test12"),[]),Seq(Call(SVar("test13"),[]),Seq(Call(SVar("test14"),[]),Seq(Call(SVar("test15"),[]),Seq(Call(SVar("test16"),[]),Seq(Call(SVar("test17"),[]),Seq(Call(SVar("test18"),[]),Seq(Call(SVar("test19"),[]),Seq(Call(SVar("test20"),[]),Seq(Call(SVar("test21"),[]),Call(SVar("test22"),[]))))))))))))))))))))))])),SDef("test1",[],Call(SVar("apply-test"),[Build(Str("1:  get a property from a single-item list")),Call(SVar("get-prop"),[Build(Str("type"))]),Build(Anno(Op("Var",[Str("a")]),[Op("",[Str("type"),Var("Int")])])),Build(Var("Int"))])),SDef("test2",[],Call(SVar("apply-test"),[Build(Str("2:  getting a property from a term without properties should fail")),Call(SVar("test-success"),[Call(SVar("get-prop"),[Build(Str("type"))])]),Build(Op("Var",[Str("a")])),Build(Var("Failure"))])),SDef("test3",[],Call(SVar("apply-test"),[Build(Str("3:  getting a non-existing property should fail")),Call(SVar("test-success"),[Call(SVar("get-prop"),[Build(Str("scope"))])]),Build(Anno(Op("Var",[Str("a")]),[Op("Cons",[Op("",[Str("type"),Var("Int")]),Op("Nil",[])])])),Build(Var("Failure"))])),SDef("test4",[],Call(SVar("apply-test"),[Build(Str("4:  get a property from a list")),Call(SVar("get-prop"),[Build(Str("scope"))]),Build(Anno(Op("Var",[Str("a")]),[Op("",[Str("type"),Var("Int")]),Op("",[Str("scope"),Str("f")])])),Build(Str("f"))])),SDef("test5",[],Call(SVar("apply-test"),[Build(Str("5:  get a property from a list")),Call(SVar("get-prop"),[Build(Str("type"))]),Build(Anno(Op("Var",[Str("a")]),[Op("",[Str("type"),Var("Int")]),Op("",[Str("scope"),Str("f")])])),Build(Var("Int"))])),SDef("test6",[],Call(SVar("apply-test"),[Build(Str("6:  replace a property in a list")),Call(SVar("replace-prop"),[Build(Str("type")),Build(Var("Float"))]),Build(Anno(Op("Var",[Str("a")]),[Op("",[Str("type"),Var("Int")]),Op("",[Str("scope"),Str("f")])])),Build(Anno(Op("Var",[Str("a")]),[Op("",[Str("type"),Var("Float")]),Op("",[Str("scope"),Str("f")])]))])),SDef("test7",[],Call(SVar("apply-test"),[Build(Str("7:  replace a non-existing property in a list shouldn't change anything")),Call(SVar("replace-prop"),[Build(Str("static-link")),Build(Str("g"))]),Build(Anno(Op("Var",[Str("a")]),[Op("",[Str("type"),Var("Int")]),Op("",[Str("scope"),Str("f")])])),Build(Anno(Op("Var",[Str("a")]),[Op("",[Str("type"),Var("Int")]),Op("",[Str("scope"),Str("f")])]))])),SDef("test8",[],Call(SVar("apply-test"),[Build(Str("8:  add a property to a term without properties")),Call(SVar("add-prop"),[Build(Str("type")),Build(Var("Int"))]),Build(Op("Var",[Str("a")])),Build(Anno(Op("Var",[Str("a")]),[Op("",[Str("type"),Var("Int")])]))])),SDef("test9",[],Call(SVar("apply-test"),[Build(Str("9:  add a property to a term with existing properties")),Call(SVar("add-prop"),[Build(Str("type")),Build(Var("Int"))]),Build(Anno(Op("Var",[Str("a")]),[Op("",[Str("scope"),Str("f")])])),Build(Anno(Op("Var",[Str("a")]),[Op("",[Str("type"),Var("Int")]),Op("",[Str("scope"),Str("f")])]))])),SDef("test10",[],Call(SVar("apply-test"),[Build(Str("10: has-prop on a term without properties should fail")),Call(SVar("test-success"),[Call(SVar("has-prop"),[Build(Str("type"))])]),Build(Op("Var",[Str("a")])),Build(Var("Failure"))])),SDef("test11",[],Call(SVar("apply-test"),[Build(Str("11: has-prop on a term with the specified property should succeed")),Call(SVar("test-success"),[Call(SVar("has-prop"),[Build(Str("type"))])]),Build(Anno(Op("Var",[Str("a")]),[Op("",[Str("type"),Var("Int")]),Op("",[Str("scope"),Str("f")])])),Build(Var("Success"))])),SDef("test12",[],Call(SVar("apply-test"),[Build(Str("12: has-prop with condition on term not satisfying this condition")),Call(SVar("test-success"),[Call(SVar("has-prop"),[Build(Str("type")),Match(Var("Float"))])]),Build(Anno(Op("Var",[Str("a")]),[Op("",[Str("type"),Var("Int")]),Op("",[Str("scope"),Str("f")])])),Build(Var("Failure"))])),SDef("test13",[],Call(SVar("apply-test"),[Build(Str("13: has-prop with condition on term satisfying this condition")),Call(SVar("test-success"),[Call(SVar("has-prop"),[Build(Str("type")),Match(Var("Int"))])]),Build(Anno(Op("Var",[Str("a")]),[Op("",[Str("type"),Var("Int")]),Op("",[Str("scope"),Str("f")])])),Build(Var("Success"))])),SDef("test14",[],Call(SVar("apply-test"),[Build(Str("14: preserve the properties on the application of a strategy")),Call(SVar("preserve-props"),[Call(SVar("replace-prop"),[Build(Str("type")),Build(Var("Float"))])]),Build(Anno(Op("Var",[Str("a")]),[Op("",[Str("type"),Var("Int")]),Op("",[Str("scope"),Str("f")])])),Build(Anno(Op("Var",[Str("a")]),[Op("",[Str("type"),Var("Int")]),Op("",[Str("scope"),Str("f")])]))])),SDef("test15",[],Call(SVar("apply-test"),[Build(Str("15: union on properties")),Call(SVar("props-union"),[]),Build(Op("",[Op("Cons",[Op("",[Str("scope"),Str("f")]),Op("Nil",[])]),Op("Cons",[Op("",[Str("type"),Var("Float")]),Op("Cons",[Op("",[Str("scope"),Str("f")]),Op("Nil",[])])])])),Build(Op("Cons",[Op("",[Str("scope"),Str("f")]),Op("Cons",[Op("",[Str("type"),Var("Float")]),Op("Nil",[])])]))])),SDef("test16",[],Call(SVar("apply-test"),[Build(Str("16: merge the properties on the application of a strategy")),Call(SVar("merge-props"),[Call(SVar("add-prop"),[Build(Str("type")),Build(Var("Float"))])]),Build(Anno(Op("Var",[Str("a")]),[Op("",[Str("scope"),Str("f")])])),Build(Anno(Op("Var",[Str("a")]),[Op("",[Str("type"),Var("Float")]),Op("",[Str("scope"),Str("f")])]))])),SDef("test17",[],Call(SVar("apply-test"),[Build(Str("17: merge the properties on the application of a rule")),Call(SVar("merge-props"),[Call(SVar("Set-Some-Property"),[Build(Str("type")),Build(Var("Float"))])]),Build(Anno(Op("Var",[Str("a")]),[Op("",[Str("scope"),Str("f")])])),Build(Anno(Op("Var",[Str("a")]),[Op("",[Str("type"),Var("Float")]),Op("",[Str("scope"),Str("f")])]))])),SDef("test18",[],Call(SVar("apply-test"),[Build(Str("18: merge the properties on the application of a rule")),Call(SVar("merge-props"),[Call(SVar("Set-Some-Property"),[Build(Str("type")),Build(Var("Float"))])]),Build(Op("Var",[Str("a")])),Build(Anno(Op("Var",[Str("a")]),[Op("",[Str("type"),Var("Float")])]))])),SDef("test19",[],Call(SVar("apply-test"),[Build(Str("19: merge the properties on the application of a rule")),Call(SVar("merge-props"),[Call(SVar("rm-annotations"),[])]),Build(Anno(Op("Var",[Str("a")]),[Op("",[Str("type"),Var("Float")])])),Build(Anno(Op("Var",[Str("a")]),[Op("",[Str("type"),Var("Float")])]))])),SDef("test20",[],Call(SVar("apply-test"),[Build(Str("20: set a currently non-existing property")),Call(SVar("set-prop"),[Build(Str("type")),Build(Var("Float"))]),Build(Op("Var",[Str("a")])),Build(Anno(Op("Var",[Str("a")]),[Op("",[Str("type"),Var("Float")])]))])),SDef("test21",[],Call(SVar("apply-test"),[Build(Str("21: set a currently non-existing property")),Call(SVar("set-prop"),[Build(Str("type")),Build(Var("Float"))]),Build(Anno(Op("Var",[Str("a")]),[Op("",[Str("scope"),Str("f")])])),Build(Anno(Op("Var",[Str("a")]),[Op("",[Str("type"),Var("Float")]),Op("",[Str("scope"),Str("f")])]))])),SDef("test22",[],Call(SVar("apply-test"),[Build(Str("22: set a currently existing property")),Call(SVar("set-prop"),[Build(Str("type")),Build(Var("Float"))]),Build(Anno(Op("Var",[Str("a")]),[Op("",[Str("type"),Var("Int")])])),Build(Anno(Op("Var",[Str("a")]),[Op("",[Str("type"),Var("Float")])]))]))]),Rules([RDef("Set-Some-Property",[DefaultVarDec("s"),DefaultVarDec("v")],Rule(Var("t"),Var("r"),AM(BA(Call(SVar("add-prop"),[Build(Str("type")),Build(Var("Float"))]),Var("t")),Var("r"))))])])
