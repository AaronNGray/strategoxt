Specification([Imports(["string","sunit"]),Strategies([SDef("main",[],Call(SVar("test-suite"),[Build(Str("string-test")),Seq(Call(SVar("explode-implode-test"),[]),Seq(Call(SVar("basename-test"),[]),Seq(Call(SVar("single-quote-test"),[]),Seq(Call(SVar("un-double-quote-test"),[]),Seq(Call(SVar("padd-with-test"),[]),Seq(Call(SVar("split-at-dot-test"),[]),Seq(Call(SVar("split-after-test"),[]),Seq(Call(SVar("split-before-test"),[]),Seq(Call(SVar("is-substring-test"),[]),Seq(Call(SVar("copy-char-test"),[]),Seq(Call(SVar("upper-case-test"),[]),Seq(Call(SVar("is-substring-test"),[]),Seq(Call(SVar("get-path-test"),[]),Seq(Call(SVar("escape-test"),[]),Seq(Call(SVar("unescape-test"),[]),Seq(Call(SVar("string-sort-test"),[]),Call(SVar("string-tokenize-test"),[])))))))))))))))))])),SDef("explode-implode-test",[],Seq(Call(SVar("apply-test"),[Build(Str("explode-implode-test1")),Seq(Call(SVar("explode-string"),[]),Call(SVar("implode-string"),[])),Build(Str("foOBaR")),Build(Str("foOBaR"))]),Call(SVar("apply-test"),[Build(Str("explode-implode-test2")),Seq(Call(SVar("explode-string"),[]),Call(SVar("implode-string"),[])),Build(Str("\n\t")),Build(Str("\n\t"))]))),SDef("upper-case-test",[],Call(SVar("apply-test"),[Build(Str("upper-case-test")),Call(SVar("upper-case"),[]),Build(Str("foOBaR")),Build(Str("FOOBAR"))])),SDef("basename-test",[],Seq(Call(SVar("apply-test"),[Build(Str("basename-test1")),Call(SVar("basename"),[]),Build(Str("./number.r")),Build(Str("./number"))]),Call(SVar("apply-test"),[Build(Str("basename-test2")),Call(SVar("basename"),[]),Build(Str("./number")),Build(Str("./number"))]))),SDef("single-quote-test",[],Call(SVar("apply-test"),[Build(Str("single-quote-test")),Call(SVar("single-quote"),[]),Build(Str("foobar")),Build(Str("'foobar'"))])),SDef("un-double-quote-test",[],Call(SVar("apply-test"),[Build(Str("un-double-quote-test")),Call(SVar("un-double-quote"),[]),Build(Str("\"fnord\"")),Build(Str("fnord"))])),SDef("is-substring-test",[],Call(SVar("apply-test"),[Build(Str("is-substring-test")),Call(SVar("is-substring"),[Build(Str("foo"))]),Build(Str("barfoofnord")),Id])),SDef("string-tokenize-test",[],Seq(Call(SVar("apply-test"),[Build(Str("tokenize-test1")),BA(Call(SVar("string-tokenize"),[]),Op("",[Op("Nil",[]),RootApp(Id)])),Build(Str("This should be one token")),Build(Op("Cons",[Str("This should be one token"),Op("Nil",[])]))]),Seq(Call(SVar("apply-test"),[Build(Str("tokenize-test2")),BA(Call(SVar("string-tokenize"),[]),Op("",[Op("Cons",[Int(32),Op("Nil",[])]),RootApp(Id)])),Build(Str("   This should not   be one token  ")),Build(Op("Cons",[Str("This"),Op("Cons",[Str("should"),Op("Cons",[Str("not"),Op("Cons",[Str("be"),Op("Cons",[Str("one"),Op("Cons",[Str("token"),Op("Nil",[])])])])])])]))]),Seq(Call(SVar("apply-test"),[Build(Str("tokenize-test3")),BA(Call(SVar("string-tokenize"),[]),Op("",[Op("Cons",[Int(32),Op("Cons",[Int(46),Op("Nil",[])])]),RootApp(Id)])),Build(Str("   This should not   be one token  . ")),Build(Op("Cons",[Str("This"),Op("Cons",[Str("should"),Op("Cons",[Str("not"),Op("Cons",[Str("be"),Op("Cons",[Str("one"),Op("Cons",[Str("token"),Op("Nil",[])])])])])])]))]),Seq(Call(SVar("apply-test"),[Build(Str("tokenize-test4")),BA(Call(SVar("string-tokenize"),[]),Op("",[Op("Cons",[Int(32),Op("Cons",[Int(46),Op("Nil",[])])]),RootApp(Id)])),Build(Str("")),Build(Op("Nil",[]))]),Call(SVar("apply-test"),[Build(Str("tokenize-test5")),BA(Call(SVar("string-tokenize"),[]),Op("",[Op("Cons",[Int(32),Op("Cons",[Int(46),Op("Nil",[])])]),RootApp(Id)])),Build(Str("    ")),Build(Op("Nil",[]))])))))),SDef("padd-with-test",[],Call(SVar("apply-test"),[Build(Str("padd-with-test")),Call(SVar("padd-with"),[Build(Int(48))]),Build(Op("",[Str("42"),Int(4)])),Build(Str("0042"))])),SDef("split-before-test",[],Call(SVar("apply-test"),[Build(Str("split-before-test")),Call(SVar("split-before"),[]),Build(Op("",[Str("barfoofnord"),Str("foo")])),Build(Op("",[Str("bar"),Str("foofnord")]))])),SDef("split-after-test",[],Call(SVar("apply-test"),[Build(Str("split-after-test")),Call(SVar("split-after"),[]),Build(Op("",[Str("barfoofnord"),Str("foo")])),Build(Op("",[Str("barfoo"),Str("fnord")]))])),SDef("split-at-dot-test",[],Call(SVar("apply-test"),[Build(Str("split-at-dot-test")),Call(SVar("split-at-dot"),[]),Build(Str("3.141592")),Build(Op("",[Str("3"),Str("141592")]))])),SDef("copy-char-test",[],Call(SVar("apply-test"),[Build(Str("copy-char-test")),Call(SVar("copy-char"),[]),Build(Op("",[Int(3),Int(32)])),Build(Str("   "))])),SDef("get-path-test",[],Seq(Call(SVar("apply-test"),[Build(Str("get-path-test1")),Call(SVar("get-path"),[]),Build(Str("/usr/local/bin/prog")),Build(Str("/usr/local/bin/"))]),Call(SVar("apply-test"),[Build(Str("get-path-test2")),Call(SVar("get-path"),[]),Build(Str("prog")),Build(Str(""))]))),SDef("escape-test",[],Seq(Call(SVar("apply-test"),[Build(Str("escape-test1")),Call(SVar("escape"),[]),Build(Str("\"ab\\c")),Build(Str("\\\"ab\\\\c"))]),Call(SVar("apply-test"),[Build(Str("escape-test2")),Call(SVar("cify"),[]),Build(Str("a-b_c'")),Build(Str("a_b__c_p_"))]))),SDef("unescape-test",[],Seq(Call(SVar("apply-test"),[Build(Str("unescape-test1")),Call(SVar("Cons"),[Call(SVar("unescape"),[]),Call(SVar("Nil"),[])]),Build(Op("Cons",[Str("\\\"ab\\\\c"),Op("Nil",[])])),Build(Op("Cons",[Str("\"ab\\c"),Op("Nil",[])]))]),Seq(Call(SVar("apply-test"),[Build(Str("unescape-test2")),Call(SVar("Cons"),[Seq(Call(SVar("un-double-quote"),[]),Call(SVar("unescape"),[])),Call(SVar("Nil"),[])]),Build(Op("Cons",[Str("\" \\\\\\n\\t\""),Op("Nil",[])])),Build(Op("Cons",[Str(" \\\n\t"),Op("Nil",[])]))]),Seq(Call(SVar("apply-test"),[Build(Str("unescape-test3")),Call(SVar("Cons"),[Call(SVar("unescape"),[]),Call(SVar("Nil"),[])]),Build(Op("Cons",[Str(" \\\\\\na\\b"),Op("Nil",[])])),Build(Op("Cons",[Str(" \\\na\\b"),Op("Nil",[])]))]),Call(SVar("apply-test"),[Build(Str("unescape-test4")),Call(SVar("Cons"),[Call(SVar("unescape"),[]),Call(SVar("Nil"),[])]),Build(Op("Cons",[Str("\" \\\\\\n\\\\t\""),Op("Nil",[])])),Build(Op("Cons",[Str("\" \\\n\\t\""),Op("Nil",[])]))]))))),SDef("string-sort-test",[],Seq(Call(SVar("apply-test"),[Build(Str("string-sort-test-a")),Call(SVar("string-sort"),[]),Build(Op("Cons",[Str("De"),Op("Cons",[Str("db"),Op("Cons",[Str("Cb"),Op("Cons",[Str("ac"),Op("Nil",[])])])])])),Build(Op("Cons",[Str("ac"),Op("Cons",[Str("Cb"),Op("Cons",[Str("db"),Op("Cons",[Str("De"),Op("Nil",[])])])])]))]),Seq(Call(SVar("apply-test"),[Build(Str("string-sort-test-b")),Call(SVar("string-sort"),[]),Build(Op("Cons",[Str("2001"),Op("Cons",[Str("2000"),Op("Cons",[Str("1999"),Op("Cons",[Str("1998"),Op("Nil",[])])])])])),Build(Op("Cons",[Str("1998"),Op("Cons",[Str("1999"),Op("Cons",[Str("2000"),Op("Cons",[Str("2001"),Op("Nil",[])])])])]))]),Call(SVar("apply-test"),[Build(Str("string-sort-test-c")),Call(SVar("string-sort-desc"),[]),Build(Op("Cons",[Str("2001"),Op("Cons",[Str("2000"),Op("Cons",[Str("1999"),Op("Cons",[Str("1998"),Op("Nil",[])])])])])),Build(Op("Cons",[Str("2001"),Op("Cons",[Str("2000"),Op("Cons",[Str("1999"),Op("Cons",[Str("1998"),Op("Nil",[])])])])]))]))))])])
