Specification([Imports(["lib","pipe"]),Strategies([SDef("main",[],Id),SDef("main''",[],BA(Call(SVar("write-to-prog"),[Build(Str("term-size")),Build(Op("Nil",[]))]),Explode(Str("A"),Op("Cons",[Explode(Str("B"),Op("Nil",[])),Op("Nil",[])])))),SDef("main''",[],Call(SVar("read-from-prog"),[Build(Str("term-size")),Build(Op("Cons",[Str("-i"),Op("Cons",[Str("verbose.rtree"),Op("Nil",[])])]))])),SDef("main''",[],Seq(BA(Call(SVar("ReadFromFile"),[]),Str("verbose.rtree")),Seq(Call(SVar("filter-with-prog"),[Build(Str("term-size")),Build(Op("Nil",[]))]),Call(SVar("debug"),[Build(Str("size: "))])))),SDef("main''",[],Seq(BA(Call(SVar("ReadFromFile"),[]),Str("verbose.rtree")),Seq(Call(SVar("filter-with-prog'"),[Build(Str("term-size")),Build(Op("Nil",[]))]),Call(SVar("debug"),[Build(Str("size: "))])))),SDef("main''",[],Seq(BA(Call(SVar("ReadFromFile"),[]),Str("verbose.rtree")),Seq(Call(SVar("filter-with-progs"),[Build(Op("Cons",[Op("",[Str("term-size"),Op("Nil",[])]),Op("Nil",[])]))]),Call(SVar("debug"),[Build(Str("size: "))])))),SDef("main''",[],Seq(Call(SVar("setup-filter-pipe"),[]),Seq(Call(SVar("debug"),[Build(Str("a: "))]),Seq(Call(SVar("spawn-filter-with-prog"),[Build(Str("implode-asfix")),Build(Op("Nil",[]))]),Seq(Call(SVar("debug"),[Build(Str("b: "))]),Seq(Call(SVar("spawn-filter-with-prog"),[Build(Str("stratego-desugar")),Build(Op("Nil",[]))]),Seq(Call(SVar("debug"),[Build(Str("c: "))]),Seq(Call(SVar("pipe-sink"),[Build(Str("term-size")),Build(Op("Cons",[Str("-o"),Op("Cons",[Str("verbose.size"),Op("Nil",[])])]))]),Seq(Call(SVar("debug"),[Build(Str("d: "))]),Seq(Call(SVar("pipe-source"),[Build(Str("sglr")),Build(Op("Cons",[Str("-p"),Op("Cons",[Str("/home/visser/res/Stratego/share/stratego-front/Stratego.tbl"),Op("Cons",[Str("-2"),Op("Cons",[Str("-i"),Op("Cons",[Str("verbose.r"),Op("Nil",[])])])])])]))]),Seq(Call(SVar("debug"),[Build(Str("e: "))]),Call(SVar("debug"),[Build(Str("f: "))])))))))))))),SDef("main''",[],Seq(Call(SVar("setup-filter-pipe"),[]),Seq(Call(SVar("debug"),[Build(Str("a: "))]),Seq(Call(SVar("spawn-filter-with-prog"),[Build(Str("sglr")),Build(Op("Cons",[Str("-p"),Op("Cons",[Str("/home/visser/res/Stratego/share/stratego-front/Stratego.tbl"),Op("Cons",[Str("-2"),Op("Nil",[])])])]))]),Seq(Call(SVar("debug"),[Build(Str("b: "))]),Seq(Call(SVar("debug"),[Build(Str("c: "))]),Seq(Call(SVar("pipe-sink"),[Build(Str("term-size")),Build(Op("Cons",[Str("-o"),Op("Cons",[Str("verbose.size"),Op("Nil",[])])]))]),Seq(Call(SVar("debug"),[Build(Str("d: "))]),Seq(Call(SVar("pipe-source"),[Build(Str("cat")),Build(Op("Cons",[Str("verbose.r"),Op("Nil",[])]))]),Seq(Call(SVar("debug"),[Build(Str("e: "))]),Call(SVar("debug"),[Build(Str("f: "))]))))))))))),SDef("main''",[],Seq(Call(SVar("setup-filter-pipe"),[]),Seq(Call(SVar("debug"),[Build(Str("a: "))]),Seq(Call(SVar("pipe-sink"),[Build(Str("implode-asfix")),Build(Op("Cons",[Str("-o"),Op("Cons",[Str("verbose.ast"),Op("Nil",[])])]))]),Seq(Call(SVar("debug"),[Build(Str("b: "))]),Seq(Call(SVar("debug"),[Build(Str("c: "))]),Seq(Call(SVar("debug"),[Build(Str("d: "))]),Seq(Call(SVar("pipe-source"),[Build(Str("sglr")),Build(Op("Cons",[Str("-p"),Op("Cons",[Str("/home/visser/res/Stratego/share/stratego-front/Stratego.tbl"),Op("Cons",[Str("-2"),Op("Cons",[Str("-i"),Op("Cons",[Str("verbose.r"),Op("Nil",[])])])])])]))]),Call(SVar("debug"),[Build(Str("e: "))])))))))))]),Strategies([RDef("filter-with-prog",[DefaultVarDec("prog"),DefaultVarDec("args")],Rule(Var("t-in"),Var("t-out"),Seq(AM(Call(SVar("pipe"),[]),Var("p1")),Seq(AM(Call(SVar("pipe"),[]),Var("p2")),Seq(Call(SVar("fork"),[]),LChoice(Seq(Match(Int(0)),Seq(BA(Call(SVar("stdin-from-pipe"),[]),Var("p1")),Seq(BA(Call(SVar("stdout-to-pipe"),[]),Var("p2")),AM(BA(Call(SVar("execvp"),[]),Op("",[RootApp(Call(SVar("prog"),[])),RootApp(Call(SVar("args"),[]))])),Var("t-out"))))),Seq(Match(Var("pid")),Seq(BA(Call(SVar("write-term-to-text-pipe"),[]),Op("",[Var("p1"),Var("t-in")])),Seq(AM(BA(Call(SVar("read-term-from-text-pipe"),[]),Var("p2")),Var("t-out")),Seq(BA(Call(SVar("waitpid"),[]),Var("pid")),Choice(Call(SVar("exited"),[]),Choice(Call(SVar("signaled"),[]),Call(SVar("stopped"),[]))))))))))))),RDef("filter-with-prog'",[DefaultVarDec("prog"),DefaultVarDec("args")],Rule(Var("t-in"),Var("t-out"),Seq(Call(SVar("debug"),[Build(Str("filter-with-prog': "))]),Seq(AM(Call(SVar("pipe"),[]),Var("p-in")),Seq(AM(Call(SVar("spawn-filter-with-prog"),[Call(SVar("prog"),[]),Call(SVar("args"),[])]),Op("",[Var("pid"),Var("p-out")])),Seq(BA(Call(SVar("write-term-to-text-pipe"),[]),Op("",[Var("p-in"),Var("t-in")])),Seq(AM(BA(Call(SVar("read-term-from-text-pipe"),[]),Var("p-out")),Var("t-out")),Seq(BA(Call(SVar("waitpid"),[]),Var("pid")),Choice(Call(SVar("exited"),[]),Choice(Call(SVar("signaled"),[]),Call(SVar("stopped"),[]))))))))))),RDef("filter-with-progs",[DefaultVarDec("progs")],Rule(Var("t-in"),Var("t-out"),Seq(AM(Call(SVar("progs"),[]),Op("Cons",[Op("",[Var("prog"),Var("args")]),Op("Nil",[])])),Seq(Call(SVar("debug"),[Build(Str("filter-with-progs: "))]),Seq(AM(Call(SVar("pipe"),[]),Var("p-in")),Seq(AM(Call(SVar("spawn-filter-with-prog"),[Build(Var("prog")),Build(Var("args"))]),Op("",[Var("pid"),Var("p-out")])),Seq(AM(BA(Call(SVar("file-to-pipe"),[]),Var("p-in")),Var("outfile")),Seq(BA(Call(SVar("WriteToTextFile"),[]),Op("",[Var("outfile"),Var("t-in")])),Seq(BA(Call(SVar("fclose"),[]),Var("outfile")),Seq(AM(BA(Call(SVar("file-from-pipe"),[]),Var("p-out")),Var("infile")),Seq(AM(BA(Call(SVar("ReadFromFile"),[]),Var("infile")),Var("t-out")),Seq(BA(Call(SVar("fclose"),[]),Var("infile")),Seq(BA(Call(SVar("waitpid"),[]),Var("pid")),Choice(Call(SVar("exited"),[]),Choice(Call(SVar("signaled"),[]),Call(SVar("stopped"),[])))))))))))))))),SDef("main''",[],Call(SVar("fork-and-pipe-child"),[])),SDef("fork-and-pipe-child",[],Seq(AM(Call(SVar("pipe"),[]),Var("p")),Seq(Call(SVar("debug"),[Build(Str("pipe created: "))]),Seq(Call(SVar("fork"),[]),LChoice(Call(SVar("child"),[Build(Var("p"))]),Call(SVar("parent"),[Build(Var("p"))])))))),SDef("child",[DefaultVarDec("p")],Seq(Match(Int(0)),Seq(Where(AM(Call(SVar("p"),[]),Op("Pipe",[Var("fd1"),Var("fd2")]))),Seq(Call(SVar("debug"),[Build(Str("I am the child: "))]),Seq(Call(SVar("STDIN_FILENO"),[]),Seq(Call(SVar("debug"),[Build(Str("file descriptor of stdin: "))]),Seq(Call(SVar("close"),[]),Seq(Call(SVar("debug"),[Build(Str("stdin closed: "))]),Seq(BA(Call(SVar("dup"),[]),Var("fd1")),Seq(Call(SVar("debug"),[Build(Str("fd1 dup'ed: "))]),Seq(BA(Call(SVar("close"),[]),Var("fd1")),Seq(BA(Call(SVar("close"),[]),Var("fd2")),Seq(Call(SVar("debug"),[Build(Str("fd1 and fd2 closed: "))]),Seq(BA(Call(SVar("execvp"),[]),Op("",[Str("wc"),Op("Nil",[])])),Call(SVar("debug"),[Build(Str("wc exec'ed: "))]))))))))))))))),SDef("parent",[DefaultVarDec("p")],Seq(Call(SVar("debug"),[Build(Str("parent: "))]),Seq(Match(Var("pid")),Seq(Where(BA(Call(SVar("gt"),[]),Op("",[Var("pid"),Int(0)]))),Seq(Call(SVar("debug"),[Build(Str("I am the parent: "))]),Seq(Where(AM(Call(SVar("p"),[]),Op("Pipe",[Var("fd1"),Var("fd2")]))),Seq(AM(BA(Call(SVar("fdopen"),[]),Op("",[Var("fd2"),Str("w")])),Var("file")),Seq(Call(SVar("debug"),[Build(Str("fd2 opened: "))]),Seq(BA(Call(SVar("close"),[]),Var("fd1")),Seq(Call(SVar("debug"),[Build(Str("I am the parent: "))]),Seq(BA(Call(SVar("printnl"),[]),Op("",[Var("file"),Op("Cons",[Str("bla\nbla\nbla"),Op("Nil",[])])])),Seq(BA(Call(SVar("fclose"),[]),Var("file")),Seq(Call(SVar("debug"),[Build(Str("I am the parent: "))]),Seq(BA(Call(SVar("waitpid"),[]),Var("pid")),Seq(Call(SVar("debug"),[Build(Str("The child returned: "))]),Choice(Call(SVar("exited"),[]),Choice(Call(SVar("signaled"),[]),Call(SVar("stopped"),[])))))))))))))))))),SDef("fork-child",[],Seq(Call(SVar("fork"),[]),Choice(Call(SVar("child"),[]),Call(SVar("parent"),[])))),SDef("child",[],Seq(Match(Int(0)),Seq(Call(SVar("debug"),[Build(Str("I am the child: "))]),BA(Call(SVar("execvp"),[]),Op("",[Str("ls"),Op("Nil",[])]))))),SDef("parent",[],Seq(Match(Var("pid")),Seq(Where(BA(Call(SVar("gt"),[]),Op("",[Var("pid"),Int(0)]))),Seq(Call(SVar("debug"),[Build(Str("I am the parent: "))]),Seq(Call(SVar("waitpid"),[]),Seq(Call(SVar("debug"),[Build(Str("The child returned: "))]),Choice(Call(SVar("exited"),[]),Choice(Call(SVar("signaled"),[]),Call(SVar("stopped"),[]))))))))),SDef("main'",[],Seq(Build(Str("abc")),Call(SVar("pipe-term-to-child"),[Build(Str("less")),Build(Op("Nil",[]))])))])])
