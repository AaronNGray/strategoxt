/**
 * Strategies for collecting subterms.
 */
module collect
imports list-basic list-misc term

strategies

  /**
   * collect all subterms for which s succeeds
   */
  collect-all(s) =
    ![<s> | <crush(![],union,collect-all(s))>]
    <+ crush(![],union,collect-all(s))

  /**
   * collect all subterms with user-defined union operator.
   */
  collect-all(s,un) =
    rec x(![<s> | <crush(![],un,x)>]
          <+ crush(![],un,x))
          
  postorder-collect(s) =
    postorder-collect(s, ![])

  postorder-collect(s, acc) =
    where((![<s> | <acc>] <+ acc) => ys);
    crush(!ys, \ (x, xs) -> <postorder-collect(s, !xs)> x \ )

strategies

  /**
   * Synonym of collect-om.
   */
  collect(s) = 
    collect-om(s)

  /**
   * Collect a set of outermost subterms for which s succeeds.
   */
  collect-om(s) =
    collect-om(s, union)

  /**
   * Collect a bag of outermost subterms for which s succeeds.
   *
   * @warning despite its name, this strategy does return duplicates.
   */
  collect-set(s) =
    collect-om(s, conc)

  /**
   * Collect outermost subterms for which s succeeds.
   *
   * Intermediate results are combined using the 'op' strategy
   */
  collect-om(s, op) =
    ![<s>] 
    <+ crush(![], op, collect-om(s, op))

strategies

  collect(s, skip: (a -> a) * (a -> a) * a -> a) =
    ![<s>]
    <+ skip(collect(s,skip), ![]); crush(![],union,id)
    <+ crush(![],union,collect(s,skip))

  collect-exc(base, special : (a -> b) * a -> b) = 
    rec coll(
      (base 
      <+ special(coll))
      <+ crush(![], union, coll)
    )

  bu-collect(s) =
    rec x(some(x); crush(![],union,[s|id] <+ ![])
          <+ ![<s>] )
    <+ ![]

  collect-split(splitter) = 
    rec x(CollectSplit(x, splitter <+ !(<id>,[])))

  collect-split'(splitter) = 
    rec x((is-string + is-int); splitter
          <+ CollectSplit(x, splitter))

 /**
  * Produces pair of a reduced term and a list of extracted subterms.
  *
  * Reduces terms with f and extracts information with g resulting in a
  * pair (t, xs) of a reduced term and the list of extracted subterms.
  */
  collect-split(f, g) = 
    rec x(CollectSplit(x, !(<try(f)>, <g <+ ![]>)))
    
strategies

  /**
   * @obsolete use crush(![],union,s)
   */
  collect-kids(s) = 
    obsolete(!"collect-kids(s); use crush(![],union,s)");
    crush(![],union,s)

strategies

  CollectSplit(s, splitter) :
    c#(as){annos*} -> (t, <union> (ys, <unions> xs))
      where <unzip(s)> as => (bs, xs);
      <splitter> c#(bs){annos*} => (t, ys)

  CollectSplit(s, f, g) = 
    CollectSplit(s, !(<try(f)>, <g <+ ![]>))

strategies // TODO: where should we put this?

  twicetd(s) = oncetd(explode-term; 
                      (id, at-suffix(Cons(oncetd(s), oncetd(s))));
                      mkterm)

  atmostonce(s) = not(twicetd(s))

  atmostonce'(s) = {n : nrofoccs(s) => n; <leq> (n, 1)}
  
/* bug in Let?
  postorder-collect-new(s) =
  let f(acc) =
        where(![<s> | <acc>] <+ acc => acc');
        crush(!acc', \ (x, xs) -> <f(!xs)> x \ )
   in f(![])
*/
  