/**
 * Operations on tuples
 */
module tuple
imports list-cons tuple-cons list-index list-zip
strategies

  TupleToList : "" # (xs) -> xs
  ListToTuple : xs -> "" # (xs)

  Fst   : "" # ([x | xs]) -> x
  Snd   : "" # ([x, y | xs]) -> y
  Third : "" # ([x, y, z | xs]) -> z

  Dupl  : x -> (x, x)

  split(f, g) = !(<f>, <g>)
  split3(f, g, h) = !(<f>, <g>, <h>)

  Swap : (x, y) -> (y, x)

  Thd = Fst
  Ttl : "" # ([x | xs]) -> "" # (xs)

	
 /**
  * Get the nth element of a tuple.
  */
  tindex = 
    (id, ?""#(<id>)); index

  is-tuple = 
    ?""#(_)

 /**
  * Apply a strategy to each element of a tuple.
  */
  tmap(s) = 
    is-tuple; all(s)

 /**
  * Concatenate the lists in a tuple of lists, where the
  * concatenation strategy s is a parameter.
  */
  tconcat(s) = 
    is-tuple; crush(![], s)

  tconcat'(s1, s2) = 
    is-tuple; crush(<s1> [], s2)

  //at_tsuffix(s) = 
  //  rec x(s <+ TCons(id, x))

  tcata(s1, s2) = 
    is-tuple; crush(s1, s2)

  tfoldr(s1, s2) = 
    tcata(s1, s2)

  tzip(s)  = 
    (TupleToList, TupleToList); zip(s)

 /**
  * @inc tuple-zip-test
  */
  tuple-zip(s) = 
    rec x(![<tmap(Hd); s> | <tmap(Tl); x>]
          <+ tmap([]); ![])

 /**
  * @inc tuple-unzip-test
  */
  tuple-unzip(s) =
    rec x(![<map(Thd); s> | <map(Ttl); x>] <+ map(()); ![])
  ; !"" #(<id>)

