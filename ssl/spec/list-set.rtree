Specification([Imports(["list-basic","list-misc","term","collect"]),Rules([RDef("HdMember",[DefaultVarDec("mklst")],Rule(Op("Cons",[Var("x"),Var("xs")]),Var("xs"),Seq(Call(SVar("mklst"),[]),Call(SVar("fetch"),[Match(Var("x"))])))),RDef("HdMember'",[DefaultVarDec("eq"),DefaultVarDec("mklst")],Rule(Op("Cons",[Var("x"),Var("xs")]),Var("xs"),Seq(Call(SVar("mklst"),[]),Call(SVar("fetch"),[LRule(Rule(Var("y"),App(Call(SVar("eq"),[]),Op("",[Var("x"),Var("y")])),Id))])))),SDef("make-set",[],Call(SVar("foldr"),[Build(Op("Nil",[])),Call(SVar("union"),[]),Build(Op("Cons",[RootApp(Id),Op("Nil",[])]))]))]),Strategies([SDef("union",[],Call(SVar("union"),[Call(SVar("eq"),[])])),RDef("union",[DefaultVarDec("eq")],Rule(Op("",[Var("l1"),Var("l2")]),App(Rec("x",LChoice(Seq(Call(SVar("Nil"),[]),Build(Var("l2"))),LChoice(Seq(Call(SVar("HdMember'"),[Call(SVar("eq"),[]),Build(Var("l2"))]),Call(SVar("x"),[])),Call(SVar("Cons"),[Id,Call(SVar("x"),[])])))),Var("l1")),Id)),SDef("unions",[],Call(SVar("unions"),[Call(SVar("eq"),[])])),SDef("unions",[DefaultVarDec("eq")],Call(SVar("foldr"),[Build(Op("Nil",[])),Call(SVar("union"),[Call(SVar("eq"),[])])]))]),Rules([SDef("diff",[],Call(SVar("diff"),[Call(SVar("eq"),[])])),RDef("diff",[DefaultVarDec("eq")],Rule(Op("",[Var("l1"),Var("l2")]),App(Rec("x",LChoice(Call(SVar("Nil"),[]),LChoice(Seq(Call(SVar("HdMember'"),[Call(SVar("eq"),[]),Build(Var("l2"))]),Call(SVar("x"),[])),Call(SVar("Cons"),[Id,Call(SVar("x"),[])])))),Var("l1")),Id)),SDef("diff'",[DefaultVarDec("eq")],Seq(Call(SVar("obsolete"),[Build(Str("diff'/1; use diff/1"))]),Call(SVar("diff"),[Call(SVar("eq"),[])]))),SDef("sym-diff",[],Call(SVar("sym-diff"),[Call(SVar("eq"),[])])),SDef("sym-diff",[DefaultVarDec("eq")],BA(Call(SVar("union"),[]),Op("",[RootApp(Call(SVar("diff"),[Call(SVar("eq"),[])])),RootApp(Seq(Call(SVar("Swap"),[]),Call(SVar("diff"),[Call(SVar("eq"),[])])))])))]),Strategies([SDef("isect",[],Call(SVar("isect"),[Call(SVar("eq"),[])])),RDef("isect",[DefaultVarDec("eq")],Rule(Op("",[Var("l1"),Var("l2")]),App(Rec("x",LChoice(Call(SVar("Nil"),[]),LChoice(Seq(Where(Call(SVar("HdMember'"),[Call(SVar("eq"),[]),Build(Var("l2"))])),Call(SVar("Cons"),[Id,Call(SVar("x"),[])])),Match(Op("Cons",[Wld,RootApp(Call(SVar("x"),[]))]))))),Var("l1")),Id))])])
