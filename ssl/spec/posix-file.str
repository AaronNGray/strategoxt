module posix-file

/**
 * Stream operations
 */
strategies
 
  /*   The  fclose function dissociates the named stream from its underï¿½
       lying file or set of functions.  If the stream was being used for
       output, any buffered data is written first, using fflush(3). */
  fclose =
    ?stream; prim("SSL_fclose", stream)
    
  fflush =
    ?stream; prim("SSL_fflush", stream)
    
/**
 * Standard file descriptors
 */
strategies 

  // Standard input
  STDIN_FILENO =
    prim("SSL_STDIN_FILENO")
    
  // Standard output    
  STDOUT_FILENO =
    prim("SSL_STDOUT_FILENO")
    
  // Standard error output
  STDERR_FILENO =
    prim("SSL_STDERR_FILENO")

/**
 * Primitive file operations
 */
strategies

  /**
   * Opening a file
   */
   
  // create a file and return a file descriptor
  creat =
    ?pathname; prim("SSL_creat", pathname)

  // open a file and return a file descriptor
  open =
    ?pathname; prim("SSL_open", pathname)
    
  /**
   * Closing a file
   */

  // deallocates a file descriptor   
  close =
    ?fd; prim("SSL_close", fd)
    
  /**
   * Duplicating a file descriptor
   */
  dup =
    ?fd; prim("SSL_dup", fd)
    
/**
 * Connecting high and low level file operations
 */    
strategies 
 
  /**
   * The fdopen function associates a stream with the existing file 
   * descriptor, fd.
   * 
   * The mode of the stream ("r", "r+", "w", "w+",  "a", "a+") must be 
   * compatible with the mode of the file descriptor.  The file position 
   */
  fdopen = 
    ?(fd, mode); prim("SSL_fdopen", fd, mode)

/**
 * Pipes (and FIFOs)
 */
strategies
 
  /* pipe creates a pair Pipe(fd1, fd2) of file descriptors, pointing
  to a pipe inode, and places them in the array pointed to by filedes.
  fd1 is for reading, fd2 is for writing. */

  // pipe :: _ -> Pipe
  pipe =
    prim("SSL_pipe")
    
signature
  constructors
    Pipe       : Int * Int -> Pipe
    