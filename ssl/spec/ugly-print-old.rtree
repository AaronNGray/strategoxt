Specification([Imports(["abox-ext"]),Strategies([SDef("ugly-print",[],Rec("x",Call(SVar("try"),[LChoice(Call(SVar("UP-Int"),[]),LChoice(Call(SVar("UP-Str"),[]),LChoice(Call(SVar("UP-Cnst"),[]),LChoice(Call(SVar("UP-Lst"),[Call(SVar("x"),[])]),Call(SVar("UP-App"),[Call(SVar("x"),[])])))))])))]),Rules([RDef("UP-Cnst",[],Rule(Explode(Var("f"),Op("Nil",[])),Op("S",[Var("f")]),Id)),RDef("UP-App",[DefaultVarDec("s")],Rule(Explode(Var("f"),Var("xs")),Op("H0",[Op("Cons",[Op("S",[Var("f")]),Op("Cons",[Op("Parens",[Op("V0",[App(Seq(Call(SVar("map"),[Call(SVar("s"),[])]),Call(SVar("post-commas"),[])),Var("xs"))])]),Op("Nil",[])])])]),Id)),RDef("UP-Str",[],Rule(Var("x"),App(Call(SVar("Quote"),[]),Op("S",[Var("x")])),BA(Call(SVar("is-string"),[]),Var("x")))),RDef("UP-Int",[],Rule(Var("x"),Op("S",[App(Call(SVar("int-to-string"),[]),Var("x"))]),BA(Call(SVar("is-int"),[]),Var("x")))),RDef("UP-Lst",[DefaultVarDec("s")],Rule(Op("Nil",[]),Op("S",[Str("[]")]),Id)),RDef("UP-Lst",[DefaultVarDec("s")],Rule(As(Var("l"),Op("Cons",[Var("x"),Var("xs")])),Op("H0",[Op("Cons",[Op("S",[Str("[")]),Op("Cons",[Op("V0",[App(Seq(Call(SVar("map"),[Call(SVar("s"),[])]),Call(SVar("post-commas"),[])),Var("l"))]),Op("Cons",[Op("S",[Str("]")]),Op("Nil",[])])])])]),Id))])])