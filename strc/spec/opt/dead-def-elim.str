module dead-def-elim
imports Stratego stratlib lib pack-graph
strategies

  dead-def-elim-io = 
    io-wrap(only-local-option, dead-def-elim-spec)

  only-local-option = 
    Option("--only-local"
	  ,<set-config>"--only-local"
	  ,!"--only-local        do not eliminate top-level definitions")

  if-only-local(s1, s2) =
    where(<get-config>"--only-local") < s1 + s2
   
  dead-def-elim-spec = 
    Specification(
      [id,
       Strategies(
         if-only-local(id, dead-def-elim)
         ; map(local-dead-def-elim))
      ]
    )

  dead-def-elim =
    !(["main_0_0"], <map(RegisterDefinition)>, [])
    ; graph-nodes-roots(Definition, svars, \ (_,x,d) -> [x|d] \ )

  RegisterDefinition =
    ?sdef@SDefT(f, xs, ys, s)
    ; rules(
        Definition : (f, _) -> sdef
      )
  
  RegisterDefinition =
    ?sdef@ExtSDefInl(f, xs, ys, s)
    ; rules(
        Definition : (f, _) -> sdef
      )
  
  RegisterDefinition =
    ?sdef@ExtSDef(f, xs, ys)
    ; rules(
        Definition : (f, _) -> sdef
      )
  
  local-dead-def-elim =
    rec x({| DefDead :
	     try(DeclareDead <+ DeclareNotDead)
	     ; all(x)
	     ; try(DeleteDeadDefinitions)
          |})

  DeclareDead =
    Let(map(DeclareDefDead), id)

  DeclareDefDead =
    ?SDefT(f, _, _, _)
    ; rules(DefDead : SDefT(f, _, _, _) -> ())

  DeleteDeadDefinitions =
     Let(filter(not(DefDead)), id)

  DeclareNotDead =
     ?CallT(SVar(f), _, _)
     ; override rules(DefDead : SDefT(f, _, _, _) -> Undefined)
  