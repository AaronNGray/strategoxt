\begin{code}
module rename-defs
imports Stratego stratlib lib dynamic-rules
strategies

  rename-defs-io =
    io-wrap(Specification([id,Strategies(rename-sdefs)]))

  // Rename the names of all top-level strategy definitions; 
  // The Stratego syntax cannot be used for names of C functions.

  rename-sdefs =
    map(RenameSDef);
    map(topdown(try(RenameCall)))

rules

/*
  RenameSDef : 
    SDef(x, args, s) -> SDef(y, args, s)
    where <length> args => n
        ; <concat-strings>[<try(NameMod); cify> x, "_", <int-to-string> n] => y
        ; rules(RenameVar : (x, n) -> y)
        ; (<HoArg> x; rules(HoArg : x -> Undefined)
                   <+ rules(HoArg : x -> y))
*/

  RenameSDef : 
    SDefT(x, args1, args2, s) -> SDefT(y, args1, args2, s)
    where <length> args1 => n
        ; <length> args2 => m
        ; <concat-strings>[<try(NameMod); cify> x, "_", <int-to-string> n, "_", <int-to-string> m] => y
        ; rules(RenameVar : (x, (n,m)) -> y)
        ; (<HoArg> x; rules(HoArg : x -> Undefined)
                   <+ rules(HoArg : x -> y))

  RenameSDef : 
    ExtSDef(x, args1, args2) -> ExtSDef(y, args1, args2)
    where <length> args1 => n
        ; <length> args2 => m
        ; <concat-strings>[<try(NameMod); cify> x, "_", <int-to-string> n, "_", <int-to-string> m] => y
        ; rules(RenameVar : (x, (n,m)) -> y)
        ; (<HoArg> x; rules(HoArg : x -> Undefined)
                   <+ rules(HoArg : x -> y))

  RenameSDef : 
    ExtSDefInl(x, args1, args2, s) -> ExtSDefInl(y, args1, args2, s)
    where <length> args1 => n
        ; <length> args2 => m
        ; <concat-strings>[<try(NameMod); cify> x, "_", <int-to-string> n, "_", <int-to-string> m] => y
        ; rules(RenameVar : (x, (n,m)) -> y)
        ; (<HoArg> x; rules(HoArg : x -> Undefined)
                   <+ rules(HoArg : x -> y))

  RenameCall : 
    Call(SVar(x), ss) -> Call(SVar(y), ss)
    where <length> ss => n
        ; ( <RenameVar> (x,n) => y <+ <HoArg> x => y )

  RenameCall : 
    CallT(SVar(x), ss, ts) -> CallT(SVar(y), ss, ts)
    where <length> ss => n
        ; <length> ts => m
        ; ( <RenameVar> (x,(n,m)) => y <+ <HoArg> x => y )

  NameMod :
    Mod(x, y) -> <concat-strings>[x,"-",y]
\end{code}
