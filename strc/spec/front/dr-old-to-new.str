module dr-old-to-new
imports Stratego

strategies

  upgrade-old-dr-constructs =
    try(oncetd(?|[ override rules(rd1*) ]| + ?|[ extend override rules(rd1*) ]|); rules(DROverrideLabelsNeeded: _ -> ()))
  ; topdown(
      if ?|[ rules(drd*) ]|
        then UpgradeGenDynRules
        else if ?|[ extend rules(rd*) ]|
          then UpgradeExtendDynamicRules
          else if ?|[ override rules(rd*) ]|
            then UpgradeOverrideDynamicRules
            else if ?|[ extend override rules(rd*) ]|
              then UpgradeExtendOverrideDynamicRules
              else id
            end
          end
        end
      end
    )

rules

/* For normal rule blocks, at least try and make sure that undefining rules
are converted. */
  UpgradeGenDynRules :
   |[ rules(drd*) ]| -> |[ rules(drd'*) ]|
   where <map(try(UpgradeUndefine); check-override-label)> drd* => drd'*

  UpgradeUndefine :
    rd@DynRuleDef|[ f(as1|as2) : t1 -> Undefined() where s ]| -> DynRuleDef|[ f(as1|as2) :- t1 ]|
    where !s => Strategy|[ id ]|
          <+      say(!"[normalize-spec | warning] rule undefining doesn't allow a condition strategy anymore")
             ; <debug(!"[normalize-spec | warning] Your condition has been removed from the original dynamic rule: ")> rd


/* For extend rule blocks, just convert all ruledefs within it into
AddDynRule's. */
  UpgradeExtendDynamicRules :
   |[ extend rules(rd*) ]| -> |[ rules(drd*) ]|
   where <map(RDefToDRDef-extend; check-override-label)> rd* => drd*

  RDefToDRDef-extend :
    |[ f(as1|as2) : t1 -> t2 where s ]| -> DynRuleDef|[ f(as1|as2) :+ t1 -> t2 where s ]|
    where not(!t2 => Term|[ Undefined() ]|)

  RDefToDRDef-extend :
    rd@|[ f(as1|as2) : t1 -> Undefined() where s ]| -> DynRuleDef|[ f(as1|as2) :- t1 ]|
    where !s => Strategy|[ id ]|
          <+      say(!"[normalize-spec | warning] rule undefining doesn't allow a condition strategy anymore")
             ; <debug(!"[normalize-spec | warning] Your condition has been removed from the original dynamic rule: ")> rd


/* For (extend) overriding rule blocks just treat them as a extend/normal
rule blocks, but add the dummified LHS as the label for each DynRuleDef. */
  UpgradeOverrideDynamicRules :
   |[ override rules(rd*) ]| -> |[ rules(drd*) ]|
   where <map(RDefToDRDef; try(UpgradeUndefine); UseOverrideLabel)> rd* => drd*

  UpgradeExtendOverrideDynamicRules :
   |[ extend override rules(rd*) ]| -> |[ rules(drd*) ]|
   where <map(RDefToDRDef-extend; UseOverrideLabel)> rd* => drd*

  RDefToDRDef :
    |[ f(as1|as2) : t1 -> t2 where s ]| -> DynRuleDef|[ f(as1|as2) : t1 -> t2 where s ]|


/* If there's been any occurence of `(extend-)override rules' in the program,
add the dummified LHS as additional label to the scope upon each dynruledef. */
  check-override-label =
    if DROverrideLabelsNeeded
      then GenOverrideLabel
      else id
    end

  GenOverrideLabel :
    drd -> drd'
      where <DRDef-LHS(dummify)> drd => label
          ; <DRDef-AddLabel(|label)> drd => drd'

  UseOverrideLabel :
    drd -> drd'
      where <DRDef-LHS(dummify)> drd => label
          ; <DRDef-Labeled(|label)> drd => drd'

  DRDef-LHS(s) =
    ?UndefineDynRule(_, <s>)
  + ?SetDynRule(_, Rule(<s>, _, _))
  + ?SetDynRuleMatch(_, <s>)
  + ?AddDynRule(_, Rule(<s>, _, _))

  DRDef-Labeled(|label) =
    oncetd(\ DynRuleId(rdc) -> LabeledDynRuleId(rdc, label) \)

  DRDef-AddLabel(|label) =
    oncetd(\ DynRuleId(rdc) -> AddLabelDynRuleId(rdc, label) \)
