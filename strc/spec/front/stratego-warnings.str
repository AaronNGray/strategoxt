/*
 stratego-warnings.str: a module for generating stratego compilation warnings 

 author: Merijn de Jonge (m.de.jonge@tue.nl)

 usage: sc -i stratego-wargings.str
        pack-stratego -I <xt>/share/ssl -i <your_spec>.str -o <your_spec>.ast
        frontend -i <your_spec>.ast -o <your_spec>.ast1
        extract -i <your_spec>.ast1 -o <your_spec>.ast2
        stratego-warnings -i <your_spec>.ast.2 -o /dev/null
 */
module stratego-warnings
imports lib Stratego

signature
  constructors
    ObsoleteWarning: Str -> Warning
    DebugWarning   : Str -> Warning 
    ConstructorWarning: Str -> Warning

overlays

  AllWarnings = [
     ("debug-arguments",         "Warns for missing build operator"), 
     ("obsolete-strategy-calls", "Warns for obsolete strategies"), 
     ("maybe-unbound-variables", "Warns for unbound variables"),
     ("lower-case-constructors", "Warns for lower-case constructors")
     ]

strategies

  stratego-warnings-io = 
    io-wrap(stratego-warnings-options, Stratego-warnings)

  stratego-warnings-options = 
    ArgOption("--warning" + "-W",
        where(<extend-config> ("--warning", [<id>])); !(),
        <concat-strings>["-W | --warning   Set warning level (-W all to switch all warnings on):\n",
                         <Display-possible-warnings>AllWarnings ]
    )

  Stratego-warnings =
   where(
     ?spec
     ; (<get-config>"--warning"; uniq <+ ![])
     // If -W all was given, create a list of all available checks  
     ; try(fetch-elem("all"); !AllWarnings; map(Fst))
     ; filter(Warning(!spec))
     ; concat
     ; print-warnings
    )

  Display-possible-warnings = 
     map( \ (s,txt) -> <concat-strings>["                     ",s, ": ", txt, "\n"] \ );
     concat-strings
     
  Warning(spec) =
       WarningDebugArguments(spec)
    <+ WarningObsolete(spec)
    <+ MaybeUnboundVariables(spec)
    <+ LowerCaseConstructors(spec)
    <+ <printnl> (stderr, ["** WARNING incorrect parameter passed to -W switch: ", <id>]);
       ![]

strategies
  LowerCaseConstructors(spec) =
  ?"lower-case-constructors";
  spec;
  collect( ?OpDecl(<id>, _)  );
  uniq;
  filter( 
    \ x -> ConstructorWarning(<double-quote>x) 
      where lower-case => x
          ; not(?"")
     \ )

  MaybeUnboundVariables(spec) =
    ?"maybe-unbound-variables" // handled by use-def component
    ; ![]

strategies

  // debug arguments

  WarningDebugArguments(spec) =
    ?"debug-arguments"
    ; spec
    ; debug-with-incorrect-string

strategies

  // obsolete strategy definitions

  WarningObsolete(spec) =
    ?"obsolete-strategy-calls"
    ; spec
    ; obsolete-def

  // Strategy to find calls to the "obsolete" strategy
  obsolete-def = 
    strategy-invokation-warning(
      sdef-with-property( 
        \  CallT(SVar("obsolete"),[Build(Str(msg))],[]) -> ObsoleteWarning(msg) \ 
      )
    )

// Strategy to find calls to "debug" strategy with incorrect argument
debug-with-incorrect-string =
   strategy-argument-warning(
   sdef-with-property({arg, msg:
   \   CallT(SVar("debug"),[arg],[]) -> DebugWarning(msg) 
       where
       !arg;
       not(Build(Str(id)));
       oncetd(Str(?msg))
   \ }))

// Create warning string for obsolete warning
mk-warning: (caller, strat, ObsoleteWarning(warning)) -> msg
   where
   <concat-strings>
   ["warning: obsolete strategy or rule invoked from \"", caller, "\":\n  ", 
     strat, ": \"", warning, "\"\n"] => msg

// Create warning string for debug warning
mk-warning: (strat, DebugWarning(warning)) -> msg
   where
   <concat-strings>
   ["warning: possibly missing build operator in debug strategy in \"", strat,"\"\n",
    "  debug(",<double-quote>warning,")\n"] => msg
   
// Create warning string for lower-case constructors
mk-warning: ConstructorWarning(warning) -> msg
   where
   <concat-strings>
   ["warning: lowercase constructor name found: ", warning, "\n"] => msg
   
// A strategy-invokation warning is a warning related to a invokation of a
// strategy. Typically, this means a call to an obsolete strategy.
// The result is a list of triples (caller, strat, warning)
// where
//  caller  is the caller to strat
//  strat   is the strategy causeing the warning (for instance because it is
//          obsolete 
//  warning is the warning messeage (typically the argument to obsolete)
strategy-invokation-warning(s) =
    split(id, collect(s);concat;not([]));
    map-apply(get-strategy-callers)
   <+
    ![]

// A strategy-argument warning warns about a possible incorrect argument to a
// strategy. A typical example is a string argument to the "debug" strategy:
//    debug("debug message")   since it should be   debug(!"debug message)
//
strategy-argument-warning(s) =
   collect(s);concat

// Print a list of warnings to standard error and also print a count of the
// number of warnings
print-warnings = 
    []
   <+
    map(mk-warning);
    where(length => nr);
    !(stderr, <id>);
    print;
    !(stderr, ["\n", nr, " warning(s)\n"]);
    print
  
// Return a list of callers to strategy "strat-name"
get-strategy-callers:
  (t, (strat-name, warning-msg) ) -> warning
  where
   !t;
   collect(
      caller(!strat-name);
      not(?strat-name);
      !(<id>, strat-name, warning-msg)
   ) => warning

// Return a list of strategy names which invoke strategy "To"
caller(To) = 
   ?SDefT(name, _, _,def);
   To => to;
   !def;
   collect( CallT(SVar(?to), id, id);!to );
   not([]);
   !name

// Return a list of tuples (name, match) for strategy definition for which
// "prop" holds 
sdef-with-property(prop) =
   SDefT(?name, id, id,?def);
   !def;
   collect(prop);
   not([]);
   map( \match -> (name, match) \ )
   
// map-apply(s) : (t,l) -> t'
// Transform t by subsequently applying strategy s with argument a1...an
// from the list l
map-apply(s) =
   rec x ({a,as,t:
      (id,[]); Fst
   <+
      ?(t, [a|as]);
      <x>(<s>(t,a), as)
   })
   