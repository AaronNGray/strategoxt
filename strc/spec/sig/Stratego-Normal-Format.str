module Stratego-Normal-Format
imports
  Stratego-Amb
  Stratego-MetaTransition
  lib

strategies

  main =
    io-wrap(
      stratego-specification
    ; if <get-config> "amb-error" then
          <exit> 1
      end
    )

  stratego-specification =
    Specification([
      id,
      Strategies(list(strategy-definition))
    ])
    <+ amb-error
    <+ log(|Error(),"Not a stratego-specification: ",<id>)

  strategy-definition =
      ?SDefT(name, _, _, _)
      ; {| CurrentSDef :
          rules(CurrentSDef : () -> name)
        ; SDefT(
            is-string + Mod(is-string,is-string)
          , list(VarDec(is-string,id))
	  , list(VarDec(is-string,id))
	  , strategy-expression
          )
        |}
    + ExtSDefInl(is-string + Mod(is-string,is-string)
	    , list(VarDec(is-string,id))
	    , list(VarDec(is-string,id))
	    , strategy-expression)
    + ExtSDef(is-string + Mod(is-string,is-string)
	    , list(VarDec(is-string,id))
	    , list(VarDec(is-string,id)))
    <+ amb-error
    <+ log(|Error(),"Not a strategy-definition: ",<id>)

  strategy-expression =
  rec exp(
	Id
	+ Fail
	+ Not(exp)
	+ Test(exp)
	+ Seq(exp, exp)
	+ Choice(exp, exp)
	+ LChoice(exp, exp)
	+ GuardedLChoice(exp, exp, exp)
	+ GChoice(exp, exp)
	+ LGChoice(exp, exp) 

	+ CallT(SVar(is-string + Mod(is-string,is-string)), 
		list(exp), 
		list(term-expression))    

	+ Rec(is-string, exp)
	+ Cong(is-string, list(exp))
	+ One(exp)
	+ Some(exp)
	+ All(exp)
	+ Thread(exp)
	+ Match(term-expression)
	+ Build(term-expression)
	+ Scope(list(is-string), exp)
	+ Where(exp)
	+ PrimT(is-string,list(exp),list(term-expression))

	+ Let(list(SDefT(is-string,
		         list(VarDec(is-string, FunType(list(id),id))),
			 list(VarDec(is-string, ConstType(id))),
			 exp))
	     ,exp)

        <+ amb-error
	<+ log(|Error(),"Not a strategy-expression: ",<id>)
	)

  term-expression =
  rec trm(
	Wld 
	+ Var(is-string)
	+ Int(is-int)
	+ Real(is-real)
	+ Str(is-string)
	+ BuildDefault(trm)
	+ As(Var(is-string), trm)
	+ Op(is-string, list(trm))
        <+ amb-error
	<+ log(|Error(),"Not a term-expression: ",<id>)
	)

  amb-error =
    amb(id)
    ; where(
        if <CurrentSDef; is-string> () => sdef then
          log(|Error(),<concat-strings> ["Ambiguity in the definition of ", sdef, ". Alternatives: "])
        else
          log(|Error(),<concat-strings> ["Ambiguity in specification. Alternatives: "])
        end
      ; ?amb(<id>)
      ; map(log(|Error(),<concat-strings>["   - ",<write-to-string>]))
      ; <set-config> ("amb-error", 1)
      )

signature
  constructors
    amb: List(a) -> a
