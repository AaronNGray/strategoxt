module strc-options
imports options config strc-version
strategies

  command-line-options =
    init-sc-config
    ; parse-options(sc-options)
    ; try(<get-config> "--man"
          ; <copy-file>(<xtc-find> "sc-manual.txt", stdout)
          ; <exit> 0)
    ; try(<get-config> "-v"
          ; strc-version
          ; <exit> 0)
    ; (where(<get-config> "-i")
       <+ <fatal-error> ["no main module specified"])
    ; strc-announce
    ; if-verbose1(where(<get-config> "-i"; debug(!"compiling ")))

  init-sc-config = 
  where(
    <set-config>("VERSION", strc-version-number)
    ; <set-config>("--verbose", 1)
    ; <set-config>("--keep", 0)
    ; <set-config>("-O", 6)
    ; <set-config>("-I", ["-I", <xtc-find-path> "lib.rtree",
                          "-I", <xtc-find-path> "Stratego.rtree",
                          "-I", <xtc-find-path> "StrategoRenamed.sdf"])
    ; <set-config>("--C-include", 
		   ["<srts/stratego.h>", "<srts/stratego-lib.h>"])
    ; <set-config>("-CI", ["-I", <conc-strings>(<xtc-find-path> "SRTS", "/include"),
                           "-I", <conc-strings>(<xtc-find-path> "SRTS", "/include"),
                           "-I", <conc-strings>(<xtc-find-path> "ATERM", "/include")])
    ; <set-config>("-CL", ["-L", <conc-strings>(<xtc-find-path> "SRTS", "/lib"),
                           "-lstratego-lib.opt", "-lstratego.opt",
                           "-L", <conc-strings>(<xtc-find-path> "ATERM", "/lib"),
                           "-lATerm-gcc",
                           "-lm"])
    ; <set-config>("--warning", ["all"])
  )

  olevel(n, s) =
    try(where(<geq>(<get-config> "-O", <n>)); s)

  olevel1(s) = olevel(!1, s)
  olevel2(s) = olevel(!2, s)
  olevel3(s) = olevel(!3, s)
  olevel4(s) = olevel(!4, s)
  olevel5(s) = olevel(!5, s)
  olevel6(s) = olevel(!6, s)

  sc-options =
    ArgOption("-i",
	where(<set-config>("-i", <id>)); !(),
	!"-i file            Main module to compile (required)\n")

  + ArgOption("-o" + "--output",  
	where(<set-config> ("-o",<id>)); !(),      
	!"-o f | --output f  Write output to f" )


  + ArgOption("-I" + "--Include",        
	where(<extend-config>("-I", ["-I", <id>])); !(),
	!"-I d | --Include d Include modules from directory d")

  + ArgOption("--main" + "-m",
	where(<set-config>("-m", <id>)); !(),
	!"--main f | -m f    Main strategy to compile (default: main)\n")


  + ArgOption("--C-include",       
	where(<post-extend-config>("--C-include", [<id>])); !(), 
	!"--C-include h      Include header file h (\"file.h\" or <file.h>)")

  + ArgOption("-CI",       
	where(<extend-config>("-CI", [<id>])); !(),
	!"-CI d              Include C headers from directory d")

  + ArgOption("-CL",
	where(<extend-config>("-CL", [<id>])); !(),
	!"-CL d              Include binary libraries from directory d\n")


  + Option("-c",          
	where(<set-config>("-c",())); !(),
	!"-c                 Produce C code only (don't compile)" )

  + Option("--ast",
	where(<set-config>("--ast",())); !(),
	!"--ast              Produce abstract syntax tree" )

  + Option("-F",           
	where(<set-config>("-F",())); !(),
	!"-F                 Produce normalized specification" )

  + ArgOption("--keep",
        where(<set-config>("--keep", <string-to-int>)); !(),
	!"--keep n           Keep intermediate results (0 = keep nothing)" )


  + ArgOption("-O",
        where(<set-config>("-O", <string-to-int>)); !(),
	!"-O n               Optimization level (0 = no optimization)" )


  + Option("--fusion",     
	where(<toggle-config>("--fusion",())); !(),
	!"--fusion           Toggle specialize applications of innermost (default: on)" )

//  + Option("--trace-all",  
//	where(<set-config>("--trace-all",())); !(),
//	!"--trace-all        Instrument all definitions to print tracing information" )
//
//  + ArgOption("-t",        
//	where(<extend-config>("-t", [<id>])); !(),
//	!"-t f               Instrument definition of f to print tracing information\n" )

  + ArgOption("--verbose",         
	where(<set-config> ("--verbose", <string-to-int>)); !(),         
	!"--verbose i        Verbosity level i (default 1)")

  + Option("-S"+"--silent",       
	where(<set-config> ("--verbose",0)); !(),          
	!"-S | --silent      Silent execution (same as --verbose 0)")


  + Option("-h" + "--help",         
	where(<set-config> ("--help",())); !(),         
	!"-h | --help        Show help")

  + Option("--man",         
	where(<set-config> ("--man",())); !(),         
	!"--man              Show manual page")

  + Option("-v"+"--version",     
	where(<set-config> ("-v",())); !(),         
	!"-v | --version     Display program's version")

  + ArgOption("--warning" + "-W",         
	where(  where(<get-config>"--warning";["all"]);
	        <set-config> ("--warning", [<id>])
              <+ 
                <extend-config>("--warning", [<id>])); !(),         
	!"-W | --warning     Set warning level (-W all to switch all warnings on)")

  + Option("--maybe-unbound-warnings",
        where(<set-config> ("--maybe-unbound-warnings", 1)),
        !"--maybe-unbound-warnings"
    )

  + Option("--no-maybe-unbound-warnings",
        where(<set-config> ("--no-maybe-unbound-warnings", 0)),
        !"--no-maybe-unbound-warnings"
    )

  + Option("--asfix",
       where(<set-config>("--asfix",())); !(),
       !"--asfix            Concrete syntax parts are not imploded")

  pass-maybe-unbound-warnings =
    <get-config> "--maybe-unbound-warnings" => 1
    ; !["--maybe-unbound-warnings"]
   <+ !["--no-maybe-unbound-warnings"]


  short-description(p) = 
      !["STRC compiles Stratego programs to C or executable code.\n",
	"\n",
	"Stratego is a language for program transformation based on the\n",
	"paradigm of rewriting strategies.\n",
	"\n",
	"For documentation see http://www.stratego-language.org\n",  
	"\n",
	"Usage: ", <p>(), " -i file [options]"]

  long-description(p) = ![
	"Examples:\n",
	"Compile module M.str to an executable\n",
	"  strc -i M\n",
	"Use strategy foo as main strategy instead of main\n",
	"  strc -i M --main foo\n",
	"Compile module M.str to C code in file M.c\n",
	"  strc -i M -c\n",
	"Include modules from directory ../sig\n",
	"  strc -i M -I ../sig\n",
	"\n",  
	"Note that strc is a whole program compiler, i.e, it\n",  
	"compiles all (recursively) imported modules into\n",  
	"a single C source file.\n",  
	"\n",  
	"Report bugs to <stratego-bugs@cs.uu.nl>\n"
  ]

  strc-version =
    where(<printnl>(stdout, 
	  ["STRC ", <get-config> "VERSION", "\n\n",
	   "Copyright (C) 1998-2003 Eelco Visser <visser@acm.org>\n",
	   "\n",
	   "This library is free software; you can redistribute it and/or\n",
	   "modify it under the terms of the GNU Lesser General Public\n",
	   "License as published by the Free Software Foundation; either\n",
	   "version 2 of the License, or (at your option) any later version.\n"]))

  strc-announce =
    if-verbose2(strc-version)
