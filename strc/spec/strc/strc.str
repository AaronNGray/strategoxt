/** 
 * This module glues together the components that make up the Stratego
 * compiler. It is based on XTC, the transformation tool composition
 * model. 
 */

module strc
imports lib xtc-lib strc-options sugar
strategies

  strc = 
    command-line-options
    ; profile'(if-verbose1(<printnl>(stderr, ["-----\ncompilation succeeded:   " | <id>])), 
                compile)
    ; if-verbose2(<printnl>(stderr, ["compilation succeeded (", <run-time>, " secs)"]))
    ; <exit> 0
   <+ <printnl>(stderr, ["compilation failed (", <run-time>, " secs)"])
      ; <exit> 1

strategies

  compile =
    xtc-input(
      front-end
      ; optimize
      ; back-end
      ; c-compile
    )

  front-end =
    if-verbose2(debug(!"front-end: "));
    profile'(if-verbose1(<printnl>(stderr, ["front-end succeeded:     " | <id>])), 
      get-infile
      ; pack-stratego
      ; output-ast
      ; add-main
      ; repair-types
      ; pre-desugar
      ; normalize-spec
      ; use-def
      ; check-constructors
      ; spec-to-sdefs
      ; rename-vars
      ; desugar
      ; output-frontend
      ; extract
      ; warnings
      ; stratego-nf 
      ; rename-defs
    )

  optimize =
    if-verbose2(say(!"optimization"));
    profile'(if-verbose1(<printnl>(stderr, ["optimization succeeded:  " | <id>])), 
	if-verbose3(where(<get-config> "-O"; debug(!"optimization level: ")))
	// SIMPLIFICATION
        ; olevel1(	
	    simplify1
            				; save-as1(!".opt1")
 	  )
	// INNERMOST FUSION
        ; olevel2(
	    try(where(not(<get-config> "--fusion"))
		; fusion
            				; save-as2(!".opt2")
            )
          )
	// INLINING
	// inline small definitions, congruences
        ; olevel4(
	    worker-wrapper
            				; save-as6(!".opt3a")
	    ; inline
	    ; dead-def-elim
            				; save-as4(!".opt3")
	    ; simplify1
          )
        ; define-congruences
	// CONSTANT PROPAGATION
        ; olevel4( 
	    const-prop
	    ; bound-unbound-vars
	    ; dead-var-elim
	    ; simplify3
            				; save-as4(!".opt4")
          )
	// PATTERN MATCH COMPILATION
        ; olevel2( 
	    compile-match
	    ; desugar-case
            				; save-as2(!".opt5")
	  )
	// INLINING 
        // inline local definitions introduced by pattern match compilation
        ; olevel5(
	   inline
           				; save-as5(!".opt7")
	   ; dead-def-elim
           				; save-as5(!".opt8")
          )
	// CONSTANT PROPAGATION
        ; olevel3(
	    simplify2 // lift term arguments from (prim) calls
            				; save-as3(!".opt9")
            ; const-prop
	    				; save-as3(!".opt10")
	    ; bound-unbound-vars
	    				; save-as3(!".opt11")
	    ; dead-var-elim
            				; save-as3(!".opt12")
	  )
	// SIMPLIFICATION
        ; olevel1(
	    simplify3
            				; save-as1(!".opt13")
	    ; stratego-of
            				; save-as1(!".opt14")
          )
    )

strategies

  back-end =
    if-verbose2(say(!"back-end"));
    profile'(if-verbose1(<printnl>(stderr, ["back-end succeeded:      " | <id>])), 
      canonicalize
      					; save-as1(!".can")
      ; olevel1(
          lift-definitions
      					; save-as1(!".opt15")
          ; simplify1
      					; save-as1(!".opt16")
        )
      ; olevel3(
	  bound-unbound-vars
      					; save-as3(!".opt17")
	)
      ; stratego-cf
      ; s2c
      ; ac2abox
      ; abox2text
      ; rename-to(get-outfile(!".c"))
    )

strategies // Compile generated C code

  c-compile =
     where(<get-config> "-c")
  <+ profile'(if-verbose1(<printnl>(stderr, ["C compilation succeeded: " | <id>])), 
       c-to-object-code 
       ; link-object-code
     )

  c-to-object-code :
    FILE(cfile) -> FILE(ofile)
    where if-verbose2(say(!"compiling C code"))
	; get-outfile(!".o") => ofile
        ; <if-verbose3(debug); call> 
	   ("gcc", <conc> (<get-config> "-CI", 
			  ["-c", cfile,"-o", ofile]))

  link-object-code :
    FILE(ofile) -> FILE(target)
    where if-verbose2(say(!"linking object code"))
	; (<get-config> "-o" <+ get-outfile(!"")) => target
        ; <if-verbose3(debug); call> 
	    ("gcc", [ofile, "-o", target | <get-config> "-CL"])

strategies

  // save intermediate results

  save-as(ext) = 
    where(
      copy-to(get-outfile(ext) => file1)
      ; xtc-transform(!"pp-stratego", !["--abstract" | <pass-verbose> ] )
      ; copy-to(<conc-strings> (file1, ".txt") => file2)
      ; say(!["abstract syntax in", file1, " concrete syntax in ", file2])
    )

  save-as1(ext) = if-keep1(save-as(ext))
  save-as2(ext) = if-keep2(save-as(ext))
  save-as3(ext) = if-keep3(save-as(ext))
  save-as4(ext) = if-keep4(save-as(ext))
  save-as5(ext) = if-keep5(save-as(ext))
  save-as6(ext) = if-keep6(save-as(ext))
  save-as7(ext) = if-keep7(save-as(ext))
  save-as8(ext) = if-keep8(save-as(ext))

  output-ast =
    try(where(<get-config> "--ast")
       ; copy-to(get-outfile(!".ast") => astfile)
       ; say(!["abstract syntax (after parsing) written to file"])
       ; xtc-io-exit
    )

  output-frontend =
    try(where(<get-config> "-F")
       ; (extract-all <+ <fatal-error> ["extracting all definitions failed"])
       ; copy-to(get-outfile(!".tree") => file)
       ; say(!["abstract syntax (after frontend) written to file"])
       ; xtc-io-exit
    )

strategies

  /**
   * Adding main strategy
   * 
   * What happens if the specification already contains a main strategy? 
   */

  add-main =
    try(where(<get-config> "-m" => m; if-verbose2(debug(!"main strategy is: ")))
        ; xtc-io-transform(AddMain(!m)))
    ; save-as3(!".with-main")

  AddMain(m) : 
    Specification(sects) -> 
    Specification([Strategies([SDef("main", [], Call(SVar(<m>()), []))])
                  | sects])
strategies 

  get-infile :
    FILE(file) -> FILE(basein)
    where <basename> file => basein
	; if-verbose3(debug(!"basein: "))
        ; <set-config> ("basein",  basein)
        ; (<get-config; basename> "-o" <+ !basein) => baseout
	; if-verbose3(debug(!"baseout: "))
        ; <set-config> ("baseout", baseout)

  get-outfile(suffix) =
    <conc-strings>(<get-config> "baseout", <suffix>)

  dep-name =
    !["--dep", <<get-config> "-o" <+ <get-config> "baseout">]

strategies // COMPILER COMPONENTS

  comp-out(|f) =
    xtc-transform(!f, pass-verbose)

  comp(|f) =
    xtc-transform(!f, !["-b" | <pass-verbose> ])

  comp(|f,args) =
    xtc-transform(!f, <concat>[["-b"], <pass-verbose>, args])

  pass-warnings = 
    <get-config; mapconcat(!["--warning", <id>])> "--warning"

// FRONTEND

  pack-stratego 	= comp(|"pack-stratego", 
				<concat> [<dep-name>, <get-config> "-I", <pass-keep>])
  pre-desugar 		= comp(|"pre-desugar")
  normalize-spec 	= comp(|"normalize-spec")
  use-def 		= comp(|"use-def", <pass-maybe-unbound-warnings>)
  check-constructors 	= comp(|"check-constructors")
  spec-to-sdefs 	= comp(|"spec-to-sdefs")
  rename-vars 		= comp(|"rename-vars")
  desugar 		= comp(|"desugar")
  warnings 		= comp(|"stratego-warnings", <pass-warnings>)
  repair-types 		= comp(|"repair-types")
  extract 		= comp(|"extract"); save-as2(!".ext")
  extract-all 		= comp(|"extract-all")
  rename-defs 		= comp(|"rename-defs"); save-as2(!".rn")
  stratego-nf 		= comp(|"Stratego-Normal-Format")

// OPTIMIZER

  fusion 		= comp(|"fusion")
  inline 		= comp(|"inline")
  dead-def-elim 	= comp(|"dead-def-elim")
  compile-match 	= comp(|"compile-match")
  desugar-case 		= comp(|"desugar-case")
  const-prop 		= comp(|"const-prop")
  bound-unbound-vars 	= comp(|"bound-unbound-vars")
  dead-var-elim 	= comp(|"dead-var-elim")
  worker-wrapper 	= comp(|"worker-wrapper")
  simplify1 		= comp(|"simplify1")
  simplify2 		= comp(|"simplify2")
  simplify3 		= comp(|"simplify3")
  define-congruences 	= comp(|"define-congruences")
  stratego-of 		= comp(|"Stratego-Optimized-Format")
  canonicalize 		= comp(|"canonicalize")
  lift-definitions 	= comp(|"lift-definitions")
  bound-unbound-vars 	= comp(|"bound-unbound-vars")


// BACK-END

  stratego-cf 	= comp(|"Stratego-Canonical-Format")
  ac2abox 	= comp(|"ast2abox", ["-p", <xtc-find> "C-pretty.pp"])
  abox2text 	= comp-out(|"abox2text")
  s2c 		= comp(|"s2c",  
	 		<get-config; mapconcat(!["--C-include", <id>])> "--C-include")
