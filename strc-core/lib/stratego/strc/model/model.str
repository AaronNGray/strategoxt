module model

imports Stratego-Sugar

signature
  constructors
    Definitions         : Label
    ExternalDefinitions : Label
    LocalDefinitions    : Label
    Constructors        : Label
    Overlays            : Label

  constructors
    Inj : Constructor
    Q   : String -> Constructor


strategies

  set-from-list(|lst) =
    set := <new-iset>
    ; iset-addlist(|lst)
    ; iset-elements 
    ; where(<iset-destroy> set)

strategies // strategy definitions

  /**
   * Add mapping from a definition signature to the full definition,
   * and maintain a collection of all definitions, all external, and
   * all local definitions.
   *
   * Note: a definition is only added to the Definitions() collection
   * if no definition with the same signature was already added (to
   * ensure that each signature is listed only once). It is assumed
   * that definitions for a signature are all either local or external.
   * If this is not the case the ExternalDefinitions() and LocalDefinitions()
   * collections become inconsistent.
   */

  m-add-def = ?def
    ; where( sig := <m-def-signature> )
    ; if <not(ModDefinition)> sig then
        rules( ModDefinition :+ Definitions() -> sig )
        ; if <is-external> def then
            rules( ModDefinition :+ ExternalDefinitions() -> sig )
          else
            rules( ModDefinition :+ LocalDefinitions() -> sig )
          end
      end
    ; rules( ModDefinition :+ sig -> def )

  /**
   * Remove all definitions for a given signature.
   *
   * @type : Signature or Def
   */ 

  m-rm-def = 
    where( sig := <try(m-def-signature)> )
    ; rules( ModDefinition :- sig )

  m-get-all-definitions =
    set-from-list(|<bagof-ModDefinition> Definitions())
    ; mapconcat(bagof-ModDefinition)

  m-get-all-local-definitions =
    set-from-list(|<bagof-ModDefinition> LocalDefinitions())
    ; mapconcat(ModDefinition)

  m-get-all-external-definitionss =
    set-from-list(|<bagof-ModDefinition> ExternalDefinitions())
    ; mapconcat(ModDefinition)

  m-reset-defs =
    where(dr-new-rule-set; dr-set-rule-set(|"ModDefinition"))

strategies

  m-call-signature =
    try(Desugar)
    ; \CallT(SVar(f), as1, as2) -> [(f, (<length> as1, <length> as2))]\

  m-def-signature =
    try(Desugar)
    ; (  \ SDefT(f, xs, ys, s)      -> (f, <length>xs, <length>ys) \
      <+ \ ExtSDef(f, xs, ys)       -> (f, <length>xs, <length>ys) \
      <+ \ ExtSDefInl(f, xs, ys, s) -> (f, <length>xs, <length>ys) \
      <+ \ RDefT(f, xs, ys, s)      -> (f, <length>xs, <length>ys) \ )

  is-external =
    ?ExtSDef(_, _, _)
    <+ ?ExtSDefInl(_, _, _, _)

strategies // constructors

  m-add-constructor = ?cdec//; debug(!"m-add-constructor: ")
    ; where( csig := <m-constr-signature> ) //; debug(!"signature: "))
    ; if <not(ModConstructor)> csig then
        rules( 
          ModConstructor :+ Constructors() -> csig
          ModConstructor : csig -> cdec 
        )
      end

  m-replace-constructor = ?odec
   ; where( osig := <m-constr-signature> )
    ; if <not(ModConstructor)> osig then
        rules( 
          ModConstructor :+ Constructors() -> osig
        )
      end
      ; rules( ModConstructor : osig -> odec )

  m-get-all-constructors =
    set-from-list(|<bagof-ModConstructor> Constructors())
    ; map(ModConstructor)

strategies

  m-constr-signature :
    OpDeclInj(FunType(ts,_)) -> (Inj(), <length> ts)

  m-constr-signature :
    OpDeclInj(ConstType(_)) -> (Inj(), 0)

  m-constr-signature :
    OpDeclQ(c, ConstType(x))   -> (Q(c), 0)

  m-constr-signature :
    OpDeclQ(c, FunType(ts, t)) -> (Q(c), <length> ts)

  m-constr-signature :
    OpDecl(c,  ConstType(x))   -> (c,    0)

  m-constr-signature :
    OpDecl(c,  FunType(ts, t)) -> (c,    <length> ts)



strategies // overlays
 
  m-add-overlay = ?odec//; debug(!"m-add-overlay: ")
   ; where( osig := <m-overlay-signature> )
    ; if <not(ModOverlay)> osig then
        //debug(!"adding overlay: ");
        rules( 
          ModOverlay :+ Overlays() -> osig
          ModOverlay : osig -> odec 
        )
      end

  m-replace-overlay = ?odec
   ; where( osig := <m-overlay-signature> )
    ; if <not(ModOverlay)> osig then
        rules( 
          ModOverlay :+ Overlays() -> osig
        )
      end
      ; rules( ModOverlay : osig -> odec )

  m-overlay-signature =
    try(Desugar)
    ; \ Overlay(c, xs, t) -> (c, <length> xs) \

  m-get-all-overlays =
    set-from-list(|<bagof-ModOverlay> Overlays())
    ; map(ModOverlay)

strategies

  /**
   * Turn current term into model, apply transformation s in the
   * context of the model, and replace the original term with the
   * specification consisting of the transformed model.
   */

  m-transform(s) =
    {| ModDefinition, ModConstructor
     : to-model
     ; s
     ; model-to-spec
     |}

  m-transform-local-defs(s) =
    set-from-list(|<bagof-ModDefinition> LocalDefinitions)
    ; filter(not(m-transform-local-def(s))) => []

  m-transform-local-def(s) =
    where(?sig
    ; bagof-ModDefinition
    ; where(<m-rm-def> sig)
    ; s
    ; map(m-add-def)
    )

  m-transform-overlays(s) =
    set-from-list(|<bagof-ModOverlay> Overlays())
    ; filter(not(m-transform-overlay(s))) => []

  m-transform-overlay(s) =
    where(?osig
    ; ModOverlay
    ; s
    ; m-replace-overlay
    )

  m-transform-constructors(s) =
    set-from-list(|<bagof-ModConstructor> Constructors())
    ; filter(not(m-transform-constructor(s))) => []

  m-transform-constructor(s) =
    where( ModConstructor; s; m-replace-constructor )

  m-declare-constructors(s) =
    set-from-list(|<bagof-ModConstructor> Constructors())
    ; map(m-declare-constructor(s))

  m-declare-constructor(s) =
    where( ModConstructor; s )

strategies

  model-to-spec =
    !Specification(
       [Signature([Constructors(<m-get-all-constructors>)]),
        Overlays(<m-get-all-overlays>),
        Strategies(<m-get-all-definitions>)]
     )

  /**
   * Create source model from AST.
   *
   * Note: Imports are currently not supported; assumed to be flattened
   * (e.g, by pack-stratego). In the future this could be extended to
   * represent a model of program modules and import relations.
   */

  to-model =
    Specification(map(to-model))

    <+ Signature(map(to-model))
    <+ Sorts(id) // map(to-model))
    <+ Constructors(map(to-model))

    <+ Overlays(map(to-model))
    <+ Rules(map(to-model))
    <+ Strategies(map(to-model))

    <+ constructor-to-model
    <+ strategy-def-to-model
    <+ overlay-to-model

    <+ fatal-err(|"*** to-model: don't know how to model this: ")
 
  strategy-def-to-model =
    m-add-def

  constructor-to-model =
    m-add-constructor

  overlay-to-model =
    m-add-overlay



