module defs-to-external-defs
imports libstratego-lib Stratego
strategies

  dted-options =
    Option("--no-inlining",
	where(<set-config>("--no-inlining", ())),
	!"--no-inlining: do not include definition bodies")
  
strategies // extract external definitions

  defs-to-external-defs =
    Specification(
      [Signature([Constructors(filter-exported-constructors)]), 
       Strategies(filter-exported-strategies)])


strategies // exported strategies

  filter-exported-strategies =
    filter(
      (DefToExtDefInl <+ DefToExtDef /* + ExtSDef(unmangle,id,id) */ )
      ; is-exported-definition
    )    

  DefToExtDef :
    SDefT(f, a1*, a2*, s) -> ExtSDef(<unmangle>f, a3*, a4*)
    where
      a3* := <export-var-type-anno> a1*
    ; a4* := <export-var-type-anno> a2*

  DefToExtDefInl :
    SDefT(f, a1*, a2*, s) -> 
    ExtSDefInl(<unmangle>f, a3*, a4*, <topdown(try(UnmangleSVar))> s)
    where <inlinable> s
    ; a3* := <export-var-type-anno> a1*
    ; a4* := <export-var-type-anno> a2*

  inlinable = 
    false
    // where(not(<get-config>"--no-inlining"))

  UnmangleSVar :
    SVar(x) -> SVar(<unmangle>x)

  unmangle =
    explode-string
    ; at-suffix(['_' | match-digits(['_' | match-digits([]) ])]; ![])
    ; implode-string
    ; uncify

  match-digits(s) =
    [is-num | match-digits(s) <+ s]

  is-exported-definition =
    ExtSDef(not(?"DYNAMIC_CALLS"), id, id)
    <+ ExtSDefInl(not(?"DYNAMIC_CALLS"), id, id, id)


strategies // exported constructors

  filter-exported-constructors =
    filter(OpDeclToExtOpDecl)

  OpDeclToExtOpDecl :
    OpDeclInj(t) ->  ExtOpDeclInj(t)

  OpDeclToExtOpDecl :
    OpDeclQ(c, t) -> ExtOpDeclQ(c, t)

  OpDeclToExtOpDecl :
    OpDecl(c, t) -> ExtOpDecl(c, t)

strategies // exported type annotations

  is-type-anno =
    ?HeapType()

  RestoreTypeAnnotation :
    t{a*} -> TypeAnno(t, a'*)
    where <filter(is-type-anno); not([])> a* => a'*

  export-var-type-anno =
    map(try(VarDec(id, try(RestoreTypeAnnotation))))
