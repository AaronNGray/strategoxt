/**
 * An xtc-less implementation of the compiler front-end.
 */

module frontend

imports
  stratego/strc/strc/format-check

strategies

  frontend = 
    m-transform-no-overlays(id

      // add some definitions and constructors

      ; if-not-lib(m-add-main)
      ; m-add-anno-cong-def
      ; where(dr-constructors; map(m-add-constructor))

      // desugar and check constructors

      ; m-transform-constructors(id
          ; pre-desugar
          ; try(DeclareVarToConst)
	  ; try((TupleDecl <+ QuotedConstrDecl); pre-desugar)
          ; GenerateCheckRule
          ; try(where(m-MkCongDef; m-add-def))
        )

      // desugar and check overlays

      ; m-transform-overlays(id
          ; pre-desugar
          ; try(DeclareVarToConst)
        )

      ; m-transform-overlays(id
          ; m-variables-to-constructors-in-def
          ; pre-desugar
          ; not(def-use-def)
          ; raise-annotations
          ; GenerateCheckRule
          ; DeclareExpandOverlay
          ; where(Overlay-to-Congdef; m-add-def)
        )

      ; m-transform-overlays(
          not(check-constructors)
        )

      // transform and check local definitions

      ; m-transform-local-defs(map(id
          ; m-repair-types
          ; pre-desugar		
          ; raise-annotations
        ))

      ; m-lift-dynamic-rules-from-spec 

      ; check-calls

      ; m-transform-local-defs(
          map(id
            ; stratego-desugar
            ; raise-annotations
	    ; not(def-use-def)
            ; not(check-constructors)
            ; expand-overlays-in-def
            ; rules-to-sdefs-def
            ; desugar-list-matching
	    ; desugar-DefaultVarDec
            ; strename
            ; desugar-def
          )
        )

      ; m-transform-local-defs(id
          ; ![<joindefs>] 
          ; [RenameSDef]
        )

      ; m-transform-external-defs(id
          ; if ?[_,_|_] then
              warn(|"multiple external definitions with same signature")
	      ; [id | ![]]
            end
          ; [RenameSDef
             ; desugar-DefaultVarDec
            ]
        )

      ; m-transform-local-defs(
          [rename-calls
           ; simplify
	   ; define-congruences-def
          ]
        )
              
      ; if-lib(remove-unused-external-defs, remove-unused-defs)
    )
    ; tfc1(|"Stratego-Core", "fe-cong")

strategies

  check-calls =
    where(
      m-get-all-def-sigs
      ; map(register-ho-arg)
      ; filter(
          bagof-ModDefinition
          ; filter(not(check-calls-def))
          ; not(?[])
        )
      ; ?[]
    )

  register-ho-arg =
    ?sig@(f, _, _)
    ; rules( CcHoArg :+ f -> sig )

  check-calls-def = 
    where(id
      ; where(sig := <m-def-signature>)
      ; svars-arity
      ; filter(svar-arity-to-sig; not(CheckCall(|sig)))
      ; ?[]
    )

  CheckCall(|dsig) = 
    ?sig
    ; if <not(ModDefinition)> sig then
        if ?(f, 0, 0) then
          <bagof-CcHoArg> f
          ; if ?[] then
              err(|["*** ", dsig, " calls non-existing ", sig])
              ; fail
            else if not(?[_]) then
              err(|["*** ", dsig, " calls ", f, 
                    " as higher-order arg, but there is there more",
                    " than one definition for ", f])
              ; fail
            end end
        else
          err(|["*** ", dsig, " calls non-existing ", sig])
          ; fail
        end
      end

  svar-arity-to-sig :
    (x, (i, j)) -> (x, i, j)

strategies

  /**
   * Remove all definitions that are not called from a
   * definition called (indirectly) by main and remove 
   * constructors that are not used in needed definitions.
   */

  remove-unused-defs =
    {| DefIsNeedeed
     : where(id
         ; <mark-used-defs-and-constructors> ("main_0_0", 0, 0)
         ; <mark-used-defs-and-constructors> ("DYNAMIC_CALLS_0_0", 0, 0)
         ; m-get-all-def-sigs
         ; map(DefIsNeeded <+ m-rm-def)
	 ; m-get-all-constructors-sigs
	 ; map(ConstructorSigNeeded <+ m-rm-constructor)
       )
     |}

  mark-used-defs-and-constructors = ?sig
    ; if <not(DefIsNeeded)> sig then
        rules( DefIsNeeded : sig )
        ; bagof-ModDefinition
        ; where(topdown(try(DeclareConstructorSigNeeded)))
        ; svars-arity
        ; map(?(<id>,_); CallSignature; mark-used-defs-and-constructors)
      end

  DeclareConstructorSigNeeded =
    ?Op(c, ts)
    ; where(sig := (c, <length> ts))
    ; rules( ConstructorSigNeeded : sig )

  DeclareConstructorSigNeeded =
    ?Cong(c, ts)
    ; where(sig := (c, <length> ts))
    ; rules( ConstructorSigNeeded : sig )

  /**
   * Remove external definitions that are not called from
   * local definitions.
   *
   * This transformation is used for libraries, where all
   * local definitions are needed, but not necessarily all
   * external definitions.
   */

  remove-unused-external-defs =
    {| DefIsNeedeed
     : where(id
         ; m-get-all-local-def-sigs
         ; map(mark-used-defs)
         ; <mark-used-defs> ("DYNAMIC_CALLS_0_0", 0, 0)
         ; m-get-all-external-def-sigs
         ; map(DefIsNeeded <+ m-rm-def)
       )
     |}

  mark-used-defs = ?sig
    ; if <not(DefIsNeeded)> sig then
        rules( DefIsNeeded : sig )
        ; bagof-ModDefinition
        ; svars-arity
        ; map(?(<id>,_); CallSignature; mark-used-defs)
      end
