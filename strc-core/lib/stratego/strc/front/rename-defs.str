module rename-defs
imports Stratego-Sugar 
	stratego/strc/lib/stratlib 
strategies

  rename-defs = 
     Specification([id, id, Strategies(rename-sdefs)])

  // Rename the names of all top-level strategy definitions; 
  // The Stratego syntax cannot be used for names of C functions.

  rename-sdefs =
    map(RenameSDef);
    map(topdown(try(RenameCall)))

  rename-sdef =
    RenameSDef
    ; topdown(try(RenameCall))

  rename-calls =
    topdown(try(RenameCall))

rules

  RenameOverrideDef :
    AnnoDef(a*, SDefT(x{anno*}, args1, args2, s)) ->
    AnnoDef(a*, SDefT(y{anno*}, args1, args2, s))
      where <fetch(?Override())> a*
      with  y := <concat-strings; newname> [x, "-override"]
          ; rules(Overriding : y -> x)
          ; try(collect(?ProceedT(_,_)); Hd; err(|"proceed with arguments no yet supported"))
            
  RenameSDef :
    AnnoDef(a*, def1@SDefT(x, _, _, _)) -> AnnoDef(a*, def2)
      with  def2@SDefT(y, _, _, _) := <RenameSDef> def1
          ; try(
                <fetch(?Override())> a* 
              ; rules(OriginalOverrideName : y -> x)
            )

  RenameSDef : 
    SDefT(x, args1, args2, s) -> SDefT(y, args1, args2, s)
    where <length> args1 => n
        ; <length> args2 => m
        ; <concat-strings>[<cify> x, "_", <int-to-string> n, "_", <int-to-string> m] => y
        ; rules(
            RenameVar : (x, (n,m)) -> y
            CallSignature : y -> (y, n, m)
          )
        ; (<HoArg> x; rules(HoArg :- x)
                   <+ rules(HoArg : x -> y))

  RenameSDef : 
    ExtSDef(x, args1, args2) -> ExtSDef(y, args1, args2)
    where <length> args1 => n
        ; <length> args2 => m
        ; <concat-strings>[<cify> x, "_", <int-to-string> n, "_", <int-to-string> m] => y
        ; rules(
            RenameVar : (x, (n,m)) -> y
            CallSignature : y -> (y, n, m)
          )
        ; (<HoArg> x; rules(HoArg :- x )
                   <+ rules(HoArg : x -> y))

  RenameSDef : 
    ExtSDefInl(x, args1, args2, s) -> ExtSDefInl(y, args1, args2, s)
    where <length> args1 => n
        ; <length> args2 => m
        ; <concat-strings>[<cify> x, "_", <int-to-string> n, "_", <int-to-string> m] => y
        ; rules(RenameVar : (x, (n,m)) -> y)
        ; (<HoArg> x; rules(HoArg :- x)
                   <+ rules(HoArg : x -> y))

  RenameCall : 
    Call(SVar(x), ss) -> Call(SVar(y), ss)
    where <length> ss => n
        ; ( <RenameVar> (x,n) => y <+ <HoArg> x => y )

  RenameCall : 
    CallT(SVar(x), ss, ts) -> CallT(SVar(y), ss, ts)
    where <length> ss => n
        ; <length> ts => m
        ; ( <RenameVar> (x,(n,m)) => y <+ <HoArg> x => y )

