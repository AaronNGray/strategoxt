module stratego/strc/ag-front/register-semantic-rules
imports
  libstratego-lib
  libstratego-ag
  Stratego

imports
  stratego/strc/ag-front/get-term-type
  stratego/strc/ag-front/stratego-attributes

// register semantic-rules & attributes
strategies
  find-production =
    get-semantic-rule-agterm
  ; dbg(|"try to find this production: ")
  ; get-term-type => type
  ; dbg(|"with this type: ")
  ; !(<get-term-type-production>, <get-term-type-main-labels>)
  ; dbg(|"with this production and labels: ")

// TODO:
// - handle inherited productions to optimize and remove the merging feature.
strategies
  is-semantic-rule-collection =
    ?|[ @ ~_ : ~*_ ]|
  + ?|[ @ ~_ : where ~_ ~*_ ]|

  get-semantic-rule-agterm =
    ?|[ @ ~<id> : ~*_ ]|
  + ?|[ @ ~<id> : where s ~*_ ]|

  get-semantic-rule-condition =
    ?|[ @ ~_ : where ~<id> ~*_ ]|

  get-semantic-rule-rule =
    ?|[ @ ~_ : ~<id> ]|
  + ?|[ @ ~_ : where s ~<id> ]|

  fetch-right-most-label =
    fetch-uses
  ; map( ?AttrKey(Label(<id>), _) )
  ; list-max
  ; inc

  get-semantic-rule-pattern-condition(| prod, code ) =
    get-semantic-rule-agterm => l
  ; <fetch-right-most-label> (prod, code) => i
  ; <add-indices> l
  ; fetch-elem(?(i, AGMatch |[ t where ~<id> ]|))

strategies
  register-semantic-rule =
    restore(
      ?sr
    ; <find-production> sr => (prod, labels)
    ; < get-semantic-rule-rule
      ; escape-stratego-attributes(|labels)
      > sr => code
    ; <fetch-produce> (prod, code) => p
    ; <Rprod-od> prod
    ; filter(test(get-rule-produce => p)) // Rrule-p-key ?!
    ; not(?[_, _| _]; err-msg(|"ICE: from register-semantic-rule."))
    ; ( ?[<id>]
      ; where(Any2Text; dbg(|"existing register rule:"))
     <+ <new-default-rule> (code, prod)
      ; where(Any2Text; dbg(|"register a new default rule:"))
      ) => this
    ; restore(
        if ![]
         ; try(![<get-semantic-rule-condition> sr | <id>])
         ; try(![<get-semantic-rule-pattern-condition(| prod, code )> sr | <id>])
         ; not([]); concat-statements => s
        then
          <escape-stratego-attributes(|labels)> s => s'
        ; <merge-with-conditional-rule> (this, s', code)
        else
          <merge-with-default-rule> (this, code)
        end
      , <err(|[
          "Cannot merge the following rule with "
        , <Any2Text> this, "."
        ])> code
      )
    ; where(<dbg(|"register rule: ")> (<id>, <Any2Text> prod, <get-rule-code>))
    , err(|"Cannot register the following semantic rule:")
    )

  register-attribute-propagation =
    ?|[ @ ~path x ]|
  ; rules(PropPath: x -> path)

  register-attribute-propagation =
    ?|[ @ ~path x = s ]|
  ; rules(PropPath: x -> path)
  ; rules(PropStra: x -> s)

  register-semantic-rules =
    where(alltd(register-attribute-propagation))
  ; where(
      collect( is-semantic-rule-collection )
    ; map(register-semantic-rule)
    )

  clean-semantic-rules =
    where(
      all-rules
    ; list-loop(try(remove-unbound-default-calls))
    )
