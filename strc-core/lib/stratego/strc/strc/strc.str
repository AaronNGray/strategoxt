/** 
 * This module glues together the components that make up the Stratego
 * compiler. It is based on XTC, the transformation tool composition
 * model. 
 */

module strc

imports
  libstratego-xtc 
  libstratego-lib

  stratego/strc/strc/strc-options
  stratego/strc/strc/format-check

strategies

  strc-strc = 
    strc-command-line-options
    ; log-timed(strc-compile | "Compilation succeeded", 1)
    ; <exit> 0
   <+ log(|Error(),["Compilation failed (", <run-time ; real-to-string(|2)>, " secs)"])
    ; <exit> 1

strategies

  strc-compile =
    xtc-input(
      strc-front-end
      ; strc-optimize
      ; strc-export-external-defs
      ; strc-back-end
      ; strc-c-compile
    )

  strc-front-end =
    log-timed(
      strc-get-infile
      ; strc-pack-stratego-trm ; tfc1(|"Stratego-Sugar-Cong", "pack")
      ; strc-output-ast
      ; frontend
      ; strc-output-frontend			
    | "Front-end succeeded"
    , 1
    )

  strc-optimize =
    log-timed( 
      dbg(|"starting optimizer")
      ; optimizer
    | <concat-strings>["Optimization succeeded -O ",<get-config; int-to-string>"-O"]
    , 1
    )

  strc-export-external-defs =
    strc-if-lib(where(
      log-timed(
        defs-to-external-defs
	; where(
	    <not(eq)>(<get-config>"baseout",<get-config>"basein")
	    <+ <get-config>"baseout"
	       ; debug(!"name for library same as name for base file: ")
	       ; fail
          )
        ; write-to
        ; copy-to(strc-getoutfile(!".rtree") => file1)
	; log(|Info(), ["Abstract syntax in '", file1, "'"])

        ; xtc-transform(!"pp-stratego", !["--abstract" | <pass-verbose> ] )
        ; copy-to(strc-getoutfile(!".str") => file2)
	; log(|Info(), ["Concrete syntax in '", file2, "'"])
      | "Export of externals succeeded"
      , 1
      )
    ))

strategies

  strc-back-end =
    log-timed(
      lift-definitions
      ; tfc2(|"Stratego-Core", "be-lift")
      ; canonicalize
      ; tfc2(|"Stratego-Core", "be-can")
      ; simplify1
      ; tfc3(|"Stratego-Core", "be-sim")
      ; mark-bound-unbound-vars
      ; tfc2(|"Stratego-Core", "be-buv")
      ; escaping-variables
      ; tfc2(|"Stratego-Core", "be-esc")
      ; stratego-to-c
      ; tfc-c(|1,"be-c")

      ; write-to
      ; strc-ac2abox
      ; strc-abox2text
      ; rename-to(strc-getoutfile(!".c"))
    | "Back-end succeeded"
    , 1 
    )

strategies // Compile generated C code

  strc-c-compile =
     where(<get-config> "-c")
  <+ log-timed(
       strc-c-to-object-code 
       ; strc-link-object-code
     | "C compilation succeeded"
     , 1 
     )

  strc-c-to-object-code :
    FILE(cfile) -> FILE(ofile)
    where log(|Notice(), "Compiling C code")
	; strc-getoutfile(!".lo") => ofile
	; <strc-call-backend>
	    (<xtc-find> "libtool", [
              "--mode=compile", <xtc-find> "cc" | <concat> [<get-config> "-Xcc", ["-c", cfile,"-o", ofile]]])

  strc-link-object-code :
    FILE(ofile) -> FILE(target)
    where
      log(|Notice(), "Linking object code")
      ; (<get-config> "-o" <+ strc-getoutfile(strc-get-final-suffix)) => target
      ; strc-if-lib(strc-link-library(|ofile, target), strc-link-program(|ofile, target))

  strc-link-program(|ofile, target) =
    <strc-call-backend>
      (<xtc-find> "libtool", [
        "--mode=link", <xtc-find> "cc", ofile, "-o", target | <get-config> "-Xlinker"])

/**
 * Linking a library using libtool
 */
strategies

  strc-link-library(|ofile, target) =
      <call>
        (<xtc-find> "libtool", [
          "--mode=link", <xtc-find> "cc", ofile, "-o", target, "-rpath", <strc-libdir> target, "-avoid-version", "-no-undefined" | <get-config> "-Xlinker"])
    ; if <get-config> DisableInstall() then
        log(|Info(), ["Don't forget to install the library using: libtool --mode=install cp ", target, " ", <strc-libinstallpath> target])
      else
        log(|Info(), "Installing library")
        ; <call>
            (<xtc-find> "libtool", ["--mode=install", "cp", target, <strc-libinstallpath> target])
      end
      

  /**
   * Given a target, return the libdir.
   * @type String -> String
   */
  strc-libdir =
    <get-config> LibDir()
    ; abspath

    <+ dirname
       ; abspath

  /**
   * Given a target, return the location for installing the library.
   *
   * @type String -> String
   */
  strc-libinstallpath =
    <conc-strings> (<get-config> LibDir(), "/", <base-filename>)
    ; abspath
    <+ abspath


strategies

  /**
   * FIXME enable the silent backend calls if the STR-853 has been solved.
   */
  strc-call-backend =
    ?(tool,args)
  ; log(|Notice(),<separate-by(|" ") ; concat-strings>["Command:",tool|args])
  ; //if <geq>(<verbosity>,2) then
      call
/*    else
      where(
        xtc-new-file => f
      ; open => fd
      )
    ; ( call(|None,Some(fd),Some(fd))
      ; <close>fd
     <+ <close>fd
      ; <read-text-file>f
      ; log(|Error(),"Command failed :")
      ; debug
      ; fail
      )
    end
*/

strategies

  // building a library

  strc-if-lib(s1, s2) = where(<get-config>"--library") < s1 + s2
  strc-if-lib(s)      = strc-if-lib(s, id)
  strc-if-not-lib(s)  = strc-if-lib(id, s)
  strc-pass-library   = strc-if-lib(!["--library"], ![])

strategies

  log-timed(s|msg,level) =
    if <geq>(<get-config> "--statistics", level) then 
      where(times => start)
    ; s 
    ; where(
        <diff-times>(<times>,start)
      ; <concat-strings>[ <align-left>(' ', msg, 27)
                        , " : [user/system] = ["
                        , <self-children-user-time; ticks-to-seconds ; real-to-string(|2)>
                        , "s/"
                        , <self-children-sys-time; ticks-to-seconds ; real-to-string(|2)>
                        , "s]"
                        ]
      ; log(|Info(),<id>)
      )
    else
      s
    end

  // save intermediate results

  save-as(ext) = 
    where(
      copy-to(strc-getoutfile(<conc-strings> (".sci", <ext>)) => file1)
      ; log(|Info(), ["abstract syntax in '", file1, "'"] )
      ; xtc-transform(!"stratego-parenthesize", pass-verbose)
      ; xtc-transform(!"stratego2abox", pass-verbose)
      ; xtc-transform(!"abox2text", pass-verbose)
      ; copy-to(<conc-strings> (file1, ".txt") => file2)
      ; log(|Info(), ["concrete syntax in '", file2, "'"])
    )

  save-as1(ext) = if-keep1(save-as(ext))
  save-as2(ext) = if-keep2(save-as(ext))
  save-as3(ext) = if-keep3(save-as(ext))
  save-as4(ext) = if-keep4(save-as(ext))
  save-as5(ext) = if-keep5(save-as(ext))
  save-as6(ext) = if-keep6(save-as(ext))
  save-as7(ext) = if-keep7(save-as(ext))
//  save-as8(ext) = if-keep8(save-as(ext))

  strc-output-ast =
    if <get-config> "--ast" then
       write-to
       ; copy-to(strc-getoutfile(!".ast") => file)
       ; notice(|<concat-strings>["Abstract syntax saved in file `", file, "'"])
       ; xtc-io-exit
    end

  strc-output-frontend =
    if <get-config> "-F" then
      write-to
      ; xtc-io-exit
    end

strategies 

  strc-get-infile :
    FILE(file) -> FILE(file)
    where <remove-extension> file => basein
        ; log(|Debug(),["Basename of input file: ",basein])
        ; <set-config> ("basein",  basein)
        ; (<get-config; remove-extension> "-o" 
           <+ !basein; strc-if-lib(<conc-strings> ("lib", <id>))) => baseout
	; log(|Debug(),["Basename of output file: ",baseout])
        ; <set-config> ("baseout", baseout)

  strc-getoutfile(suffix) =
    <conc-strings>(<get-config> "baseout", <suffix>)

  /**
   * @todo Support for $(EXE)?
   */
  strc-get-final-suffix =
    strc-if-lib(!".la", !"")

  strc-dep-name =
    !["--dep", <<get-config> "-o" <+ <get-config> "baseout">]

strategies // COMPILER COMPONENTS

  comp-out(|f) =
    log-timed(xtc-transform(!f, pass-verbose) | <comp-msg>f, 2)

  comp(|f) =
    log-timed(xtc-transform(!f, !["-b" | <pass-verbose> ]) | <comp-msg>f, 2)

  comp(|f,args) =
    log-timed(xtc-transform(!f, <concat>[["-b"], <pass-verbose>, args]) | <comp-msg>f, 2)

  comp-msg = <concat-strings>["  ",<id>]

// FRONTEND

  strc-pack-stratego-trm = 
    pack-stratego-trm(|<concat> [
          <strc-dep-name>, <strc-get-include-dirs>, <pass-keep>,
	  <get-config < !["--asfix"] + ![]> "--asfix",
	  <get-config < !["--format-check", <int-to-string>] + ![]> "--format-check",
	  <get-config < !["--prefer-str"] + ![]> "--prefer-str"
    ])

// BACK-END

  strc-ac2abox = 
    where(
      if <get-config>"--indent-c" then
        !"C-pretty.pp.af"
      else
        !"C.pp.af"
      end => pp-table 
    )
  ; comp(|"ast2abox", ["-p", <xtc-find> pp-table ])
    
  strc-abox2text = 
    comp-out(|"abox2text")
