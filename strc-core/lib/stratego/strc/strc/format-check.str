module format-check

strategies

  tfc1(|format, phase) = tfc(|format, 1, phase)
  tfc2(|format, phase) = tfc(|format, 2, phase)
  tfc3(|format, phase) = tfc(|format, 3, phase)
  tfc4(|format, phase) = tfc(|format, 4, phase)
  tfc5(|format, phase) = tfc(|format, 5, phase)
  tfc6(|format, phase) = tfc(|format, 6, phase)

  tfc(|format, n, phase) = 
    if <geq>(<get-config> "--format-check", n) then
      where(
        write-to
        ; fc(|format, n, phase)
      )
    else
      where(if-keep(write-to; save-as(!phase)|<inc>n))
    end

  tfc-c(|n, phase) = 
    if <geq>(<get-config> "--format-check", n) then
      where(
        write-to
        ; fc-c(|n, phase)
      )
    else
      where(if-keep(write-to; save-as(!phase)|<inc>n))
    end

strategies

  // format checking

  fc1(|format, phase) = fc(|format, 1, phase)
  fc2(|format, phase) = fc(|format, 2, phase)
  fc3(|format, phase) = fc(|format, 3, phase)
  fc4(|format, phase) = fc(|format, 4, phase)
  fc5(|format, phase) = fc(|format, 5, phase)
  fc6(|format, phase) = fc(|format, 6, phase)

  fc(|format, n, phase) =
    if <geq>(<get-config> "--format-check", n) then
      fc(|format, phase)
    end
    ; if-keep(save-as(!phase)|<inc>n)

  fc-c(| n, phase) =
    if <geq>(<get-config> "--format-check", n) then
      fc(|"C", phase)
    end
    ; if-keep(
        where(
          copy-to(strc-getoutfile(<conc-strings>(".",phase)) => file1)
        ; log(|Info(), ["abstract syntax in '", file1, "'"] )
        ; xtc-transform(!"pp-c")
        ; copy-to(<conc-strings> (file1, ".txt") => file2)
        ; log(|Info(), ["concrete syntax in '", file2, "'"])
        )
      | <inc>n
      )

  fc(|format, phase) =
    where(
      <concat-strings>[format, ".rtg-nf"]
      ; xtc-find => format'
    );
    if not(log-timed( xtc-transform(!"format-check", 
                         !["--fast", "-b", "--rtg-nf", format', "--verbose", "0"])
                | <concat-strings>["  FC '",format,"'"]
                , 2
                ))
    then
      if !phase => "pack" then
        fatal-err(|<concat-strings>[
          "\n  The result of packing your Stratego program resulted in a file\n",
          "  with a wrong format. This is probably caused by the use of a\n",
          "  .rtree file produced by an old version of Stratego, or by a \n",
          "  concrete syntax embedding using an old syntax of Stratego.\n",
          "  Recompile with the option '--format-check 1' to discover which\n",
          "  module caused the problem."
        ])
      else
	save-as(!<concat-strings>[".", phase, ".", format])
	; ?FILE(name)
	; fatal-err(| <concat-strings>[
	    "file ", name, "does not satisfy format ", format, 
	    "\nThis indicates a bug in the compiler\n",
	    "Please notify stratego-bugs@cs.uu.nl"
          ])
      end
      ; fail
    end
