module terms-01
imports
  libstratego-lib
  libstratego-lazy

signature
  constructors
    Node: Node -> Node
    Leaf: Node

attributes
  @ Node(Node(n)):
    root.parity := n.parity
//    .lookup(|t) := id.parity


//  @ Node(n).parity2 := n.parity2


  @ Node(Leaf()):
    root.parity := 1

  @ Leaf():
    root.parity := 0

/*
  @ old@Node(Node(n)) -> new@rhs'
    where rhs' := <s> n; x := rhs'.foo
          ;
  :
    where(0 == old.parity; rhs'.bla := foo)
    .errors := <concat> [old.errros, new.errors]
    new.context := old.context
    old.stuff := new.stuff
*/

strategies
  get-lazy-attribute(|name) =
    id{one( ?(name, v) )} => tree
  ; !v

  get-attribute(|name) =
    get-lazy-attribute(|name) => v
  ; get-value(!v)

  get-parity =
    debug(!"input: ")
  ; compute-Node
  ; get-attribute(|"parity")
  ; debug(!"output: ")

  terms-01 =
    <get-parity> Node(Node(Node(Node(Node(Leaf()))))) => 1
  ; <get-parity> Node(Node(Node(Node(Leaf())))) => 0
  ; <get-parity> Node(Node(Node(Leaf()))) => 1
  ; <get-parity> Node(Node(Leaf())) => 0
  ; <get-parity> Node(Leaf()) => 1
  ; <get-parity> Leaf() => 0
  ; <exit> 0

// s = ?tree; tree.parity; id.parity