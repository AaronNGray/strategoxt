module lookup-01
imports
  libstratego-lib
  libstratego-lazy

signature
  sorts Stm StmList Prog

signature
  constructors
    Prog : StmList -> Prog
    SCons: Stm * StmList -> StmList
    SNil : StmList
    Scope: StmList -> Stm
    Decl : String * String -> Stm
    Use  : String -> Stm

attributes
  @ Prog(sl):
    sl.lr_lookup_inh = fail
    root.bu_used_decl := sl.bu_used_decl

  @ Decl(type, i):
    root.bu_used_decl := []
    root.type := <bottomup(rm-annotations); ?Decl(<id>, _)>
    root.i := <bottomup(rm-annotations); ?Decl(_, <id>)>

    root.lr_lookup_syn =
      ?root.i; !root.type
   <+ root.lr_lookup_inh

  @ Scope(s):
    root.lr_lookup_syn = root.lr_lookup_inh

  @ Use(i):
    root.i := <?Use(<bottomup(rm-annotations)>)>
    root.type := <root.lr_lookup_inh> root.i
    root.bu_used_decl := [(root.i, root.type)]

strategies
  compute-String = id

  get-lazy-attribute(|name) =
    id{one( ?(name, v) )} => tree
  ; !v

  get-attribute(|name) =
    get-lazy-attribute(|name)
  ; ?v
  ; get-value(!v)

  find-used-decl =
    debug(!"input: ")
  ; compute-Prog
  ; get-attribute(|"bu_used_decl")
  ; debug(!"output: ")

  lookup-01 =
    <find-used-decl>
      Prog(
        SCons(Decl("int", "a"),
        SCons(Decl("float", "b"),
        SCons(Decl("int", "c"),
        SCons(Use("a"),
        SCons(Scope(
          SCons(Use("a"),
          SCons(Decl("float", "a"),
          SCons(Use("a"),
          SNil()
        )))),
        SCons(Use("b"),
        SCons(Use("a"),
        SNil()
      ))))))))
  ; <exit> 0
