module strc-options
imports stratego-warnings-options
strategies

  command-line-options =
    init-strc-config
    ; parse-options(strc-options)
    ; try(<get-config> "--man"
          ; <copy-file>(<xtc-find> "strc-manual.txt", stdout)
          ; <exit> 0)
    ; try(<get-config> "-v"
          ; strc-version
          ; <exit> 0)
    ; (where(<get-config> "-i")
       <+ <fatal-error> ["no main module specified"])
    ; strc-announce
    ; if-verbose1(where(<get-config> "-i"; debug(!"compiling ")))

  init-strc-config = 
  where(
    <set-config> ("VERSION", <strc-version-number>)
    ; <set-config> ("--verbose", 1)
    ; <set-config> ("--keep", 0)
    ; <set-config> ("--format-check", 0)
    ; <set-config> ("-O", 6)
    ; <set-config> ("-I", [])
    ; <set-config> ("--C-include", 
		   ["<srts/stratego.h>", "<stratego-lib/stratego-lib.h>"])
    ; <set-config> ("-CI", ["-I", <conc-strings>(<xtc-find-path> "SRTS", "/include"),
                            "-I", <conc-strings>(<xtc-find-path> "stratego-lib", "/include"),
                            "-I", <conc-strings>(<xtc-find-path> "ATERM", "/include")])
    ; <set-config> ("-CL",
        [  <concat-strings> ["-L", <xtc-find-path> "stratego-lib", "/lib/stratego-lib"]
        , "-lstratego-lib-native-opt"
        , <concat-strings> ["-L", <xtc-find-path> "SRTS", "/lib/srts"]
        , "-lstratego-runtime-choice-opt"
        , "-lstratego-runtime-opt"
        , <concat-strings> ["-L", <xtc-find-path> "ATERM", "/lib"]
        , "-lATerm-gcc"
        , "-lm"])
    ; <set-config> ("-CD", [])
    ; <set-config> ("-Xlinker", <strc-system-ldflags> ())
    ; <set-config> ("--dr", "new")
  )

  strc-system-ldflags =
    <prim("STRC_SYSTEM_LDFLAGS")> ()

  get-include-dirs =
    <conc> (<get-config> "-I"
           , ["-I", <xtc-find-path> "lib.rtree",
              "-I", <xtc-find-path> "Stratego.rtree",
              "-I", <xtc-find-path> "StrategoRenamed.sdf"]
           )

  olevel(n, s) =
    try(where(<geq>(<get-config> "-O", <n>)); s)

  olevel1(s) = olevel(!1, s)
  olevel2(s) = olevel(!2, s)
  olevel3(s) = olevel(!3, s)
  olevel4(s) = olevel(!4, s)
  olevel5(s) = olevel(!5, s)
  olevel6(s) = olevel(!6, s)

  strc-options =
    input-option
  + output-option

  + ArgOption("-I" + "--Include",        
	where(<post-extend-config>("-I", ["-I", <id>])); !(),
	!"-I d | --Include d Include modules from directory d")

  + ArgOption("--main" + "-m",
	where(<set-config>("-m", <id>)); !(),
	!"--main f | -m f    Main strategy to compile (default: main)\n")

  + Option("--library" + "--lib",
	where(<set-config>("--library", ())); !(),
	!"--library | --lib  Build a library instead of an application\n")


  + ArgOption("--C-include",       
	where(<post-extend-config>("--C-include", [<id>])); !(), 
	!"--C-include h      Include header file h (\"file.h\" or <file.h>)")

  + ArgOption("-CI",       
	where(<extend-config>("-CI", [<id>])); !(),
	!"-CI d              Include C headers from directory d")

  + ArgOption("-CD",
	where(<extend-config>("-CD", [<conc-strings> ("-D", <id>)])); !(),
	!"-CD name=def       Predefine name as a macro, with definition def.")

  + ArgOption("-CL",
	where(<extend-config>("-CL", [<conc-strings> ("-L", <id>)])); !(),
	!"-CL d              Include binary libraries from directory d")

  + ArgOption("-Cl",
	where(<extend-config>("-CL", [<conc-strings> ("-l", <id>)])); !(),
	!"-Cl <lib>          Search the library named <lib> when linking.")

  + ArgOption("-la",
	where(<extend-config>("-CL", [<file-exists <+ <concat-strings; xtc-find <+ <exit> 1> ["lib", <id>, ".la"]>])); !(),
	!"-la <name>         Search the libtool library lib<name>.la when linking.")

  /**
   * @todo Replace -CL with more general -Xlinker
   */
  + ArgOption("-Xlinker",
	where(<extend-config>("-Xlinker", [<id>])); !(),
	!"-Xlinker <arg>     Pass <arg> on to the linker")

  + ArgOption(fail, fail, !"")

  + ArgOption("--xtc-repo",
	where(<extend-config>("-CD", [<concat-strings> ["-DXTC_REPOSITORY()=ATmakeString(\"", <id>, "\")"]])); !(),
	!"--xtc-repo file    Set default XTC repository in output program to file (default: none).")

  + Option("-c",          
	where(<set-config>("-c",())); !(),
	!"-c                 Produce C code only (don't compile)" )

  + Option("--ast",
	where(<set-config>("--ast",())); !(),
	!"--ast              Produce abstract syntax tree" )

  + Option("-F",           
	where(<set-config>("-F",())); !(),
	!"-F                 Produce normalized specification" )

  + ArgOption("--keep",
        where(<set-config>("--keep", <string-to-int>)); !(),
	!"--keep n           Keep intermediate results (0 = keep nothing)" )

  + ArgOption("--format-check",
        where(<set-config>("--format-check", <string-to-int>)); !(),
	!"--format-check n   Format check intermediate results (0 = basic checking)" )

  + ArgOption("-O",
        where(<set-config>("-O", <set-opt-level> )); !(),
	!"-O n               Optimization level (0 = no optimization)" )


  + Option("--fusion",     
	where(<toggle-config>("--fusion",())); !(),
	!"--fusion           Toggle specialize applications of innermost (default: on)" )

  + ArgOption("--dr",
        err(|"--dr flag is deprecated; old dynamic rules are no longer supported"),
	!"--dr : obsolete; old dynamic rules are no longer supported" )

  + ArgOption("--choice-lib"
      , where(set-choice-point-lib); !()
      , !"--choice-lib file  Link with specified choice point library (e.g. /usr/lib/foo.a)"
      )

  + where(<xtc-find-silent> "libcpl-stratego.la")
    ; Option("--cpl"
      , where(<xtc-find; set-choice-point-lib> "libcpl-stratego.la"); !()
      , !"--cpl              Use the Nancy Choice Point Library"
      )

//  + Option("--trace-all",  
//	where(<set-config>("--trace-all",())); !(),
//	!"--trace-all        Instrument all definitions to print tracing information" )
//
//  + ArgOption("-t",        
//	where(<extend-config>("-t", [<id>])); !(),
//	!"-t f               Instrument definition of f to print tracing information\n" )

  + verbose-option

  + Option("-h" + "--help",         
	where(<set-config> ("--help",())); !(),         
	!"-h | --help        Show help")

  + Option("--man",         
	where(<set-config> ("--man",())); !(),         
	!"--man              Show manual page")

  + Option("-v"+"--version",     
	where(<set-config> ("-v",())); !(),         
	!"-v | --version     Display program's version")

  + stratego-warnings-options

  + Option("--asfix",
       where(<set-config>("--asfix",())); !(),
       !"--asfix            Concrete syntax parts are not imploded")


  set-opt-level = 
    string-to-int
  ; if <lt>(<id>,2) then
      !2 ; log(|Warning(),"Optimization levels < 2 are broken, setting optimization level to 2.")
    end
      

  set-choice-point-lib = 
    ?lib
    ; <get-config> "-CL"
    ; map(try( \ "-lstratego-choice" -> lib \ ))
    ; <set-config> ("-CL", <id>)

  pass-dr = !["--dr", <get-config> "--dr"]

  pass-maybe-unbound-warnings =
    <get-config>"--warning"
  ; fetch-elem("maybe-unbound-variables")
  ; !["--maybe-unbound-warnings"]
 <+ !["--no-maybe-unbound-warnings"]


  conflict-short-description(p) = 
      !["STRC compiles Stratego programs to C or executable code.\n",
	"\n",
	"Stratego is a language for program transformation based on the\n",
	"paradigm of rewriting strategies.\n",
	"\n",
	"For documentation see http://www.stratego-language.org\n",  
	"\n",
	"Usage: ", <p>(), " -i file [options]"]

  conflict-long-description(p) = ![
	"Examples:\n",
	"Compile module M.str to an executable\n",
	"  strc -i M\n",
	"Use strategy foo as main strategy instead of main\n",
	"  strc -i M --main foo\n",
	"Compile module M.str to C code in file M.c\n",
	"  strc -i M -c\n",
	"Include modules from directory ../sig\n",
	"  strc -i M -I ../sig\n",
	"\n",  
	"Note that strc is a whole program compiler, i.e, it\n",  
	"compiles all (recursively) imported modules into\n",  
	"a single C source file.\n",  
	"\n",  
	"Report bugs to <stratego-bugs@cs.uu.nl>\n"
  ]

  strc-version =
    where(<printnl>(stdout, 
	  ["STRC ", <get-config> "VERSION", "\n\n",
	   "Copyright (C) 1998-2005 Eelco Visser <visser@acm.org>\n",
	   "\n",
	   "This library is free software; you can redistribute it and/or\n",
	   "modify it under the terms of the GNU Lesser General Public\n",
	   "License as published by the Free Software Foundation; either\n",
	   "version 2 of the License, or (at your option) any later version.\n"]))

  strc-version-number = prim("VERSION_TERM")

  strc-announce =
    if-verbose2(strc-version)
