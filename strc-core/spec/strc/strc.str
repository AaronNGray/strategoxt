/** 
 * This module glues together the components that make up the Stratego
 * compiler. It is based on XTC, the transformation tool composition
 * model. 
 */

module strc
imports liblib strc-options
strategies

  strc = 
    command-line-options
    ; profile'(if-verbose1(<printnl>(stderr, ["-----\ncompilation succeeded:   " | <id>])), 
                compile)
    ; if-verbose2(<printnl>(stderr, ["compilation succeeded (", <run-time>, " secs)"]))
    ; <exit> 0
   <+ <printnl>(stderr, ["compilation failed (", <run-time>, " secs)"])
      ; <exit> 1

strategies

  compile =
    xtc-input(
      front-end
      //; optimize
      ; export-external-defs
      ; back-end
      ; c-compile
    )

  front-end =
    if-verbose2(dbg(|"front-end: "));
    profile'(if-verbose1(<printnl>(stderr, ["front-end succeeded:     " | <id>])), 
      get-infile
      ; pack-stratego				; fc(|"Stratego-Sugar-Cong")
      ; output-ast
      ; if-not-lib(add-main)
      ; repair-types				; fc(|"Stratego-Sugar-Cong")
      ; pre-desugar				; fc(|"Stratego-Sugar-1")
      ; combine-sections			; fc(|"Stratego-Sugar-1")
      ; variables-to-constructors		; fc(|"Stratego-Sugar-1")
      ; raise-annotations			; fc(|"Stratego-Sugar-2")
      ; define-lrules				; fc(|"Stratego-Sugar-2")
      ; lift-dynamic-rules			; fc(|"Stratego-Sugar-2")
      ; stratego-desugar			
      ; raise-annotations			; fc(|"Stratego-Sugar-3")
      ; use-def					
      ; check-constructors			; fc(|"Stratego-Sugar-3")
      ; expand-overlays				; fc(|"Stratego-Sugar-3")
      ; rules-to-sdefs				; fc(|"Stratego-Sugar-3")
      ; desugar-list-matching			; fc(|"Stratego-Sugar-4")
      ; desugar-default-vardec			; fc(|"Stratego-Sugar-4")
      ; introduce-congdefs			; fc(|"Stratego-Sugar-4")
      ; rename-vars				; fc(|"Stratego-Sugar-4")
      ; desugar 				; fc(|"Stratego-Sugar-5")
      ; output-frontend				; fc(|"Stratego-Sugar-5")
      ; if-lib(extract-all, extract)		; fc(|"Stratego-Sugar-5")
      ; stratego-warnings			; fc(|"Stratego-Sugar-5")
      ; rename-defs				; fc(|"Stratego-Sugar-5")
      ; simplify1				; fc(|"Stratego-Sugar-Cong")
      ; define-congruences			; fc(|"Stratego-Core")
    )

  optimize =
    if-verbose2(say(!"optimization"));
    profile'(if-verbose1(<printnl>(stderr, ["optimization succeeded:  " | <id>])), 
	if-verbose3(where(<get-config> "-O"; debug(!"optimization level: ")))
	// SIMPLIFICATION
        ; olevel1(	
	    simplify1
            ; save-as1(!".opt1")
 	  )
	// INNERMOST FUSION
        ; olevel2(
	    try(where(not(<get-config> "--fusion"))
		; fusion
            	; save-as2(!".opt2")
            )
          )
	// INLINING
	// inline small definitions, congruences
        ; olevel4(
	    worker-wrapper
            ; save-as6(!".opt3a")
	    ; inline
	    ; dead-def-elim
            ; save-as4(!".opt3")
	    ; simplify1
          )
        ; define-congruences
	// CONSTANT PROPAGATION
        ; olevel4( 
	    const-prop
	    ; bound-unbound-vars
	    ; dead-var-elim
	    ; simplify3
            ; save-as4(!".opt4")
          )
	// PATTERN MATCH COMPILATION
        ; olevel2( 
	    compile-match
	    ; desugar-case
            ; save-as2(!".opt5")
	  )
	// INLINING 
        // inline local definitions introduced by pattern match compilation
        ; olevel5(
	   inline
           ; save-as5(!".opt7")
	   ; dead-def-elim
           ; save-as5(!".opt8")
          )
	// CONSTANT PROPAGATION
        ; olevel3(
	    simplify2 // lift term arguments from (prim) calls
            ; save-as3(!".opt9")
            ; const-prop
	    ; save-as3(!".opt10")
	    ; bound-unbound-vars
	    ; save-as3(!".opt11")
	    ; dead-var-elim
            ; save-as3(!".opt12")
	  )
	// SIMPLIFICATION
        ; olevel1(
	    simplify3
            ; save-as1(!".opt13")
            ; save-as1(!".opt14")
          )
    )
strategies

  export-external-defs =
    if-lib(where(
      if-verbose2(say(!"export-external-defs"));
      profile'(if-verbose1(<printnl>(stderr, ["export-external-defs succeeded:      " | <id>])), 
        defs-to-external-defs
	; where(
	    <not(eq)>(<get-config>"baseout",<get-config>"basein")
	    <+ <get-config>"baseout"
	       ; debug(!"name for library same as name for base file: ")
	       ; fail
          )
        ; copy-to(get-outfile(!".rtree") => file1)
        ; xtc-transform(!"pp-stratego", !["--abstract" | <pass-verbose> ] )
        ; copy-to(get-outfile(!".str") => file2)
        ; say(!["abstract syntax in", file1, " concrete syntax in ", file2])
      )
    ))

strategies

  back-end =
    if-verbose2(say(!"back-end"));
    profile'(if-verbose1(<printnl>(stderr, ["back-end succeeded:      " | <id>])), 
      canonicalize
      ; save-as1(!".can")
      ; fc(|"Stratego-Core")
      ; olevel1(
          lift-definitions
      	  ; save-as1(!".opt15")
          ; simplify1
      	  ; save-as1(!".opt16")
          ; fc(|"Stratego-Core")
        )
      ; olevel3(
	  bound-unbound-vars
      	  ; save-as3(!".opt17")
          ; fc(|"Stratego-Core")
	)
      ; s2c
      ; fc(|"C")
      ; ac2abox
      ; abox2text
      ; rename-to(get-outfile(!".c"))
    )

strategies // Compile generated C code

  c-compile =
     where(<get-config> "-c")
  <+ profile'(if-verbose1(<printnl>(stderr, ["C compilation succeeded: " | <id>])), 
       c-to-object-code 
       ; link-object-code
     )

  c-to-object-code :
    FILE(cfile) -> FILE(ofile)
    where if-verbose2(say(!"compiling C code"))
	; get-outfile(!".o") => ofile
        ; <if-verbose3(debug); call> 
	   ("gcc", <concat> [<get-config> "-CI", <get-config> "-CD", ["-c", cfile,"-o", ofile]])

  link-object-code :
    FILE(ofile) -> FILE(target)
    where if-verbose2(say(!"linking object code"))
	; (<get-config> "-o" <+ get-outfile(!"")) => target
        ; <if-verbose3(debug); call> 
	    (<xtc-find> "libtool", [
              "--mode=link", "gcc", ofile, "-o", target
              | <conc> (<get-config> "-CL", <get-config> "-Xlinker")])

strategies

  // building a library

  if-lib(s1, s2) = where(<get-config>"--library") < s1 + s2
  if-lib(s)      = if-lib(s, id)
  if-not-lib(s)  = if-lib(id, s)
  pass-library   = if-lib(!["--library"], ![])

strategies

  // format checking

  fc(|format) =
    where(
      <concat-strings>[format, ".rtg-nf"]
      ; xtc-find => format'
    );
    where(
      xtc-transform(!"format-check", !["--fast", "-b", "--rtg-nf", format', "--verbose", "1"])
    )

strategies

  // save intermediate results

  save-as(ext) = 
    where(
      copy-to(get-outfile(<conc-strings> (".sci", <ext>)) => file1)
      ; xtc-transform(!"pp-stratego", !["--abstract" | <pass-verbose> ] )
      ; copy-to(<conc-strings> (file1, ".txt") => file2)
      ; say(<concat-strings> ["abstract syntax in `", file1, "', concrete syntax in `", file2, "'"])
    )

  save-as1(ext) = if-keep1(save-as(ext))
  save-as2(ext) = if-keep2(save-as(ext))
  save-as3(ext) = if-keep3(save-as(ext))
  save-as4(ext) = if-keep4(save-as(ext))
  save-as5(ext) = if-keep5(save-as(ext))
  save-as6(ext) = if-keep6(save-as(ext))
  save-as7(ext) = if-keep7(save-as(ext))
  save-as8(ext) = if-keep8(save-as(ext))

  output-ast =
    try(where(<get-config> "--ast")
       ; copy-to(get-outfile(!".ast") => astfile)
       ; say(!["abstract syntax (after parsing) written to file"])
       ; xtc-io-exit
    )

  output-frontend =
    try(where(<get-config> "-F")
       ; (extract-all <+ <fatal-error> ["extracting all definitions failed"])
       ; copy-to(get-outfile(!".tree") => file)
       ; say(!["abstract syntax (after frontend) written to file"])
       ; xtc-io-exit
    )

strategies

  /**
   * Adding main strategy
   * 
   * What happens if the specification already contains a main strategy? 
   */

  add-main =
    try(where(<get-config> "-m" => m; if-verbose2(debug(!"main strategy is: ")))
        ; if-not-lib(xtc-io-transform(try(AddMain(|m)))))
    ; save-as3(!".with-main")

  AddMain(|main) : 
    Specification(sects) -> 
    Specification([ Strategies([SDef("main", [], Call(SVar(main), []))]) 
                  | sects ])
      where
        <not("main")>main
      ; <try(check-other-main)>sects

  check-other-main =
    fetch-elem( Strategies(fetch-elem(is-main)) + Rules(fetch-elem(is-main)) )
  ; say(!"Adding main strategy even though one is already present!")

  is-main =
    ?SDef("main", [], _)
  + ?RDef("main", [], _)
 
strategies 

  get-infile :
    FILE(file) -> FILE(file)
    where <remove-extension> file => basein
	; if-verbose3(debug(!"basein: "))
        ; <set-config> ("basein",  basein)
        ; (<get-config; remove-extension> "-o" <+ !basein) => baseout
	; if-verbose3(debug(!"baseout: "))
        ; <set-config> ("baseout", baseout)

  get-outfile(suffix) =
    <conc-strings>(<get-config> "baseout", <suffix>)

  dep-name =
    !["--dep", <<get-config> "-o" <+ <get-config> "baseout">]

strategies // COMPILER COMPONENTS

  comp-out(|f) =
    xtc-transform(!f, pass-verbose)

  comp(|f) =
    xtc-transform(!f, !["-b" | <pass-verbose> ])

  comp(|f,args) =
    xtc-transform(!f, <concat>[["-b"], <pass-verbose>, args])

// FRONTEND

  pack-stratego			= comp(|"pack-stratego", 
					<concat> [<dep-name>, <get-include-dirs>, <pass-keep>,
					  <get-config < !["--asfix"] + ![]> "--asfix"])
  pre-desugar			= comp(|"pre-desugar")
  repair-types			= comp(|"repair-types")
  combine-sections		= comp(|"combine-sections")
  variables-to-constructors	= comp(|"variables-to-constructors")
  raise-annotations		= comp(|"raise-annotations")
  define-lrules			= comp(|"define-lrules")
  lift-dynamic-rules		= comp(|"lift-dynamic-rules")
  stratego-desugar		= comp(|"stratego-desugar")
  use-def			= comp(|"use-def", <pass-maybe-unbound-warnings>)
  check-constructors		= comp(|"check-constructors")
  expand-overlays		= comp(|"expand-overlays")
  rules-to-sdefs		= comp(|"rules-to-sdefs")
  desugar-list-matching		= comp(|"desugar-list-matching")
  desugar-default-vardec	= comp(|"desugar-default-vardec")
  introduce-congdefs		= comp(|"introduce-congdefs")
  rename-vars			= comp(|"rename-vars")
  desugar			= comp(|"desugar")
  extract-all			= comp(|"extract-all")
  extract			= comp(|"extract")
  stratego-warnings		= comp(|"stratego-warnings", <pass-warnings>)
  rename-defs			= comp(|"rename-defs")
  simplify1			= comp(|"simplify1")
  define-congruences		= comp(|"define-congruences")


// OPTIMIZER

  fusion 		= comp(|"fusion")
  inline 		= comp(|"inline")
  dead-def-elim 	= comp(|"dead-def-elim", <if-lib(!["--only-local"],![])>)
  compile-match 	= comp(|"compile-match")
  desugar-case 		= comp(|"desugar-case")
  const-prop 		= comp(|"const-prop")
  bound-unbound-vars 	= comp(|"bound-unbound-vars")
  dead-var-elim 	= comp(|"dead-var-elim")
  worker-wrapper 	= comp(|"worker-wrapper")
  simplify2 		= comp(|"simplify2")
  simplify3 		= comp(|"simplify3")
  canonicalize 		= comp(|"canonicalize")
  lift-definitions 	= comp(|"lift-definitions")
  bound-unbound-vars 	= comp(|"bound-unbound-vars")

// EXPORT

  defs-to-external-defs = comp(|"defs-to-external-defs", ["--no-inlining"])

// BACK-END

  ac2abox 	= comp(|"ast2abox", ["-p", <xtc-find> "C-pretty.pp"])
  abox2text 	= comp-out(|"abox2text")
  s2c 		= comp(|"s2c",  
	 		<concat>[
			  <get-config; mapconcat(!["--C-include", <id>])> "--C-include",
			  <pass-library>
			])

