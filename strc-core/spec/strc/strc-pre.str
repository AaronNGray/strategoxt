/**
 * Temporary tool for testing the normalize-spec component
 * this tool `strc-pre' performs all the usual steps *until* normalize-spec
 * Intermediate result is then put out and can be piped to a normalize-spec
 * that is being tested.
 */

module strc-pre
imports liblib strc-options sugar
strategies

  strc-pre = 
    command-line-options
    ; compile

strategies

  compile =
    xtc-input(
      front-end
    )

  output-preproc =
    try( copy-to(get-outfile(!".tree") => file)
       ; say(!["preprocessed syntax (after pre-desugar) written to file"])
       ; xtc-io-exit
    )

  front-end =
    if-verbose2(debug(!"front-end: "));
    profile'(if-verbose1(<printnl>(stderr, ["front-end succeeded:     " | <id>])), 
      get-infile
      ; pack-stratego
      ; output-ast
      ; if-not-lib(add-main)
      ; repair-types
      ; pre-desugar
      ; save-as5(!".pre-desugar")
      ; output-preproc

// nothing follows...

      ; normalize-spec
      ; save-as5(!".normalize-spec")
      ; use-def
      ; check-constructors
      ; spec-to-sdefs
      ; save-as5(!".spec-to-sdefs")
      ; rename-vars
      ; save-as5(!".renamed")
      ; desugar
      ; save-as5(!".desugared")
      ; output-frontend
      ; if-lib(extract-all, extract)
      ; warnings
      ; stratego-nf 
      ; rename-defs
    )

strategies

  // building a library

  if-lib(s1, s2) = where(<get-config>"--library") < s1 + s2
  if-lib(s)      = if-lib(s, id)
  if-not-lib(s)  = if-lib(id, s)
  pass-library   = if-lib(!["--library"], ![])

strategies

  // save intermediate results

  save-as(ext) = 
    where(
      copy-to(get-outfile(<conc-strings> (".sci", <ext>)) => file1)
      ; xtc-transform(!"pp-stratego", !["--abstract" | <pass-verbose> ] )
      ; copy-to(<conc-strings> (file1, ".txt") => file2)
      ; say(<concat-strings> ["abstract syntax in `", file1, "', concrete syntax in `", file2, "'"])
    )

  save-as1(ext) = if-keep1(save-as(ext))
  save-as2(ext) = if-keep2(save-as(ext))
  save-as3(ext) = if-keep3(save-as(ext))
  save-as4(ext) = if-keep4(save-as(ext))
  save-as5(ext) = if-keep5(save-as(ext))
  save-as6(ext) = if-keep6(save-as(ext))
  save-as7(ext) = if-keep7(save-as(ext))
  save-as8(ext) = if-keep8(save-as(ext))

  output-ast =
    try(where(<get-config> "--ast")
       ; copy-to(get-outfile(!".ast") => astfile)
       ; say(!["abstract syntax (after parsing) written to file"])
       ; xtc-io-exit
    )

  output-frontend =
    try(where(<get-config> "-F")
       ; (extract-all <+ <fatal-error> ["extracting all definitions failed"])
       ; copy-to(get-outfile(!".tree") => file)
       ; say(!["abstract syntax (after frontend) written to file"])
       ; xtc-io-exit
    )

strategies

  /**
   * Adding main strategy
   * 
   * What happens if the specification already contains a main strategy? 
   */

  add-main =
    try(where(<get-config> "-m" => m; if-verbose2(debug(!"main strategy is: ")))
        ; if-not-lib(xtc-io-transform(try(AddMain(|m)))))
    ; save-as3(!".with-main")

  AddMain(|main) : 
    Specification(sects) -> 
    Specification([ Strategies([SDef("main", [], Call(SVar(main), []))]) 
                  | sects ])
      where
        <not("main")>main
      ; <try(check-other-main)>sects

  check-other-main =
    fetch-elem( Strategies(fetch-elem(is-main)) + Rules(fetch-elem(is-main)) )
  ; say(!"Adding main strategy even though one is already present!")

  is-main =
    ?SDef("main", [], _)
  + ?RDef("main", [], _)
 
strategies 

  get-infile :
    FILE(file) -> FILE(basein)
    where <basename> file => basein
	; if-verbose3(debug(!"basein: "))
        ; <set-config> ("basein",  basein)
        ; (<get-config; basename> "-o" <+ !basein) => baseout
	; if-verbose3(debug(!"baseout: "))
        ; <set-config> ("baseout", baseout)

  get-outfile(suffix) =
    <conc-strings>(<get-config> "baseout", <suffix>)

  dep-name =
    !["--dep", <<get-config> "-o" <+ <get-config> "baseout">]

strategies // COMPILER COMPONENTS

  comp-out(|f) =
    xtc-transform(!f, pass-verbose)

  comp(|f) =
    xtc-transform(!f, !["-b" | <pass-verbose> ])

  comp(|f,args) =
    xtc-transform(!f, <concat>[["-b"], <pass-verbose>, args])

  pass-warnings = 
    <get-config; mapconcat(!["--warning", <id>])> "--warning"

// FRONTEND

  pack-stratego 	= comp(|"pack-stratego", 
				<concat> [<dep-name>, <get-include-dirs>, <pass-keep>,
				  <get-config < !["--asfix"] + ![]> "--asfix"])
  pre-desugar 		= comp(|"pre-desugar")
  normalize-spec 	= comp(|"normalize-spec", <pass-dr>)
  use-def 		= comp(|"use-def", <pass-maybe-unbound-warnings>)
  check-constructors 	= comp(|"check-constructors")
  spec-to-sdefs 	= comp(|"spec-to-sdefs")
  rename-vars 		= comp(|"rename-vars")
  desugar 		= comp(|"desugar")
  warnings 		= comp(|"stratego-warnings", <pass-warnings>)
  repair-types 		= comp(|"repair-types")
  extract 		= comp(|"extract"); save-as2(!".ext")
  extract-all 		= comp(|"extract-all")
  rename-defs 		= comp(|"rename-defs"); save-as2(!".rn")
  stratego-nf 		= comp(|"Stratego-Normal-Format")
