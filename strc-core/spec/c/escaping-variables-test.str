module escaping-variables-test
imports escaping-variables frame-composition

signature
  constructors
    InScope : Annotation
    PassClosure : String -> Annotation
    CreateClosure : String -> Annotation

strategies

  apply-test(label, s1, s2, input, output1, output2) =
    apply-test(<conc-strings>(<label>, "-1"), s1, input, output1)
    //; apply-test(<conc-strings>(<label>, "-2"), s2, output1, output2)

  escaping-variables-test = 
    test-suite(!"escaping-variables-test", id

	; test-local-term-arg 
  	; test-local-term-var 
  	; test-escaping-term-arg 
  	; test-escaping-local-term-var 
  	; test-pass-escaping-term-arg 

  	; test-call-top-level-strategy 
  	; test-call-nested-strategy 
  	; test-call-parent-in-nested-strategy 
  	; test-recursive-call-nested-strategy 

  	; test-pass-nested-strategy 
  	; test-pass-nested-escaping-strategy 
  	; test-pass-nested-escaping-strategy 

  	; test-local-strategy-arg 
  	; test-escaping-strategy-arg 
  	; test-pass-escaping-strategy-arg 

    )


strategies // term variables

  // arg is a term argument of foo

  test-local-term-arg =
    apply-test(!"test-local-term-arg"
	, mark-escaping-variables
	, annotate-frame-offsets
	, !|[ strategies 
                foo(|arg: ATerm) = ?arg
           ]|
	, !|[ strategies 
                foo~{}(|arg~{}: ATerm) = 
                  ?~id:"arg"{Frames([])}
           ]|
	, !|[ strategies 
                foo~{Offsets(0,0)}(|arg~{}: ATerm) = 
                  ?~id:"arg"{Frames([])}
           ]|
    )

  // 

  test-local-term-var =
    apply-test(!"test-local-term-var"
	, mark-escaping-variables
	, annotate-frame-offsets
	, !|[ strategies 
                foo(|) = {arg: ?arg}
           ]|
	, !|[ strategies 
                foo~{}(|) = 
                  {arg~{}: ?~id:"arg"{Frames([])}}
           ]|
	, !|[ strategies 
                foo~{Offsets(0,0)}(|) = 
                  {arg~{}: ?~id:"arg"{Frames([])}}
           ]|
    )



  // foo should store arg in frame
  // bar retrieves arg from static link

  test-escaping-term-arg =
    apply-test(!"test-escaping-term-arg"
	, mark-escaping-variables
	, annotate-frame-offsets
	, !|[ strategies 
                foo(|arg: ATerm) = 
                  let bar(|) = ?arg
                   in bar(|)
                  end
           ]|
	, !|[ strategies 
                foo~{}(|arg~{Escapes}: ATerm) = 
                  let bar~{}(|) = 
                        ?~id:"arg"{Frames(["bar"])}
                   in bar~{Frames([])}(|)
                  end
           ]|
	, !|[ strategies 
                foo~{Offsets(0,1)}(|arg~{Escapes, Offset(0)}: ATerm) = 
                  let bar~{Offsets(0,0)}(|) = 
                        ?~id:"arg"{Frames(["bar"]),Offset(0)}
                   in bar~{Frames([])}(|)
                  end
           ]|
    )

  // foo should store arg in frame
  // bar retrieves arg from static link

  test-escaping-local-term-var =
    apply-test(!"test-escaping-local-term-var"
	, mark-escaping-variables
	, annotate-frame-offsets
	, !|[ strategies 
                foo(|) = {arg :
                  let bar(|) = ?arg
                   in bar(|)
                  end}
           ]|
	, !|[ strategies 
                foo~{}(|) = {arg~{Escapes} : 
                  let bar~{}(|) = 
                        ?~id:"arg"{Frames(["bar"])}
                   in bar~{Frames([])}(|)
                  end}
           ]|
	, !|[ strategies 
                foo~{Offsets(0,1)}(|) = {arg~{Escapes,Offset(0)} : 
                  let bar~{}(|) = 
                        ?~id:"arg"{Frames(["bar"]),Offset(0)}
                   in bar~{Frames([])}(|)
                  end}
           ]|
    )

  // argument arg of foo escapes and is passed as argument to baz
  //
  // foo should store arg in frame
  // baz should retrieve arg from static link

  test-pass-escaping-term-arg =
    apply-test(!"test-pass-escaping-term-arg"
	, mark-escaping-variables
	, annotate-frame-offsets
	, !|[ strategies 
                foo(|arg: ATerm) = 
                  let bar(|) = baz(|arg)
                   in bar(|)
                  end
                baz(|arg : ATerm) = ?arg
           ]|
	, !|[ strategies 
                foo~{}(|arg~{Escapes}: ATerm) = 
                  let bar~{}(|) = 
                        baz~{Frames(["bar","foo"])}
                            (|arg~{Frames(["bar"])})
                   in bar~{Frames([])}(|)
                  end
                baz~{}(|arg~{}: ATerm) = 
                   ?~id:"arg"{Frames([])}
           ]|
	, !|[ strategies 
                foo~{Offsets(0,1)}(|arg~{Escapes,Offset(0)}: ATerm) = 
                  let bar~{Offsets(0,0)}(|) = 
                        baz~{Frames(["bar","foo"])}
                            (|arg~{Frames(["bar"]),Offset(0)})
                   in bar~{Frames([])}(|)
                  end
                baz~{Offsets(0,0)}(|arg~{}: ATerm) = 
                   ?~id:"arg"{Frames([])}
           ]|
    )


strategies // strategy variables

  // bar calls top-level strategy foo
  // static link passed to foo is static link of bar

  test-call-top-level-strategy =
    apply-test(!"test-call-top-level-strategy"
	, mark-escaping-variables
	, annotate-frame-offsets
	, !|[ strategies 
                foo(|) = id 
                bar(|) = foo(|) 
           ]|
	, !|[ strategies 
                foo~{}(|) = id 
                bar~{}(|) = 
                   foo~{Frames(["bar"])}(|)
           ]|
	, !|[ strategies 
                foo~{"local",Offsets(0,0)}(|) = id 
                bar~{"local",Offsets(0,0)}(|) = 
                   foo~{Frames(["bar"])}(|)
           ]|
    )

  // foo calls local strategy bar
  // static link passed to bar is frame of foo

  test-call-nested-strategy =
    apply-test(!"test-call-nested-strategy"
	, mark-escaping-variables
	, annotate-frame-offsets
	, !|[ strategies 
                foo(|) = 
                  let bar(|) = id
                   in bar(|)
                  end
           ]|
	, !|[ strategies 
                foo~{}(|) = 
                  let bar~{}(|) = id
                   in bar~{Frames([])}(|)
                  end
           ]|
	, !|[ strategies 
                foo~{"local",Offsets(0,0)}(|) = 
                  let bar~{"local",Offsets(0,0)}(|) = id
                   in bar~{Frames([])}(|)
                  end
           ]|
    )

  // nested strategy bar calls parent strategy foo
  // static link of foo call is parent of static link of bar

  test-call-parent-in-nested-strategy =
    apply-test(!"test-call-nested-strategy"
	, mark-escaping-variables
	, annotate-frame-offsets
	, !|[ strategies 
                foo(|) = 
                  let bar(|) = foo(|)
                   in bar(|)
                  end
           ]|
	, !|[ strategies 
                foo~{}(|) = 
                  let bar~{}(|) = 
                        foo~{Frames(["bar","foo"])}(|)
                   in bar~{Frames([])}(|)
                  end
           ]|
	, !|[ strategies 
                foo~{"local",Offsets(0,0)}(|) = 
                  let bar~{"local",Offsets(0,0)}(|) = 
                        foo~{Frames(["bar","foo"])}(|)
                   in bar~{Frames([])}(|)
                  end
           ]|
    )

  // recursive call to (nested) strategy bar
  // static link of call to 

  test-recursive-call-nested-strategy =
    apply-test(!"test-recursive-call-nested-strategy"
	, mark-escaping-variables
	, annotate-frame-offsets
	, !|[ strategies 
                foo(|) = 
                  let bar(|) = bar(|) < id + id
                   in bar(|)
                  end
           ]|
	, !|[ strategies 
                foo~{}(|) = 
                  let bar~{}(|) = 
                        bar~{Frames(["bar"])}(|) < id + id
                   in bar~{Frames([])}(|)
                  end
           ]|
	, !|[ strategies 
                foo~{"local",Offsets(0,0)}(|) = 
                  let bar~{"local",Offsets(0,0)}(|) = 
                        bar~{Frames(["bar"])}(|) < id + id
                   in bar~{Frames([])}(|)
                  end
           ]|
    )

  // closure of ar should be passed to baz
  // foo should create closure for bar and pass it to baz
  // (no need to store the closure in the frame, since there are
  // no other places where it is referred to; closure does not escape)
  // baz applies closure aaa

  test-pass-nested-strategy =
    apply-test(!"test-pass-nested-strategy"
	, mark-escaping-variables
	, annotate-frame-offsets
	, !|[ strategies 
                foo(|) = 
                  let bar(|) = id
                   in baz(bar(|)|)
                  end
                baz(aaa: ATerm -> ATerm|) = aaa(|)
           ]|
	, !|[ strategies 
                foo~{}(|) = 
                  let bar~{Closure("bar_cl")}(|) = id
                   in baz~{Frames(["foo"])}
                        (bar~{Closure("bar_cl"),Frames([])}(|)|)
                  end
                baz~{}(aaa~{}: ATerm -> ATerm|) = 
                  aaa~{Frames([])}(|)
           ]|
	, !|[ strategies 
                foo~{Offsets(0,0)}(|) = 
                  let bar~{Offsets(0,0)}(|) = id
                   in baz~{Frames(["foo"])}
                        (bar~{Frames([])}(|)|)
                  end
                baz~{Offsets(0,0)}(aaa~{}: ATerm -> ATerm|) = 
                  aaa~{Frames([])}(|)
           ]|
    )

  // closure of ar should be passed to baz
  // foo should create closure for bar and pass it to baz
  // the closure should be stored in the frame
  // baz applies closure aaa

  test-pass-nested-escaping-strategy =
    apply-test(!"test-pass-nested-escaping-strategy"
	, mark-escaping-variables
	, annotate-frame-offsets
	, !|[ strategies 
                foo(|) = 
                  let bar(|) = id
                   in let bar2(|) = 
                            baz(bar(|)|)
                       in bar2(|)
                      end
                  end
                baz(aaa: ATerm -> ATerm|) = aaa(|)
           ]|
	, !|[ strategies 
                foo~{}(|) = 
                  let bar~{Escapes,Closure("bar_cl")}(|) = id
                   in let bar2(|) =
		            baz~{Frames(["bar2","bar","foo"])}
                              (bar~{Closure("bar_cl"),Frames(["bar2"])}(|)|)
                       in bar2~{Frames([])}(|)
                      end
                  end
                baz~{}(aaa~{}: ATerm -> ATerm|) = 
                  aaa~{Frames([])}(|)
           ]|
	, !()
    )


  test-pass-nested-escaping-strategy =
    apply-test(!"test-pass-nested-escaping-strategy"
	, mark-escaping-variables
	, annotate-frame-offsets
	, !|[ strategies 
                foo(|bbb : ATerm) = 
                  let bar(|)  = ?bbb
                      bar2(|) = baz(bar(|)|)
                   in bar2(|)
                  end
                baz(aaa: ATerm -> ATerm|) = aaa(|)
           ]|
	, !|[ strategies 
                foo~{}(|bbb~{Escapes} : ATerm) = 
                  let bar~{Escapes,Closure("bar_cl")}(|) = 
                        ?~id:"bbb"{Frames(["bar"])}
                      bar2~{}(|) = 
                        baz~{Frames(["bar2","foo"])}
                          (bar~{Closure("bar_cl"),Frames(["bar2"])}(|)|)
                   in bar2~{Frames([])}(|)
                  end
                baz~{}(aaa~{}: ATerm -> ATerm|) = aaa~{Frames([])}(|)
           ]|
	, !()
    )


  // foo applies closure arg

  test-local-strategy-arg =
    apply-test(!"test-local-strategy-arg"
	, mark-escaping-variables
	, annotate-frame-offsets
	, !|[ strategies 
                foo(arg: ATerm -> ATerm|) = arg(|)
           ]|
	, !|[ strategies 
                foo~{}(arg~{}: ATerm -> ATerm |) = 
                  arg~{Frames([])}(|)
           ]|
	, !|[ strategies 
                foo~{Offsets(0,0)}(arg~{}: ATerm -> ATerm |) = 
                  arg~{Frames([]),ApplyClosure}(|)
           ]|
    )



  // argument arg of foo is called in nested strategy bar.
  //
  // arg (which is a closure) needs to be stored in frame of foo
  // bar should retrieve closure and apply it

  test-escaping-strategy-arg =
    apply-test(!"test-escaping-strategy-arg"
	, mark-escaping-variables
	, annotate-frame-offsets
	, !|[ strategies 
                foo(arg: ATerm -> ATerm|) = 
                  let bar(|) = arg(|)
                   in bar(|)
                  end
           ]|
	, !|[ strategies 
                foo~{}(arg~{Escapes}: ATerm -> ATerm |) = 
                  let bar~{}(|) = 
                        arg~{Frames(["bar"])}(|)
                   in bar~{Frames([])}(|)
                  end
           ]|
	, !()
    )

  // arg is an escaping strategy argument that is passed on as argument to another
  // strategy
  //
  // the closure that is passed into foo needs to be stored in the frame of foo
  // so that bar can pick it up there and pass it on to baz
  //
  // "escapes" annotation means that arg should be stored in frame

  test-pass-escaping-strategy-arg =
    apply-test(!"test-pass-escaping-strategy-arg"
	, mark-escaping-variables
	, annotate-frame-offsets
	, !|[ strategies 
                foo(arg: ATerm -> ATerm|) = 
                  let bar(|) = baz(arg(|)|)
                   in bar(|)
                  end
                baz(arg: ATerm -> ATerm|) = arg(|)
           ]|
	, !|[ strategies 
                foo~{}(arg~{Escapes}: ATerm -> ATerm |) = 
                  let bar~{}(|) = 
                        baz~{Frames(["bar","foo"])}
                          (arg~{Frames(["bar"])}(|)|)
                   in bar~{Frames([])}(|)
                  end
                baz~{}(arg~{} : ATerm -> ATerm|) = 
                  arg~{Frames([])}(|)
           ]|
	, !()
    )
