module escaping-variables-test
imports escaping-variables frame-composition

strategies

  apply-test(label, s1, s2, input, output1, output2) =
    apply-test(<conc-strings>(<label>, "-1"), s1, input, output1)
    //; apply-test(<conc-strings>(<label>, "-2"), s2, output1, output2)

  escaping-variables-test = 
    test-suite(!"escaping-variables-test",

        test-call-top-level-strategy 
      ; test-call-nested-strategy
      ; test-call-parent-in-nested-strategy
      ; test-recursive-call-nested-strategy

      ; test-pass-nested-strategy

      ; test-local-strategy-arg
      ; test-escaping-strategy-arg
      ; test-pass-escaping-strategy-arg

      ; test-local-term-arg
      ; test-escaping-term-arg
      ; test-escaping-local-term-var
      ; test-pass-escaping-term-arg

    )

  // bar calls top-level strategy foo
  // static link passed to foo is static link of bar

  test-call-top-level-strategy =
    apply-test(!"test-call-top-level-strategy"
	, mark-escaping-variables
	, annotate-frame-offsets
	, !|[ strategies 
                foo(|) = id 
                bar(|) = foo(|) 
           ]|
	, !|[ strategies 
                foo~{"local"}(|) = id 
                bar~{"local"}(|) = 
                   foo~{Frames("visible",["bar"])}(|)
           ]|
	, !|[ strategies 
                foo~{"local",Offsets(0,0)}(|) = id 
                bar~{"local",Offsets(0,0)}(|) = 
                   foo~{Frames("visible",["bar"])}(|)
           ]|
    )

  // foo calls local strategy bar
  // static link passed to bar is frame of foo

  test-call-nested-strategy =
    apply-test(!"test-call-nested-strategy"
	, mark-escaping-variables
	, annotate-frame-offsets
	, !|[ strategies 
                foo(|) = 
                  let bar(|) = id
                   in bar(|)
                  end
           ]|
	, !|[ strategies 
                foo~{"local"}(|) = 
                  let bar~{"local"}(|) = id
                   in bar~{Frames("visible",[])}(|)
                  end
           ]|
	, !|[ strategies 
                foo~{"local",Offsets(0,0)}(|) = 
                  let bar~{"local",Offsets(0,0)}(|) = id
                   in bar~{Frames("visible",[])}(|)
                  end
           ]|
    )

  // nested strategy bar calls parent strategy foo
  // static link of foo call is parent of static link of bar

  test-call-parent-in-nested-strategy =
    apply-test(!"test-call-nested-strategy"
	, mark-escaping-variables
	, annotate-frame-offsets
	, !|[ strategies 
                foo(|) = 
                  let bar(|) = foo(|)
                   in bar(|)
                  end
           ]|
	, !|[ strategies 
                foo~{"local"}(|) = 
                  let bar~{"local"}(|) = 
                        foo~{Frames("visible",["bar","foo"])}(|)
                   in bar~{Frames("visible",[])}(|)
                  end
           ]|
	, !|[ strategies 
                foo~{"local",Offsets(0,0)}(|) = 
                  let bar~{"local",Offsets(0,0)}(|) = 
                        foo~{Frames("visible",["bar","foo"])}(|)
                   in bar~{Frames("visible",[])}(|)
                  end
           ]|
    )

  // recursive call to (nested) strategy bar
  // static link of call to 

  test-recursive-call-nested-strategy =
    apply-test(!"test-recursive-call-nested-strategy"
	, mark-escaping-variables
	, annotate-frame-offsets
	, !|[ strategies 
                foo(|) = 
                  let bar(|) = bar(|) < id + id
                   in bar(|)
                  end
           ]|
	, !|[ strategies 
                foo~{"local"}(|) = 
                  let bar~{"local"}(|) = 
                        bar~{Frames("visible",["bar"])}(|) < id + id
                   in bar~{Frames("visible",[])}(|)
                  end
           ]|
	, !|[ strategies 
                foo~{"local",Offsets(0,0)}(|) = 
                  let bar~{"local",Offsets(0,0)}(|) = 
                        bar~{Frames("visible",["bar"])}(|) < id + id
                   in bar~{Frames("visible",[])}(|)
                  end
           ]|
    )

  // closure of ar should be passed to baz
  // foo should create closure for bar and pass it to baz
  // (no need to store the closure in the frame, since there are
  // no other places where it is referred to; closure does not escape)
  // baz applies closure aaa

  test-pass-nested-strategy =
    apply-test(!"test-pass-nested-strategy"
	, mark-escaping-variables
	, annotate-frame-offsets
	, !|[ strategies 
                foo(|) = 
                  let bar(|) = id
                   in baz(bar(|)|)
                  end
                baz(aaa: ATerm -> ATerm|) = aaa(|)
           ]|
	, !|[ strategies 
                foo~{"local"}(|) = 
                  let bar~{"local"}(|) = id
                   in baz~{Frames("visible",["foo"])}
                        (bar~{Frames("visible",[])}(|)|)
                  end
                baz~{"local"}(aaa~{"local"}: ATerm -> ATerm|) = 
                  aaa~{Frames("local",[])}(|)
           ]|
	, !|[ strategies 
                foo~{"local",Offsets(0,0)}(|) = 
                  let bar~{"local",Offsets(0,0),Closure("bar_cl")}(|) = id
                   in baz~{Frames("visible",["foo"])}
                        (bar~{Frames("visible",[]),Closure("bar_cl")}(|)|)
                  end
                baz~{"local",Offsets(0,0)}(aaa~{"local"}: ATerm -> ATerm|) = 
                  aaa~{Frames("local",[]),ApplyClosure}(|)
           ]|
    )


  // foo applies closure arg

  test-local-strategy-arg =
    apply-test(!"test-local-strategy-arg"
	, mark-escaping-variables
	, annotate-frame-offsets
	, !|[ strategies 
                foo(arg: ATerm -> ATerm|) = arg(|)
           ]|
	, !|[ strategies 
                foo~{"local"}(arg~{"local"}: ATerm -> ATerm |) = 
                  arg~{Frames("local",[])}(|)
           ]|
	, !|[ strategies 
                foo~{"local",Offsets(0,0)}(arg~{"local"}: ATerm -> ATerm |) = 
                  arg~{Frames("local",[]),ApplyClosure}(|)
           ]|
    )



  // argument arg of foo is called in nested strategy bar.
  //
  // arg (which is a closure) needs to be stored in frame of foo
  // bar should retrieve closure and apply it

  test-escaping-strategy-arg =
    apply-test(!"test-escaping-strategy-arg"
	, mark-escaping-variables
	, annotate-frame-offsets
	, !|[ strategies 
                foo(arg: ATerm -> ATerm|) = 
                  let bar(|) = arg(|)
                   in bar(|)
                  end
           ]|
	, !|[ strategies 
                foo~{"local"}(arg~{"escapes"}: ATerm -> ATerm |) = 
                  let bar~{"local"}(|) = 
                        arg~{Frames("escapes",["bar"])}(|)
                   in bar~{Frames("visible",[])}(|)
                  end
           ]|
	, !|[ strategies 
                foo~{"local",Offsets(1,0)}(arg~{"escapes", Offset(0)}: ATerm -> ATerm |) = 
                  let bar~{"local",Offsets(0,0)}(|) = 
                        arg~{Frames("escapes",["bar"],0)}(|)
                   in bar~{Frames("visible",[])}(|)
                  end
           ]|
    )

  // arg is an escaping strategy argument that is passed on as argument to another
  // strategy
  //
  // the closure that is passed into foo needs to be stored in the frame of foo
  // so that bar can pick it up there and pass it on to baz
  //
  // "escapes" annotation means that arg should be stored in frame

  test-pass-escaping-strategy-arg =
    apply-test(!"test-pass-escaping-strategy-arg"
	, mark-escaping-variables
	, annotate-frame-offsets
	, !|[ strategies 
                foo(arg: ATerm -> ATerm|) = 
                  let bar(|) = baz(arg(|)|)
                   in bar(|)
                  end
                baz(arg: ATerm -> ATerm|) = arg(|)
           ]|
	, !|[ strategies 
                foo~{"local"}(arg~{"escapes"}: ATerm -> ATerm |) = 
                  let bar~{"local"}(|) = 
                        baz~{Frames("visible",["bar","foo"])}
                          (arg~{Frames("escapes",["bar"])}(|)|)
                   in bar~{Frames("visible",[])}(|)
                  end
                baz~{"local"}(arg~{"local"} : ATerm -> ATerm|) = 
                  arg~{Frames("local",[])}(|)
           ]|
	, !|[ strategies 
                foo~{"local",Offsets(1,0)}(arg~{"escapes", Offset(0)}: ATerm -> ATerm |) = 
                  let bar~{"local",Offsets(0,0)}(|) = 
                        baz~{Frames("visible",["bar","foo"])}
                          (arg~{Frames("escapes",["bar"],0),Closure("arg")}(|)|)
                   in bar~{Frames("visible",[])}(|)
                  end
                baz~{"local",Offsets(0,0)}(arg~{"local"} : ATerm -> ATerm|) = 
                  arg~{Frames("local",[]),ApplyClosure}(|)
           ]|
    )

  // foo binds term variable arg

  test-local-term-arg =
    apply-test(!"test-local-term-arg"
	, mark-escaping-variables
	, annotate-frame-offsets
	, !|[ strategies 
                foo(|arg: ATerm) = ?arg
           ]|
	, !|[ strategies 
                foo~{"local"}(|arg~{"local"}: ATerm) = 
                  ?~id:"arg"{Frames("local", [])}
           ]|
	, !|[ strategies 
                foo~{"local",Offsets(0,0)}(|arg~{"local"}: ATerm) = 
                  ?~id:"arg"{Frames("local", [])}
           ]|
    )



  // foo should store arg in frame
  // bar retrieves arg from static link

  test-escaping-term-arg =
    apply-test(!"test-escaping-term-arg"
	, mark-escaping-variables
	, annotate-frame-offsets
	, !|[ strategies 
                foo(|arg: ATerm) = 
                  let bar(|) = ?arg
                   in bar(|)
                  end
           ]|
	, !|[ strategies 
                foo~{"local"}(|arg~{"escapes"}: ATerm) = 
                  let bar~{"local"}(|) = 
                        ?~id:"arg"{Frames("escapes",["bar"])}
                   in bar~{Frames("visible",[])}(|)
                  end
           ]|
	, !|[ strategies 
                foo~{"local",Offsets(0,1)}(|arg~{"escapes", Offset(0)}: ATerm) = 
                  let bar~{"local",Offsets(0,0)}(|) = 
                        ?~id:"arg"{Frames("escapes",["bar"],0)}
                   in bar~{Frames("visible",[])}(|)
                  end
           ]|
    )

  // foo should store arg in frame
  // bar retrieves arg from static link

  test-escaping-local-term-var =
    apply-test(!"test-escaping-local-term-var"
	, mark-escaping-variables
	, annotate-frame-offsets
	, !|[ strategies 
                foo(|) = {arg :
                  let bar(|) = ?arg
                   in bar(|)
                  end}
           ]|
	, !|[ strategies 
                ~id:"foo"{"local"}(|) = {arg~{"escapes"} : 
                  let ~id:"bar"{"local"}(|) = 
                        ?~id:"arg"{Frames("escapes",["bar"])}
                   in bar~{Frames("visible",[])}(|)
                  end}
           ]|
	, !|[ strategies 
                ~id:"foo"{"local",Offsets(0,1)}(|) = {arg~{"escapes", Offset(0)} : 
                  let ~id:"bar"{"local",Offsets(0,0)}(|) = 
                        ?~id:"arg"{Frames("escapes",["bar"], 0)}
                   in bar~{Frames("visible",[])}(|)
                  end}
           ]|
    )

  // argument arg of foo escapes and is passed as argument to baz
  //
  // foo should store arg in frame
  // baz should retrieve arg from static link

  test-pass-escaping-term-arg =
    apply-test(!"test-pass-escaping-term-arg"
	, mark-escaping-variables
	, annotate-frame-offsets
	, !|[ strategies 
                foo(|arg: ATerm) = 
                  let bar(|) = baz(|arg)
                   in bar(|)
                  end
                baz(|arg : ATerm) = ?arg
           ]|
	, !|[ strategies 
                foo~{"local"}(|arg~{"escapes"}: ATerm) = 
                  let bar~{"local"}(|) = 
                        baz~{Frames("visible",["bar","foo"])}
                            (|arg~{Frames("escapes",["bar"])})
                   in bar~{Frames("visible",[])}(|)
                  end
                baz~{"local"}(|arg~{"local"}: ATerm) = 
                   ?~id:"arg"{Frames("local",[])}
           ]|
	, !|[ strategies 
                foo~{"local",Offsets(0,1)}(|arg~{"escapes",Offset(0)}: ATerm) = 
                  let bar~{"local"}(|) = 
                        baz~{Frames("visible",["bar","foo"])}
                            (|arg~{Frames("escapes",["bar"],0)})
                   in bar~{Frames("visible",[])}(|)
                  end
                baz~{"local"}(|arg~{"local"}: ATerm) = 
                   ?~id:"arg"{Frames("local",[])}
           ]|
    )
