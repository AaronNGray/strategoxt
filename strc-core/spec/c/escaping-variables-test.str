module escaping-variables-test
imports escaping-variables

strategies

  escaping-variables-test = 
    test-suite(!"escaping-variables-test",

      test-call-top-level-strategy 
      ; test-call-nested-strategy
      ; test-call-parent-in-nested-strategy
      ; test-recursive-call-nested-strategy
      ; test-pass-nested-strategy

      ; test-local-strategy-arg
      ; test-escaping-strategy-arg
      ; test-pass-escaping-strategy-arg

      ; test-local-term-arg
      ; test-escaping-term-arg
      ; test-escaping-local-term-var
      ; test-pass-escaping-term-arg

    )

  // bar calls top-level strategy foo
  // static link passed to foo is static link of bar

  test-call-top-level-strategy =
    apply-test(!"test-call-top-level-strategy"
	, mark-escaping-variables
	, !|[ strategies 
                foo(|) = id 
                bar(|) = foo(|) 
           ]|
	, !|[ strategies 
                ~id:"foo"{"local"}(|) = id 
                ~id:"bar"{"local"}(|) = 
                   ~id:"foo"{Frames("visible",["bar"])}(|)
           ]|
    )

  // foo calls local strategy bar
  // static link passed to bar is frame of foo

  test-call-nested-strategy =
    apply-test(!"test-call-nested-strategy"
	, mark-escaping-variables
	, !|[ strategies 
                foo(|) = 
                  let bar(|) = id
                   in bar(|)
                  end
           ]|
	, !|[ strategies 
                ~id:"foo"{"local"}(|) = 
                  let ~id:"bar"{"local"}(|) = id
                   in ~id:"bar"{Frames("visible",[])}(|)
                  end
           ]|
    )

  // nested strategy bar calls parent strategy foo
  // static link of foo call is parent of static link of bar

  test-call-parent-in-nested-strategy =
    apply-test(!"test-call-nested-strategy"
	, mark-escaping-variables
	, !|[ strategies 
                foo(|) = 
                  let bar(|) = foo(|)
                   in bar(|)
                  end
           ]|
	, !|[ strategies 
                ~id:"foo"{"local"}(|) = 
                  let ~id:"bar"{"local"}(|) = 
                        ~id:"foo"{Frames("visible",["bar","foo"])}(|)
                   in ~id:"bar"{Frames("visible",[])}(|)
                  end
           ]|
    )

  // recursive call to (nested) strategy bar
  // static link of call to 

  test-recursive-call-nested-strategy =
    apply-test(!"test-recursive-call-nested-strategy"
	, mark-escaping-variables
	, !|[ strategies 
                foo(|) = 
                  let bar(|) = bar(|) < id + id
                   in bar(|)
                  end
           ]|
	, !|[ strategies 
                ~id:"foo"{"local"}(|) = 
                  let ~id:"bar"{"local"}(|) = 
                        ~id:"bar"{Frames("visible",["bar"])}(|) < id + id
                   in ~id:"bar"{Frames("visible",[])}(|)
                  end
           ]|
    )

  test-pass-nested-strategy =
    apply-test(!"test-pass-nested-strategy"
	, mark-escaping-variables
	, !|[ strategies 
                foo(|) = 
                  let bar(|) = id
                   in baz(bar(|)|)
                  end
                baz(aaa: ATerm -> ATerm|) = aaa(|)
           ]|
	, !|[ strategies 
                ~id:"foo"{"local"}(|) = 
                  let ~id:"bar"{"local"}(|) = id
                   in ~id:"baz"{Frames("visible",["foo"])}
                        (~id:"bar"{Frames("visible",[])}(|)|)
                  end
                ~id:"baz"{"local"}(~id:"aaa"{"local"}: ATerm -> ATerm|) = 
                  ~id:"aaa"{Frames("local",[])}(|)
           ]|
    )

  // foo binds term variable arg

  test-local-term-arg =
    apply-test(!"test-local-term-arg"
	, mark-escaping-variables
	, !|[ strategies 
                foo(|arg: ATerm) = ?arg
           ]|
	, !|[ strategies 
                ~id:"foo"{"local"}(|~id:"arg"{"local"}: ATerm) = 
                  ?~id:"arg"{Frames("local", [])}
           ]|
    )

  // foo applies closure arg

  test-local-strategy-arg =
    apply-test(!"test-local-strategy-arg"
	, mark-escaping-variables
	, !|[ strategies 
                foo(arg: ATerm -> ATerm|) = arg(|)
           ]|
	, !|[ strategies 
                ~id:"foo"{"local"}(~id:"arg"{"local"}: ATerm -> ATerm |) = 
                  ~id:"arg"{Frames("local",[])}(|)
           ]|
    )

  // foo should store arg in frame
  // bar retrieves arg from static link

  test-escaping-term-arg =
    apply-test(!"test-escaping-term-arg"
	, mark-escaping-variables
	, !|[ strategies 
                foo(|arg: ATerm) = 
                  let bar(|) = ?arg
                   in bar(|)
                  end
           ]|
	, !|[ strategies 
                ~id:"foo"{"local"}(|~id:"arg"{"escapes"}: ATerm) = 
                  let ~id:"bar"{"local"}(|) = 
                        ?~id:"arg"{Frames("escapes",["bar"])}
                   in ~id:"bar"{Frames("visible",[])}(|)
                  end
           ]|
    )

  // foo should store arg in frame
  // bar retrieves arg from static link

  test-escaping-local-term-var =
    apply-test(!"test-escaping-local-term-var"
	, mark-escaping-variables
	, !|[ strategies 
                foo(|) = {arg :
                  let bar(|) = ?arg
                   in bar(|)
                  end}
           ]|
	, !|[ strategies 
                ~id:"foo"{"local"}(|) = {~id:"arg"{"escapes"} : 
                  let ~id:"bar"{"local"}(|) = 
                        ?~id:"arg"{Frames("escapes",["bar"])}
                   in ~id:"bar"{Frames("visible",[])}(|)
                  end}
           ]|
    )

  // argument arg of foo escapes and is passed as argument to baz
  //
  // foo should store arg in frame
  // baz should retrieve arg from static link

  test-pass-escaping-term-arg =
    apply-test(!"test-pass-escaping-term-arg"
	, mark-escaping-variables
	, !|[ strategies 
                foo(|arg: ATerm) = 
                  let bar(|) = baz(|arg)
                   in bar(|)
                  end
                baz(|arg : ATerm) = ?arg
           ]|
	, !|[ strategies 
                ~id:"foo"{"local"}(|~id:"arg"{"escapes"}: ATerm) = 
                  let ~id:"bar"{"local"}(|) = 
                        ~id:"baz"{Frames("visible",["bar","foo"])}
                            (|~id:"arg"{Frames("escapes",["bar"])})
                   in ~id:"bar"{Frames("visible",[])}(|)
                  end
                ~id:"baz"{"local"}(|~id:"arg"{"local"}: ATerm) = 
                   ?~id:"arg"{Frames("local",[])}
           ]|
    )

  // argument arg of foo is called in nested strategy bar.
  //
  // arg (which is a closure) needs to be stored in frame of foo
  // bar should retrieve closure and apply it

  test-escaping-strategy-arg =
    apply-test(!"test-escaping-strategy-arg"
	, mark-escaping-variables
	, !|[ strategies 
                foo(arg: ATerm -> ATerm|) = 
                  let bar(|) = arg(|)
                   in bar(|)
                  end
           ]|
	, !|[ strategies 
                ~id:"foo"{"local"}(~id:"arg"{"escapes"}: ATerm -> ATerm |) = 
                  let ~id:"bar"{"local"}(|) = 
                        ~id:"arg"{Frames("escapes",["bar"])}(|)
                   in ~id:"bar"{Frames("visible",[])}(|)
                  end
           ]|
    )

  // arg is an escaping strategy argument that is passed on as argument to another
  // strategy
  //
  // the closure that is passed into foo needs to be stored in the frame of foo
  // so that bar can pick it up there and pass it on to baz
  //
  // "escapes" annotation means that arg should be stored in frame

  test-pass-escaping-strategy-arg =
    apply-test(!"test-pass-escaping-strategy-arg"
	, mark-escaping-variables
	, !|[ strategies 
                foo(arg: ATerm -> ATerm|) = 
                  let bar(|) = baz(arg(|)|)
                   in bar(|)
                  end
                baz(arg: ATerm -> ATerm|) = arg(|)
           ]|
	, !|[ strategies 
                ~id:"foo"{"local"}(~id:"arg"{"escapes"}: ATerm -> ATerm |) = 
                  let ~id:"bar"{"local"}(|) = 
                        ~id:"baz"{Frames("visible",["bar","foo"])}
                          (~id:"arg"{Frames("escapes",["bar"])}(|)|)
                   in ~id:"bar"{Frames("visible",[])}(|)
                  end
                ~id:"baz"{"local"}(~id:"arg"{"local"} : ATerm -> ATerm|) = 
                    ~id:"arg"{Frames("local",[])}(|)
           ]|
    )

