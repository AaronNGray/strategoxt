module frame-composition
imports liblib Stratego-Core
signature
  constructors
    Offsets      : Int * Int -> Annotation
    Offset       : Int  -> Annotation
    Closure      : String -> Annotation
    ApplyClosure : Annotation
    Frames       : String * List(String) * Int -> Annotation

strategies

  // count the number of escaping variables and functions per definition

  frame-composition = 
    io-wrap(annotate-frame-offsets)

  annotate-frame-offsets = 
id

/*
    alltd(afo-sdef)

  afo = 
    afo-let
    <+ afo-sdef

  afo-let =
    ?|[ let def* in s end ]|
    ; {| OffSet 
       : where(<map(try(offset-sdef))> def*)
       ; all(afo) 
       |}

  afo-sdef =
    ?|[ f(a1*|a2*) = s ]|
    ; {| ScopedCounter, OffSet
       : reset-scoped-counter(|"var")
       ; reset-scoped-counter(|"svar")
       ; where(<map(offset-arg("svar"))> a1*)
       ; where(<map(offset-arg("var"))> a2*)
       ; all(afo)
       ; !<id>{OffSet(<get-scoped-counter(|"svar")>,<get-scoped-counter(|"var")>)}
       |}

  afo-scope :
    |[ {x1* : s1} ]| -> |[ {x2* : s2} ]|
    where {| OffSet
           : <map(offset-local-var(|"var"))> x1*
           ; <afo> s1 => s2
           |}

  offset-sdef :
    |[ f~{t*}(a1*|a2*) = s ]| -> |[ f~{Offset(i),t*}(a1*|a2*) = s ]|
    where <fetch(?Escapes)> t*
	; next

  offset-str-arg(|c) =
    ?Typedid|[ x~{t1*} : tp ]|
    ; where(<offset-local-var(|c)> x)

  offset-trm-arg(|c) =
    ?Typedid|[ x : tp ]|
    ; where(<offset-local-var(|f)> x)

  offset-local-var(|f) = 
    ?x{t1*}
    ; where(<fetch(?Escapes())> t1*)
    ; rules(
        OffSet+x : x{t1*} -> x{OffSet(i),t1*}
      )

  afo-call :
    |[ f(s1* | t*) ]| -> |[ f(s2* | t*) ]|
    where debug(!"afo-call: ")
	; <map(mark-used-as-arg <+ debug(!"strange str arg: "); fail)> s1* => s2*

  mark-used-as-arg = debug(!"mark-used-as-arg 1: ");
    ?CallT(f{t1*},[],[])
    ; debug(!"mark-used-as-arg 2: ")
    ; dr-print-rule-set(|"UsedAsArg")
    ; rules( UsedAsArg : f{t2*} -> f{"used-as-arg", t2*} )
    ; debug(!"mark-used-as-arg 3: ")

  escaping-arg :
    Typedid|[ x : tp ]| -> Typedid|[ y : tp ]|
    where <Escapes> x => y

*/

strategies

  /**
   * Scoped counter
   */

  new-scoped-counter =
    new; reset-scoped-counter(|<id>)

  reset-scoped-counter(|c) =
    where(<set-counter> (c, 0))

  reset-scoped-counter(|c,l) = 
    where(<set-counter(|l)> (c, 0))

  enter-counter-scope(|c,l) =
    rules( Counter+l )

  set-scoped-counter(|c,n) =
    rules( ScopedCounter : c -> n )

  set-scoped-counter(|c,n,l) =
    rules( ScopedCounter.l : c -> n )

  get-scoped-counter(|c) =
    <ScopedCounter> c <+ set-scoped-counter(|c,0)

  next-scoped-counter =
    ?c; get-scoped-counter; inc; where(<set-counter> (c, <id>))

  next-scoped-counter(|l) =
    ?c; get-scoped-counter; inc; where(<set-counter(|l)> (c, <id>))

