/**
 * Compilation of Stratego programs to C 
 */
module s2c-ng

imports 
  liblib 
  Stratego-Sugar 
  automaton 
  C 
  C-simplify 

strategies

  s2c-ng = 
    io-wrap(s2c-options, compile)
 
  compile = 
    init-term-caching
    ; TranslateSpec
    ; c-simplify

strategies

  /**
   * Command line options
   */

  s2c-options = 
    ArgOption("--C-include",       
	where(<post-extend-config>("--C-include", [<id>])),
	!"--C-include h   include header file h (\"file.h\" or <file.h>)")

  + Option("--library" + "--lib"
	  ,where(<set-config> ("--library", ()))
	  ,!"--library | --lib    build library instead of application")

strategies

  /**
   * Building a library
   */

  if-lib(s1, s2) = where(<get-config>"--library") < s1 + s2
  if-lib(s)      = if-lib(s, id)
  if-not-lib(s)  = if-lib(id, s)

overlays

  CastATerm(e) = 
    |[ (ATerm) ~exp:e ]|

  CastATermList(e) = 
    TypeCast(TypeName(TypeSpec([],TypeId("ATermList"),[]),None),e)

  CastATermInt(e) = 
    TypeCast(TypeName(TypeSpec([],TypeId("ATermInt"),[]),None),e)

  CastATermReal(e) = 
    TypeCast(TypeName(TypeSpec([],TypeId("ATermReal"),[]),None),e)

  CastATermAppl(e) = 
    TypeCast(TypeName(TypeSpec([],TypeId("ATermAppl"),[]),None),e)

  ATgetArgument(t, i) = 
    FunCall(Id("ATgetArgument"),[t,i])

  SymOfAppl(t) =
    FunCall(Id("ATgetSymbol"),[CastATermAppl(t)])

rules

  TranslateSpec = 
    alltd(Translate)
    ; ComposeTargetProgram

  ComposeTargetProgram =
    where(
      GenerateIncludes => incl
      ; <bagof-Fragment> "ConstructorDecl" => cnstr-decls
      ; <bagof-Fragment; concat> "ConstructorInit" => cnstr-inits
      ; <bagof-Fragment> "FunctionSig"     => function-sigs
      ; <bagof-Fragment> "FunctionReg"     => function-regs
      ; <bagof-Fragment> "FunctionDef"     => function-defs
      ; <bagof-Fragment> "ConstDecl"       => cnst-decls
      ; <bagof-Fragment; concat; reverse> "ConstInit"       => cnst-inits
    );
    !|[
	// C includes specified on command-line or by default configuration
	~ext-def*:incl

        // legacy
	~ext-def*: <if-lib(![],
           ![fun-def|[ void init_constructors(void){} ]|]
	)>

	// initialize variables denoting constructor symbols
	~ext-def*:cnstr-decls
	static void init_module_constructors (void)
	{
	  ~stm*:cnstr-inits
	}

	// initialize cached constant terms
	~ext-def*:cnst-decls
	static void init_module_constant_terms (void)
	{
	  ~stm*:cnst-inits
	}

	// include functions for calling the initialization functions
	~ext-def*:
	  <if-lib(
	     ![PpControl("#include <srts/init-stratego-module.h>")],
	     ![PpControl("#include <srts/init-stratego-application.h>")]
	   )>
	
	// signatures of all generated functions
	~ext-def*:function-sigs

	// function definitions themselves
	~ext-def*:function-defs

        ~ext-def*:<if-lib(![], ![<register-strategies-function>function-regs])>

	~ext-def*:<if-lib(![], ![<MainDef>])>
    ]|

strategies

  register-strategies-function =
    !c:fun-def|[
	static void register_strategies(void)
	{
		int initial_size = 117 ;
		int max_load = 75;
		if(strategy_table == NULL) 
			strategy_table = ATtableCreate(initial_size,max_load);
		~stm*:<id>
	}
     ]|

strategies

  GenerateIncludes =
    <get-config; map(!PpControl(<conc-strings> ("#include ", <id>))) <+ ![]> "--C-include"

  MainDef = 
    !c:fun-def|[ 
      int main(int argc, char *argv[]) {
        ATerm out_term; 
        ATermList in_term;
        int i; 

        ATinit(argc, argv, &out_term);
        init_constructors();
        SRTS_init_mprotect();

        in_term = ATempty; 
        for(i = argc - 1; i >= 0; i--) {
          in_term = ATinsert(in_term, (ATerm) ATmakeAppl0(ATmakeSymbol(argv[i],0,ATtrue)));
        }

        
	SRTS_stratego_initialize();
        register_strategies();
        out_term = main_0_0((ATerm)in_term); 
        
        if(out_term != NULL) 
          {
            ATfprintf(stdout, "\"%t\\n\"", out_term);
            exit(0);
          }
        else
          {
            ATfprintf(stderr, "\"%s: rewriting failed\\n\"",  argv[0]);
            exit(1);
          }
       }
    ]|

/**
 * Fragments
 */

strategies

  fragment(s|tp) =
    where(s; ?x; rules( Fragment :+ tp -> x ))

/**
 * Signatures
 */
strategies

  Translate =
    fragment(DeclareConstructor|"ConstructorDecl")
    ; fragment(InitConstructorQ <+ InitConstructor|"ConstructorInit")

  DeclareConstructor :
    OpDecl(c, t) -> c:dec|[ static Symbol ~id:csym; ]|
    where <Arity> t => n
        ; <concat-strings>["sym_", <cify> c, "_", <int-to-string> n] => csym
        ; rules(ConstructorName : (c, n) -> csym)

  Arity : 
    ConstType(t) -> 0

  Arity : 
    FunType(ts, t) -> <length> ts

  InitConstructorQ :
    OpDecl(c, t) ->
    [Stat(Assign(Id(csym), AssignEq,
                 FunCall(Id("ATmakeSymbol"),[StringLit([<double-quote>c']),IntConst(n),Id("ATtrue")]))),
     Stat(FunCall(Id("ATprotectSymbol"),[Id(csym)]))]
    where <string-as-chars(unescape-chars; un-double-quote-chars)> c => c' 
	; <Arity> t => ar; int-to-string => n
        ; <ConstructorName> (c, ar) => csym

  InitConstructor :
    OpDecl(c, t) ->
    [Stat(Assign(Id(csym), AssignEq,
                 FunCall(Id("ATmakeSymbol"),[StringLit([<double-quote>c]),IntConst(n),Id("ATfalse")]))),
     Stat(FunCall(Id("ATprotectSymbol"),[Id(csym)]))]
    where <Arity> t => ar; int-to-string => n
        ; <ConstructorName> (c, ar) => csym

/**
 * Prototypes for strategy definitions
 */
strategies 

  Translate = 
    fragment(SDefToDeclaration|"FunctionSig")
    ; fragment(SDefToRegistration|"FunctionReg")
    ; {| SuccessLabel, FailureLabel: fragment(TranslateDef|"FunctionDef") |}

  SDefToDeclaration :
    Def|[ f(a1* | a2*) = s ]| ->
    dec|[ ATerm ~id:f (~param-dec*:ps, ATerm t); ]|
    where <not(is-local-function)> f
	; <map(TranslateVarDec)> a1* => ps1
        ; <map(TranslateVarDec)> a2* => ps2
	; <conc>(ps1, ps2) => ps

  SDefToDeclaration :
    Def|[ f(a1* | a2*) = s ]| ->
    dec|[ static ATerm ~id:f (~param-dec*:ps, ATerm t); ]|
    where <is-local-function> f
	; <map(TranslateVarDec)> a1* => ps1
        ; <map(TranslateVarDec)> a2* => ps2
	; <conc>(ps1, ps2) => ps

  SDefToDeclaration :
    Def|[ external f(a1* | a2*) = s ]| ->
    dec|[ ATerm ~id:f (~param-dec*:ps, ATerm t); ]|
    where <map(TranslateVarDec)> a1* => ps1
        ; <map(TranslateVarDec)> a2* => ps2
	; <conc>(ps1, ps2) => ps

  SDefToDeclaration :
    Def|[ external f(a1* | a2*) ]| ->
    dec|[ ATerm ~id:f (~param-dec*:ps, ATerm t); ]|
    where <map(TranslateVarDec)> a1* => ps1
        ; <map(TranslateVarDec)> a2* => ps2
	; <conc>(ps1, ps2) => ps


/**
 * Registration of strategy definition 
 */
strategies

  SDefToRegistration =
    ( ?Def|[ f(a1*|a2*) = s ]|
    + ?Def|[ external f(a1* | a2*) = s ]|
    + ?Def|[ external f(a1* | a2*) ]| )
  ; !stm |[ SRTS_register_function( (ATerm) ATmakeAppl0(ATmakeSymbol(~id:<double-quote>f, 0, ATtrue)),~id:f) ; ]|
  

/**
 * Translation of strategy definition to C function
 */

signature
  constructors
    Next : Id 

strategies 

  TranslateDef :
    Def|[ f(a1*|a2*) = s ]| ->
    |[ 
       ATerm ~id:f(~param-dec*:args, ATerm t)
       {
         ATfprintf(stderr, 
	   ~exp:StringLit([<conc-strings; escape; double-quote>(f, " start\n")]));
         ~stm:stm;
         ATfprintf(stderr, 
	   ~exp:StringLit([<conc-strings; escape; double-quote>(f, " succeeded\n")]));
	 return(t);
         x : 
         ATfprintf(stderr, 
	   ~exp:StringLit([<conc-strings; escape; double-quote>(f, " failed\n")]));
         return NULL;
       }
    ]|
    where <not(is-local-function)> f
	; <map(TranslateVarDec)> a1* => args1
        ; <map(TranslateVarDec)> a2* => args2
	; <conc>(args1, args2) => args
	; <newname> "fail" => x
	; <translate-strat(|Next, x)>s => stm

  TranslateDef :
    Def|[ f(a1*|a2*) = s ]| ->
    |[ 
       static ATerm ~id:f(~param-dec*:args, ATerm t)
       {
         ATfprintf(stderr, 
	   ~exp:StringLit([<conc-strings; escape; double-quote>(f, " start\n")]));
         ~stm:stm;
         ATfprintf(stderr, 
	   ~exp:StringLit([<conc-strings; escape; double-quote>(f, " succeeded\n")]));
	 return(t);
         x : 
         ATfprintf(stderr, 
	   ~exp:StringLit([<conc-strings; escape; double-quote>(f, " failed\n")]));
         return NULL;
       }
    ]|
    where <is-local-function> f
	; <map(TranslateVarDec)> a1* => args1
        ; <map(TranslateVarDec)> a2* => args2
	; <conc>(args1, args2) => args
	; <newname> "fail" => x
	; <translate-strat(|Next, x)> s => stm

  is-local-function =
    explode-string
    ; [is-alpha, '_' | list(is-num)]

strategies

  TranslateVarDec :
    VarDec(x, ConstType(_)) -> param-dec|[ ATerm ~id:x ]|

  TranslateVarDec :
    VarDec(x, FunType(ts,_)) -> 
    param-dec|[ ATerm ~id:x(~param-dec*:<map(TranslateType)> ts) ]|

  TranslateType : 
    ConstType(_) -> ParamDecl(TypeSpec([],TypeId("ATerm"),[]), None)

  TranslateType :
    FunType(ts, _) -> 
    ParamDecl(TypeSpec([],TypeId("ATerm"),[]), Some(ParamList(<map(TranslateType)> ts)))

/**
 * Strategy expressions
 */
rules 

  translate-strat(|S,F) =
    TranslateStrat(|S,F) 
    <+ debug(!"TranslateStrat undefined: "); fail

  TranslateStrat(|S,F) :
    Id -> stm|[ goto ~id:S; ]|

  TranslateStrat(|S,F) :
    Fail -> stm|[ goto ~id:F; ]|

  TranslateStrat(|S,F) :
    Scope(xs, s) -> 
    stm|[ 
      {
	~dec*:[Declaration2(TypeSpec([],TypeId("ATerm"),[]),
	        // <map(!var-dec|[~id:<id> = NULL]|)> xs
		<map(!DeclInit(IdDecl([],Id(<id>),None),AssignInit(Id("NULL"))))> xs)
	       ]
        ~stm:(<translate-strat(|S,F)> s)
      }
    ]|

  TranslateStrat(|S,F) :
    |[ s1; s2 ]| -> 
    stm|[ 
      { 
        ~stm:<translate-strat(|Next,F)>s1 
        ~stm:<translate-strat(|S,F)>s2 
      }  
    ]|

  TranslateStrat(|S,F) :
    |[ s1 < s2 + s3 ]| ->
    stm|[
      {
        ATerm ~id:x = t;
	~stm:<translate-strat(|Next,F')>s1
        ~stm:<translate-strat(|S,F)>s2
        ~id:F' : t = ~id:x; 
        ~stm:<translate-strat(|S,F)>s3
      }
    ]|
    where <not(Next)> S; new => x; new => F'
	
  TranslateStrat(|S,F) :
    |[ s1 < s2 + s3 ]| -> 
    stm|[ 
      { 
        ~stm:<translate-strat(|S',F)> |[ s1 < s2 + s3 ]| 
        ~id:S' : ; 
      }
    ]|
    where !S => Next; new => S'

  TranslateStrat(|S,F) :
    Strat|[ prim(~str:f, s* | t* ) ]| -> 
    stm|[ 
      { 
        t = ~id:f(~exp*:args); 
        if( t == NULL ) goto ~id:F; else goto ~id:S; 
      }
    ]|
    where <map(\ CallT(SVar(x),[],[]) -> Id(x) \ )> s* => args1
        ; <map(topdown(try(construct-term)))> t* => args2
        ; <conc>(args1, args2) => args

  TranslateStrat(|S,F) :
    Strat|[ f(s* | t* ) ]| -> 
    stm|[ 
      { 
        t = f(~exp*:args); 
        if( t == NULL ) goto ~id:F; else goto ~id:S; 
      }
    ]|
    where <map(\ CallT(SVar(x),[],[]) -> Id(x) \ )> s* => args1
        ; <map(topdown(try(construct-term)))> t* => args2
        ; <concat>[args1, args2, [Id("t")]] => args

  TranslateStrat(|S,F) :
    CallDynamic(tp,s*,t*) -> 
    stm |[ 
      { 
        t = (SRTS_lookup_function(~exp:e))(~exp*:args); 
        if( t == NULL ) goto ~id:F; else goto ~id:S; 
      }
    ]|
    where <map(\ CallT(SVar(x),[],[]) -> Id(x) \ )> s* => args1 
        ; <map(topdown(try(construct-term)))> t* => args2  
        ; <concat>[args1, args2, [Id("t")]] => args 
	; <topdown(try(construct-term))>tp => e

  TranslateStrat(|S,F) :
    Let(defs, s) -> 
    Compound(<conc> (decs1, decs2), [<translate-strat(|S,F)>s])
    where <map(SDefToDeclaration)> defs => decs1
	; <map(TranslateDef)> defs => decs2

signature
  constructors
    Match : Term * Exp -> Exp

/**
 * Matching
 */
rules

  TranslateStrat(|S,F) :
    Match(t) -> <translate-strat(|S,F)> Match(t, Id("t"))

  TranslateStrat(|S,F) :
    Match(Wld, trm) -> stm|[ goto ~id:S; ]|

  TranslateStrat(|S,F) :
    Match(BuildDefault(t), trm) -> stm|[ goto ~id:S; ]|

  TranslateStrat(|S,F) :
    Match(As(t1,t2), trm) ->
    stm|[ 
      { 
        ~stm:(<translate-strat(|Next,F)> Match(t1,trm))
        ~stm:(<translate-strat(|S,F)> Match(t2,trm))
      }
    ]|

  TranslateStrat(|S,F) :
    Match(Var(x){"unbound"}, trm) ->
    stm|[ { x = ~exp:trm; goto ~id:S; } ]|

  TranslateStrat(|S,F) :
    Match(Var(x){"bound"}, trm) ->
    stm|[ if( x == ~exp:trm ) goto ~id:S; else goto ~id:F; ]|

  TranslateStrat(|S,F) :
    Match(Var(x){"(un)bound"}, trm) ->
    stm|[ 
      if( x == NULL )
        { 
          x = ~exp:trm; 
          goto ~id:S; 
        }
      else if( x != ~exp:trm )
        goto ~id:F;
    ]|

  TranslateStrat(|S,F) :
    Match(Var(x){}, trm) -> <translate-strat(|S,F)> Match(Var(x){"(un)bound"}, trm)

  TranslateStrat(|S,F) :
    Match(Explode(t1, t2), Id(trm)) ->
    |[ { ATerm ~id:x, ~id: y;
	 ~id:x = SSL_get_constructor(~id:trm);
	 ~id:y = SSL_get_arguments(~id:trm);
	 ~stm:(<translate-strat(|Next,F)> Match(t1, Id(x)))
	 ~stm:(<translate-strat(|S,F)> Match(t2, Id(y)))
       } ]|
    where new => x; new => y

  TranslateStrat(|S,F) =
    TranslateMatchNoAnno(|S,F)
    <+ TranslateMatchAnno(|S,F)

  TranslateMatchNoAnno(|S,F) :
    Match(Term|[ pt1{^_} ]|, trm) -> <translate-strat(|S,F)> Match(pt1, trm)

  TranslateMatchAnno(|S,F) :
    Match(|[ pt1{^pt2} ]|, Id(trm)) -> 
    stm|[ 
      { 
        ATerm ~id:x; 
        ~id:x = (ATerm)ATgetAnnotations(~id:trm);
        if(~id:x == NULL) 
           ~id:x = (ATerm) ATempty;
        ~stm:(<translate-strat(|Next,F)> Match(pt1, Id(trm)))
        ~stm:(<translate-strat(|S,F)> Match(pt2, Id(x)))
      } 
    ]|
    where <not(?PreTerm|[_]|)> pt2
	; new => x

  /**
   * @todo  String constants should probably be cached, just like constructor names
   */
  TranslateStrat(|S,F) :
    Match(Str(x), trm) -> 
    stm|[
      if(ATgetSymbol(~exp:trm) == ATmakeSymbol(~exp:x', 0, ATtrue))
        goto ~id:S;
      else 
        goto ~id:F;
    ]|
    where !StringLit([<escape; double-quote>x]) => x'

  TranslateStrat(|S,F) :
    Match(Int(i), trm) -> 
    stm|[
      if(~exp:LAnd(exp|[ATgetType(~exp:trm) == AT_INT]|, 
                   exp|[ATgetInt((ATermInt)~exp:trm) == ~exp:x']|))
        goto ~id:S;
      else 
        goto ~id:F;
    ]|
    where !IntConst(<try(int-to-string)>i) => x'

  TranslateStrat(|S,F) :
    Match(Real(i),trm) -> 
    stm|[
      if(~exp:LAnd(exp|[ATgetType(~exp:trm) == AT_REAL]|, 
                   exp|[ATgetReal((ATermReal)~exp:trm) == ~exp:x']|))
        goto ~id:S;
      else 
        goto ~id:F;
    ]|
    where !FloatConst(<try(real-to-string)>i) => x'

  /**
   * Translate a match of an Op, but not a Cons/2 or Nil/0.
   */
  TranslateStrat(|S,F) :
    Match(op@Op(c, ts), trm) ->
    stm|[
      if( match_cons(~exp:trm, ~id:cname) )
        { 
          ~stm*:match-args
          goto ~id:S;
        }
      else
        goto ~id:F;
    ]|
    where <not(is-ListOp)> op
	; <ConstructorName> (c, <length> ts) => cname
        ; <thread-map(\ (t,i) ->
             (
               <MatchArg1(|Next,F) <+ MatchArg2(|Next,F)> 
                  (t, exp|[ ATgetArgument(~exp:trm,~exp:IntConst(<int-to-string>i)) ]|)
             , <add>(i, 1)
             )
           \ )> (ts,0) => (match-args,_)

  is-ListOp =
    ?Op("Nil", []) + ?Op("Cons", [_, _])

  MatchArg1(|S,F) : 
    (Var(x){t*}, trm) -> <translate-strat(|S,F)> Match(Var(x){t*}, trm)

  MatchArg2(|S,F) : 
    (t, trm) -> 
    stm|[ 
      { 
         ATerm x = ~exp:trm; 
         ~stm:(<translate-strat(|S,F)> Match(t, Id(x)))
      } 
    ]|
    where new => x

  TranslateStrat(|S,F) :
    Match(Op("Nil", []), trm) ->
    stm|[
      if(~exp:LAnd(exp|[(ATgetType(~exp:trm) == AT_LIST)]|, 
                   exp|[ATisEmpty(~exp:trm)]|))
        goto ~id:S;
      else 
        goto ~id:F;
    ]|

  TranslateStrat(|S,F) :
    Match(Op("Cons", [hd, tl]), trm) ->
    stm|[
      if(~exp:LAnd(exp|[(ATgetType(~exp:trm) == AT_LIST)]|, 
                   exp|[(!(ATisEmpty(~exp:trm)))]|))
        { 
          ~stm*:match-args 
          goto ~id:S;
        }
      else
        goto ~id:F;
    ]|
    where <map(MatchArg1(|Next,F) <+ MatchArg2(|Next,F))> 
	   [(hd, FunCall(Id("ATgetFirst"),[CastATermList(trm)])), 
            (tl, CastATerm(FunCall(Id("ATgetNext"),[CastATermList(trm)])))] => match-args

/**
 * Building
 */
rules

  TranslateStrat(|S,F) :
    Build(t) -> <TranslateStrat(|S,F)> (Build(t), xs)
    where collect(?Var(<id>){t*}; where(<not(["bound"])> t* )) => xs

  TranslateStrat(|S,F) :
    (Build(t), xs) -> 
    stm|[ 
      if(~exp:e)
        goto ~id:F;
      else  
        { 
          t = ~exp:<construct-term> t; 
          goto ~id:S;
        }
    ]|
    where <not([])> xs
	; foldr(!exp|[ ATfalse ]|
	       ,!exp|[ ~id:<Fst> == NULL || ~exp:<Snd> ]|) => e

  TranslateStrat(|S,F) :
    (Build(t), []) -> 
    stm|[
      { 
        t = ~exp:<construct-term> t; 
        goto ~id:S;
      }
    ]|

/**
 * Term construction with constant term caching
 */
rules 

  init-term-caching =
    where(!Op("Nil", []) => t; !CastATerm(Id("ATempty")) => e);
    rules( Cache : t -> e )

  construct-term =
    Cache 
    <+ ConstructAnnoVar
    <+ ConstructVar
    <+ !(<id>, <ConstructTerm>)
       ; (CacheConstant <+ Snd)

  CacheConstant :
    (t, e) -> Id(x)
    where <(Op(id, map(Cache)); proper-list 
	    + Anno(Cache, Cache) 
	    + Int(id) + Str(id) + Real(id) + BuildDefault(id))> t
        ; new => base; <conc-strings>("term_", <id>) => x
        ; rules( Cache : t -> Id(x) )
        ; !(base, x, e)
        ; fragment(DeclareTermId|"ConstDecl")
        ; fragment(InitTermId|"ConstInit")

rules

  ConstructTerm :
    Int(i) -> 
    exp|[ 
      (ATerm)ATmakeInt(~exp:IntConst(<try(int-to-string)> i)) 
    ]|

  ConstructTerm :
    Real(x) -> 
    exp|[ 
      (ATerm)ATmakeReal(~exp:FloatConst(<try(real-to-string)> x)) 
    ]|

  ConstructTerm :
    Str(x) -> 
    exp|[ 
      (ATerm)ATmakeAppl(ATmakeSymbol(~exp:StringLit([<escape; double-quote>x]), 0, ATtrue)) 
    ]|

  ConstructVar :
    Term|[ x ]| -> exp|[ ~id:x ]| 

  ConstructAnnoVar :
    |[ x{^pt2} ]| -> 
    exp|[ 
      (ATerm) SRTS_setAnnotations(~id:x, ~exp:<construct-term> pt2)
    ]|

  ConstructTerm :
    |[ pt1{^Nil()} ]| -> <construct-term> pt1
    where <not(?Term|[ x ]|)> pt1

  ConstructTerm :
    |[ pt1{^pt2} ]| -> 
    exp|[ 
      (ATerm) SRTS_setAnnotations(~exp:<construct-term> pt1, ~exp:<construct-term> pt2)
    ]|
    where <not(?PreTerm|[ Nil() ]|)> pt2
        ; <not(?Term|[ x ]|)> pt1

  ConstructTerm :
    |[ _ t ]| -> <construct-term> t

  ConstructTerm :
    PreTerm|[ c(t*) ]| -> 
    exp|[ 
      (ATerm)ATmakeAppl(
               ~id:<ConstructorName>(c, <length> t*) 
               , ~exp*:<map(construct-term)>t*
             )
    ]|

  ConstructTerm :
    Explode(t1, t2) -> 
    exp|[ 
      SSL_mkterm(~exp:<construct-term> t1, ~exp:<construct-term> t2) 
    ]|

  ConstructTerm :
    Op("Nil", []) -> exp|[ (ATerm) ATempty ]|

  ConstructTerm :
    PreTerm|[ Cons(t1,t2) ]| -> 
    exp|[ 
      (ATerm)ATinsert(~exp:t2', ~exp:<construct-term> t1)
    ]|
    where
     ( <is-ListOp; construct-term> t2
     <+ !exp|[ CheckATermList(~exp:<construct-term> t2) ]|
     ) => t2'

strategies

  proper-list =
    Op("Nil", [])
    + Op("Cons", [id, proper-list])
    + Op(id, id)
      ; not(is-ListOp)

  DeclareTermId :
    (base, x, e) ->
    c:dec|[ static ATerm ~id:x; ]|

  InitTermId :
    (base, x, e) ->
    [Stat(Assign(Id(x), AssignEq, e)),
     Stat(FunCall(Id("ATprotect"),[Address(Id(x))]))]

