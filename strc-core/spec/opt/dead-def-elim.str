module dead-def-elim
imports Stratego stratlib
strategies

  dead-def-elim-io = 
    io-wrap(only-local-option, dead-def-elim-spec)

  only-local-option = 
    Option("--only-local"
	  ,where(<set-config>("--only-local", ()))
	  ,!"--only-local        do not eliminate top-level definitions")

  if-only-local(s1, s2) =
    where(<get-config>"--only-local") < s1 + s2
   
  dead-def-elim-spec = 
    Specification(
      [id,
       Strategies(
         if-only-local(id, dead-def-elim)
         ; map(local-dead-def-elim)
       )
      ]
    )

  dead-def-elim =
    where(map(RegisterDefinition))
    ; where(<mark-needed-defs> "main_0_0")
    ; filter(
        SDefT(DefNeeded,id,id,id) 
        <+ ExtSDefInl(DefNeeded,id,id,id)
        <+ ExtSDef(DefNeeded,id,id)
      )

  RegisterDefinition =
    ?sdef@SDefT(f, xs, ys, s)
    ; rules(
        Definition : f -> sdef
      )
  
  RegisterDefinition =
    ?sdef@ExtSDefInl(f, xs, ys, s)
    ; rules(
        Definition : f -> sdef
      )
  
  RegisterDefinition =
    ?sdef@ExtSDef(f, xs, ys)
    ; rules(
        Definition : f -> sdef
      )

  mark-needed-defs = 
    DefNeeded 
    <+ ?f; rules( DefNeeded : f )
        ; Definition
        ; rec x(alltd(CallT(SVar(mark-needed-defs),x,x)))

strategies 
  
  local-dead-def-elim =
    Let(id,id)
    ; {| DefDead
       : DeclareDead
       ; Let(id, local-dead-def-elim)
       ; try(DeleteDeadDefinitions)
       |}
    <+ all(local-dead-def-elim)

  DeclareDead =
    Let(map(DeclareDefDead), id)

  DeclareDefDead =
    ?SDefT(f, _, _, _)
    ; rules( DefDead+f : SDefT(f, x, y, z) -> () )

  DeleteDeadDefinitions =
     Let(filter(not(DefDead)), id)

  DeclareNotDead =
     ?CallT(SVar(f), _, _)
     ; rules( DefDead.f :- SDefT(f, _, _, _) )
  
