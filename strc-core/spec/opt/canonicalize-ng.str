module canonicalize-ng
imports Stratego-Core libstratego-lib C stratego-laws

strategies

  canonicalize-ng-io =
    io-wrap(canonicalize)

  canonicalize =
    canonicalize-sdef
    <+ canonicalize-let
    <+ ImplementTraversalOps; canonicalize
    <+ canonicalize-call; canonicalize
    <+ all(canonicalize)

  canonicalize-sdef :
    |[ f(a1*|a2*) = s ]| -> |[ f(a1*|a2*) = s' ]|
    where {| IsClosure
           : where(<map(declare-closure)> a1* )
           ; <canonicalize> s => s'
           |}

  canonicalize-let :
    |[ let def1* in s1 end ]| -> |[ let def2* in s2 end ]|
    where {| IsClosure
           : <map(try(declare-closure-def))> def1* 
	   ; <canonicalize> def1* => def2*
           ; <canonicalize> s1 => s2
           |}

  declare-closure =
    ?VarDec(f, t)
    ; rules( IsClosure : |[ f(|) ]| )

  declare-closure-def =
    ?|[ f(|) = s ]|
    ; rules( IsClosure : |[ f(|) ]| )

  canonicalize-call :
    |[ f(s1*|t*) ]| -> |[ let def* in f(s2*|t*) end ]|
    where <map(IsClosure; !([],<id>) <+ lift-call-arg)> s1*
        ; unzip; (concat, id) => (def*, s2*)
	; not(([],id))

  canonicalize-call :
    |[ prim(str,s1*|t*) ]| -> |[ let def* in prim(str,s2*|t*) end ]|
    where <map(IsClosure; !([],<id>) <+ lift-call-arg)> s1*
        ; unzip; (concat, id) => (def*, s2*)
	; not(([],id))

  lift-call-arg :
    |[ s ]| -> ([|[ g(|) = s' ]|], |[ g(|) ]|)
    where new => g
	; <canonicalize> s => s'


//  ImplementTraversalOps :
//    |[ id ]| -> |[ _Id(|) ]|

//  ImplementTraversalOps :
//    |[ fail ]| -> |[ _Fail(|) ]|

  ImplementTraversalOps :
    |[ all(s) ]| -> |[ SRTS_all(s|) ]|

  ImplementTraversalOps :
    |[ one(s) ]| -> |[ SRTS_one(s|) ]|

  ImplementTraversalOps :
    |[ some(s) ]| -> |[ SRTS_some(s|) ]|
