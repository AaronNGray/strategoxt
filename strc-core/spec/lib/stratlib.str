/**
 * Library for Strategies
 *
 * This module instantiates several language independent
 * functions to the strategy language.
 * 
 * @author Eelco Visser
 */

module stratlib
imports liblib Stratego-Sugar

//signature
//  constructors
//    DynamicRules : List(RuleDef) -> Strategy

strategies

  seqs = 
    foldr(!Id, \ (s1, s2) -> Seq(s1, s2) \ )

  lchoices = 
    foldr(!Fail, \ (s1, s2) -> LChoice(s1, s2) \ )

rules

  Add1 : Var(x)  -> [x]
  Add2 : SVar(x) -> [x]
 
  IsVar  : Var(x) -> x
  //IsSVar : Call(SVar(x), []) -> x
  //IsSVar : CallT(SVar(x), [], []) -> x
  //MkTVar : x -> Var(x)
  //MkSVar : x -> SVar(x)
  //MkCall : x -> Call(SVar(x), [])
  MkCall : x -> CallT(SVar(x), [], [])

strategies

//  SVarShape(s) = Call(SVar(s), []) + CallT(SVar(s), [], [])

/*
  Bound Variables}

  The following rules and strategies define which constructs
	bind variables. The \verb|Bnd| rules define which variables
	are bound. The \verb|paste| strategies define where new variables
	should be pasted in case of renaming. The \verb|boundin| strategies
	define in which arguments of the constructs the variables are 
	binding.
*/

rules

  Bind0 : Scope(xs, s) -> xs
  Bind0 : LRule(Rule(t1, t2, s)) -> <tvars> t1
  Bind1 : Let(defs, s2) -> <map(?SDef(<id>,_,_) + ?SDefT(<id>,_,_,_))> defs
  Bind2 : SDef(f, xs, s) -> <declared-vars> xs
  Bind3 : Rec(x, s) -> [x]

  Bind4 : GenDynRules(rs) -> <tvars> rs
//  Bind4 : DynamicRules(rs) -> <tvars> rs
//  Bind4 : OverrideDynamicRules(rs) -> <tvars> rs
//  Bind4 : ExtendDynamicRules(rs) -> <tvars> rs
//  Bind4 : ExtendOverrideDynamicRules(rs) -> <tvars> rs

  Bind5 : SDefT(f, xs, ys, s) -> <declared-vars> xs
  Bind6 : SDefT(f, xs, ys, s) -> <declared-vars> ys

  Bind7 : RDefT(f, xs, ys, s) -> <declared-vars> xs
  Bind7 : RDecT(f, xs, ys)    -> <declared-vars> xs

  Bind8 : RDefT(f, xs, ys, s) -> <declared-vars> ys
  Bind8 : RDecT(f, xs, ys)    -> <declared-vars> ys

strategies

  Bind9  = dynrule-sargs(declared-vars)
  Bind10 = dynrule-targs(declared-vars)

  dynrule-lhs(s) =
    ?UndefineDynRule(_, <s>)
  + ?SetDynRule(_, Rule(<s>, _, _))
  + ?AddDynRule(_, Rule(<s>, _, _))

  dynrule-sargs(s) =
    ?UndefineDynRule(DynRuleId(RDecT(_,<id>,_)), _)
  + ?SetDynRule(DynRuleId(RDecT(_,<id>,_)), _)
  + ?AddDynRule(DynRuleId(RDecT(_,<id>,_)), _)

  dynrule-targs(s) =
    ?UndefineDynRule(DynRuleId(RDecT(_,_,<id>)), _)
  + ?SetDynRule(DynRuleId(RDecT(_,_,<id>)), _)
  + ?AddDynRule(DynRuleId(RDecT(_,_,<id>)), _)
    
  dynrule-cong(name, sargs, targs, lhs, rhs, cond) =
    UndefineDynRule(DynRuleId(RDecT(name,sargs,targs)), lhs)
  + SetDynRule(DynRuleId(RDecT(name,sargs,targs)), Rule(lhs, rhs, cond))
  + AddDynRule(DynRuleId(RDecT(name,sargs,targs)), Rule(lhs, rhs, cond))

  dynrule-cong(drid, rule) =
    UndefineDynRule(drid, rule)
  + SetDynRule(drid, rule)
  + AddDynRule(drid, rule)
  

strategies

  tpaste(nwvars) =
    Scope(nwvars, id)
    + LRule(id) // Let the tboundin handle this, or zip tvars of LHS and nwvars here?
    + RDecT(id, id, split(id, nwvars); zip(ReplaceVar))
    + SDefT(id, id, split(id, nwvars); zip(ReplaceVar), id)
    + RDefT(id, id, split(id, nwvars); zip(ReplaceVar), id)
    + dynrule-cong(id, id, split(id, nwvars); zip(ReplaceVar), id, id, id)

  ReplaceVar :
    (VarDec(x,t), y) -> VarDec(y,t)

  ReplaceVar :
    (DefaultVarDec(x), y) -> DefaultVarDec(y)

  tboundin(bnd, ubnd, ignore) =
    Scope(ignore, bnd)
    + LRule(Rule(bnd, bnd, bnd))
    + RDecT(ignore, ignore, ignore)
    + SDefT(ignore, ignore, ignore, bnd)
    + RDefT(ignore, ignore, ignore, bnd)
    + dynrule-cong(ignore, bnd)

    + GenDynRules(bnd)
//    + DynamicRules(bnd)
//    + OverrideDynamicRules(bnd)
//    + ExtendDynamicRules(bnd)
//    + ExtendOverrideDynamicRules(bnd)

  spaste(nwvars) =
      Let(split(id,nwvars); 
          zip(\ (SDef(_,xs,s), f) -> SDef(f,xs,s)\ + 
              \ (SDefT(_,xs,ys,s), f) -> SDefT(f,xs,ys,s)\)
         , id)
    + SDef(id,  split(id, nwvars); zip(ReplaceVar), id)
    + SDefT(id, split(id, nwvars); zip(ReplaceVar), id, id)
    + RDefT(id, split(id, nwvars); zip(ReplaceVar), id, id)
    + RDecT(id, split(id, nwvars); zip(ReplaceVar), id)
    + dynrule-cong(id, split(id, nwvars); zip(ReplaceVar), id, id, id, id)
    + Rec(nwvars; Hd, id)

  sboundin(bnd, ubnd, ignore) =
      Let(bnd, bnd)
    + SDef(ignore, ignore, bnd)
    + SDefT(ignore, ignore, ignore, bnd)
    + RDefT(ignore, ignore, ignore, bnd)
    + RDecT(ignore, ignore, ignore)
    + dynrule-cong(ignore, bnd)
    + Rec(ignore, bnd)

// Free Variables and Renaming

strategies

  declared-vars =
    map(?VarDec(<id>,_) + ?DefaultVarDec(<id>))

  tvars = 
    free-vars(Add1, Bind0 + Bind4 + Bind6 + Bind8 + Bind10, tboundin)

  svars = 
    free-vars(Add2, Bind1 + Bind2 + Bind3 + Bind5 + Bind7 + Bind9, sboundin)

  trename = 
    rename(Var, Bind0 + Bind6 + Bind8 + Bind10, tboundin, tpaste)

  srename = 
    rename(SVar, Bind1 + Bind2 + Bind3 + Bind5 + Bind7 + Bind9, sboundin, spaste)

  svars-arity = 
    free-vars2(\CallT(SVar(f), as1, as2) -> [(f, (<length> as1, <length> as2))]\
              ,Bind1 + Bind2 + Bind3 + Bind5 + Bind7 + Bind9
              ,sboundin
              ,{f:?((f,_),f)})

  strename = 
    trename ; srename

  tsubstitute = 
    substitute(IsVar, Var, Bind0 + Bind4 + Bind6 + Bind8 + Bind10, tboundin, tpaste)

  tsubs = 
    substitute(IsVar)
//
//  ssubs = 
//    substitute(IsSVar)
//
//  is_var_list = 
//    map(Var(id))
//
//  is_svar_list = 
//    map(SVar(id))
//
// Context strategies for strategies
//
//strategies
//
//  conLChoice(s) = rec x(s + LChoice(x, id) + LChoice(id, x))
//
//  conChoice(s) = rec x(s + (Choice(x, id) + Choice(id, x)))
//
//  conChoiceL(s) = Choice(s, id) + s
//
//  choicebu-l'(s) = rec x(try(Choice(id, x); s))
//
//  choicebu-l(s) = rec x(try(Choice(x, x); s))
//
//  choicetd(s) = rec x(s <+ Choice(x, x))
//
//  choicemap(s) = rec x(Choice(x, x) <+ s)
//
//  choicebu(s) = rec x(try(Choice(x, x); s))
//
//  firstInSeq(s) = s <+ Seq(s, id)
//
//  lastInSeq(s) = Seq(id, rec x(s <+ Seq(not(oncetd(s)), x)))
