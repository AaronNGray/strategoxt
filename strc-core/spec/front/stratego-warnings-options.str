/**
 * @author  Merijn de Jonge (mdejonge@tue.nl)
 */
module stratego-warnings-options
imports Stratego-Sugar

signature
  constructors
    ObsoleteWarning     : Str -> Warning
    MissingBuildWarning : Index * Strategy -> Warning 
    ConstructorWarning  : Str -> Warning

overlays

  AllWarnings = [
     ("debug-arguments", "        missing build operator", "on"), 
     ("obsolete-strategy-calls", "obsolete strategies", "on"), 
     ("maybe-unbound-variables", "unbound variables", "off"),
     ("lower-case-constructors", "lower-case constructors", "on")
     ]

strategies

  stratego-warnings-options = 
    ArgOption("--warning" + "-W"
    , switch id
        case "all"  :
          <set-config> ("--warning", <map(Fst)> AllWarnings)

        case explode-string => ['n', 'o', '-' | wchars] :
          <implode-string> wchars => wstring 
	  ; warning-exists
          ; <get-config <+ get-default-warnings> "--warning"
          ; filter(not(?wstring))
          ; <set-config> ("--warning", <id>)

        case <elem> (<id>,  <get-all-warnings>) :
          <extend-config> ("--warning", [<id>])

        otherwise :
          <fatal-error> [<get-config> "program", ": ", <id>, ": no such warning"]
      end
    , <concat-strings>
        [ "-W,--warning C   Report warnings falling in category C. Categories:\n",
       "                      all                      all categories \n",
       "                      no-C                     no warnings in category C\n"
        | <Display-possible-warnings> AllWarnings() ]
    )

  get-default-warnings =
    <filter(\ (warning,_,"on") -> warning \)>AllWarnings

  get-all-warnings =
    <map(Fst)> AllWarnings
    
  warning-exists = 
    ?warning ; <fetch-elem(?(warning,_,_))>AllWarnings

  Display-possible-warnings = 
     map( \ (s,txt,df) -> <concat-strings> ["                      ",s, "  ", txt, " [ ",df," ]\n"] \ )

  get-warnings =
    <get-config> "--warning" <+ !AllWarnings(); map(Fst)
    
  pass-warnings = 
    get-warnings
    ; mapconcat(!["--warning", <id>])

