module check-constructors-test
imports liblib check-constructors 

strategies

  check-constructors-test =
    test-suite(!"check-constructors-test",
        //test0;
        //test1;
        test2//;
        //test3
    )

  bld-trm =
    !SDef("main",[],Seq(Build(Op("Add",[Int(1),Int(2)])),Seq(Call(SVar("eval"),[]),Match(Int(3)))))
 
  test0 =
    apply-test(!"test0"
        , filter(check-constructors(open(!"data/check-constructors-1.trm")))
        , ![<bld-trm>()]
        , ![]
        )

  test1 =
    apply-and-fail(!"test1"
        , check-constructors(open(!"data/check-constructors-1.trm"))
        , bld-trm
        )

  test2 =
    apply-and-fail(!"test2a"
        , manytd(CheckCons(!"bla", open(!"data/check-constructors-1.trm")))
        , !Seq(Build(Op("Add",[Int(1),Int(2)])),Seq(Call(SVar("eval"),[]),Match(Int(3))))
        );
    apply-and-fail(!"test2b"
        , manytd(CheckCons(!"bla", open(!"data/check-constructors-1.trm")))
        , !Build(Op("Add",[Int(1),Int(2)]))
        );
    apply-and-fail(!"test2c"
        , manytd(CheckCons(!"bla", open(!"data/check-constructors-1.trm")))
        , !Op("Add",[Int(1),Int(2)])
        );
    apply-test(!"test2d"
        , manytd(CheckCons(!"bla", open(!"data/check-constructors-1.trm")))
        , !Seq(Build(Op("ADD",[Int(1),Op("Bla",[])])),Seq(Call(SVar("eval"),[]),Match(Int(3))))
        , !Seq(Build(Op("ADD",[Int(1),Op("Bla",[])])),Seq(Call(SVar("eval"),[]),Match(Int(3))))
        )

  test3 =
    apply-and-fail(!"test3a"
        , CheckCons(!"bla", open(!"data/check-constructors-1.trm"))
        , !Op("Add",[Int(1),Int(2)])
        );
    apply-test(!"test3b"
        , CheckCons(!"bla", open(!"data/check-constructors-1.trm"))
        , !Op("ADD",[Int(1),Int(2)])
	, !Op("ADD",[Int(1),Int(2)])
        )
