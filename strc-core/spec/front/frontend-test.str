module frontend-test
imports libstratego-lib libstrc
strategies

  frontend-test = 
    test-suite(!"frontend-test",
      test1;
      test2a;
      test2b;
      test2c;
      test2d;
      test2e;
      test2f;
      test3a;
      test3b;
      test3c;
      test4;
      test4a
    )
 

  Rule1 = !RDef("Inline",[],Rule(Op("Var",[Var("x")]),Var("e"),Id))

  Rule2 = !RDef("Inline",[],
                Rule(Op("Call",[Var("f"),Var("es")]),Var("e"),
                     Where(Seq(AM(BA(Call(SVar("exp-rename"),[]),Var("fdec")),
				  Op("Fdec",[Wld,Var("xs"),Var("e")])),
			       BA(Call(SVar("zip"),
				       [ScopeDefault(Seq(Match(Op("TCons",[Var("x"),Op("TCons",[Var("e"),Op("TNil",[])])])),
					DynamicRules([RDef("Inline",[],Rule(Op("Var",[Var("x")]),Var("e"),Id))])))]),
				  Op("TCons",[Var("xs"),Op("TCons",[Var("es"),Op("TNil",[])])]))))))

  Rule3 = !RDef("Inline",[],Rule(Op("Var",[Var("x")]),Op("Undefined",[]),Id))

  DeclareVar =
       ![SDef("DeclareVar",[],
	     Seq(Match(Op("Vdec",[Var("x"),Var("e")])),
	         DynamicRules([RDef("Inline",[],Rule(Op("Var",[Var("x")]),Var("e"),Id))])
             ))]

  DeclareFun = 
       ![SDef("DeclareFun",[],
             Seq(Match(As(Var("fdec"),Op("Fdec",[Var("f"),Wld,Wld]))),
                 DynamicRules([
                   RDef("Inline",[],
                        Rule(Op("Call",[Var("f"),Var("es")]),Var("e"),
                          Where(Seq(AM(BA(Call(SVar("exp-rename"),[]),Var("fdec")),
				       Op("Fdec",[Wld,Var("xs"),Var("e")])),
			            BA(Call(SVar("zip"),[
				      ScopeDefault(Seq(Match(Op("TCons",[Var("x"),Op("TCons",[Var("e"),Op("TNil",[])])])),
					DynamicRules([RDef("Inline",[],Rule(Op("Var",[Var("x")]),Var("e"),Id))])))]),
				       Op("TCons",[Var("xs"),Op("TCons",[Var("es"),Op("TNil",[])])]))))))])))]

  test1 =
    apply-test(!"test1"
	, define-rule-scope
	, !SDef("inline",[],Rec("i",DynRuleScope(["Inline"],LChoice(Seq(Call(SVar("Declare"),[]),All(Call(SVar("i"),[]))),LChoice(Seq(Call(SVar("Inline"),[]),Call(SVar("i"),[])),All(Call(SVar("i"),[])))))))
	, !SDef("inline",[],Rec("i",Call(SVar("scope"),[Build(Str("Inline")),LChoice(Seq(Call(SVar("Declare"),[]),All(Call(SVar("i"),[]))),LChoice(Seq(Call(SVar("Inline"),[]),Call(SVar("i"),[])),All(Call(SVar("i"),[]))))])))
	)

  test2a =
    apply-test(!"test2a"
	, define-lrules; tvars
	, DeclareVar
	, !["x","e"]
	)

  test2b =
    apply-test(!"test2b"
	, define-lrules; SplitDynamicRule(!["x","e"],\ x -> Assert(x)\ )
	, Rule1
	, !TCons(Where(BA(Call(SVar("assert"),[Build(Str("Inline"))]),Op("TCons",[Op("Keys",[Var("x")]),Op("TCons",[Op("Defined",[Var("e")]),Op("TNil",[])])]))),TCons(RDef("Inline",[],Rule(Op("Var",[Var("x")]),Var("e"),Seq(BAM(Call(SVar("rewrite"),[Build(Str("Inline"))]),Op("Keys",[Var("x")]),Op("Defined",[Var("e")])),Id))),TNil))
	)

  test2c =
    apply-test(!"test2c"
	, define-lrules; lift-dynamic-rules
	, DeclareVar
	, ![SDef("DeclareVar",[],Seq(Match(Op("Vdec",[Var("x"),Var("e")])),Seqs([Where(BA(Call(SVar("assert"),[Build(Str("Inline"))]),Op("TCons",[Op("Keys",[Var("x")]),Op("TCons",[Op("Defined",[Var("e")]),Op("TNil",[])])])))]))),RDef("Inline",[],Rule(Op("Var",[Var("x")]),Var("e"),Seq(BAM(Call(SVar("rewrite"),[Build(Str("Inline"))]),Op("Keys",[Var("x")]),Op("Defined",[Var("e")])),Id)))]
	)

  test2d =
    apply-test(!"test2d"
	, define-lrules; SplitDynamicRule(!["x"],\ x -> Assert(x)\ )
	, Rule3
	, !
TCons(Where(BA(Call(SVar("assert"),[Build(Str("Inline"))]),Op("TCons",[Op("Keys",[Var("x")]),Op("TCons",[Op("Undefined",[]),Op("TNil",[])])]))),TCons(RDef("Inline",[],Rule(Op("Var",[Var("x")]),Op("TNil",[]),Seq(BAM(Call(SVar("rewrite"),[Build(Str("Inline"))]),Op("Keys",[Var("x")]),Op("Undefined",[])),Seq(Id,Fail)))),TNil))
	)

  test2e =
    apply-test(!"test2e"
	, define-lrules; SplitDynamicRule(!["f"],\ x -> Assert(x)\ )
	, !RDef("NewRule",[],Rule(Op("Call",[Var("f"),Wld]),Op("Undefined",[]),Id))
	, !TCons(Where(BA(Call(SVar("assert"),[Build(Str("NewRule"))]),Op("TCons",[Op("Keys",[Var("f")]),Op("TCons",[Op("Undefined",[]),Op("TNil",[])])]))),TCons(RDef("NewRule",[],Rule(Op("Call",[Var("f"),Wld]),Op("TNil",[]),Seq(BAM(Call(SVar("rewrite"),[Build(Str("NewRule"))]),Op("Keys",[Var("f")]),Op("Undefined",[])),Seq(Id,Fail)))),TNil))
	)

  test2f =
    apply-test(!"test2f"
	, define-lrules; lift-dynamic-rules
	, ![SDef("UnDeclareFun",[],Seq(Match(Op("Fdec",[Var("f"),Wld,Wld])),DynamicRules([RDef("NewRule",[],Rule(Op("Call",[Var("f"),Wld]),Op("Undefined",[]),Id))])))]
	, ![SDef("UnDeclareFun",[],Seq(Match(Op("Fdec",[Var("f"),Wld,Wld])),Seqs([Where(BA(Call(SVar("assert"),[Build(Str("NewRule"))]),Op("TCons",[Op("Keys",[Var("f")]),Op("TCons",[Op("Undefined",[]),Op("TNil",[])])])))]))),RDef("NewRule",[],Rule(Op("Call",[Var("f"),Wld]),Op("TNil",[]),Seq(BAM(Call(SVar("rewrite"),[Build(Str("NewRule"))]),Op("Keys",[Var("f")]),Op("Undefined",[])),Seq(Id,Fail))))]
	) 

  test3a =
    apply-test(!"test3a"
	, define-lrules; tvars
	, DeclareFun
	, !["fdec","f"]
	)

  test3b =
    apply-test(!"test3b"
	, define-lrules; SplitDynamicRule(!["fdec","f"],\ x -> Assert(x)\ )
	, Rule2
	, !TCons(Where(BA(Call(SVar("assert"),[Build(Str("Inline"))]),Op("TCons",[Op("Keys",[Var("f")]),Op("TCons",[Op("Defined",[Var("fdec")]),Op("TNil",[])])]))),TCons(RDef("Inline",[],Rule(Op("Call",[Var("f"),Var("es")]),Var("e"),Seq(BAM(Call(SVar("rewrite"),[Build(Str("Inline"))]),Op("Keys",[Var("f")]),Op("Defined",[Var("fdec")])),Where(Seq(AM(BA(Call(SVar("exp-rename"),[]),Var("fdec")),Op("Fdec",[Wld,Var("xs"),Var("e")])),BA(Call(SVar("zip"),[Scope(["x","e"],Seq(Match(Op("TCons",[Var("x"),Op("TCons",[Var("e"),Op("TNil",[])])])),DynamicRules([RDef("Inline",[],Rule(Op("Var",[Var("x")]),Var("e"),Id))])))]),Op("TCons",[Var("xs"),Op("TCons",[Var("es"),Op("TNil",[])])]))))))),TNil))
	)

  test3c =
    apply-test(!"test3c"
	, define-lrules; lift-dynamic-rules
	, DeclareFun
	, ![SDef("DeclareFun",[],Seq(Match(As(Var("fdec"),Op("Fdec",[Var("f"),Wld,Wld]))),Seqs([Where(BA(Call(SVar("assert"),[Build(Str("Inline"))]),Op("TCons",[Op("Keys",[Var("f")]),Op("TCons",[Op("Defined",[Var("fdec")]),Op("TNil",[])])])))]))),RDef("Inline",[],Rule(Op("Call",[Var("f"),Var("es")]),Var("e"),Seq(BAM(Call(SVar("rewrite"),[Build(Str("Inline"))]),Op("Keys",[Var("f")]),Op("Defined",[Var("fdec")])),Where(Seq(AM(BA(Call(SVar("exp-rename"),[]),Var("fdec")),Op("Fdec",[Wld,Var("xs"),Var("e")])),BA(Call(SVar("zip"),[Scope(["x","e"],Seq(Match(Op("TCons",[Var("x"),Op("TCons",[Var("e"),Op("TNil",[])])])),Seqs([Where(BA(Call(SVar("assert"),[Build(Str("Inline"))]),Op("TCons",[Op("Keys",[Var("x")]),Op("TCons",[Op("Defined",[Var("e")]),Op("TNil",[])])])))])))]),Op("TCons",[Var("xs"),Op("TCons",[Var("es"),Op("TNil",[])])]))))))),RDef("Inline",[],Rule(Op("Var",[Var("x")]),Var("e"),Seq(BAM(Call(SVar("rewrite"),[Build(Str("Inline"))]),Op("Keys",[Var("x")]),Op("Defined",[Var("e")])),Id)))]
	)

  test4 =
    apply-test(!"test4"
	, LiftDynamicRules
, !
Specification(
[Signature([]),
Overlays([]),
Strategies([

SDef("inline",[],Rec("i",DynRuleScope(["Inline"],LChoice(Seq(Call(SVar("Declare"),[]),All(Call(SVar("i"),[]))),LChoice(Seq(Call(SVar("Inline"),[]),Call(SVar("i"),[])),All(Call(SVar("i"),[]))))))),

SDef("Declare",[],Call(SVar("Let"),[Call(SVar("list"),[Choice(Call(SVar("DeclareFun"),[]),Call(SVar("DeclareVar"),[]))]),Id])),

SDef("DeclareVar",[],Seq(Match(Op("Vdec",[Var("x"),Var("e")])),DynamicRules([RDef("Inline",[],Rule(Op("Var",[Var("x")]),Var("e"),Id))]))),

SDef("DeclareFun",[],Seq(Match(As(Var("fdec"),Op("Fdec",[Var("f"),Wld,Wld]))),DynamicRules([RDef("Inline",[],Rule(Op("Call",[Var("f"),Var("es")]),Var("e"),Where(Seq(AM(BA(Call(SVar("exp-rename"),[]),Var("fdec")),Op("Fdec",[Var("f"),Var("xs"),Var("e")])),BA(Call(SVar("zip"),[ScopeDefault(Seq(Match(Op("TCons",[Var("x"),Op("TCons",[Var("e"),Op("TNil",[])])])),DynamicRules([RDef("Inline",[],Rule(Op("Var",[Var("x")]),Var("e"),Id))])))]),Op("TCons",[Var("xs"),Op("TCons",[Var("es"),Op("TNil",[])])]))))))])))

])])
	, ! 
Specification([Signature([]),Overlays([]),Strategies([SDef("inline",[],Rec("i",Call(SVar("scope"),[Build(Str("Inline")),LChoice(Seq(Call(SVar("Declare"),[]),All(Call(SVar("i"),[]))),LChoice(Seq(Call(SVar("Inline"),[]),Call(SVar("i"),[])),All(Call(SVar("i"),[]))))]))),SDef("Declare",[],Call(SVar("Let"),[Call(SVar("list"),[Choice(Call(SVar("DeclareFun"),[]),Call(SVar("DeclareVar"),[]))]),Id])),SDef("DeclareVar",[],Seq(Match(Op("Vdec",[Var("x"),Var("e")])),Seqs([Where(BA(Call(SVar("assert"),[Build(Str("Inline"))]),Op("TCons",[Op("Keys",[Var("x")]),Op("TCons",[Op("Defined",[Var("e")]),Op("TNil",[])])])))]))),RDef("Inline",[],Rule(Op("Var",[Var("x")]),Var("e"),Seq(BAM(Call(SVar("rewrite"),[Build(Str("Inline"))]),Op("Keys",[Var("x")]),Op("Defined",[Var("e")])),Id))),SDef("DeclareFun",[],Seq(Match(As(Var("fdec"),Op("Fdec",[Var("f"),Wld,Wld]))),Seqs([Where(BA(Call(SVar("assert"),[Build(Str("Inline"))]),Op("TCons",[Op("Keys",[Var("f")]),Op("TCons",[Op("Defined",[Var("fdec"),Var("f")]),Op("TNil",[])])])))]))),RDef("Inline",[],Rule(Op("Call",[Var("f"),Var("es")]),Var("e"),Seq(BAM(Call(SVar("rewrite"),[Build(Str("Inline"))]),Op("Keys",[Var("f")]),Op("Defined",[Var("fdec"),Var("f")])),Where(Seq(AM(BA(Call(SVar("exp-rename"),[]),Var("fdec")),Op("Fdec",[Var("f"),Var("xs"),Var("e")])),BA(Call(SVar("zip"),[ScopeDefault(Seq(Match(Op("TCons",[Var("x"),Op("TCons",[Var("e"),Op("TNil",[])])])),Seqs([Where(BA(Call(SVar("assert"),[Build(Str("Inline"))]),Op("TCons",[Op("Keys",[Var("x")]),Op("TCons",[Op("Defined",[Var("e")]),Op("TNil",[])])])))])))]),Op("TCons",[Var("xs"),Op("TCons",[Var("es"),Op("TNil",[])])]))))))),RDef("Inline",[],Rule(Op("Var",[Var("x")]),Var("e"),Seq(BAM(Call(SVar("rewrite"),[Build(Str("Inline"))]),Op("Keys",[Var("x")]),Op("Defined",[Var("e")])),Id)))])])

	)

just-a-spec = 
!Specification([Signature([Operations([OpDecl("C",FunType([Var("a")],Var("b")))])]),Overlays([]),Strategies([SDef("g",["s1","s2"],Rec("x",LChoice(Seq(Call(SVar("s1"),[]),Call(SVar("x"),[])),Call(SVar("s2"),[])))),SDef("f",["s"],Call(SVar("C"),[LChoice(Call(SVar("s"),[]),Id)])),SDef("h",["s"],Id),SDef("h",["s"],Fail),SDef("h",[],Match(Op("C",[Wld]))),SDef("main",[],Call(SVar("f"),[Id]))])])

  test4a =
    apply-test(!"test4a"
	, LiftDynamicRules
	, just-a-spec 
	, just-a-spec 
	)
