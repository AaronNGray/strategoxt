module raise-annotations
imports liblib Stratego-Sugar
strategies

  raise-annotations-io =
    io-wrap(
      raise-annotations
    )

  raise-annotations' =
    raise-annotations(raise-in-match, raise-in-build, raise-in-overlay)

  raise-annotations(mch, bld, ovl) = 
  rec raise(
    alltd(
        LabeledDynRuleScopeId(id, bld)
      + AddLabelDynRuleId(raise, bld)
      + LabeledDynRuleId(raise, bld)
      + SetDynRuleMatch(raise, bld)
      + UndefineDynRule(raise, bld)
      + AddScopeLabel(id, bld)

      + Rule(mch, bld, raise)
      + RuleNoCond(mch, bld)
      
      + Overlay(id, id, ovl)
      + OverlayNoArgs(id, ovl)

      + AM(raise, mch)
      + Prim(id, map(bld))
      + BA(raise, bld)
      + PrimT(id, map(raise), map(bld))

      + Build(bld)
      + Match(mch)

      + CallT(id, map(raise), map(bld))   
    )
  )

  raise-in-match =
    alltd(
      (annolist-to-anno + match-no-anno); raise-in-match
      + App(raise-annotations, raise-in-build)
      + RootApp(raise-annotations)
   )

  raise-in-build =
    alltd(
      (annolist-to-anno + build-no-anno); raise-in-build
      + App(raise-annotations, raise-in-build)
      + RootApp(raise-annotations)
    )

  raise-in-overlay =
    alltd(
      (annolist-to-anno + overlay-no-anno); raise-in-overlay
      + App(raise-annotations, raise-in-overlay)
      + RootApp(raise-annotations)
    )

  annolist-to-anno :
    |[ pt{} ]| -> |[ pt{^Nil()} ]|

  annolist-to-anno :
    |[ pt{t,t*} ]| -> |[ pt{^Cons(t,t')} ]|
    where <foldr(!|[ Nil(){^Nil()} ]|, \ (t1, t2) -> |[ Cons(t1, t2){^Nil()} ]| \ )> t* => t'

  match-no-anno :
    |[ pt ]| -> |[ pt{^_} ]|

  build-no-anno :
    |[ pt ]| -> |[ pt{^Nil()} ]|

  overlay-no-anno :
    |[ pt ]| -> |[ pt{^_ Nil()} ]|


  raise-annotations = 
    transform-mbo(annolist-to-anno + match-no-anno
		 ,annolist-to-anno + build-no-anno
		 ,annolist-to-anno + overlay-no-anno)

  transform-mbo(mch, bld, ovl) = 
  let

    in-match  =
      alltd(
        mch; in-match
        + App(traverse, in-build)
        + RootApp(traverse)
      )

    in-build =
      alltd(
        bld; in-build
        + App(traverse, in-build)
        + RootApp(traverse)
      )

    in-overlay =
      alltd(
        ovl; in-overlay
        + App(traverse, in-overlay)
        + RootApp(traverse)
      )

    traverse =
      alltd(
          LabeledDynRuleScopeId(id, in-build)
        + AddLabelDynRuleId(traverse, in-build)
        + LabeledDynRuleId(traverse, in-build)
        + SetDynRuleMatch(traverse, in-build)
        + UndefineDynRule(traverse, in-build)
        + AddScopeLabel(id, in-build)

        + Rule(in-match, in-build, traverse)
        + RuleNoCond(in-match, in-build)
      
        + Overlay(id, id, in-overlay)
        + OverlayNoArgs(id, in-overlay)

        + AM(traverse, in-match)
        + Prim(id, map(in-build))
        + BA(traverse, in-build)
        + PrimT(id, map(traverse), map(in-build))

        + Build(in-build)
        + Match(in-match)

        + CallT(id, map(traverse), map(in-build))
      )

  in traverse end

