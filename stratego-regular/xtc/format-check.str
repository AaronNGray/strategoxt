module format-check
imports 
  libstratego-lib
  libstratego-xtc strategoxt-xtc-tools tool-doc regular-options regular-xtc-tools

/**
 * Main program
 */
strategies

  main-format-check = 
    xtc-io-wrap(
      fc-options
    , fc-usage
    , fc-about 
    , !["core-format-check"]
    , if is-xhtml-mode then
        format-check-to-xhtml
      else
        if is-vis-mode then
          format-check-pp-aterm
        else
          format-check
        end
      end
    ; xtc-output(id)
    ; get-exit-code
    ; xtc-exit
    )

  format-check =
    xtc-ensure-file
    ; xtc-transform(!"core-format-check", 
          <flatten-list> ["--rtg-nf", <input-to-rtg-nf>, <pass-verbose> (), <pass-start-nonterm>, <pass-fast-mode>]
      )
    <+ <xtc-exit> 1


  format-check-to-xhtml =
    xtc-ensure-file
    ; xtc-try-transform(!"core-format-check-to-xhtml",
          <flatten-list> ["--rtg-nf", <input-to-rtg-nf>, <pass-verbose> (), <pass-start-nonterm>]
      )
    ; xtc-transform(!"pp-xml-doc", pass-verbose)

  format-check-pp-aterm =
    xtc-ensure-file
    ; xtc-transform(!"core-format-check-pp-aterm",
          <flatten-list> ["--rtg-nf", <input-to-rtg-nf>, <pass-verbose> (), <pass-start-nonterm>]
      )
    ; xtc-abox2text

strategies

  xtc-try-transform(tool, args) :
    FILE(f) -> FILE(g)
    where <xtc-new-file> f => g
        ; ( <conc; xtc-command(tool)> (<args>, ["-i", f, "-o", g])
          <+ where(<set-config> ("--exit-code", 1))
          )

  get-exit-code =
    <get-config> "--exit-code" <+ !0

/**
 * Options
 */
strategies

  fc-options =
         rtg-option(|"Format check against rtg in file")
    + rtg-nf-option(|"Format check against normalized rtg in file")
    + start-nonterm-option(|"Term must be of type s (default: start non-terms of rtg)")
    + xhtml-option
    + vis-option
    + fast-option(|"Run as fast as possible. Might reduce quality of error messages.")

  xhtml-option =
    Option("--xhtml"
    , set-xhtml-mode
    , !HelpString("--xhtml", "Present the result in XHTML")
    )

  is-xhtml-mode =
    <get-config> "--xhtml"

  set-xhtml-mode =
    <set-config> ("--xhtml", ())

  vis-option =
    Option("--vis"
    , set-vis-mode
    , !HelpString("--vis", "Visualize in colored pp-aterm")
    )

  is-vis-mode =
    <get-config> "--vis"

  set-vis-mode =
    <set-config> ("--vis", ())

  fc-usage =
    <tool-doc> fc-tool-doc()

  fc-about =
    <tool-doc> fc-tool-about()

overlays

  /**
   * Do not edit the description here: instead edit the wiki topic and copy
   * the description to the source code.
   */
  fc-tool-doc =
    [ Usage("format-check --rtg file [OPTIONS]")
    , Summary(
       "
format-check analyzes whether the input ATerm conforms to the format
that is specified in the RTG (Regular Tree Grammar).
	"
      )
    , OptionUsage()
    , Description(["
format-check verifies that the input ATerm is part of the language
defined in the RTG.  If this is not the case, then the ATerm contains
format errors. format-check can operate in three modes: plain,
visualize and XHTML.
	","
The plain mode is used if the other modes are not enabled. In the
plain mode format errors are reported and no result is written the the
output (stdout or a file). Hence, if format-check is included in a
pipeline, then the following tool will probably fail. If the input
term is correct, then it is written to the output.
	","
The visualize mode is enabled with the --vis option. In visualize mode
format errors are reported and in a pretty-printed ATerm will be
written to the output. All innermost parts of the ATerm that cause
format errors are printed in red, if your terminal supports control
characters for colors. If you want to browse through the ATerm with
less, then you should use the -r flag.
	","
The XHTML mode is enabled with the --xhtml option. In XHTML mode
format errors are reported and an report in XHTML will be written to
the output. This report shows the parts of the ATerm that are not
formatted correctly. Also, moving with your mouse over the nodes of
ATerm, will show the non-terminals that have be inferred by
format-check (do not use IE6. Firefox or Mozilla is recommended).
	","
format-check reports all innermost format errors. That is, only the
deepest format errors are reported. A format error is reported by
showing the ATerm that is not in the correct format, and the inferred
types of the children of the ATerm. In XHTML and visualize mode a
format error of term in a list is presented by a red comma and
term. This means that a type has been inferred for the term itself,
but that it is not expected at this point in the list. If only the
term is red, then no type could be inferred for the term itself.
	","
In all modes format-check succeeds (exit code 0) if the ATerm contains
no format errors. If the term does contain format errors, then
format-check fails (exit code 1).
	"])
    , AutoReportBugs()
    ]

  fc-tool-about =
    [ AutoProgram()
    , Author(Person("Martin Bravenboer", "martin@cs.uu.nl"))
    , GNU_LGPL("2002-2004", "Martin Bravenboer <martin@cs.uu.nl>")
    , WebHome("http://www.program-transformation.org/Tools/FormatCheck")
    , Config([
        DefaultXTCRepository()
      , CurrentXTCRepository()
      ]) 
    ]
