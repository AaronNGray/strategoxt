module rtg-script
imports
  libstratego-xtc
  regular-xtc-tools
  rtg
  tool-doc

signature
  constructors
                  : List(RTGCommand) -> RTGScript
    Read          : String -> RTGCommand
    Include       : List(RTGCommand) -> RTGCommand

    DeleteNonterm : String -> RTGCommand
    DeleteTerm    : String * String -> RTGCommand
    DeleteTerm    : String -> RTGCommand

    Reduce        : RTGCommand 
    Group         : RTGCommand

strategies

  main-rtg-script =
    xtc-io-wrap(
      include-option
    , rtg-script-usage
    , rtg-script-about
    , ![]
    , read-from
      ; rtg-script-eval 
      ; xtc-pp-rtg
    )

strategies

  rtg-script-eval =
    !(<id>, ())
    ; foldl(eval-command)

rules

  eval-command :
    (Read(file), ()) ->
      <find-in-includes; xtc-parse-rtg> FILE(<conc-strings> (file, ".rtg"))

  eval-command :
    (Reduce(), file) ->
      <xtc-rtg-reduce> file

  eval-command :
    (Group(), file) ->
      <xtc-rtg-group> file

  eval-command :
    (DeleteNonterm(s), file) ->
      < read-from
      ; RTG(
          Start(filter(not(?Nonterm(s))))
        , ProdRules(filter(not(?ProdRule(Nonterm(s), _))))
        )
      ; write-to
      > file

  eval-command :
    (DeleteTerm(nt, t), file) -> 
      < read-from
      ; RTG(
          id
        , ProdRules(
            map(
              try(ProdRule(?Nonterm(nt), filter(not(oncetd(?t)))))
            )
          ; filter(not(ProdRule(id, [])))
          )
        )
      ; write-to
      > file

  eval-command :
    (DeleteTerm(t), file) -> 
      < read-from
      ; RTG(
          id
        , ProdRules(
            map(
              try(ProdRule(id, filter(not(oncetd(?t)))))
            )
          ; filter(not(ProdRule(id, [])))
          )
        )
      ; write-to
      > file

  eval-command :
    (Include(cmds), file) ->
      < read-from
      ; RTG(Start(<union> (start, <id>)), ProdRules(<conc> (<id>, prod-rules)))
      ; write-to
      >  file

        where <rtg-script-eval> cmds
            ; read-from
            ; ?RTG(Start(start), ProdRules(prod-rules))

strategies

  include-option =
    ArgOption("-I" + "--Include"
    , <post-extend-config> ("-I", [<id>])
    , !HelpString("-I d|--Include d", "Include RTGs from directory d")
    )

  /**
   * @type File -> File
   */
  find-in-includes =
    ?FILE(filename)
    ; <find-in-path> (filename, <get-includes>)
    ; !FILE(<id>)
    <+ where(?FILE(<id>); <fatal-error> ["rtg-script: file '", <id>, "' not found"])

  /**
   * @type _ -> List(String)
   */
  pass-includes =
    <get-config> "-I"
    ; rec x(
        [id | x]; !["-I" | <id>] <+ []
      )

  get-includes =
    <conc> (<get-config> "-I", ["."]) <+ !["."]

strategies

  rtg-script-usage =
    <tool-doc>
    [ Usage("rtg-script -i file [OPTIONS]")
    , Summary("Produces an RTG by executing an RTG script")
    , OptionUsage()
    , AutoReportBugs()
    ]

  rtg-script-about =
    <tool-doc>
    [ AutoProgram()
    , Author(Person("Martin Bravenboer", "martin@cs.uu.nl"))
    , GNU_LGPL("2002-2004", "Martin Bravenboer <martin@cs.uu.nl>")
    , Config([
        DefaultXTCRepository()
      , CurrentXTCRepository()
      ]) 
    ]
