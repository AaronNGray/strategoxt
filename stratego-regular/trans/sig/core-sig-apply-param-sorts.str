/**
 * Transforms a stratego signature to a StrategoSignature.
 * The input must be a Stratego AST, produced by pack-stratego.
 *
 * @author  Martin Bravenboer <martin@cs.uu.nl>
 */
module core-sig-apply-param-sorts
imports libstratego-lib Stratego

strategies

  main-core-sig-apply-param-sorts =
    io-wrap(sig-apply-param-sorts)

  sig-apply-param-sorts =
    param-sorts-to-dynrules

  param-sorts-to-dynrules =
    where(
      collect-om(is-param-constructor)
    ; map(declare-constructor)
    )
    ; topdown(apply-sort)
    ; \ Specification(sections) ->
          Specification(<conc> (sections, [Signature([Constructors(<bagof-GeneratedOpDecl; make-set> ())])])) \
    ; bottomup(
        try(
          Constructors(filter(not(is-param-constructor)))
        + Signature(filter(not(?Constructors([]))))
        + Specification(filter(not(?Signature([]))))
        )
      )

  apply-sort =
    if must-be-applied then
      ApplySort
      <+ ?Sort("List", [_])
         ; log(|Error(), "Cannot apply List. Is list-cons imported?", <id>); <exit> 1
      <+   log(|Error(), "Cannot apply parameterized sort", <id>); <exit> 1
    else
      id
    end

  must-be-applied = 
    ?Sort(_, actparams)
    ; where(<gt> (<length> actparams, 0))
    ; where(<map(?Sort(_, _))> actparams)

  declare-constructor =
      ?decl
    ; where(produced-sort => Sort(s, params))
    ; <length> params => x
    ; rules(
        ConstructorsFor :+ Sort(s, x) -> decl
          
        ApplySort :
          Sort(s, actparams) -> <ImplodeParamType> Sort(s, actparams)
            where <length> actparams => x
                ; <map(?Sort(_, _))> actparams
                ; !params

                ; <bagof-ConstructorsFor> Sort(s, x)
                ; map({decl':
                    bottomup(
                         \ v@SortVar(_) -> <index> (<get-index> (v, params), actparams) \
                      <+ ImplodeParamType
                      <+ id
                    )
                  ; ?decl'
                  ; rules(
                      GeneratedOpDecl :+ () -> decl'
                    )
                  } )
      )

  /**
   * Concats ConstType with ConstType arguments.
   */
  ImplodeParamType :
    Sort(s1, actparams@[_|_]) -> Sort(<conc-strings> (s1, s2), [])
      where <map(?Sort(<id>, [])); concat-strings> actparams => s2

  /**
   * Collect all applications in arguments of constructors.
  collect-applications =
    let project-args = ?OpDecl(_, FunType(<id>, _))
     in collect-all(is-param-type, union,
          if is-param-constructor
          then !()
          else project-args
          end
   */

strategies

  is-param-constructor =
    ?OpDecl(_, _)
    ; where(produced-sort; is-param-sort)

  is-param-sort =
    ?Sort(_, [_ | _])

  produced-sort =
    ?OpDecl(_, ConstType(<id>))

  produced-sort =
    ?OpDecl(_, FunType(_, ConstType(<id>)))
