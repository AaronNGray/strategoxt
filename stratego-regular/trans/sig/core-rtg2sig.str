/**
 * Generates a Stratego signature from an RTG.
 *
 * @author  Martin Bravenboer <martin@cs.uu.nl>
 */
module core-rtg2sig 
imports Stratego rtg options rtg-util module-option logging stratego-rtg

strategies

  main-core-rtg2sig =
    io-wrap(module-option, rtg2sig)

strategies

  /**
   * @type  RTG -> StrategoModule
   */ 
  rtg2sig =
      group-productions
    ; RTG(id, ProdRules(filter(not(ignore-prodrule))))
    ; ungroup-productions

    ; ?RTG(Start(starts), ProdRules(prods))
    ; !|[
        module ~<get-module-name>
        imports list-cons option

        signature
          constructors
            ~*<map(prodrule-to-constr)> prods
      ]|

/**
 * @todo  Create at least some constructors for labelled content models
 * @todo  Anonymous term applications
 */
strategies

  /**
   * @type  ProdRule -> Opdecl
   */
  prodrule-to-constr =
       empty-prodrule-to-constr
    <+ not-empty-prodrule-to-constr
    <+ ref-prodrule-to-constr
    <+ log(|Error(), "Cannot rewrite production", <id>); fail

/**
 * This somewhat ad-hoc, but it works fine for sdf2rtg | rtg2sig 
 */
strategies

  ignore-prodrule =
       declare-plus-list
    <+ is-list-prodrule

  is-list-prodrule = 
    where(
      collect(?Appl(<id>, []))
    ; ?[_|_]
    ; map(ConcTerm() + ConsTerm() + NilTerm())
    )

  declare-plus-list =
    ?ProdRule(Nonterm(srtx1), alts)
    ; where(
        <length> alts => 4
      ; !alts
      ; filter(?Appl(ConcTerm(), [Ref(_), Ref(_)]))
      ; length => 3
      ; !alts
      ; fetch(?Appl(ConsTerm(), [Ref(Nonterm(srtx)), Ref(Nonterm(srtx2))]))
      ; rules(
          ListTree2Sort : Ref(Nonterm(srtx1)) -> Sort |[ List(srtx) ]|
          ListTree2Sort : Ref(Nonterm(srtx2)) -> Sort |[ List(srtx) ]|
        )
      )






