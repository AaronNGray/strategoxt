/**
 * @author  Martin Bravenboer <martin@cs.uu.nl>
 */
module core-format-check-pp-aterm
imports
  libstratego-lib 
  ugly-print
  core-format-check

strategies

  main-core-format-check-pp-aterm =
    io-wrap(core-fc-options,
      format-check-pp-aterm
    )

strategies

  format-check-pp-aterm =
      where(new-hashtable => tbl)
    ; where(new-iset => set)
    ; main-format-check(|tbl, set)
    ; pp-aterm-types(|tbl, set)

strategies

  pp-aterm-types(|tbl, set) =
      ugly-print-type(|tbl, set)
    ; concat-content

strategies

  my-ugly-print(|tbl, set) =
       UP-Int
    <+ UP-Real
    <+ UP-Str
    <+ my-UP-List(ugly-print-type(|tbl, set) | tbl, set)
    <+ UP-Tuple(ugly-print-type(|tbl, set))
    <+ UP-Cnst	
    <+ UP-App(ugly-print-type(|tbl, set))

  ugly-print-type(|tbl, set) =
    ugly-print-type(my-ugly-print(|tbl, set) | tbl, set)

  ugly-print-type(s|tbl, set) =
    if is-typed(|tbl, set) <+ one-consnil(not(is-typed(|tbl, set))) then
      s
    else
      s => b
      ; where(code-red   => s1)
      ; where(code-plain => s2)
      ; !|[ H hs=0 [s2 s1 b s1 s2] ]|
    end

  my-UP-List(s|tbl, set) =
    my-pp-generic-list(s, !|[ "[]" ]|, !|[ "[" ]|, !|[ "]" ]| | tbl, set)
    
strategies
      
  my-pp-generic-list(s, empty, before, after | tbl, set) =
      where(<gt> (<term-size>, 10))
    < my-generic-list-worstcase(s, empty, before, after | tbl, set)
    + my-generic-list-nicecase(s, empty, before, after | tbl, set)
    
  my-pp-generic-list(s, empty, before, after) :
    [] -> <empty> ()
    
  my-generic-list-nicecase(s, empty, before, after | tbl, set) :
    [x | xs] -> |[
      H hs=0 [
        ~<before> ()
        ~<s> x ~*tail
        ~<after> ()
      ]
    ]|
      where <map-consnil(
                ugly-print-type(
                  ?[<id> | _]
                ; ! |[ H hs=1 [ "," ~<s> ] ]|
                | tbl, set)
              )> xs => tail

  my-generic-list-worstcase(s, empty, before, after | tbl, set) :
    [x | xs] -> |[
      V vs=0 [
        H hs=1 [
          ~<before> ()
          ~<s> x
        ]
        ~*tail
        ~<after> ()
      ]
    ]|
      where <map-consnil(
               ugly-print-type(
                 ?[<id> | _]
               ; ! |[ H hs=1 [ "," ~<s> ] ]|
               | tbl, set)
             )> xs => tail

strategies

  code-red =
    <conc-strings> (<implode-string> [27], "[01;31m")

  code-plain =
    <conc-strings> (<implode-string> [27], "[m")

  is-typed(|tbl, set) = 
    where(get-types(|tbl, set); iset-elements => [_ | _])

strategies

  concat-content =
    bottomup( try( \ Conc(l1, l2) -> <conc> (l1, l2) \ ))
