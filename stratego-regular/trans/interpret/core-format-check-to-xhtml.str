/**
 * @author  Martin Bravenboer <martin@cs.uu.nl>
 */
module core-format-check-to-xhtml
imports
  liblib 
  xml-doc
  core-format-check

strategies

  main-core-format-check-to-xhtml =
    io-wrap(core-fc-options,
      format-check-to-xhtml
    )

  format-check-to-xhtml =
      print-to-xhtml-doc

  print-to-xhtml-doc =
    !%>
      <?xml version="1.0"?>
      <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd" >

      <html>
        <head>
          <title>format-check report</title>
        </head>
        <body>
          <h1>format-check report</h1>

          <p>
            <% print-to-xhtml %>
          </p>
        </body>
      </html>
    <%
    ; concat-content

  print-to-xhtml =
       print-Int
    <+ print-Real
    <+ print-Str
//    <+ print-List
//    <+ print-Tuple
    <+ print-Cnst
    <+ print-App

(*
  ugly-print-without-anno
  // has-annotation < ugly-print-with-anno + ugly-print-without-anno


  ugly-print-with-anno :
    t -> |[  H hs=0 [  ~plain ~annos ] ]|
      where <ugly-print-without-anno> t => plain
          ; < get-annotations
            ; pp-generic-list(ugly-print, !|[ "{}" ]|, !|[ "{" ]|, !|[ "}" ]|)
            > t => annos
*)

rules

  /**
   * @todo  escape the string.
   */
  print-Str :
    s -> %>"<% !s :: cdata %>"<%
      where <is-string> s

  print-Int :
    x -> %><% !s :: cdata %><%
      where <is-int> x
          ; <int-to-string> x => s

  print-Real :
    x ->  %><% !s :: cdata %><%
      where <is-real> x
          ; <real-to-string> x => s

/**
 * Constructor applications
 */
rules 

  print-Cnst : 
    f#([]) -> %><% !f :: cdata %>()<%

  print-App =
    if <gt> (<term-size>, 8) then
      print-App-worstcase
    else
      print-App-nicecase
    end

  print-App-nicecase:  
    f#([x | xs]) ->
      %><span><% !f :: cdata %>(<% !children :: content* %>)</span><%
      where < map(print-to-xhtml)
            ; <separate-by> (%>,<%, <id>)
            > [x | xs] => children

  print-App-worstcase:  
    f#([x | xs]) ->
      %><div>
          <% !f :: cdata %>(
            <div>
              <div style="padding-left: 1em"><% <print-to-xhtml> x %></div>
              <% <map(
                   print-to-xhtml
                 ; !%><div>
                        <span style="position: absolute">,</span>
                        <span style="padding-left: 1em"><% id %></span>
                      </div><%
                 )> xs
               :: content* %>
            </div>
          )
        </div><%

(*
rules // tuples and list      
         
  UP-Tuple(s) =
    ?""#(<id>); pp-generic-list(s, !|[ "()" ]|, !|[ "(" ]|, !|[ ")" ]|)
            
  UP-List(s) =
    pp-generic-list(s, !|[ "[]" ]|, !|[ "[" ]|, !|[ "]" ]|)
    
strategies
      
  pp-generic-list(s, empty, before, after) =
      where(<gt> (<term-size>, 10))
    < generic-list-worstcase(s, empty, before, after)
    + generic-list-nicecase(s, empty, before, after)
    
  pp-generic-list(s, empty, before, after) :
    [] -> <empty> ()
    
  generic-list-nicecase(s, empty, before, after) :
    [x | xs] -> |[
      H hs=0 [
        ~<before> ()
        ~<s> x ~*tail
        ~<after> ()
      ]
    ]|
      where <map(! |[ H hs=1 [ "," ~<s> ] ]| )> xs => tail

  generic-list-worstcase(s, empty, before, after) :
    [x | xs] -> |[
      V vs=0 [
        H hs=1 [
          ~<before> ()
          ~<s> x
        ]
        ~*tail
        ~<after> ()
      ]
    ]|
      where <map(! |[ H hs=1 [ "," ~<s> ] ]| )> xs => tail
*)

strategies 

  concat-content = 
    bottomup( try( \ Conc(l1, l2) -> <conc> (l1, l2) \ ))
