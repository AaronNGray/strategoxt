/**
 * @author  Martin Bravenboer <mbravenb@cs.uu.nl>
 */
module implode-iregexp
imports iregexp

/**
 * Abbreviations
 */
strategies

  try-implode-iregexp =
    try-implode-iregexp(id)

  try-implode-iregexp(snode) =
    rec x(
       implode-iregexp(x, snode)
    <+ log(|Error(), "Cannot implode regexp instance", <id>); fail
    )

  implode-iregexp =
    implode-iregexp(id)

  implode-iregexp(snode) =
    rec x(implode-iregexp(x, snode))

  implode-iregexp-to-list =
    implode-iregexp-to-list(id)

  implode-iregexp-to-list(snode) =
    implode-to-list(implode-iregexp(snode))

rules

  implode-iregexp(rec, snode) :
    ISym(node) -> <snode> node

  implode-iregexp(rec, snode) :
    IStar(is) -> <map(rec)> is

  implode-iregexp(rec, snode) :
    IPlus(is) -> <map(rec)> is

  implode-iregexp(rec, snode) :
    IOpt(None()) -> None()

  implode-iregexp(rec, snode) :
    IOpt(Some(i)) -> Some(<rec> i)

  implode-iregexp(rec, snode) :
    ISeq(i1, i2) -> (<rec> i1, <rec> i2)
    // TODO: improve if i2 is iseq

rules

  implode-to-list(rec) =
    iregexp-to-list(rec) <+ ![<rec>]

  iregexp-to-list(rec) :
    ISeq(i1, i2) -> <conc> (<implode-to-list(rec)> i1 , <implode-to-list(rec)> i2)

//  iregexp-to-list(rec) :
//    iseq(i*) -> <map(implode-to-list(rec)); concat> i*

  iregexp-to-list(rec) :
    IEmpty() -> []