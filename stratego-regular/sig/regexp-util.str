/**
 * @author Martin Bravenboer <martinb@cs.uu.nl>
 */
module regexp-util
imports regexp list-basic

/**
 * Compose a list of regular expressiosn into one.
 *
 * @type List(RegExp(a)) -> RegExp(a)
 */
strategies

  regexp-list-to-seq =
    foldr1(\ (r1, r2) -> Seq(r1, r2) \)

  regexp-list-to-seq =
    ?[<id>]

strategies

  /**
   * @type  RegExp(a) -> List(RegExp(a))
   */
  regexp-seq-to-list =
    rec x(
       \ Seq(r1, r2) -> [r1 | <x> r2] \
    <+ \ Empty()     -> []            \
    <+ \ r           -> [r]           \
    )
    ; filter(not(?Empty()))

strategies

  regexp-desugar =
    regexp-bottomup(
      id
    , id
    , id
    , \ Plus(r) -> Seq(r, Star(r)) \
    , id
    , id
    , \ Opt(r) -> Choice(r, Empty()) \
    )

strategies

  /**
   * @type RegExp(a) -> List(a)
   */
  regexp-symbols =
    regexp-bottomup(
      \ Empty() -> []  \
    , \ Sym(a)  -> [a] \
    , \ Star(r) -> r   \
    , \ Plus(r) -> r   \
    , \ Seq(r1, r2)    -> <conc> (r1, r2) \
    , \ Choice(r1, r2) -> <conc> (r1, r2) \
    , \ Opt(r)         -> r \
    )

strategies

  regexp-bottomup(empty-s, sym-s, star-s, plus-s, seq-s, choice-s, opt-s) = 
    rec x(
      Empty(); empty-s
    + Sym(id); sym-s
    + Plus(x); plus-s
    + Star(x); star-s
    + Seq(x, x); seq-s
    + Choice(x, x); choice-s
    + Opt(x); choice-s
    )

  regexp-topdown(s) = 
    s; regexp-all(regexp-topdown(s))

  regexp-bottomup(s) = 
    regexp-bottomup(s, s, s, s, s, s, s)

  regexp-all(s) =
      Empty()
    + Sym(id)
    + Seq(map(s))
    + Plus(s)
    + Star(s)
    + Seq(s, s)
    + Choice(s, s)
    + Opt(s)