module needed-defs-test
imports libstratego-lib libstrc

strategies

  needed-defs-test = 
    test-suite(!"needed-defs-test",
      define-congruence-test
      // ; joindefs-test
    )

  define-congruence-test =
    apply-test(!"define-congruence-test"
	      ,DefineCongruence
	      ,!("If", "T", 3)
              ,open(!"data/if-congruence.trm")
              )

  joindefs-test = 
    apply-test(!"joindefs-test"
	, joindefs
	, !
[SDef("ArgOption",[VarDec("e_28",FunType([ConstType(Op("ATerm",[]))],ConstType(Op("ATerm",[])))),VarDec("f_28",FunType([ConstType(Op("ATerm",[]))],ConstType(Op("ATerm",[])))),VarDec("g_28",FunType([ConstType(Op("ATerm",[]))],ConstType(Op("ATerm",[]))))],Scope([],Seq(Match(Str("register-usage-info")),Call(SVar("register-usage"),[Call(SVar("g_28"),[])])))),
SDef("ArgOption",[VarDec("b_28",FunType([ConstType(Op("ATerm",[]))],ConstType(Op("ATerm",[])))),VarDec("c_28",FunType([ConstType(Op("ATerm",[]))],ConstType(Op("ATerm",[])))),VarDec("d_28",FunType([ConstType(Op("ATerm",[]))],ConstType(Op("ATerm",[]))))],Scope(["t_5","u_5","v_5"],Seq(Match(Op("Cons",[Var("v_5"),Op("Cons",[Var("t_5"),Var("u_5")])])),Seq(Seq(Build(Var("v_5")),Call(SVar("b_28"),[])),Seq(Scope(["u_78"],Seq(Where(Seq(Build(Var("t_5")),Seq(Call(SVar("c_28"),[]),Seq(Match(Var("u_78")),Id)))),Build(Op("Cons",[Var("u_78"),Var("u_5")])))),Id)))))]
	, !()
	)
