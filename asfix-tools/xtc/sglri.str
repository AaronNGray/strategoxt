module sglri
imports
  libstratego-sglr
  libxtclib
  sglri-options
  implode-asfix

strategies

  main-sglri =
    init-sglr-options
    ; xtc-io-wrap(sglri-options,
        if output(parse-and-implode) then
          <xtc-exit> 0
        else
          <xtc-exit> 1
        end
      )

  sglri-options =
      sglr-parse-table-option
    + sglr-start-symbol-option
    + Option(fail, fail, !"")

    + sglr-filter-option
    + Option(fail, fail, !"")

    + custom-sglr-option
    + Option(fail, fail, !"")

    + implode-asfix-options
    + Option(fail, fail, !"")

strategies

  /**
   * @type FILE -> AST
   */
  parse-and-implode =
    let try-get-parse-table =
          <get-config> ParseTable() <+ fatal-err(|"No parse table specified")

     in xtc-sglr-strict(|<try-get-parse-table> (),
          <concat> [
              ["-2"]
            , <pass-sglr-start-symbol> ()
            , <pass-custom-sglr-options> ()
            , <pass-sglr-verbose> ()
            ])
    end
    ; read-from
    ; implode-asfix-using-config

strategies

  xtc-sglr-strict(|tbl, args) =
    ?input
    ; xtc-transform-always(id, report-sglri-error-summary(|input)
      | "sglr", ["-p", tbl | args ])

  xtc-transform-always(c, f| tool, args) =
    ?FILE(f)
    ; where(<xtc-new-file> f => g)
    ; <conc> (args, ["-i", f, "-o", g])
    ; if xtc-command-silent(|tool) then <c> FILE(g) else <f> FILE(g) end

  xtc-transform-always(c, f | tool, args) =
    ?stdin()
    ; where(xtc-new-file => g)
    ; <conc> (args, ["-o", g])
    ; if xtc-command-silent(|tool) then <c> FILE(g) else <f> FILE(g) end

  xtc-command-silent(|tool) =
    where(<xtc-find-warning> tool => loc)
    ; log(|Debug(),<concat-strings>["Invoking tool ", tool," at location ",loc," with arguments: "],<id>)
    ; where(<call(|None(), None(), Some(<open> "/dev/null"))> (loc, <id>))

  /**
   * Reports an sglri error summary to the stderr.
   * Always fails.   
   *
   * @type  summary -> _
   */
  report-sglri-error-summary(|input) =
    finally(
      read-from
      ; ?summary
      ; <report-error-summary(|summary)> input
    , fail
    )
