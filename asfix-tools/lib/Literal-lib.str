/**
 * This library module contains some auxiliary strategies
 * for manipulating Literals.
 *
 *	de-quote : QLiteral -> String
 *	  Removes outer quotes from a Literal.
 *
 *	de-escape : String -> String
 *	  Undoes escaping of double quotes and backslashes.
 *
 *	quote : String -> QLiteral
 *	  Places double quotes around a String
 *
 *	escape : String -> String
 *	  Escapes all double quotes and backslashes in a String.
 *
 *	isUQLiteral : String -> String
 *	  Tests whether a given string is an UQLiteral.
 *
 *        uq2q : String -> String
 *          Tests whether a given string has quotes. Adds
 *	  quotes if they are not present.
 *
 * @author  Joost Visser (Joost.Visser@cwi.nl)
 */
module Literal-lib
imports Char-lib

strategies
    
  de-quote
    = explode-string
    ; test(Hd;?34)       (* first char is double-quote *)
    ; Tl
    ; at-last(?[34];![]) (* last char is double-quote *)
    ; implode-string
    
  de-escape 
    = explode-string
    ; De-Escape
    ; implode-string
  
rules

  De-Escape = 
    De-Escape1 <+ De-Escape2 <+ De-Escape3 <+ De-Escape4
    
  De-Escape1:    [92,34 | xs]    -> [34 | <De-Escape>xs]
  De-Escape2:    [92,92 | xs]    -> [92 | <De-Escape>xs]
  De-Escape3:    [x | xs]        -> [x  | <De-Escape>xs]
  De-Escape4:    []              -> []
  
strategies
        
  quote
    = explode-string
    ; Quote
    ; implode-string
    
rules

  Quote:
    chars       -> <concat>[[34],chars,[34]]


strategies

  is-UQLiteral
    = test( explode-string
          ; [isLower | map(isAlphaNumHyphen)]
          ; at-last([isAlphaNum])
          )

  uq2q
    = explode-string
    ; test(not(Hd;?34))         (* first char is NOT double-quote *)
    ; test(not(at-last(?[34]))) (* last char is NOT double-quote *)
    ; Quote
    ; implode-string

