Specification([Imports(["Char-lib"]),Strategies([SDef("de-quote",[],Seq(Call(SVar("explode-string"),[]),Seq(Test(Seq(Call(SVar("Hd"),[]),Match(Int(34)))),Seq(Call(SVar("Tl"),[]),Seq(Call(SVar("at-last"),[Seq(Match(Op("Cons",[Int(34),Op("Nil",[])])),Build(Op("Nil",[])))]),Call(SVar("implode-string"),[])))))),SDef("de-escape",[],Seq(Call(SVar("explode-string"),[]),Seq(Call(SVar("De-Escape"),[]),Call(SVar("implode-string"),[]))))]),Rules([SDef("De-Escape",[],LChoice(Call(SVar("De-Escape1"),[]),LChoice(Call(SVar("De-Escape2"),[]),LChoice(Call(SVar("De-Escape3"),[]),Call(SVar("De-Escape4"),[]))))),RDef("De-Escape1",[],Rule(Op("Cons",[Int(92),Op("Cons",[Int(34),Var("xs")])]),Op("Cons",[Int(34),App(Call(SVar("De-Escape"),[]),Var("xs"))]),Id)),RDef("De-Escape2",[],Rule(Op("Cons",[Int(92),Op("Cons",[Int(92),Var("xs")])]),Op("Cons",[Int(92),App(Call(SVar("De-Escape"),[]),Var("xs"))]),Id)),RDef("De-Escape3",[],Rule(Op("Cons",[Var("x"),Var("xs")]),Op("Cons",[Var("x"),App(Call(SVar("De-Escape"),[]),Var("xs"))]),Id)),RDef("De-Escape4",[],Rule(Op("Nil",[]),Op("Nil",[]),Id))]),Strategies([SDef("quote",[],Seq(Call(SVar("explode-string"),[]),Seq(Call(SVar("Quote"),[]),Call(SVar("implode-string"),[]))))]),Rules([RDef("Quote",[],Rule(Var("chars"),App(Call(SVar("concat"),[]),Op("Cons",[Op("Cons",[Int(34),Op("Nil",[])]),Op("Cons",[Var("chars"),Op("Cons",[Op("Cons",[Int(34),Op("Nil",[])]),Op("Nil",[])])])])),Id))]),Strategies([SDef("is-UQLiteral",[],Test(Seq(Call(SVar("explode-string"),[]),Seq(Call(SVar("Cons"),[Call(SVar("isLower"),[]),Call(SVar("map"),[Call(SVar("isAlphaNumHyphen"),[])])]),Call(SVar("at-last"),[Call(SVar("Cons"),[Call(SVar("isAlphaNum"),[]),Call(SVar("Nil"),[])])]))))),SDef("uq2q",[],Seq(Call(SVar("explode-string"),[]),Seq(Test(Not(Seq(Call(SVar("Hd"),[]),Match(Int(34))))),Seq(Test(Not(Call(SVar("at-last"),[Match(Op("Cons",[Int(34),Op("Nil",[])]))]))),Seq(Call(SVar("Quote"),[]),Call(SVar("implode-string"),[]))))))])])
