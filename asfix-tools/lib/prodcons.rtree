Specification([Imports(["Sdf2","verbalize-sdf","Literal-lib","Char-lib","asfix-extra"]),Signature([Constructors([OpDecl("Injections",ConstType(Sort("Option",[]))),OpDecl("term",FunType([ConstType(Sort("ATerm",[]))],ConstType(Sort("Attribute",[]))))])]),Rules([RDef("prodcons",[],Rule(Var("p"),App(Call(SVar("at-cons"),[BA(Call(SVar("uq2q"),[]),Var("c"))]),Var("p")),AM(BA(Call(SVar("get-constr"),[]),Var("p")),Var("c")))),RDef("prodcons",[],Rule(Var("p"),App(Call(SVar("add-attributes"),[]),Op("",[Var("p"),Op("Cons",[Op("term",[Op("cons",[App(Call(SVar("mk-constr"),[]),Var("p"))])]),Op("Nil",[])])])),BA(Not(Choice(Call(SVar("get-constr"),[]),Choice(Call(SVar("is-bracket"),[]),Choice(Call(SVar("is-reject"),[]),Call(SVar("is-injection"),[]))))),Var("p")))),RDef("mk-constr",[],Rule(Op("prod",[Op("Nil",[]),Var("sym"),Wld]),Var("c"),AM(BA(Seq(Call(SVar("conc"),[]),Call(SVar("strs2constr"),[])),Op("",[App(Call(SVar("syms2strs"),[]),Op("Cons",[Var("sym"),Op("Nil",[])])),Op("Cons",[Str("empty"),Op("Nil",[])])])),Var("c")))),RDef("mk-constr",[],Rule(Op("prod",[Var("syms"),Var("sym"),Wld]),Var("c"),LChoice(AM(BA(Seq(Call(SVar("lits2strs"),[]),Call(SVar("strs2constr"),[])),Var("syms")),Var("c")),LChoice(AM(BA(Seq(Call(SVar("conc"),[]),Call(SVar("strs2constr"),[])),Op("",[App(Call(SVar("syms2strs"),[]),Op("Cons",[Var("sym"),Op("Nil",[])])),App(Seq(Call(SVar("lits2strs"),[]),Call(SVar("empty-test"),[])),Var("syms"))])),Var("c")),LChoice(AM(BA(Seq(Call(SVar("syms2strs"),[]),Call(SVar("strs2constr"),[])),Var("syms")),Var("c")),AM(BA(Seq(Call(SVar("conc"),[]),Call(SVar("strs2constr"),[])),Op("",[App(Call(SVar("syms2strs"),[]),Op("Cons",[Var("sym"),Op("Nil",[])])),Op("Cons",[Str("dunno"),Op("Cons",[App(Call(SVar("new"),[]),Op("",[])),Op("Nil",[])])])])),Var("c"))))))),RDef("mk-constr",[],Rule(Op("prod-fun",[Var("c"),Wld,Wld,Wld]),App(Call(SVar("normalize-constr"),[]),Var("c")),Id)),RDef("mk-constr'",[],Rule(Op("prod",[Var("syms"),Var("sym"),Wld]),Var("c"),AM(BA(Seq(Call(SVar("conc"),[]),Call(SVar("strs2constr"),[])),Op("",[App(Call(SVar("syms2strs"),[]),Op("Cons",[Var("sym"),Op("Nil",[])])),Op("Cons",[Str("dunno"),Op("Cons",[App(Call(SVar("new"),[]),Op("",[])),Op("Nil",[])])])])),Var("c"))))]),Strategies([SDef("empty-test",[],Test(Seq(Call(SVar("filter"),[Not(Call(SVar("empty-string"),[]))]),Call(SVar("Hd"),[])))),SDef("strs2constr",[],Seq(Call(SVar("filter"),[Not(Call(SVar("empty-string"),[]))]),Seq(Call(SVar("Cons"),[Test(Seq(Call(SVar("string-Hd"),[]),Call(SVar("isAlpha"),[]))),Id]),Seq(Call(SVar("separate-by"),[Build(Str("-"))]),Seq(Call(SVar("concat-strings"),[]),Seq(Match(Var("s")),Seq(BA(Not(Call(SVar("is-subterm"),[])),Op("",[Var("s"),Op("Cons",[Str("START"),Op("Cons",[Str("LCons"),Op("Cons",[Str("SCons"),Op("Cons",[Str("some"),Op("Cons",[Str("all"),Op("Cons",[Str("id"),Op("Cons",[Str("Cons"),Op("Cons",[Str("Nil"),Op("Cons",[Str("TCons"),Op("Cons",[Str("TNil"),Op("Cons",[Str("NL"),Op("Cons",[Str("L"),Op("Cons",[Str("Bracket"),Op("Nil",[])])])])])])])])])])])])])])])),Seq(Build(Var("s")),Seq(Call(SVar("escape"),[]),Call(SVar("quote"),[])))))))))),SDef("string-Hd",[],Seq(Call(SVar("explode-string"),[]),Call(SVar("Hd"),[]))),SDef("normalize-constr",[],Call(SVar("try"),[Seq(Test(Not(Call(SVar("de-quote"),[]))),Call(SVar("quote"),[]))])),SDef("empty-string",[],Match(Str(""))),SDef("at-cons",[DefaultVarDec("s")],Call(SVar("oncetd"),[Call(SVar("cons"),[Call(SVar("s"),[])])]))]),Strategies([SDef("is-injection",[],Seq(Call(SVar("prod"),[Call(SVar("Cons"),[Call(SVar("syntaxless-sort"),[]),Call(SVar("Nil"),[])]),Id,Id]),Where(Choice(Call(SVar("has-option"),[Build(Var("Injections"))]),BA(Call(SVar("get-config"),[]),Str("--injections")))))),SDef("syntaxless-sort",[],Rec("x",Choice(Call(SVar("sort"),[Id]),Choice(Call(SVar("alt"),[Call(SVar("x"),[]),Call(SVar("x"),[])]),Choice(Call(SVar("opt"),[Call(SVar("x"),[])]),Choice(Call(SVar("iter"),[Call(SVar("x"),[])]),Choice(Call(SVar("iter-star"),[Call(SVar("x"),[])]),Choice(Call(SVar("iter-sep"),[Call(SVar("x"),[]),Id]),Call(SVar("iter-star-sep"),[Call(SVar("x"),[]),Id])))))))))]),Rules([RDef("get-constr",[],Rule(Op("prod",[Var("syms"),Var("sym"),Var("as")]),Var("c"),BA(Call(SVar("oncetd"),[Match(Op("cons",[Var("c")]))]),Var("as")))),RDef("get-constr",[],Rule(Op("prod-fun",[Var("f"),Var("syms"),Var("sym"),Var("as")]),Var("c"),BA(Call(SVar("oncetd"),[Match(Op("cons",[Var("c")]))]),Var("as")))),RDef("get-mod",[],Rule(Op("prod",[Var("syms"),Var("sym"),Var("as")]),Var("c"),BA(Call(SVar("oncetd"),[Match(Op("id",[Var("c")]))]),Var("as")))),RDef("get-mod",[],Rule(Op("prod-fun",[Var("f"),Var("syms"),Var("sym"),Var("as")]),Var("c"),BA(Call(SVar("oncetd"),[Match(Op("id",[Var("c")]))]),Var("as")))),RDef("is-bracket",[],Rule(Op("prod",[Var("syms"),Var("sym"),Var("as")]),Op("",[]),BA(Call(SVar("oncetd"),[Match(Op("bracket",[]))]),Var("as")))),RDef("is-bracket",[],Rule(Op("prod-fun",[Var("f"),Var("syms"),Var("sym"),Var("as")]),Op("",[]),BA(Call(SVar("oncetd"),[Match(Op("bracket",[]))]),Var("as")))),RDef("is-reject",[],Rule(Op("prod",[Var("syms"),Var("sym"),Var("as")]),Op("",[]),BA(Call(SVar("oncetd"),[Match(Op("reject",[]))]),Var("as")))),RDef("is-reject",[],Rule(Op("prod-fun",[Var("f"),Var("syms"),Var("sym"),Var("as")]),Op("",[]),BA(Call(SVar("oncetd"),[Match(Op("reject",[]))]),Var("as")))),RDef("add-attributes",[],Rule(Op("",[Op("prod",[Var("syms"),Var("sym"),Op("no-attrs",[])]),Var("as")]),Op("prod",[Var("syms"),Var("sym"),Op("attrs",[Var("as")])]),Id)),RDef("add-attributes",[],Rule(Op("",[Op("prod",[Var("syms"),Var("sym"),Op("attrs",[Var("as'")])]),Var("as")]),Op("prod",[Var("syms"),Var("sym"),Op("attrs",[App(Call(SVar("conc"),[]),Op("",[Var("as'"),Var("as")]))])]),Id)),RDef("add-attributes",[],Rule(Op("",[Op("prod-fun",[Var("fun"),Var("syms"),Var("sym"),Op("no-attrs",[])]),Var("as")]),Op("prod-fun",[Var("fun"),Var("syms"),Var("sym"),Op("attrs",[Var("as")])]),Id)),RDef("add-attributes",[],Rule(Op("",[Op("prod-fun",[Var("fun"),Var("syms"),Var("sym"),Op("attrs",[Var("as'")])]),Var("as")]),Op("prod-fun",[Var("fun"),Var("syms"),Var("sym"),Op("attrs",[App(Call(SVar("conc"),[]),Op("",[Var("as'"),Var("as")]))])]),Id))])])
