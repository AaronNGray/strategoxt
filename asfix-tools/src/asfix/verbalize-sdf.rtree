Specification([Imports(["Sdf-Syntax","Sdf-NormLit-Syntax","lib","Char-lib","Literal-lib"]),Strategies([SDef("syms2strs",[],Seq(Call(SVar("filter"),[Call(SVar("sym2strs"),[])]),Call(SVar("concat"),[]))),SDef("sym2strs",[],Seq(Call(SVar("Sym2Strs"),[]),Call(SVar("map"),[LChoice(Call(SVar("toAlphaNum"),[]),Id)]))),SDef("sym2str",[],Seq(Call(SVar("sym2strs"),[]),Call(SVar("concat-strings"),[]))),SDef("sym2str'",[],Seq(Call(SVar("Sym2Strs'"),[]),Seq(Call(SVar("map"),[LChoice(Call(SVar("toAlphaNum"),[]),Id)]),Seq(Call(SVar("concat-strings"),[]),Not(Match(Str(""))))))),SDef("lits2strs",[],Call(SVar("filter"),[Call(SVar("lit2str"),[])])),SDef("lit2str",[],Seq(Call(SVar("list-ana"),[Call(SVar("Lit2Str"),[])]),Seq(Call(SVar("separate-by"),[Build(Str("-"))]),Seq(Call(SVar("concat-strings"),[]),LChoice(Call(SVar("toAlphaNum"),[]),Id))))),SDef("Lit2Str",[],LRule(Rule(Op("lit",[Var("str")]),App(Call(SVar("try"),[Seq(Call(SVar("de-quote"),[]),Call(SVar("de-escape"),[]))]),Var("str")),Id)))]),Strategies([SDef("Sym2Strs",[],Rec("x",Choice(LRule(Rule(Op("cf",[Var("sym")]),App(Call(SVar("x"),[]),Var("sym")),Id)),Choice(LRule(Rule(Op("lex",[Var("sym")]),App(Call(SVar("x"),[]),Var("sym")),Id)),Choice(LRule(Rule(Op("empty",[]),Op("Cons",[Str("unit"),Op("Nil",[])]),Id)),Choice(LRule(Rule(Op("seq",[Var("s"),Var("ss")]),App(Seq(Call(SVar("filter"),[Call(SVar("x"),[])]),Call(SVar("concat"),[])),Op("Cons",[Var("s"),Var("ss")])),Id)),Choice(LRule(Rule(Op("opt",[Var("sym")]),App(Seq(Call(SVar("x"),[]),Call(SVar("at-end"),[Build(Op("Cons",[Str("opt"),Op("Nil",[])]))])),Var("sym")),Id)),Choice(LRule(Rule(Op("iter",[Var("sym")]),App(Seq(Call(SVar("x"),[]),Call(SVar("at-end"),[Build(Op("Cons",[Str("p"),Op("Nil",[])]))])),Var("sym")),Id)),Choice(LRule(Rule(Op("iter-star",[Var("sym")]),App(Seq(Call(SVar("x"),[]),Call(SVar("at-end"),[Build(Op("Cons",[Str("s"),Op("Nil",[])]))])),Var("sym")),Id)),Choice(LRule(Rule(Op("iter-sep",[Var("sym"),Var("sep")]),App(Call(SVar("concat"),[]),Op("Cons",[App(Call(SVar("x"),[]),Var("sym")),Op("Cons",[App(Call(SVar("x"),[]),Var("sep")),Op("Cons",[Op("Cons",[Str("p"),Op("Nil",[])]),Op("Nil",[])])])])),Id)),Choice(LRule(Rule(Op("iter-star-sep",[Var("sym"),Var("sep")]),App(Call(SVar("concat"),[]),Op("Cons",[App(Call(SVar("x"),[]),Var("sym")),Op("Cons",[App(Call(SVar("x"),[]),Var("sep")),Op("Cons",[Op("Cons",[Str("s"),Op("Nil",[])]),Op("Nil",[])])])])),Id)),Choice(LRule(Rule(Op("iter-n",[Var("sym"),Wld]),App(Call(SVar("concat"),[]),Op("Cons",[App(Call(SVar("x"),[]),Var("sym")),Op("Cons",[Op("Cons",[Str("n"),Op("Nil",[])]),Op("Nil",[])])])),Id)),Choice(LRule(Rule(Op("iter-sep-n",[Var("sym"),Var("sep"),Wld]),App(Call(SVar("concat"),[]),Op("Cons",[App(Call(SVar("x"),[]),Var("sym")),Op("Cons",[App(Call(SVar("x"),[]),Var("sep")),Op("Cons",[Op("Cons",[Str("n"),Op("Nil",[])]),Op("Nil",[])])])])),Id)),Choice(LRule(Rule(Op("set",[Var("sym")]),App(Call(SVar("concat"),[]),Op("Cons",[Op("Cons",[Str("Setof"),Op("Nil",[])]),Op("Cons",[App(Call(SVar("x"),[]),Var("sym")),Op("Nil",[])])])),Id)),Choice(LRule(Rule(Op("pair",[Var("s1"),Var("s2")]),App(Call(SVar("concat"),[]),Op("Cons",[App(Call(SVar("x"),[]),Var("s1")),Op("Cons",[Op("Cons",[Str("and"),Op("Nil",[])]),Op("Cons",[App(Call(SVar("x"),[]),Var("s2")),Op("Nil",[])])])])),Id)),Choice(LRule(Rule(Op("func",[Var("ss"),Var("s")]),App(Call(SVar("concat"),[]),Op("Cons",[App(Seq(Call(SVar("filter"),[Call(SVar("x"),[])]),Call(SVar("concat"),[])),Var("ss")),Op("Cons",[Op("Cons",[Str("to"),Op("Nil",[])]),Op("Cons",[App(Call(SVar("x"),[]),Var("s")),Op("Nil",[])])])])),Id)),Choice(LRule(Rule(Op("alt",[Var("s1"),Var("s2")]),App(Call(SVar("concat"),[]),Op("Cons",[App(Call(SVar("x"),[]),Var("s1")),Op("Cons",[Op("Cons",[Str("or"),Op("Nil",[])]),Op("Cons",[App(Call(SVar("x"),[]),Var("s2")),Op("Nil",[])])])])),Id)),Choice(LRule(Rule(Op("perm",[Var("ss")]),Op("Cons",[Str("Permof"),App(Seq(Call(SVar("filter"),[Call(SVar("x"),[])]),Call(SVar("concat"),[])),Var("ss"))]),Id)),Choice(LRule(Rule(Op("sort",[Var("str")]),Op("Cons",[Var("str"),Op("Nil",[])]),Id)),Choice(LRule(Rule(Op("lit",[Var("str")]),Op("Cons",[App(Call(SVar("try"),[Seq(Call(SVar("de-quote"),[]),Call(SVar("de-escape"),[]))]),Var("str")),Op("Nil",[])]),Id)),Choice(LRule(Rule(Op("label",[Var("str"),Wld]),Op("Cons",[App(Call(SVar("try"),[Seq(Call(SVar("de-quote"),[]),Call(SVar("de-escape"),[]))]),Var("str")),Op("Nil",[])]),Id)),LRule(Rule(Var("layout"),Op("Cons",[Str("LAYOUT"),Op("Nil",[])]),Id))))))))))))))))))))))),SDef("Sym2Strs'",[],Rec("x",Choice(LRule(Rule(Op("cf",[Var("sym")]),App(Call(SVar("x"),[]),Var("sym")),Id)),Choice(LRule(Rule(Op("lex",[Var("sym")]),App(Call(SVar("x"),[]),Var("sym")),Id)),Choice(LRule(Rule(Op("empty",[]),Op("Cons",[Str("unit"),Op("Nil",[])]),Id)),Choice(LRule(Rule(Op("seq",[Var("s"),Var("ss")]),App(Seq(Call(SVar("filter"),[Call(SVar("x"),[])]),Call(SVar("concat"),[])),Op("Cons",[Var("s"),Var("ss")])),Id)),Choice(LRule(Rule(Op("opt",[Var("sym")]),App(Seq(Call(SVar("x"),[]),Call(SVar("at-end"),[Build(Op("Cons",[Str("opt"),Op("Nil",[])]))])),Var("sym")),Id)),Choice(LRule(Rule(Op("iter",[Var("sym")]),App(Seq(Call(SVar("x"),[]),Call(SVar("at-end"),[Build(Op("Cons",[Str("p"),Op("Nil",[])]))])),Var("sym")),Id)),Choice(LRule(Rule(Op("iter-star",[Var("sym")]),App(Seq(Call(SVar("x"),[]),Call(SVar("at-end"),[Build(Op("Cons",[Str("s"),Op("Nil",[])]))])),Var("sym")),Id)),Choice(LRule(Rule(Op("iter-sep",[Var("sym"),Var("sep")]),App(Call(SVar("concat"),[]),Op("Cons",[App(Call(SVar("x"),[]),Var("sym")),Op("Cons",[App(Call(SVar("x"),[]),Var("sep")),Op("Cons",[Op("Cons",[Str("p"),Op("Nil",[])]),Op("Nil",[])])])])),Id)),Choice(LRule(Rule(Op("iter-star-sep",[Var("sym"),Var("sep")]),App(Call(SVar("concat"),[]),Op("Cons",[App(Call(SVar("x"),[]),Var("sym")),Op("Cons",[App(Call(SVar("x"),[]),Var("sep")),Op("Cons",[Op("Cons",[Str("s"),Op("Nil",[])]),Op("Nil",[])])])])),Id)),Choice(LRule(Rule(Op("iter-n",[Var("sym"),Wld]),App(Call(SVar("concat"),[]),Op("Cons",[App(Call(SVar("x"),[]),Var("sym")),Op("Cons",[Op("Cons",[Str("n"),Op("Nil",[])]),Op("Nil",[])])])),Id)),Choice(LRule(Rule(Op("iter-sep-n",[Var("sym"),Var("sep"),Wld]),App(Call(SVar("concat"),[]),Op("Cons",[App(Call(SVar("x"),[]),Var("sym")),Op("Cons",[App(Call(SVar("x"),[]),Var("sep")),Op("Cons",[Op("Cons",[Str("n"),Op("Nil",[])]),Op("Nil",[])])])])),Id)),Choice(LRule(Rule(Op("set",[Var("sym")]),App(Call(SVar("concat"),[]),Op("Cons",[Op("Cons",[Str("Setof"),Op("Nil",[])]),Op("Cons",[App(Call(SVar("x"),[]),Var("sym")),Op("Nil",[])])])),Id)),Choice(LRule(Rule(Op("pair",[Var("s1"),Var("s2")]),App(Call(SVar("concat"),[]),Op("Cons",[App(Call(SVar("x"),[]),Var("s1")),Op("Cons",[Op("Cons",[Str("and"),Op("Nil",[])]),Op("Cons",[App(Call(SVar("x"),[]),Var("s2")),Op("Nil",[])])])])),Id)),Choice(LRule(Rule(Op("func",[Var("ss"),Var("s")]),App(Call(SVar("concat"),[]),Op("Cons",[App(Seq(Call(SVar("filter"),[Call(SVar("x"),[])]),Call(SVar("concat"),[])),Var("ss")),Op("Cons",[Op("Cons",[Str("to"),Op("Nil",[])]),Op("Cons",[App(Call(SVar("x"),[]),Var("s")),Op("Nil",[])])])])),Id)),Choice(LRule(Rule(Op("alt",[Var("s1"),Var("s2")]),App(Call(SVar("concat"),[]),Op("Cons",[App(Call(SVar("x"),[]),Var("s1")),Op("Cons",[Op("Cons",[Str("or"),Op("Nil",[])]),Op("Cons",[App(Call(SVar("x"),[]),Var("s2")),Op("Nil",[])])])])),Id)),Choice(LRule(Rule(Op("perm",[Var("ss")]),Op("Cons",[Str("Permof"),App(Seq(Call(SVar("filter"),[Call(SVar("x"),[])]),Call(SVar("concat"),[])),Var("ss"))]),Id)),Choice(LRule(Rule(Op("sort",[Var("str")]),Op("Cons",[Var("str"),Op("Nil",[])]),Id)),Choice(LRule(Rule(Op("lit",[Wld]),Op("Nil",[]),Id)),LRule(Rule(Op("label",[Wld,Var("sym")]),App(Call(SVar("x"),[]),Var("sym")),Id)))))))))))))))))))))),SDef("PpSym",[],Rec("x",Choice(LRule(Rule(Op("cf",[Var("sym")]),App(Call(SVar("concat"),[]),Op("Cons",[Op("Cons",[Str("<"),Op("Nil",[])]),Op("Cons",[App(Call(SVar("x"),[]),Var("sym")),Op("Cons",[Op("Cons",[Str("-CF>"),Op("Nil",[])]),Op("Nil",[])])])])),Id)),Choice(LRule(Rule(Op("lex",[Var("sym")]),App(Call(SVar("concat"),[]),Op("Cons",[Op("Cons",[Str("<"),Op("Nil",[])]),Op("Cons",[App(Call(SVar("x"),[]),Var("sym")),Op("Cons",[Op("Cons",[Str("-LEX>"),Op("Nil",[])]),Op("Nil",[])])])])),Id)),Choice(LRule(Rule(Op("empty",[]),Op("Cons",[Str("()"),Op("Nil",[])]),Id)),Choice(LRule(Rule(Op("seq",[Var("s"),Var("ss")]),App(Call(SVar("concat"),[]),Op("Cons",[Op("Cons",[Str("("),Op("Nil",[])]),Op("Cons",[App(Call(SVar("map"),[Call(SVar("x"),[])]),Op("Cons",[Var("s"),Var("ss")])),Op("Cons",[Op("Cons",[Str(")"),Op("Nil",[])]),Op("Nil",[])])])])),Id)),Choice(LRule(Rule(Op("opt",[Var("sym")]),App(Seq(Call(SVar("x"),[]),Call(SVar("at-end"),[Build(Op("Cons",[Str("opt"),Op("Nil",[])]))])),Var("sym")),Id)),Choice(LRule(Rule(Op("iter",[Var("sym")]),App(Seq(Call(SVar("x"),[]),Call(SVar("at-end"),[Build(Op("Cons",[Str("+"),Op("Nil",[])]))])),Var("sym")),Id)),Choice(LRule(Rule(Op("iter-star",[Var("sym")]),App(Seq(Call(SVar("x"),[]),Call(SVar("at-end"),[Build(Op("Cons",[Str("*"),Op("Nil",[])]))])),Var("sym")),Id)),Choice(LRule(Rule(Op("iter-sep",[Var("sym"),Var("sep")]),App(Call(SVar("concat"),[]),Op("Cons",[Op("Cons",[Str("{"),Op("Nil",[])]),Op("Cons",[App(Call(SVar("x"),[]),Var("sym")),Op("Cons",[App(Call(SVar("x"),[]),Var("sep")),Op("Cons",[Op("Cons",[Str("}+"),Op("Nil",[])]),Op("Nil",[])])])])])),Id)),Choice(LRule(Rule(Op("iter-star-sep",[Var("sym"),Var("sep")]),App(Call(SVar("concat"),[]),Op("Cons",[Op("Cons",[Str("{"),Op("Nil",[])]),Op("Cons",[App(Call(SVar("x"),[]),Var("sym")),Op("Cons",[App(Call(SVar("x"),[]),Var("sep")),Op("Cons",[Op("Cons",[Str("}*"),Op("Nil",[])]),Op("Nil",[])])])])])),Id)),Choice(LRule(Rule(Op("iter-n",[Var("sym"),Wld]),App(Call(SVar("concat"),[]),Op("Cons",[App(Call(SVar("x"),[]),Var("sym")),Op("Cons",[Op("Cons",[Str("n"),Op("Nil",[])]),Op("Nil",[])])])),Id)),Choice(LRule(Rule(Op("iter-sep-n",[Var("sym"),Var("sep"),Wld]),App(Call(SVar("concat"),[]),Op("Cons",[App(Call(SVar("x"),[]),Var("sym")),Op("Cons",[App(Call(SVar("x"),[]),Var("sep")),Op("Cons",[Op("Cons",[Str("n"),Op("Nil",[])]),Op("Nil",[])])])])),Id)),Choice(LRule(Rule(Op("set",[Var("sym")]),App(Call(SVar("concat"),[]),Op("Cons",[Op("Cons",[Str("Setof"),Op("Nil",[])]),Op("Cons",[App(Call(SVar("x"),[]),Var("sym")),Op("Nil",[])])])),Id)),Choice(LRule(Rule(Op("pair",[Var("s1"),Var("s2")]),App(Call(SVar("concat"),[]),Op("Cons",[App(Call(SVar("x"),[]),Var("s1")),Op("Cons",[Op("Cons",[Str("and"),Op("Nil",[])]),Op("Cons",[App(Call(SVar("x"),[]),Var("s2")),Op("Nil",[])])])])),Id)),Choice(LRule(Rule(Op("func",[Var("ss"),Var("s")]),App(Call(SVar("concat"),[]),Op("Cons",[App(Seq(Call(SVar("filter"),[Call(SVar("x"),[])]),Call(SVar("concat"),[])),Var("ss")),Op("Cons",[Op("Cons",[Str("to"),Op("Nil",[])]),Op("Cons",[App(Call(SVar("x"),[]),Var("s")),Op("Nil",[])])])])),Id)),Choice(LRule(Rule(Op("alt",[Var("s1"),Var("s2")]),App(Call(SVar("concat"),[]),Op("Cons",[App(Call(SVar("x"),[]),Var("s1")),Op("Cons",[Op("Cons",[Str("|"),Op("Nil",[])]),Op("Cons",[App(Call(SVar("x"),[]),Var("s2")),Op("Nil",[])])])])),Id)),Choice(LRule(Rule(Op("perm",[Var("ss")]),Op("Cons",[Str("Permof"),App(Seq(Call(SVar("filter"),[Call(SVar("x"),[])]),Call(SVar("concat"),[])),Var("ss"))]),Id)),Choice(LRule(Rule(Op("sort",[Var("str")]),Op("Cons",[Var("str"),Op("Nil",[])]),Id)),Choice(LRule(Rule(Op("lit",[Var("str")]),Op("Cons",[App(Call(SVar("try"),[Seq(Call(SVar("de-quote"),[]),Call(SVar("de-escape"),[]))]),Var("str")),Op("Nil",[])]),Id)),LChoice(LRule(Rule(Op("label",[Var("str"),Wld]),Op("Cons",[App(Call(SVar("try"),[Seq(Call(SVar("de-quote"),[]),Call(SVar("de-escape"),[]))]),Var("str")),Op("Nil",[])]),Id)),LRule(Rule(Var("layout"),Op("Cons",[Str("LAYOUT"),Op("Nil",[])]),Id)))))))))))))))))))))))]),Rules([RDef("toAlphaNum",[],Rule(Str(","),Str("comma"),Id)),RDef("toAlphaNum",[],Rule(Str(":"),Str("colon"),Id)),RDef("toAlphaNum",[],Rule(Str(";"),Str("semicolon"),Id)),RDef("toAlphaNum",[],Rule(Str("+"),Str("plus"),Id)),RDef("toAlphaNum",[],Rule(Str("++"),Str("incr"),Id)),RDef("toAlphaNum",[],Rule(Str("-"),Str("minus"),Id)),RDef("toAlphaNum",[],Rule(Str("--"),Str("decr"),Id)),RDef("toAlphaNum",[],Rule(Str("*"),Str("times"),Id)),RDef("toAlphaNum",[],Rule(Str("/"),Str("div"),Id)),RDef("toAlphaNum",[],Rule(Str("&"),Str("address"),Id)),RDef("toAlphaNum",[],Rule(Str("&&"),Str("and"),Id)),RDef("toAlphaNum",[],Rule(Str("!"),Str("not"),Id)),RDef("toAlphaNum",[],Rule(Str("-"),Str("minus"),Id)),RDef("toAlphaNum",[],Rule(Str("~"),Str("tilde"),Id)),RDef("toAlphaNum",[],Rule(Str("%"),Str("mod"),Id)),RDef("toAlphaNum",[],Rule(Str("<<"),Str("shift-left"),Id)),RDef("toAlphaNum",[],Rule(Str(">>"),Str("shift-right"),Id)),RDef("toAlphaNum",[],Rule(Str("!="),Str("not-equal"),Id)),RDef("toAlphaNum",[],Rule(Str("<"),Str("lt"),Id)),RDef("toAlphaNum",[],Rule(Str("<="),Str("le"),Id)),RDef("toAlphaNum",[],Rule(Str(">"),Str("gt"),Id)),RDef("toAlphaNum",[],Rule(Str(">="),Str("ge"),Id)),RDef("toAlphaNum",[],Rule(Str("|"),Str("bar"),Id)),RDef("toAlphaNum",[],Rule(Str("="),Str("equal"),Id)),RDef("toAlphaNum",[],Rule(Str("=="),Str("equal"),Id)),RDef("toAlphaNum",[],Rule(Str("||"),Str("or"),Id)),RDef("toAlphaNum",[],Rule(Str(":="),Str("assign"),Id)),RDef("toAlphaNum",[],Rule(Str("->"),Str("rightarrow"),Id)),RDef("toAlphaNum",[],Rule(Str("=>"),Str("rightdoublearrow"),Id)),RDef("toAlphaNum",[],Rule(Str("*="),Str("assignMul"),Id)),RDef("toAlphaNum",[],Rule(Str("/="),Str("assignDiv"),Id)),RDef("toAlphaNum",[],Rule(Str("%="),Str("assignMod"),Id)),RDef("toAlphaNum",[],Rule(Str("+="),Str("assignPlus"),Id)),RDef("toAlphaNum",[],Rule(Str("-="),Str("assignMin"),Id)),RDef("toAlphaNum",[],Rule(Str("<<="),Str("assignSL"),Id)),RDef("toAlphaNum",[],Rule(Str(">>="),Str("assignSR"),Id)),RDef("toAlphaNum",[],Rule(Str("&="),Str("assignAnd"),Id)),RDef("toAlphaNum",[],Rule(Str("^="),Str("assignExp"),Id)),RDef("toAlphaNum",[],Rule(Str("|="),Str("assignOr"),Id)),RDef("toAlphaNum",[],Rule(Var("xs"),Str(""),BA(Seq(Call(SVar("explode-string"),[]),Not(Call(SVar("map"),[Call(SVar("isAlphaNumHyphen"),[])]))),Var("xs"))))]),Strategies([SDef("sepby",[DefaultVarDec("s")],Rec("x",LChoice(Call(SVar("Nil"),[]),LChoice(Call(SVar("Cons"),[Id,Call(SVar("Nil"),[])]),Call(SVar("Cons"),[Id,LRule(Rule(Var("tl"),Op("Cons",[App(Call(SVar("s"),[]),Var("tl")),App(Call(SVar("x"),[]),Var("tl"))]),Id))]))))),SDef("list-ana",[DefaultVarDec("s")],Rec("x",LChoice(Seq(Call(SVar("s"),[]),Call(SVar("Singleton"),[])),LChoice(Scope(["xs"],Seq(Match(Explode(Wld,Var("xs"))),Seq(Build(Var("xs")),Seq(Call(SVar("filter"),[Call(SVar("x"),[])]),Call(SVar("concat"),[]))))),Build(Var("Nil")))))),SDef("tfilter",[DefaultVarDec("s")],Rec("x",Choice(Call(SVar("TNil"),[]),LChoice(Call(SVar("TCons"),[Call(SVar("s"),[]),Call(SVar("x"),[])]),Seq(Call(SVar("tTl"),[]),Call(SVar("x"),[]))))))]),Rules([SDef("tuple2list",[],Match(Explode(Str(""),RootApp(Id)))),RDef("Singleton",[],Rule(Var("x"),Op("Cons",[Var("x"),Op("Nil",[])]),Id)),RDef("tTl",[],Rule(Explode(Str(""),Op("Cons",[Var("x"),Op("Cons",[Var("tp"),Op("Nil",[])])])),Explode(Str(""),Var("tp")),Id))])])
