module sglri
imports liblib sglri-error-reporting

strategies

  sglri =
    xtc-io-wrap(sglri-options,
      parse-and-implode
      <+ <xtc-exit> 1
    )

  sglri-options =
      ArgOption("-p",
        where(<set-config> ("-p", <id>)),
        !"-p <file.tbl>           Use parse table <file.tbl> (required)")
    + ArgOption("--start", 
        where(<set-config> ("--start", <id>)),
        !"--start <symbol>        Start parsing with <symbol>")
    + sglr-filter-options

    + Option(fail, fail, !"")

    + ArgOption("--sglr", 
        where(<extend-config> ("--sglr", [<id>])),
        !"--sglr <opt>            Pass <opt> to sglr")
    + ArgOption("--impl", 
        where(<extend-config> ("--impl", [<id>])),
        !"--impl <opt>            Pass <opt> to implode-asfix")

    + Option(fail, fail, !"")

  sglr-filter-options =
      Option("--no-heuristic-filters"
      , where(<extend-config> ("--sglr", ["-fi", "-fe"]))
      , !"--no-heuristic-filters  Don't use heuristic disambiguation filters (encouraged)"
    )

strategies

  parse-and-implode =
    let pass-start =
          !["-s", <get-config> "--start"] <+ ![]

        pass-sglr =
          <get-config> "--sglr" <+ ![]

        pass-sglr-verbose =
          ![]; if-verbose3(!["-v"])

        get-parse-table =
          <get-config> "-p" <+ <fatal-error> ["** ERROR: no parse table specified"]

     in xtc-sglr-strict(|<get-parse-table>,
          <concat> [
              ["-2"]
            , <pass-start> ()
            , <pass-sglr> ()
            , <pass-sglr-verbose> ()
            ])
    end;

    let pass-implode =
          <get-config <+ ![]> "--impl"

        pass-binary-output =
          if <get-config> "-b" then
            !["-b"]
          else
            ![]
          end

     in implode-asfix(
          <concat> [
            <pass-implode> ()
          , <pass-binary-output> ()
          , <pass-verbose> ()
          ])
    end

strategies

  implode-asfix(args) =
    xtc-transform(!"implode-asfix", args)

  xtc-sglr-strict(|tbl, args) =
    ?input
    ; xtc-transform-always(id, report-parse-error-summary(|input)
      | "sglr", ["-p", tbl | args ])

  xtc-transform-always(c, f|tool, args) =
    ?FILE(f)
    ; where(<xtc-new-file> f => g)
    ; <conc> (args, ["-i", f, "-o", g])
    ; if xtc-command-silent(|tool) then <c> FILE(g) else <f> FILE(g) end

  xtc-command-silent(|tool) =
    where(<xtc-find-warning> tool => loc)
    ; where(<call(|None(), None(), Some(<open> "/dev/null"))> (loc, <id>))
