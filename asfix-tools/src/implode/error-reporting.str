/**
 * Reporting error summaries to the user.
 */
module error-reporting
imports error-support
strategies

  /**
   * Reports an error summary to the stderr.
   *
   * @param Summary -> Summary
   * @type  a -> a
   */
  report-error-summary(|summary) =
    ?input
    ; where(
        !summary => summary(producer, _, errors)
      ; !errors
      ; map({error:
          ?error
        ; <report-specific-error(|producer, error) <+ report-error(|producer, error)> input
        })
      )
    <+ say(!"error: An error occured, but the error summary cannot be presented in a nice way. Please report this as a bug.")
       ; where(<debug(!"       Structured error summary: ")> summary)

  /**
   * @param error Error
   * @type  a -> a
   */
  report-error(|producer, error) =
    where(!error => error(err, [localized(descr, location)]))
    ; report-location(|err, descr, location)

  /**
   * @param error Location
   * @type  a -> a
   */
  report-location(|err, descr, location) =
    where(!location => area-in-file(file, area))
    ; report-area(|err, descr, file, area)

  /**
   * @param location Location
   * @type  a -> a
   */
  report-location(|err, descr, location) =
    where(!location => file(file))
    ; report-file(|err, descr, file)

/**
 * Specific cases
 */
strategies

  /**
   * If the err is a "Parse Table error", then the actual file that is
   * a problem, is the parse table. So, we lookup the parse table from
   * the -p config.
   *
   * @param error Error
   * @type  a -> a
   */
  report-specific-error(|producer, error) =
    where(!error => error("Parse Table error", [localized(descr, _)]))
    ; where(
        <fprintnl> ( <stderr-stream> (), [<get-config> "-p", ": Parse table error: ", descr])
      )

/**
 * Tools that can be used for reporting errors.
 */
strategies

  report-file(|err, descr, file) =
    where(
      <fprintnl> (<stderr-stream> (), [file, ": ", err, ": ", descr])
    )

  /**
   * Presents the 'area' in the file at stderr.
   */
  report-area(|err, descr, file, area) =
    where(
      !area => area(begin-line, begin-column, _, end-column, _, _)
    );

    let y-pos =
            <dec> begin-line
          ; if <lt> (<id>, 0) then !0 else id end

        x-pos =
            <dec> begin-column => c
          ; if <lt> (c, 0) then !0 else id end

        filename =
          if !file => "-" then
            !"stdin"
          else
            !file
          end

        print-location =
          where(
            <fprintnl> (<stderr-stream> (), [
              <filename> (), ": ",  descr, " at line "
            , <int-to-string> begin-line, ", column "
            , <int-to-string> begin-column
            ])
          )

        print-context-in-file =
          ?FILE(<read-text-file>)
          ; get-lines
          ; add-indices
          ; where(y-pos => y)
          ; if !y => 0 then
              \ [line | _] -> [line] \
            else
              at-suffix(?[(y, _) | _]; ?context)
              ; !context
            end

          /**
           * If there are 2 or more elements, drop the rest.
           */
          ; if ?[s1, s2 | _ ] then
              ![s1, s2]
            end
          ; where(map(<fprintnl> (<stderr-stream> (), [<Snd>])))

          /**
           * Indicate the position in the file
           */
          ; <conc-strings> (<copy-char> (<x-pos> (), ' '), "^")
          ; where(<fprintnl> (<stderr-stream> (), [<id>]))

     in print-location
      ; if not(?FILE(_) + stdin()) then
          <error-filename-to-file> file
        end
      ; if ?FILE(_) then
          print-context-in-file
        end
    end

  /**
   * @type String -> FILE
   */
  error-filename-to-file =
    if "-" then
      !stdin()
    else
      !FILE(<id>)
    end
